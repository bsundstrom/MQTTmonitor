
MY_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a69c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000a69c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b40  200000bc  0000a758  000180bc  2**2
                  ALLOC
  3 .stack        00002004  20000bfc  0000b298  000180bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000180bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000cc  00000000  00000000  000180e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004affc  00000000  00000000  000181b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006754  00000000  00000000  000631ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001140b  00000000  00000000  00069900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e10  00000000  00000000  0007ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010a0  00000000  00000000  0007bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020f86  00000000  00000000  0007cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b53e  00000000  00000000  0009db41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000913d6  00000000  00000000  000b907f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000030a0  00000000  00000000  0014a458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002c00 	.word	0x20002c00
       4:	00006201 	.word	0x00006201
       8:	000061fd 	.word	0x000061fd
       c:	000061fd 	.word	0x000061fd
	...
      2c:	000061fd 	.word	0x000061fd
	...
      38:	000061fd 	.word	0x000061fd
      3c:	000061fd 	.word	0x000061fd
      40:	000061fd 	.word	0x000061fd
      44:	000061fd 	.word	0x000061fd
      48:	000061fd 	.word	0x000061fd
      4c:	000044c1 	.word	0x000044c1
      50:	00003f9d 	.word	0x00003f9d
      54:	000061fd 	.word	0x000061fd
      58:	000061fd 	.word	0x000061fd
      5c:	000061fd 	.word	0x000061fd
      60:	000061fd 	.word	0x000061fd
      64:	00004959 	.word	0x00004959
      68:	00004969 	.word	0x00004969
      6c:	00004979 	.word	0x00004979
      70:	00004989 	.word	0x00004989
      74:	00004999 	.word	0x00004999
      78:	000049a9 	.word	0x000049a9
      7c:	000061cd 	.word	0x000061cd
      80:	000061dd 	.word	0x000061dd
      84:	000061ed 	.word	0x000061ed
      88:	000061fd 	.word	0x000061fd
      8c:	000061fd 	.word	0x000061fd
      90:	000061fd 	.word	0x000061fd
	...
      9c:	000061fd 	.word	0x000061fd
      a0:	00003f1d 	.word	0x00003f1d
      a4:	000061fd 	.word	0x000061fd
      a8:	000061fd 	.word	0x000061fd
      ac:	000061fd 	.word	0x000061fd

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200000bc 	.word	0x200000bc
      d0:	00000000 	.word	0x00000000
      d4:	0000a69c 	.word	0x0000a69c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000a69c 	.word	0x0000a69c
     104:	200000c0 	.word	0x200000c0
     108:	0000a69c 	.word	0x0000a69c
     10c:	00000000 	.word	0x00000000

00000110 <uart_callback>:
} mqtt_connection_state;

static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
     110:	4b05      	ldr	r3, [pc, #20]	; (128 <uart_callback+0x18>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b3f      	cmp	r3, #63	; 0x3f
     116:	dc05      	bgt.n	124 <uart_callback+0x14>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
     118:	1c59      	adds	r1, r3, #1
     11a:	4a03      	ldr	r2, [pc, #12]	; (128 <uart_callback+0x18>)
     11c:	6011      	str	r1, [r2, #0]
     11e:	2100      	movs	r1, #0
     120:	4a02      	ldr	r2, [pc, #8]	; (12c <uart_callback+0x1c>)
     122:	54d1      	strb	r1, [r2, r3]
	}
}
     124:	4770      	bx	lr
     126:	46c0      	nop			; (mov r8, r8)
     128:	20000690 	.word	0x20000690
     12c:	200006d8 	.word	0x200006d8

00000130 <extint_detection_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     130:	4b0b      	ldr	r3, [pc, #44]	; (160 <extint_detection_callback+0x30>)
     132:	6a1b      	ldr	r3, [r3, #32]
}

void extint_detection_callback(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if(pin_state)
     134:	0219      	lsls	r1, r3, #8
     136:	d506      	bpl.n	146 <extint_detection_callback+0x16>
		strcpy(glb_msg, "Open");
     138:	4b0a      	ldr	r3, [pc, #40]	; (164 <extint_detection_callback+0x34>)
     13a:	4a0b      	ldr	r2, [pc, #44]	; (168 <extint_detection_callback+0x38>)
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	7912      	ldrb	r2, [r2, #4]
     142:	711a      	strb	r2, [r3, #4]
     144:	e007      	b.n	156 <extint_detection_callback+0x26>
	else if(!pin_state)
		strcpy(glb_msg, "Closed");
     146:	4b07      	ldr	r3, [pc, #28]	; (164 <extint_detection_callback+0x34>)
     148:	4a08      	ldr	r2, [pc, #32]	; (16c <extint_detection_callback+0x3c>)
     14a:	6811      	ldr	r1, [r2, #0]
     14c:	6019      	str	r1, [r3, #0]
     14e:	8891      	ldrh	r1, [r2, #4]
     150:	8099      	strh	r1, [r3, #4]
     152:	7992      	ldrb	r2, [r2, #6]
     154:	719a      	strb	r2, [r3, #6]
	new_activity = 1;
     156:	2201      	movs	r2, #1
     158:	4b05      	ldr	r3, [pc, #20]	; (170 <extint_detection_callback+0x40>)
     15a:	701a      	strb	r2, [r3, #0]
}
     15c:	4770      	bx	lr
     15e:	46c0      	nop			; (mov r8, r8)
     160:	41004480 	.word	0x41004480
     164:	200008f8 	.word	0x200008f8
     168:	00008f7c 	.word	0x00008f7c
     16c:	00008f84 	.word	0x00008f84
     170:	20000943 	.word	0x20000943

00000174 <TimeServerResolveCallback>:
 *
 * \param[in] pu8DomainName Domain name.
 * \param[in] u32ServerIP Server IP.
 */
static void TimeServerResolveCallback(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
     174:	b530      	push	{r4, r5, lr}
     176:	b093      	sub	sp, #76	; 0x4c
     178:	1c04      	adds	r4, r0, #0
     17a:	1c0d      	adds	r5, r1, #0
	struct sockaddr_in addr;
	int8_t cDataBuf[48];
	int16_t ret;

	memset(cDataBuf, 0, sizeof(cDataBuf));
     17c:	ab02      	add	r3, sp, #8
     17e:	2200      	movs	r2, #0
     180:	9202      	str	r2, [sp, #8]
     182:	9203      	str	r2, [sp, #12]
     184:	9204      	str	r2, [sp, #16]
     186:	9205      	str	r2, [sp, #20]
     188:	9206      	str	r2, [sp, #24]
     18a:	9207      	str	r2, [sp, #28]
     18c:	9208      	str	r2, [sp, #32]
     18e:	9209      	str	r2, [sp, #36]	; 0x24
     190:	920a      	str	r2, [sp, #40]	; 0x28
     192:	920b      	str	r2, [sp, #44]	; 0x2c
     194:	920c      	str	r2, [sp, #48]	; 0x30
     196:	920d      	str	r2, [sp, #52]	; 0x34
	cDataBuf[0] = '\x1b'; /* time query */
     198:	221b      	movs	r2, #27
     19a:	701a      	strb	r2, [r3, #0]

	printf("resolve_cb: DomainName %s\r\n", pu8DomainName);
     19c:	480f      	ldr	r0, [pc, #60]	; (1dc <TimeServerResolveCallback+0x68>)
     19e:	1c21      	adds	r1, r4, #0
     1a0:	4b0f      	ldr	r3, [pc, #60]	; (1e0 <TimeServerResolveCallback+0x6c>)
     1a2:	4798      	blx	r3

	if (udp_socket >= 0) {
     1a4:	4b0f      	ldr	r3, [pc, #60]	; (1e4 <TimeServerResolveCallback+0x70>)
     1a6:	7818      	ldrb	r0, [r3, #0]
     1a8:	b243      	sxtb	r3, r0
     1aa:	2b00      	cmp	r3, #0
     1ac:	db14      	blt.n	1d8 <TimeServerResolveCallback+0x64>
		/* Set NTP server socket address structure. */
		addr.sin_family = AF_INET;
     1ae:	ab0e      	add	r3, sp, #56	; 0x38
     1b0:	2202      	movs	r2, #2
     1b2:	801a      	strh	r2, [r3, #0]
		addr.sin_port = _htons(MAIN_SERVER_PORT_FOR_UDP);
     1b4:	22f6      	movs	r2, #246	; 0xf6
     1b6:	01d2      	lsls	r2, r2, #7
     1b8:	805a      	strh	r2, [r3, #2]
		addr.sin_addr.s_addr = u32ServerIP;
     1ba:	950f      	str	r5, [sp, #60]	; 0x3c

		/*Send an NTP time query to the NTP server*/
		ret = sendto(udp_socket, (int8_t *)&cDataBuf, sizeof(cDataBuf), 0, (struct sockaddr *)&addr, sizeof(addr));
     1bc:	b240      	sxtb	r0, r0
     1be:	9300      	str	r3, [sp, #0]
     1c0:	2310      	movs	r3, #16
     1c2:	9301      	str	r3, [sp, #4]
     1c4:	a902      	add	r1, sp, #8
     1c6:	2230      	movs	r2, #48	; 0x30
     1c8:	2300      	movs	r3, #0
     1ca:	4c07      	ldr	r4, [pc, #28]	; (1e8 <TimeServerResolveCallback+0x74>)
     1cc:	47a0      	blx	r4
		if (ret != M2M_SUCCESS) {
     1ce:	2800      	cmp	r0, #0
     1d0:	d002      	beq.n	1d8 <TimeServerResolveCallback+0x64>
			printf("resolve_cb: failed to send  error!\r\n");
     1d2:	4806      	ldr	r0, [pc, #24]	; (1ec <TimeServerResolveCallback+0x78>)
     1d4:	4b06      	ldr	r3, [pc, #24]	; (1f0 <TimeServerResolveCallback+0x7c>)
     1d6:	4798      	blx	r3
			return;
		}
	}
}
     1d8:	b013      	add	sp, #76	; 0x4c
     1da:	bd30      	pop	{r4, r5, pc}
     1dc:	00008f8c 	.word	0x00008f8c
     1e0:	00007c39 	.word	0x00007c39
     1e4:	20000000 	.word	0x20000000
     1e8:	00003ae5 	.word	0x00003ae5
     1ec:	00008fa8 	.word	0x00008fa8
     1f0:	00007d59 	.word	0x00007d59

000001f4 <TimeServerCallback>:
 * \param[in] sock socket handler.
 * \param[in] u8Msg Type of Socket notification.
 * \param[in] pvMsg A structure contains notification informations.
 */
static void TimeServerCallback(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     1f4:	b570      	push	{r4, r5, r6, lr}
     1f6:	b082      	sub	sp, #8
     1f8:	1c04      	adds	r4, r0, #0
	/* Check for socket event on socket. */
	int16_t ret;

	switch (u8Msg) {
     1fa:	2901      	cmp	r1, #1
     1fc:	d002      	beq.n	204 <TimeServerCallback+0x10>
     1fe:	2909      	cmp	r1, #9
     200:	d014      	beq.n	22c <TimeServerCallback+0x38>
     202:	e059      	b.n	2b8 <TimeServerCallback+0xc4>
	case SOCKET_MSG_BIND:
	{
		/* printf("socket_cb: socket_msg_bind!\r\n"); */
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
		if (pstrBind && pstrBind->status == 0) {
     204:	2a00      	cmp	r2, #0
     206:	d00d      	beq.n	224 <TimeServerCallback+0x30>
     208:	2300      	movs	r3, #0
     20a:	56d3      	ldrsb	r3, [r2, r3]
     20c:	2b00      	cmp	r3, #0
     20e:	d109      	bne.n	224 <TimeServerCallback+0x30>
			ret = recvfrom(sock, gau8SocketBuffer, MAIN_WIFI_M2M_BUFFER_SIZE, 0);
     210:	492a      	ldr	r1, [pc, #168]	; (2bc <TimeServerCallback+0xc8>)
     212:	4a2b      	ldr	r2, [pc, #172]	; (2c0 <TimeServerCallback+0xcc>)
     214:	4c2b      	ldr	r4, [pc, #172]	; (2c4 <TimeServerCallback+0xd0>)
     216:	47a0      	blx	r4
			if (ret != SOCK_ERR_NO_ERROR) {
     218:	2800      	cmp	r0, #0
     21a:	d04d      	beq.n	2b8 <TimeServerCallback+0xc4>
				printf("socket_cb: recv error!\r\n");
     21c:	482a      	ldr	r0, [pc, #168]	; (2c8 <TimeServerCallback+0xd4>)
     21e:	4b2b      	ldr	r3, [pc, #172]	; (2cc <TimeServerCallback+0xd8>)
     220:	4798      	blx	r3
     222:	e049      	b.n	2b8 <TimeServerCallback+0xc4>
			}
		} else {
			printf("socket_cb: bind error!\r\n");
     224:	482a      	ldr	r0, [pc, #168]	; (2d0 <TimeServerCallback+0xdc>)
     226:	4b29      	ldr	r3, [pc, #164]	; (2cc <TimeServerCallback+0xd8>)
     228:	4798      	blx	r3
     22a:	e045      	b.n	2b8 <TimeServerCallback+0xc4>

	case SOCKET_MSG_RECVFROM:
	{
		/* printf("socket_cb: socket_msg_recvfrom!\r\n"); */
		tstrSocketRecvMsg *pstrRx = (tstrSocketRecvMsg *)pvMsg;
		if (pstrRx->pu8Buffer && pstrRx->s16BufferSize) {
     22c:	6813      	ldr	r3, [r2, #0]
     22e:	2b00      	cmp	r3, #0
     230:	d042      	beq.n	2b8 <TimeServerCallback+0xc4>
     232:	2104      	movs	r1, #4
     234:	5e52      	ldrsh	r2, [r2, r1]
     236:	2a00      	cmp	r2, #0
     238:	d03e      	beq.n	2b8 <TimeServerCallback+0xc4>
			uint8_t packetBuffer[48];
			memcpy(&packetBuffer, pstrRx->pu8Buffer, sizeof(packetBuffer));
     23a:	2228      	movs	r2, #40	; 0x28
     23c:	5c9e      	ldrb	r6, [r3, r2]
     23e:	2229      	movs	r2, #41	; 0x29
     240:	5c9d      	ldrb	r5, [r3, r2]
     242:	222a      	movs	r2, #42	; 0x2a
     244:	5c99      	ldrb	r1, [r3, r2]
     246:	222b      	movs	r2, #43	; 0x2b
     248:	5c98      	ldrb	r0, [r3, r2]

			if ((packetBuffer[0] & 0x7) != 4) {                   /* expect only server response */
     24a:	781b      	ldrb	r3, [r3, #0]
     24c:	2207      	movs	r2, #7
     24e:	4013      	ands	r3, r2
     250:	2b04      	cmp	r3, #4
     252:	d003      	beq.n	25c <TimeServerCallback+0x68>
				printf("socket_cb: Expecting response from Server Only!\r\n");
     254:	481f      	ldr	r0, [pc, #124]	; (2d4 <TimeServerCallback+0xe0>)
     256:	4b1d      	ldr	r3, [pc, #116]	; (2cc <TimeServerCallback+0xd8>)
     258:	4798      	blx	r3
     25a:	e02d      	b.n	2b8 <TimeServerCallback+0xc4>
				return;                    /* MODE is not server, abort */
			} else {
				uint32_t secsSince1900 = packetBuffer[40] << 24 |
     25c:	0636      	lsls	r6, r6, #24
						packetBuffer[41] << 16 |
     25e:	042d      	lsls	r5, r5, #16

			if ((packetBuffer[0] & 0x7) != 4) {                   /* expect only server response */
				printf("socket_cb: Expecting response from Server Only!\r\n");
				return;                    /* MODE is not server, abort */
			} else {
				uint32_t secsSince1900 = packetBuffer[40] << 24 |
     260:	4335      	orrs	r5, r6
						packetBuffer[41] << 16 |
     262:	4328      	orrs	r0, r5
						packetBuffer[42] << 8 |
     264:	0209      	lsls	r1, r1, #8
     266:	4308      	orrs	r0, r1
				/* Now convert NTP time into everyday time.
				 * Unix time starts on Jan 1 1970. In seconds, that's 2208988800.
				 * Subtract seventy years.
				 */
				const uint32_t seventyYears = 2208988800UL;
				time_t rawtime = secsSince1900 - seventyYears;
     268:	4a1b      	ldr	r2, [pc, #108]	; (2d8 <TimeServerCallback+0xe4>)
     26a:	1880      	adds	r0, r0, r2
     26c:	9001      	str	r0, [sp, #4]

				/* Print the hour, minute and second.
				 * GMT is the time at Greenwich Meridian.
				 */
				struct tm * ptm;
				printf ("The current local time is: %s", ctime (&rawtime));
     26e:	a801      	add	r0, sp, #4
     270:	4b1a      	ldr	r3, [pc, #104]	; (2dc <TimeServerCallback+0xe8>)
     272:	4798      	blx	r3
     274:	1c01      	adds	r1, r0, #0
     276:	481a      	ldr	r0, [pc, #104]	; (2e0 <TimeServerCallback+0xec>)
     278:	4b1a      	ldr	r3, [pc, #104]	; (2e4 <TimeServerCallback+0xf0>)
     27a:	4798      	blx	r3
				ptm = gmtime ( &rawtime );
     27c:	a801      	add	r0, sp, #4
     27e:	4b1a      	ldr	r3, [pc, #104]	; (2e8 <TimeServerCallback+0xf4>)
     280:	4798      	blx	r3
				my_time.hour = ptm->tm_hour;
     282:	4b1a      	ldr	r3, [pc, #104]	; (2ec <TimeServerCallback+0xf8>)
     284:	6885      	ldr	r5, [r0, #8]
     286:	709d      	strb	r5, [r3, #2]
				my_time.minute = ptm->tm_min;
     288:	6841      	ldr	r1, [r0, #4]
     28a:	7059      	strb	r1, [r3, #1]
				my_time.second = ptm->tm_sec;
     28c:	6802      	ldr	r2, [r0, #0]
     28e:	701a      	strb	r2, [r3, #0]
				my_time.year = ptm->tm_year + 1900;
     290:	6945      	ldr	r5, [r0, #20]
     292:	4917      	ldr	r1, [pc, #92]	; (2f0 <TimeServerCallback+0xfc>)
     294:	186a      	adds	r2, r5, r1
     296:	80da      	strh	r2, [r3, #6]
				my_time.day = ptm->tm_mday;
     298:	68c2      	ldr	r2, [r0, #12]
     29a:	711a      	strb	r2, [r3, #4]
				my_time.month = ptm->tm_mon + 1;
     29c:	6902      	ldr	r2, [r0, #16]
     29e:	3201      	adds	r2, #1
     2a0:	715a      	strb	r2, [r3, #5]
				//RTC is actually set in main().
				
				ret = close(sock);
     2a2:	1c20      	adds	r0, r4, #0
     2a4:	4b13      	ldr	r3, [pc, #76]	; (2f4 <TimeServerCallback+0x100>)
     2a6:	4798      	blx	r3
				if (ret == SOCK_ERR_NO_ERROR) {
     2a8:	2800      	cmp	r0, #0
     2aa:	d105      	bne.n	2b8 <TimeServerCallback+0xc4>
					udp_socket = -1;
     2ac:	22ff      	movs	r2, #255	; 0xff
     2ae:	4b12      	ldr	r3, [pc, #72]	; (2f8 <TimeServerCallback+0x104>)
     2b0:	701a      	strb	r2, [r3, #0]
					
				gb_time_is_set = true;
     2b2:	2201      	movs	r2, #1
     2b4:	4b11      	ldr	r3, [pc, #68]	; (2fc <TimeServerCallback+0x108>)
     2b6:	701a      	strb	r2, [r3, #0]
	break;

	default:
		break;
	}
}
     2b8:	b002      	add	sp, #8
     2ba:	bd70      	pop	{r4, r5, r6, pc}
     2bc:	200000dc 	.word	0x200000dc
     2c0:	000005b4 	.word	0x000005b4
     2c4:	00003cc5 	.word	0x00003cc5
     2c8:	00008fcc 	.word	0x00008fcc
     2cc:	00007d59 	.word	0x00007d59
     2d0:	00008fe4 	.word	0x00008fe4
     2d4:	00008ffc 	.word	0x00008ffc
     2d8:	7c558180 	.word	0x7c558180
     2dc:	000075c1 	.word	0x000075c1
     2e0:	00009030 	.word	0x00009030
     2e4:	00007c39 	.word	0x00007c39
     2e8:	000075cd 	.word	0x000075cd
     2ec:	2000099c 	.word	0x2000099c
     2f0:	0000076c 	.word	0x0000076c
     2f4:	00003c45 	.word	0x00003c45
     2f8:	20000000 	.word	0x20000000
     2fc:	200000d8 	.word	0x200000d8

00000300 <TimeServerWiFiCallback>:
 *
 * \param[in] u8MsgType Type of Wi-Fi notification.
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 */
static void TimeServerWiFiCallback(uint8_t u8MsgType, void *pvMsg)
{
     300:	b510      	push	{r4, lr}
     302:	b082      	sub	sp, #8
	switch (u8MsgType) {
     304:	282c      	cmp	r0, #44	; 0x2c
     306:	d002      	beq.n	30e <TimeServerWiFiCallback+0xe>
     308:	2836      	cmp	r0, #54	; 0x36
     30a:	d01a      	beq.n	342 <TimeServerWiFiCallback+0x42>
     30c:	e028      	b.n	360 <TimeServerWiFiCallback+0x60>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     30e:	780b      	ldrb	r3, [r1, #0]
     310:	2b01      	cmp	r3, #1
     312:	d105      	bne.n	320 <TimeServerWiFiCallback+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
     314:	4813      	ldr	r0, [pc, #76]	; (364 <TimeServerWiFiCallback+0x64>)
     316:	4b14      	ldr	r3, [pc, #80]	; (368 <TimeServerWiFiCallback+0x68>)
     318:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
     31a:	4b14      	ldr	r3, [pc, #80]	; (36c <TimeServerWiFiCallback+0x6c>)
     31c:	4798      	blx	r3
     31e:	e01f      	b.n	360 <TimeServerWiFiCallback+0x60>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     320:	2b00      	cmp	r3, #0
     322:	d11d      	bne.n	360 <TimeServerWiFiCallback+0x60>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
     324:	4812      	ldr	r0, [pc, #72]	; (370 <TimeServerWiFiCallback+0x70>)
     326:	4b10      	ldr	r3, [pc, #64]	; (368 <TimeServerWiFiCallback+0x68>)
     328:	4798      	blx	r3
			gbConnectedWifi = false;
     32a:	2200      	movs	r2, #0
     32c:	4b11      	ldr	r3, [pc, #68]	; (374 <TimeServerWiFiCallback+0x74>)
     32e:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     330:	23ff      	movs	r3, #255	; 0xff
     332:	9300      	str	r3, [sp, #0]
     334:	4810      	ldr	r0, [pc, #64]	; (378 <TimeServerWiFiCallback+0x78>)
     336:	2106      	movs	r1, #6
     338:	2202      	movs	r2, #2
     33a:	4b10      	ldr	r3, [pc, #64]	; (37c <TimeServerWiFiCallback+0x7c>)
     33c:	4c10      	ldr	r4, [pc, #64]	; (380 <TimeServerWiFiCallback+0x80>)
     33e:	47a0      	blx	r4
     340:	e00e      	b.n	360 <TimeServerWiFiCallback+0x60>

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		/* Turn LED0 on to declare that IP address received. */
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
     342:	780c      	ldrb	r4, [r1, #0]
     344:	784a      	ldrb	r2, [r1, #1]
     346:	788b      	ldrb	r3, [r1, #2]
     348:	78c9      	ldrb	r1, [r1, #3]
     34a:	9100      	str	r1, [sp, #0]
     34c:	480d      	ldr	r0, [pc, #52]	; (384 <TimeServerWiFiCallback+0x84>)
     34e:	1c21      	adds	r1, r4, #0
     350:	4c0d      	ldr	r4, [pc, #52]	; (388 <TimeServerWiFiCallback+0x88>)
     352:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gbConnectedWifi = true;
     354:	2201      	movs	r2, #1
     356:	4b07      	ldr	r3, [pc, #28]	; (374 <TimeServerWiFiCallback+0x74>)
     358:	701a      	strb	r2, [r3, #0]

		/* Obtain the IP Address by network name */
		gethostbyname((uint8_t *)MAIN_WORLDWIDE_NTP_POOL_HOSTNAME);
     35a:	480c      	ldr	r0, [pc, #48]	; (38c <TimeServerWiFiCallback+0x8c>)
     35c:	4b0c      	ldr	r3, [pc, #48]	; (390 <TimeServerWiFiCallback+0x90>)
     35e:	4798      	blx	r3
	default:
	{
		break;
	}
	}
}
     360:	b002      	add	sp, #8
     362:	bd10      	pop	{r4, pc}
     364:	00009050 	.word	0x00009050
     368:	00007d59 	.word	0x00007d59
     36c:	00001fd5 	.word	0x00001fd5
     370:	00009088 	.word	0x00009088
     374:	200006d4 	.word	0x200006d4
     378:	000090c0 	.word	0x000090c0
     37c:	000090c8 	.word	0x000090c8
     380:	00001f99 	.word	0x00001f99
     384:	000090d4 	.word	0x000090d4
     388:	00007c39 	.word	0x00007c39
     38c:	0000910c 	.word	0x0000910c
     390:	00003de5 	.word	0x00003de5

00000394 <socket_resolve_handler>:
{
	mqtt_socket_event_handler(sock, msg_type, msg_data);
}

static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
     394:	b508      	push	{r3, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
     396:	4b01      	ldr	r3, [pc, #4]	; (39c <socket_resolve_handler+0x8>)
     398:	4798      	blx	r3
}
     39a:	bd08      	pop	{r3, pc}
     39c:	00006769 	.word	0x00006769

000003a0 <socket_event_handler>:
		break;
	}
}

static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
     3a0:	b508      	push	{r3, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
     3a2:	4b01      	ldr	r3, [pc, #4]	; (3a8 <socket_event_handler+0x8>)
     3a4:	4798      	blx	r3
}
     3a6:	bd08      	pop	{r3, pc}
     3a8:	00007309 	.word	0x00007309

000003ac <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
     3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ae:	b083      	sub	sp, #12
     3b0:	1c0c      	adds	r4, r1, #0
	tstrM2mWifiStateChanged *msg_wifi_state;
	tstrM2MConnInfo     *pstrConnInfo = (tstrM2MConnInfo*)msg_data;

	switch (msg_type) 
     3b2:	282c      	cmp	r0, #44	; 0x2c
     3b4:	d01e      	beq.n	3f4 <wifi_callback+0x48>
     3b6:	2836      	cmp	r0, #54	; 0x36
     3b8:	d041      	beq.n	43e <wifi_callback+0x92>
     3ba:	2806      	cmp	r0, #6
     3bc:	d164      	bne.n	488 <wifi_callback+0xdc>
	{	
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
     3be:	4833      	ldr	r0, [pc, #204]	; (48c <wifi_callback+0xe0>)
     3c0:	4b33      	ldr	r3, [pc, #204]	; (490 <wifi_callback+0xe4>)
     3c2:	4798      	blx	r3
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
     3c4:	4833      	ldr	r0, [pc, #204]	; (494 <wifi_callback+0xe8>)
     3c6:	1c21      	adds	r1, r4, #0
     3c8:	4d33      	ldr	r5, [pc, #204]	; (498 <wifi_callback+0xec>)
     3ca:	47a8      	blx	r5
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
     3cc:	2321      	movs	r3, #33	; 0x21
     3ce:	5ce1      	ldrb	r1, [r4, r3]
     3d0:	4832      	ldr	r0, [pc, #200]	; (49c <wifi_callback+0xf0>)
     3d2:	47a8      	blx	r5
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
     3d4:	232c      	movs	r3, #44	; 0x2c
     3d6:	56e1      	ldrsb	r1, [r4, r3]
     3d8:	4831      	ldr	r0, [pc, #196]	; (4a0 <wifi_callback+0xf4>)
     3da:	47a8      	blx	r5
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
     3dc:	2322      	movs	r3, #34	; 0x22
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
     3de:	5ce1      	ldrb	r1, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
     3e0:	2323      	movs	r3, #35	; 0x23
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
     3e2:	5ce2      	ldrb	r2, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
     3e4:	2324      	movs	r3, #36	; 0x24
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
     3e6:	5ce3      	ldrb	r3, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
     3e8:	2025      	movs	r0, #37	; 0x25
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
     3ea:	5c20      	ldrb	r0, [r4, r0]
     3ec:	9000      	str	r0, [sp, #0]
     3ee:	482d      	ldr	r0, [pc, #180]	; (4a4 <wifi_callback+0xf8>)
     3f0:	47a8      	blx	r5
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
		break;
     3f2:	e049      	b.n	488 <wifi_callback+0xdc>
		
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) 
     3f4:	780b      	ldrb	r3, [r1, #0]
     3f6:	2b01      	cmp	r3, #1
     3f8:	d10a      	bne.n	410 <wifi_callback+0x64>
		{	/* If Wi-Fi is connected. */
			DEBUG_PRINT_STATUS("Wi-Fi connected - Requesting DHCP...");
     3fa:	482b      	ldr	r0, [pc, #172]	; (4a8 <wifi_callback+0xfc>)
     3fc:	4c26      	ldr	r4, [pc, #152]	; (498 <wifi_callback+0xec>)
     3fe:	47a0      	blx	r4
     400:	482a      	ldr	r0, [pc, #168]	; (4ac <wifi_callback+0x100>)
     402:	47a0      	blx	r4
     404:	482a      	ldr	r0, [pc, #168]	; (4b0 <wifi_callback+0x104>)
     406:	4b22      	ldr	r3, [pc, #136]	; (490 <wifi_callback+0xe4>)
     408:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
     40a:	4b2a      	ldr	r3, [pc, #168]	; (4b4 <wifi_callback+0x108>)
     40c:	4798      	blx	r3
     40e:	e03b      	b.n	488 <wifi_callback+0xdc>
		} 
		else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) 
     410:	2b00      	cmp	r3, #0
     412:	d139      	bne.n	488 <wifi_callback+0xdc>
		{	/* If Wi-Fi is disconnected. */
			DEBUG_PRINT_STATUS("Wi-Fi disconnected.");
     414:	4824      	ldr	r0, [pc, #144]	; (4a8 <wifi_callback+0xfc>)
     416:	4c20      	ldr	r4, [pc, #128]	; (498 <wifi_callback+0xec>)
     418:	47a0      	blx	r4
     41a:	4827      	ldr	r0, [pc, #156]	; (4b8 <wifi_callback+0x10c>)
     41c:	47a0      	blx	r4
     41e:	4824      	ldr	r0, [pc, #144]	; (4b0 <wifi_callback+0x104>)
     420:	4b1b      	ldr	r3, [pc, #108]	; (490 <wifi_callback+0xe4>)
     422:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     424:	23ff      	movs	r3, #255	; 0xff
     426:	9300      	str	r3, [sp, #0]
     428:	4824      	ldr	r0, [pc, #144]	; (4bc <wifi_callback+0x110>)
     42a:	2106      	movs	r1, #6
     42c:	2202      	movs	r2, #2
     42e:	4b24      	ldr	r3, [pc, #144]	; (4c0 <wifi_callback+0x114>)
     430:	4c24      	ldr	r4, [pc, #144]	; (4c4 <wifi_callback+0x118>)
     432:	47a0      	blx	r4
					MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
     434:	4824      	ldr	r0, [pc, #144]	; (4c8 <wifi_callback+0x11c>)
     436:	2101      	movs	r1, #1
     438:	4b24      	ldr	r3, [pc, #144]	; (4cc <wifi_callback+0x120>)
     43a:	4798      	blx	r3
     43c:	e024      	b.n	488 <wifi_callback+0xdc>
		}
		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		DEBUG_PRINT_STATUS("DHCP Complete.");
     43e:	4f1a      	ldr	r7, [pc, #104]	; (4a8 <wifi_callback+0xfc>)
     440:	1c38      	adds	r0, r7, #0
     442:	4c15      	ldr	r4, [pc, #84]	; (498 <wifi_callback+0xec>)
     444:	47a0      	blx	r4
     446:	4822      	ldr	r0, [pc, #136]	; (4d0 <wifi_callback+0x124>)
     448:	47a0      	blx	r4
     44a:	4e19      	ldr	r6, [pc, #100]	; (4b0 <wifi_callback+0x104>)
     44c:	1c30      	adds	r0, r6, #0
     44e:	4d10      	ldr	r5, [pc, #64]	; (490 <wifi_callback+0xe4>)
     450:	47a8      	blx	r5
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		DEBUG_PRINT_STATUS("Requesting socket from MQTT broker...");
     452:	1c38      	adds	r0, r7, #0
     454:	47a0      	blx	r4
     456:	481f      	ldr	r0, [pc, #124]	; (4d4 <wifi_callback+0x128>)
     458:	47a0      	blx	r4
     45a:	1c30      	adds	r0, r6, #0
     45c:	47a8      	blx	r5
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
     45e:	481a      	ldr	r0, [pc, #104]	; (4c8 <wifi_callback+0x11c>)
     460:	491d      	ldr	r1, [pc, #116]	; (4d8 <wifi_callback+0x12c>)
     462:	4b1e      	ldr	r3, [pc, #120]	; (4dc <wifi_callback+0x130>)
     464:	4798      	blx	r3
		mqtt_connection_state = CONNECTING;
     466:	2201      	movs	r2, #1
     468:	4b1d      	ldr	r3, [pc, #116]	; (4e0 <wifi_callback+0x134>)
     46a:	701a      	strb	r2, [r3, #0]
		DEBUG_PRINT_STATUS("Requesting WiFi connection info...");
     46c:	1c38      	adds	r0, r7, #0
     46e:	47a0      	blx	r4
     470:	481c      	ldr	r0, [pc, #112]	; (4e4 <wifi_callback+0x138>)
     472:	47a0      	blx	r4
     474:	1c30      	adds	r0, r6, #0
     476:	47a8      	blx	r5
		m2m_wifi_get_connection_info();
     478:	4b1b      	ldr	r3, [pc, #108]	; (4e8 <wifi_callback+0x13c>)
     47a:	4798      	blx	r3
		DEBUG_PRINT_STATUS("Request has been sent.");
     47c:	1c38      	adds	r0, r7, #0
     47e:	47a0      	blx	r4
     480:	481a      	ldr	r0, [pc, #104]	; (4ec <wifi_callback+0x140>)
     482:	47a0      	blx	r4
     484:	1c30      	adds	r0, r6, #0
     486:	47a8      	blx	r5
		break;

	default:
		break;
	}
}
     488:	b003      	add	sp, #12
     48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48c:	0000911c 	.word	0x0000911c
     490:	00007d59 	.word	0x00007d59
     494:	00009130 	.word	0x00009130
     498:	00007c39 	.word	0x00007c39
     49c:	0000914c 	.word	0x0000914c
     4a0:	00009168 	.word	0x00009168
     4a4:	00009184 	.word	0x00009184
     4a8:	000091a8 	.word	0x000091a8
     4ac:	000091ac 	.word	0x000091ac
     4b0:	000093c4 	.word	0x000093c4
     4b4:	00001fd5 	.word	0x00001fd5
     4b8:	000091d4 	.word	0x000091d4
     4bc:	000090c0 	.word	0x000090c0
     4c0:	000090c8 	.word	0x000090c8
     4c4:	00001f99 	.word	0x00001f99
     4c8:	20000798 	.word	0x20000798
     4cc:	00006fc9 	.word	0x00006fc9
     4d0:	000091e8 	.word	0x000091e8
     4d4:	000091f8 	.word	0x000091f8
     4d8:	00008f68 	.word	0x00008f68
     4dc:	000067bd 	.word	0x000067bd
     4e0:	200009a4 	.word	0x200009a4
     4e4:	00009220 	.word	0x00009220
     4e8:	00002051 	.word	0x00002051
     4ec:	00009244 	.word	0x00009244

000004f0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     4f0:	b570      	push	{r4, r5, r6, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	1c05      	adds	r5, r0, #0
     4f6:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     4f8:	2200      	movs	r2, #0
     4fa:	466b      	mov	r3, sp
     4fc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     4fe:	4c06      	ldr	r4, [pc, #24]	; (518 <usart_serial_getchar+0x28>)
     500:	1c28      	adds	r0, r5, #0
     502:	4669      	mov	r1, sp
     504:	3106      	adds	r1, #6
     506:	47a0      	blx	r4
     508:	2800      	cmp	r0, #0
     50a:	d1f9      	bne.n	500 <usart_serial_getchar+0x10>

	*c = temp;
     50c:	466b      	mov	r3, sp
     50e:	3306      	adds	r3, #6
     510:	881b      	ldrh	r3, [r3, #0]
     512:	7033      	strb	r3, [r6, #0]
}
     514:	b002      	add	sp, #8
     516:	bd70      	pop	{r4, r5, r6, pc}
     518:	00005161 	.word	0x00005161

0000051c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	1c06      	adds	r6, r0, #0
     520:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     522:	4c03      	ldr	r4, [pc, #12]	; (530 <usart_serial_putchar+0x14>)
     524:	1c30      	adds	r0, r6, #0
     526:	1c29      	adds	r1, r5, #0
     528:	47a0      	blx	r4
     52a:	2800      	cmp	r0, #0
     52c:	d1fa      	bne.n	524 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     52e:	bd70      	pop	{r4, r5, r6, pc}
     530:	00005135 	.word	0x00005135

00000534 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
     534:	b570      	push	{r4, r5, r6, lr}
     536:	b086      	sub	sp, #24
     538:	1c05      	adds	r5, r0, #0
     53a:	1c14      	adds	r4, r2, #0
	switch (type) {
     53c:	2901      	cmp	r1, #1
     53e:	d02c      	beq.n	59a <mqtt_callback+0x66>
     540:	2905      	cmp	r1, #5
     542:	d04f      	beq.n	5e4 <mqtt_callback+0xb0>
     544:	2900      	cmp	r1, #0
     546:	d15e      	bne.n	606 <mqtt_callback+0xd2>
	{
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
     548:	6813      	ldr	r3, [r2, #0]
     54a:	2b00      	cmp	r3, #0
     54c:	db14      	blt.n	578 <mqtt_callback+0x44>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
     54e:	4b2f      	ldr	r3, [pc, #188]	; (60c <mqtt_callback+0xd8>)
     550:	9300      	str	r3, [sp, #0]
     552:	2300      	movs	r3, #0
     554:	9301      	str	r3, [sp, #4]
     556:	9302      	str	r3, [sp, #8]
     558:	9303      	str	r3, [sp, #12]
     55a:	9304      	str	r3, [sp, #16]
     55c:	9305      	str	r3, [sp, #20]
     55e:	2101      	movs	r1, #1
     560:	2200      	movs	r2, #0
     562:	4c2b      	ldr	r4, [pc, #172]	; (610 <mqtt_callback+0xdc>)
     564:	47a0      	blx	r4
			DEBUG_PRINT_STATUS("Requesting MQTT connection...");
     566:	482b      	ldr	r0, [pc, #172]	; (614 <mqtt_callback+0xe0>)
     568:	4c2b      	ldr	r4, [pc, #172]	; (618 <mqtt_callback+0xe4>)
     56a:	47a0      	blx	r4
     56c:	482b      	ldr	r0, [pc, #172]	; (61c <mqtt_callback+0xe8>)
     56e:	47a0      	blx	r4
     570:	482b      	ldr	r0, [pc, #172]	; (620 <mqtt_callback+0xec>)
     572:	4b2c      	ldr	r3, [pc, #176]	; (624 <mqtt_callback+0xf0>)
     574:	4798      	blx	r3
     576:	e046      	b.n	606 <mqtt_callback+0xd2>
		} else {
			DEBUG_PRINT_ERR("Failed to connect to (%s)! Automatically retrying...", main_mqtt_broker);
     578:	482b      	ldr	r0, [pc, #172]	; (628 <mqtt_callback+0xf4>)
     57a:	4c27      	ldr	r4, [pc, #156]	; (618 <mqtt_callback+0xe4>)
     57c:	47a0      	blx	r4
     57e:	4e2b      	ldr	r6, [pc, #172]	; (62c <mqtt_callback+0xf8>)
     580:	482b      	ldr	r0, [pc, #172]	; (630 <mqtt_callback+0xfc>)
     582:	1c31      	adds	r1, r6, #0
     584:	47a0      	blx	r4
     586:	482b      	ldr	r0, [pc, #172]	; (634 <mqtt_callback+0x100>)
     588:	218c      	movs	r1, #140	; 0x8c
     58a:	0049      	lsls	r1, r1, #1
     58c:	4a2a      	ldr	r2, [pc, #168]	; (638 <mqtt_callback+0x104>)
     58e:	47a0      	blx	r4
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
     590:	1c28      	adds	r0, r5, #0
     592:	1c31      	adds	r1, r6, #0
     594:	4b29      	ldr	r3, [pc, #164]	; (63c <mqtt_callback+0x108>)
     596:	4798      	blx	r3
     598:	e035      	b.n	606 <mqtt_callback+0xd2>
		}
	}
	break;

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
     59a:	7813      	ldrb	r3, [r2, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d115      	bne.n	5cc <mqtt_callback+0x98>
			/* Subscribe chat topic. */
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
     5a0:	4927      	ldr	r1, [pc, #156]	; (640 <mqtt_callback+0x10c>)
     5a2:	2200      	movs	r2, #0
     5a4:	4b27      	ldr	r3, [pc, #156]	; (644 <mqtt_callback+0x110>)
     5a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5a8:	4a27      	ldr	r2, [pc, #156]	; (648 <mqtt_callback+0x114>)
     5aa:	2331      	movs	r3, #49	; 0x31
     5ac:	5cd0      	ldrb	r0, [r2, r3]
     5ae:	2102      	movs	r1, #2
     5b0:	4301      	orrs	r1, r0
     5b2:	54d1      	strb	r1, [r2, r3]
			/* Enable USART receiving callback. */
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
			DEBUG_PRINT_STATUS("MQTT Connection Accepted.");
     5b4:	4817      	ldr	r0, [pc, #92]	; (614 <mqtt_callback+0xe0>)
     5b6:	4c18      	ldr	r4, [pc, #96]	; (618 <mqtt_callback+0xe4>)
     5b8:	47a0      	blx	r4
     5ba:	4824      	ldr	r0, [pc, #144]	; (64c <mqtt_callback+0x118>)
     5bc:	47a0      	blx	r4
     5be:	4818      	ldr	r0, [pc, #96]	; (620 <mqtt_callback+0xec>)
     5c0:	4b18      	ldr	r3, [pc, #96]	; (624 <mqtt_callback+0xf0>)
     5c2:	4798      	blx	r3
			mqtt_connection_state = CONNECTED;
     5c4:	4b22      	ldr	r3, [pc, #136]	; (650 <mqtt_callback+0x11c>)
     5c6:	2202      	movs	r2, #2
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	e01c      	b.n	606 <mqtt_callback+0xd2>
		} else {
			/* Cannot connect for some reason. */
			DEBUG_PRINT_ERR("MQTT broker decline your access! error code %d", data->connected.result);
     5cc:	4816      	ldr	r0, [pc, #88]	; (628 <mqtt_callback+0xf4>)
     5ce:	4d12      	ldr	r5, [pc, #72]	; (618 <mqtt_callback+0xe4>)
     5d0:	47a8      	blx	r5
     5d2:	7821      	ldrb	r1, [r4, #0]
     5d4:	481f      	ldr	r0, [pc, #124]	; (654 <mqtt_callback+0x120>)
     5d6:	47a8      	blx	r5
     5d8:	4816      	ldr	r0, [pc, #88]	; (634 <mqtt_callback+0x100>)
     5da:	2194      	movs	r1, #148	; 0x94
     5dc:	0049      	lsls	r1, r1, #1
     5de:	4a16      	ldr	r2, [pc, #88]	; (638 <mqtt_callback+0x104>)
     5e0:	47a8      	blx	r5
     5e2:	e010      	b.n	606 <mqtt_callback+0xd2>
		//Hook for receiving subscriptions
		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		DEBUG_PRINT_STATUS("MQTT disconnected\r\n");
     5e4:	480b      	ldr	r0, [pc, #44]	; (614 <mqtt_callback+0xe0>)
     5e6:	4b0c      	ldr	r3, [pc, #48]	; (618 <mqtt_callback+0xe4>)
     5e8:	4798      	blx	r3
     5ea:	481b      	ldr	r0, [pc, #108]	; (658 <mqtt_callback+0x124>)
     5ec:	4c0d      	ldr	r4, [pc, #52]	; (624 <mqtt_callback+0xf0>)
     5ee:	47a0      	blx	r4
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <mqtt_callback+0xec>)
     5f2:	47a0      	blx	r4
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
     5f4:	4a14      	ldr	r2, [pc, #80]	; (648 <mqtt_callback+0x114>)
     5f6:	2331      	movs	r3, #49	; 0x31
     5f8:	5cd1      	ldrb	r1, [r2, r3]
     5fa:	2002      	movs	r0, #2
     5fc:	4381      	bics	r1, r0
     5fe:	54d1      	strb	r1, [r2, r3]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		mqtt_connection_state = DISCONNECTED;
     600:	2200      	movs	r2, #0
     602:	4b13      	ldr	r3, [pc, #76]	; (650 <mqtt_callback+0x11c>)
     604:	701a      	strb	r2, [r3, #0]
		break;
	}
}
     606:	b006      	add	sp, #24
     608:	bd70      	pop	{r4, r5, r6, pc}
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	20000694 	.word	0x20000694
     610:	000068d1 	.word	0x000068d1
     614:	000091a8 	.word	0x000091a8
     618:	00007c39 	.word	0x00007c39
     61c:	0000925c 	.word	0x0000925c
     620:	000093c4 	.word	0x000093c4
     624:	00007d59 	.word	0x00007d59
     628:	0000927c 	.word	0x0000927c
     62c:	00008f68 	.word	0x00008f68
     630:	00009280 	.word	0x00009280
     634:	000092b8 	.word	0x000092b8
     638:	00008f58 	.word	0x00008f58
     63c:	000067bd 	.word	0x000067bd
     640:	000092dc 	.word	0x000092dc
     644:	00006d29 	.word	0x00006d29
     648:	2000080c 	.word	0x2000080c
     64c:	000092ec 	.word	0x000092ec
     650:	200009a4 	.word	0x200009a4
     654:	00009308 	.word	0x00009308
     658:	00009338 	.word	0x00009338

0000065c <configure_extint_channel>:
		while (1);
	}
}

void configure_extint_channel(void)
{
     65c:	b510      	push	{r4, lr}
     65e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     660:	ac01      	add	r4, sp, #4
     662:	1c20      	adds	r0, r4, #0
     664:	4b07      	ldr	r3, [pc, #28]	; (684 <configure_extint_channel+0x28>)
     666:	4798      	blx	r3
	config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
     668:	2337      	movs	r3, #55	; 0x37
     66a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
     66c:	2300      	movs	r3, #0
     66e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     670:	2301      	movs	r3, #1
     672:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     674:	2303      	movs	r3, #3
     676:	72e3      	strb	r3, [r4, #11]
	//	config_extint_chan.filter_input_signal = true;
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     678:	2007      	movs	r0, #7
     67a:	1c21      	adds	r1, r4, #0
     67c:	4b02      	ldr	r3, [pc, #8]	; (688 <configure_extint_channel+0x2c>)
     67e:	4798      	blx	r3
}
     680:	b004      	add	sp, #16
     682:	bd10      	pop	{r4, pc}
     684:	00004091 	.word	0x00004091
     688:	000040a5 	.word	0x000040a5

0000068c <configure_extint_callbacks>:
		strcpy(glb_msg, "Closed");
	new_activity = 1;
}

void configure_extint_callbacks(void)
{
     68c:	b508      	push	{r3, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     68e:	4805      	ldr	r0, [pc, #20]	; (6a4 <configure_extint_callbacks+0x18>)
     690:	2107      	movs	r1, #7
     692:	2200      	movs	r2, #0
     694:	4b04      	ldr	r3, [pc, #16]	; (6a8 <configure_extint_callbacks+0x1c>)
     696:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     698:	2007      	movs	r0, #7
     69a:	2100      	movs	r1, #0
     69c:	4b03      	ldr	r3, [pc, #12]	; (6ac <configure_extint_callbacks+0x20>)
     69e:	4798      	blx	r3
}
     6a0:	bd08      	pop	{r3, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00000131 	.word	0x00000131
     6a8:	00003f2d 	.word	0x00003f2d
     6ac:	00003f5d 	.word	0x00003f5d

000006b0 <configure_rtc_calendar>:

void configure_rtc_calendar(void)
{
     6b0:	b510      	push	{r4, lr}
     6b2:	b086      	sub	sp, #24
	/* Initialize and set time structure to default. */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
     6b4:	aa01      	add	r2, sp, #4
     6b6:	23a0      	movs	r3, #160	; 0xa0
     6b8:	011b      	lsls	r3, r3, #4
     6ba:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
     6bc:	2300      	movs	r3, #0
     6be:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
     6c0:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
     6c2:	23fa      	movs	r3, #250	; 0xfa
     6c4:	00db      	lsls	r3, r3, #3
     6c6:	80d3      	strh	r3, [r2, #6]
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	
	config_rtc_calendar.clock_24h     = true;
     6c8:	2301      	movs	r3, #1
     6ca:	7113      	strb	r3, [r2, #4]
	config_rtc_calendar.alarm[0].time = alarm.time;
     6cc:	4907      	ldr	r1, [pc, #28]	; (6ec <configure_rtc_calendar+0x3c>)
     6ce:	ab03      	add	r3, sp, #12
     6d0:	c911      	ldmia	r1!, {r0, r4}
     6d2:	c311      	stmia	r3!, {r0, r4}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
     6d4:	2306      	movs	r3, #6
     6d6:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     6d8:	4c05      	ldr	r4, [pc, #20]	; (6f0 <configure_rtc_calendar+0x40>)
     6da:	1c20      	adds	r0, r4, #0
     6dc:	4905      	ldr	r1, [pc, #20]	; (6f4 <configure_rtc_calendar+0x44>)
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <configure_rtc_calendar+0x48>)
     6e0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
     6e2:	1c20      	adds	r0, r4, #0
     6e4:	4b05      	ldr	r3, [pc, #20]	; (6fc <configure_rtc_calendar+0x4c>)
     6e6:	4798      	blx	r3
}
     6e8:	b006      	add	sp, #24
     6ea:	bd10      	pop	{r4, pc}
     6ec:	20000938 	.word	0x20000938
     6f0:	200008e4 	.word	0x200008e4
     6f4:	40001400 	.word	0x40001400
     6f8:	0000429d 	.word	0x0000429d
     6fc:	000041bd 	.word	0x000041bd

00000700 <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
     700:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
     702:	4c05      	ldr	r4, [pc, #20]	; (718 <configure_rtc_callbacks+0x18>)
     704:	1c20      	adds	r0, r4, #0
     706:	4905      	ldr	r1, [pc, #20]	; (71c <configure_rtc_callbacks+0x1c>)
     708:	2200      	movs	r2, #0
     70a:	4b05      	ldr	r3, [pc, #20]	; (720 <configure_rtc_callbacks+0x20>)
     70c:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
     70e:	1c20      	adds	r0, r4, #0
     710:	2100      	movs	r1, #0
     712:	4b04      	ldr	r3, [pc, #16]	; (724 <configure_rtc_callbacks+0x24>)
     714:	4798      	blx	r3
}
     716:	bd10      	pop	{r4, pc}
     718:	200008e4 	.word	0x200008e4
     71c:	000007ed 	.word	0x000007ed
     720:	00004479 	.word	0x00004479
     724:	00004499 	.word	0x00004499

00000728 <set_next_rtc_alarm>:
	set_next_rtc_alarm(60);
	rtc_activity = 1;
}

void set_next_rtc_alarm(uint32_t num_of_seconds)
{
     728:	b570      	push	{r4, r5, r6, lr}
     72a:	b082      	sub	sp, #8
     72c:	1c04      	adds	r4, r0, #0
	struct rtc_calendar_time alarm_time;
	rtc_calendar_get_time(&rtc_instance, &alarm_time);
     72e:	4823      	ldr	r0, [pc, #140]	; (7bc <set_next_rtc_alarm+0x94>)
     730:	4669      	mov	r1, sp
     732:	4b23      	ldr	r3, [pc, #140]	; (7c0 <set_next_rtc_alarm+0x98>)
     734:	4798      	blx	r3
	alarm.time.day = alarm_time.day;
     736:	4b23      	ldr	r3, [pc, #140]	; (7c4 <set_next_rtc_alarm+0x9c>)
     738:	4669      	mov	r1, sp
     73a:	790a      	ldrb	r2, [r1, #4]
     73c:	711a      	strb	r2, [r3, #4]
	alarm.time.hour = alarm_time.hour;
     73e:	7888      	ldrb	r0, [r1, #2]
     740:	7098      	strb	r0, [r3, #2]
	alarm.time.minute = alarm_time.minute;
     742:	784d      	ldrb	r5, [r1, #1]
     744:	705d      	strb	r5, [r3, #1]
	alarm.time.month = alarm_time.month;
     746:	794a      	ldrb	r2, [r1, #5]
     748:	715a      	strb	r2, [r3, #5]
	alarm.time.pm = alarm_time.pm;
     74a:	78ca      	ldrb	r2, [r1, #3]
     74c:	70da      	strb	r2, [r3, #3]
	alarm.time.year = alarm_time.year;
     74e:	88ca      	ldrh	r2, [r1, #6]
     750:	80da      	strh	r2, [r3, #6]
	alarm.time.second = alarm_time.second;	
     752:	780a      	ldrb	r2, [r1, #0]
     754:	701a      	strb	r2, [r3, #0]
	if(num_of_seconds < 60)
     756:	2c3b      	cmp	r4, #59	; 0x3b
     758:	d809      	bhi.n	76e <set_next_rtc_alarm+0x46>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
     75a:	1c1d      	adds	r5, r3, #0
     75c:	2301      	movs	r3, #1
     75e:	722b      	strb	r3, [r5, #8]
		alarm.time.second += num_of_seconds;
     760:	1914      	adds	r4, r2, r4
		alarm.time.second = alarm.time.second % 60;
     762:	b2e0      	uxtb	r0, r4
     764:	213c      	movs	r1, #60	; 0x3c
     766:	4b18      	ldr	r3, [pc, #96]	; (7c8 <set_next_rtc_alarm+0xa0>)
     768:	4798      	blx	r3
     76a:	7029      	strb	r1, [r5, #0]
     76c:	e01f      	b.n	7ae <set_next_rtc_alarm+0x86>
	}
	else if(num_of_seconds < (60 * 60)) //time span is greater than an minute
     76e:	4b17      	ldr	r3, [pc, #92]	; (7cc <set_next_rtc_alarm+0xa4>)
     770:	429c      	cmp	r4, r3
     772:	d80d      	bhi.n	790 <set_next_rtc_alarm+0x68>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_MIN;
     774:	4e13      	ldr	r6, [pc, #76]	; (7c4 <set_next_rtc_alarm+0x9c>)
     776:	2302      	movs	r3, #2
     778:	7233      	strb	r3, [r6, #8]
		alarm.time.minute += num_of_seconds / 60;
     77a:	1c20      	adds	r0, r4, #0
     77c:	213c      	movs	r1, #60	; 0x3c
     77e:	4b14      	ldr	r3, [pc, #80]	; (7d0 <set_next_rtc_alarm+0xa8>)
     780:	4798      	blx	r3
     782:	1828      	adds	r0, r5, r0
		alarm.time.minute = alarm.time.minute % 60;		
     784:	b2c0      	uxtb	r0, r0
     786:	213c      	movs	r1, #60	; 0x3c
     788:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <set_next_rtc_alarm+0xa0>)
     78a:	4798      	blx	r3
     78c:	7071      	strb	r1, [r6, #1]
     78e:	e00e      	b.n	7ae <set_next_rtc_alarm+0x86>
	}
	else if(num_of_seconds < (3600 * 24)) //time span is greater than an hour
     790:	4b10      	ldr	r3, [pc, #64]	; (7d4 <set_next_rtc_alarm+0xac>)
     792:	429c      	cmp	r4, r3
     794:	d807      	bhi.n	7a6 <set_next_rtc_alarm+0x7e>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_HOUR;
     796:	4c0b      	ldr	r4, [pc, #44]	; (7c4 <set_next_rtc_alarm+0x9c>)
     798:	2303      	movs	r3, #3
     79a:	7223      	strb	r3, [r4, #8]
		alarm.time.minute += num_of_seconds / 3600;
		alarm.time.minute = alarm.time.hour % (3600 * 24);		
     79c:	490e      	ldr	r1, [pc, #56]	; (7d8 <set_next_rtc_alarm+0xb0>)
     79e:	4b0f      	ldr	r3, [pc, #60]	; (7dc <set_next_rtc_alarm+0xb4>)
     7a0:	4798      	blx	r3
     7a2:	7061      	strb	r1, [r4, #1]
     7a4:	e003      	b.n	7ae <set_next_rtc_alarm+0x86>
	}
	else
	{
		printf("FAILURE TO SET ALARM - Value too high!"); //time span can't exceed 23:59:59 hours
     7a6:	480e      	ldr	r0, [pc, #56]	; (7e0 <set_next_rtc_alarm+0xb8>)
     7a8:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <set_next_rtc_alarm+0xbc>)
     7aa:	4798      	blx	r3
     7ac:	e004      	b.n	7b8 <set_next_rtc_alarm+0x90>
		return;
	}
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);	
     7ae:	4803      	ldr	r0, [pc, #12]	; (7bc <set_next_rtc_alarm+0x94>)
     7b0:	4904      	ldr	r1, [pc, #16]	; (7c4 <set_next_rtc_alarm+0x9c>)
     7b2:	2200      	movs	r2, #0
     7b4:	4b0c      	ldr	r3, [pc, #48]	; (7e8 <set_next_rtc_alarm+0xc0>)
     7b6:	4798      	blx	r3
}
     7b8:	b002      	add	sp, #8
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	200008e4 	.word	0x200008e4
     7c0:	00004241 	.word	0x00004241
     7c4:	20000938 	.word	0x20000938
     7c8:	000074a5 	.word	0x000074a5
     7cc:	00000e0f 	.word	0x00000e0f
     7d0:	0000741d 	.word	0x0000741d
     7d4:	0001517f 	.word	0x0001517f
     7d8:	00015180 	.word	0x00015180
     7dc:	00007565 	.word	0x00007565
     7e0:	0000934c 	.word	0x0000934c
     7e4:	00007c39 	.word	0x00007c39
     7e8:	0000426d 	.word	0x0000426d

000007ec <rtc_match_callback>:
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
}

void rtc_match_callback(void)
{
     7ec:	b508      	push	{r3, lr}
	set_next_rtc_alarm(60);
     7ee:	203c      	movs	r0, #60	; 0x3c
     7f0:	4b02      	ldr	r3, [pc, #8]	; (7fc <rtc_match_callback+0x10>)
     7f2:	4798      	blx	r3
	rtc_activity = 1;
     7f4:	2201      	movs	r2, #1
     7f6:	4b02      	ldr	r3, [pc, #8]	; (800 <rtc_match_callback+0x14>)
     7f8:	701a      	strb	r2, [r3, #0]
}
     7fa:	bd08      	pop	{r3, pc}
     7fc:	00000729 	.word	0x00000729
     800:	20000942 	.word	0x20000942

00000804 <GetTimeFromServer>:
	}
}


void GetTimeFromServer(void)
{
     804:	b510      	push	{r4, lr}
     806:	b08c      	sub	sp, #48	; 0x30
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr_in;
	
	/* Initialize the WINC1500 BSP. */
	nm_bsp_init();	
     808:	4b30      	ldr	r3, [pc, #192]	; (8cc <GetTimeFromServer+0xc8>)
     80a:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     80c:	2300      	movs	r3, #0
     80e:	9307      	str	r3, [sp, #28]
     810:	9308      	str	r3, [sp, #32]
     812:	9309      	str	r3, [sp, #36]	; 0x24
     814:	930a      	str	r3, [sp, #40]	; 0x28
     816:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = TimeServerWiFiCallback;
     818:	4b2d      	ldr	r3, [pc, #180]	; (8d0 <GetTimeFromServer+0xcc>)
     81a:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
     81c:	a806      	add	r0, sp, #24
     81e:	4b2d      	ldr	r3, [pc, #180]	; (8d4 <GetTimeFromServer+0xd0>)
     820:	4798      	blx	r3
     822:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
     824:	d003      	beq.n	82e <GetTimeFromServer+0x2a>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
     826:	482c      	ldr	r0, [pc, #176]	; (8d8 <GetTimeFromServer+0xd4>)
     828:	4b2c      	ldr	r3, [pc, #176]	; (8dc <GetTimeFromServer+0xd8>)
     82a:	4798      	blx	r3
     82c:	e7fe      	b.n	82c <GetTimeFromServer+0x28>
		while (1) {
		}
	}

	/* Initialize Socket module */
	socketInit();
     82e:	4b2c      	ldr	r3, [pc, #176]	; (8e0 <GetTimeFromServer+0xdc>)
     830:	4798      	blx	r3

	/* Register socket handler, resolve handler */
	registerSocketCallback(TimeServerCallback, TimeServerResolveCallback);
     832:	482c      	ldr	r0, [pc, #176]	; (8e4 <GetTimeFromServer+0xe0>)
     834:	492c      	ldr	r1, [pc, #176]	; (8e8 <GetTimeFromServer+0xe4>)
     836:	4b2d      	ldr	r3, [pc, #180]	; (8ec <GetTimeFromServer+0xe8>)
     838:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     83a:	23ff      	movs	r3, #255	; 0xff
     83c:	9300      	str	r3, [sp, #0]
     83e:	482c      	ldr	r0, [pc, #176]	; (8f0 <GetTimeFromServer+0xec>)
     840:	2106      	movs	r1, #6
     842:	2202      	movs	r2, #2
     844:	4b2b      	ldr	r3, [pc, #172]	; (8f4 <GetTimeFromServer+0xf0>)
     846:	4c2c      	ldr	r4, [pc, #176]	; (8f8 <GetTimeFromServer+0xf4>)
     848:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (gb_time_is_set == false) 
     84a:	4c2c      	ldr	r4, [pc, #176]	; (8fc <GetTimeFromServer+0xf8>)
     84c:	e022      	b.n	894 <GetTimeFromServer+0x90>
	{
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
     84e:	2000      	movs	r0, #0
     850:	4a2b      	ldr	r2, [pc, #172]	; (900 <GetTimeFromServer+0xfc>)
     852:	4790      	blx	r2

		if (gbConnectedWifi) 
     854:	4a2b      	ldr	r2, [pc, #172]	; (904 <GetTimeFromServer+0x100>)
     856:	7813      	ldrb	r3, [r2, #0]
     858:	2b00      	cmp	r3, #0
     85a:	d01b      	beq.n	894 <GetTimeFromServer+0x90>
		{
			/*
			 * Create the socket for the first time.
			 */
			if (udp_socket < 0) 
     85c:	4b2a      	ldr	r3, [pc, #168]	; (908 <GetTimeFromServer+0x104>)
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	2b7f      	cmp	r3, #127	; 0x7f
     862:	d917      	bls.n	894 <GetTimeFromServer+0x90>
			{
				udp_socket = socket(AF_INET, SOCK_DGRAM, 0);
     864:	2002      	movs	r0, #2
     866:	2102      	movs	r1, #2
     868:	2200      	movs	r2, #0
     86a:	4b28      	ldr	r3, [pc, #160]	; (90c <GetTimeFromServer+0x108>)
     86c:	4798      	blx	r3
     86e:	4b26      	ldr	r3, [pc, #152]	; (908 <GetTimeFromServer+0x104>)
     870:	7018      	strb	r0, [r3, #0]
				if (udp_socket < 0) 
     872:	2800      	cmp	r0, #0
     874:	da03      	bge.n	87e <GetTimeFromServer+0x7a>
				{
					printf("main: UDP Client Socket Creation Failed.\r\n");
     876:	4826      	ldr	r0, [pc, #152]	; (910 <GetTimeFromServer+0x10c>)
     878:	4b26      	ldr	r3, [pc, #152]	; (914 <GetTimeFromServer+0x110>)
     87a:	4798      	blx	r3
					continue;
     87c:	e00a      	b.n	894 <GetTimeFromServer+0x90>
				}

				/* Initialize default socket address structure. */
				addr_in.sin_family = AF_INET;
     87e:	a902      	add	r1, sp, #8
     880:	2302      	movs	r3, #2
     882:	800b      	strh	r3, [r1, #0]
				addr_in.sin_addr.s_addr = _htonl(MAIN_DEFAULT_ADDRESS);
     884:	2301      	movs	r3, #1
     886:	425b      	negs	r3, r3
     888:	604b      	str	r3, [r1, #4]
				addr_in.sin_port = _htons(MAIN_DEFAULT_PORT);
     88a:	4b23      	ldr	r3, [pc, #140]	; (918 <GetTimeFromServer+0x114>)
     88c:	804b      	strh	r3, [r1, #2]

				bind(udp_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     88e:	2210      	movs	r2, #16
     890:	4b22      	ldr	r3, [pc, #136]	; (91c <GetTimeFromServer+0x118>)
     892:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (gb_time_is_set == false) 
     894:	7823      	ldrb	r3, [r4, #0]
     896:	2b00      	cmp	r3, #0
     898:	d0d9      	beq.n	84e <GetTimeFromServer+0x4a>

				bind(udp_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
			}
		}
	}
	close(udp_socket);
     89a:	4b1b      	ldr	r3, [pc, #108]	; (908 <GetTimeFromServer+0x104>)
     89c:	2000      	movs	r0, #0
     89e:	5618      	ldrsb	r0, [r3, r0]
     8a0:	4b1f      	ldr	r3, [pc, #124]	; (920 <GetTimeFromServer+0x11c>)
     8a2:	4798      	blx	r3
	socketDeinit();
     8a4:	4b1f      	ldr	r3, [pc, #124]	; (924 <GetTimeFromServer+0x120>)
     8a6:	4798      	blx	r3
	if(m2m_wifi_disconnect() != M2M_SUCCESS)
     8a8:	4b1f      	ldr	r3, [pc, #124]	; (928 <GetTimeFromServer+0x124>)
     8aa:	4798      	blx	r3
     8ac:	2800      	cmp	r0, #0
     8ae:	d008      	beq.n	8c2 <GetTimeFromServer+0xbe>
		DEBUG_PRINT_ERR("Unable to cleanly disconnect the WiFi connection.");
     8b0:	481e      	ldr	r0, [pc, #120]	; (92c <GetTimeFromServer+0x128>)
     8b2:	4c0a      	ldr	r4, [pc, #40]	; (8dc <GetTimeFromServer+0xd8>)
     8b4:	47a0      	blx	r4
     8b6:	481e      	ldr	r0, [pc, #120]	; (930 <GetTimeFromServer+0x12c>)
     8b8:	47a0      	blx	r4
     8ba:	481e      	ldr	r0, [pc, #120]	; (934 <GetTimeFromServer+0x130>)
     8bc:	491e      	ldr	r1, [pc, #120]	; (938 <GetTimeFromServer+0x134>)
     8be:	4a1f      	ldr	r2, [pc, #124]	; (93c <GetTimeFromServer+0x138>)
     8c0:	47a0      	blx	r4
	m2m_wifi_deinit(NULL);
     8c2:	2000      	movs	r0, #0
     8c4:	4b1e      	ldr	r3, [pc, #120]	; (940 <GetTimeFromServer+0x13c>)
     8c6:	4798      	blx	r3
}
     8c8:	b00c      	add	sp, #48	; 0x30
     8ca:	bd10      	pop	{r4, pc}
     8cc:	00000ee1 	.word	0x00000ee1
     8d0:	00000301 	.word	0x00000301
     8d4:	00001d39 	.word	0x00001d39
     8d8:	00009374 	.word	0x00009374
     8dc:	00007c39 	.word	0x00007c39
     8e0:	000037dd 	.word	0x000037dd
     8e4:	000001f5 	.word	0x000001f5
     8e8:	00000175 	.word	0x00000175
     8ec:	0000385d 	.word	0x0000385d
     8f0:	000090c0 	.word	0x000090c0
     8f4:	000090c8 	.word	0x000090c8
     8f8:	00001f99 	.word	0x00001f99
     8fc:	200000d8 	.word	0x200000d8
     900:	00001da9 	.word	0x00001da9
     904:	200006d4 	.word	0x200006d4
     908:	20000000 	.word	0x20000000
     90c:	00003871 	.word	0x00003871
     910:	0000939c 	.word	0x0000939c
     914:	00007d59 	.word	0x00007d59
     918:	00000a1a 	.word	0x00000a1a
     91c:	00003939 	.word	0x00003939
     920:	00003c45 	.word	0x00003c45
     924:	00003821 	.word	0x00003821
     928:	00001fb5 	.word	0x00001fb5
     92c:	0000927c 	.word	0x0000927c
     930:	000093c8 	.word	0x000093c8
     934:	000092b8 	.word	0x000092b8
     938:	000002a7 	.word	0x000002a7
     93c:	00009648 	.word	0x00009648
     940:	00001d8d 	.word	0x00001d8d

00000944 <main>:

int main(void)
{
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	464f      	mov	r7, r9
     948:	4646      	mov	r6, r8
     94a:	b4c0      	push	{r6, r7}
     94c:	b0ad      	sub	sp, #180	; 0xb4
	tstrWifiInitParam param;
	int8_t ret;
	char ping_msg[64];
	
	/* Initialize the board. */
	system_init();
     94e:	4bd6      	ldr	r3, [pc, #856]	; (ca8 <main+0x364>)
     950:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     952:	aa06      	add	r2, sp, #24
     954:	2380      	movs	r3, #128	; 0x80
     956:	05db      	lsls	r3, r3, #23
     958:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     95a:	2300      	movs	r3, #0
     95c:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
     95e:	21ff      	movs	r1, #255	; 0xff
     960:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
     962:	2100      	movs	r1, #0
     964:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     966:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     968:	2601      	movs	r6, #1
     96a:	2024      	movs	r0, #36	; 0x24
     96c:	5416      	strb	r6, [r2, r0]
	config->transmitter_enable = true;
     96e:	2025      	movs	r0, #37	; 0x25
     970:	5416      	strb	r6, [r2, r0]
	config->clock_polarity_inverted = false;
     972:	2026      	movs	r0, #38	; 0x26
     974:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     976:	2027      	movs	r0, #39	; 0x27
     978:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     97a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     97c:	202c      	movs	r0, #44	; 0x2c
     97e:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     980:	202d      	movs	r0, #45	; 0x2d
     982:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     984:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     986:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     988:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     98a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     98c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     98e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
     990:	2313      	movs	r3, #19
     992:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     994:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     996:	23c4      	movs	r3, #196	; 0xc4
     998:	039b      	lsls	r3, r3, #14
     99a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     99c:	2301      	movs	r3, #1
     99e:	425b      	negs	r3, r3
     9a0:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     9a2:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     9a4:	4bc1      	ldr	r3, [pc, #772]	; (cac <main+0x368>)
     9a6:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     9a8:	4bc1      	ldr	r3, [pc, #772]	; (cb0 <main+0x36c>)
     9aa:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
     9ac:	23e1      	movs	r3, #225	; 0xe1
     9ae:	025b      	lsls	r3, r3, #9
     9b0:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     9b2:	4cc0      	ldr	r4, [pc, #768]	; (cb4 <main+0x370>)
     9b4:	4bc0      	ldr	r3, [pc, #768]	; (cb8 <main+0x374>)
     9b6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     9b8:	49c0      	ldr	r1, [pc, #768]	; (cbc <main+0x378>)
     9ba:	4bc1      	ldr	r3, [pc, #772]	; (cc0 <main+0x37c>)
     9bc:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     9be:	49c1      	ldr	r1, [pc, #772]	; (cc4 <main+0x380>)
     9c0:	4bc1      	ldr	r3, [pc, #772]	; (cc8 <main+0x384>)
     9c2:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     9c4:	1c20      	adds	r0, r4, #0
     9c6:	49c1      	ldr	r1, [pc, #772]	; (ccc <main+0x388>)
     9c8:	4bc1      	ldr	r3, [pc, #772]	; (cd0 <main+0x38c>)
     9ca:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     9cc:	4fc1      	ldr	r7, [pc, #772]	; (cd4 <main+0x390>)
     9ce:	683b      	ldr	r3, [r7, #0]
     9d0:	6898      	ldr	r0, [r3, #8]
     9d2:	2100      	movs	r1, #0
     9d4:	4dc0      	ldr	r5, [pc, #768]	; (cd8 <main+0x394>)
     9d6:	47a8      	blx	r5
	setbuf(stdin, NULL);
     9d8:	683b      	ldr	r3, [r7, #0]
     9da:	6858      	ldr	r0, [r3, #4]
     9dc:	2100      	movs	r1, #0
     9de:	47a8      	blx	r5

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	/* Register USART callback for receiving user input. */
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
     9e0:	1c20      	adds	r0, r4, #0
     9e2:	49be      	ldr	r1, [pc, #760]	; (cdc <main+0x398>)
     9e4:	2201      	movs	r2, #1
     9e6:	4bbe      	ldr	r3, [pc, #760]	; (ce0 <main+0x39c>)
     9e8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9ea:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     9ec:	1c28      	adds	r0, r5, #0
     9ee:	4bbd      	ldr	r3, [pc, #756]	; (ce4 <main+0x3a0>)
     9f0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9f2:	231f      	movs	r3, #31
     9f4:	4018      	ands	r0, r3
     9f6:	4086      	lsls	r6, r0
     9f8:	4bbb      	ldr	r3, [pc, #748]	; (ce8 <main+0x3a4>)
     9fa:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9fc:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9fe:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a00:	2b00      	cmp	r3, #0
     a02:	d1fc      	bne.n	9fe <main+0xba>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a04:	682a      	ldr	r2, [r5, #0]
     a06:	2302      	movs	r3, #2
     a08:	4313      	orrs	r3, r2
     a0a:	602b      	str	r3, [r5, #0]
	/* Initialize the board. */
	system_init();

	/* Initialize the UART console. */
	configure_console();
	DEBUG_PRINT_STATUS("***Application Starting***");
     a0c:	4fb7      	ldr	r7, [pc, #732]	; (cec <main+0x3a8>)
     a0e:	1c38      	adds	r0, r7, #0
     a10:	4cb7      	ldr	r4, [pc, #732]	; (cf0 <main+0x3ac>)
     a12:	47a0      	blx	r4
     a14:	48b7      	ldr	r0, [pc, #732]	; (cf4 <main+0x3b0>)
     a16:	47a0      	blx	r4
     a18:	4eb7      	ldr	r6, [pc, #732]	; (cf8 <main+0x3b4>)
     a1a:	1c30      	adds	r0, r6, #0
     a1c:	4db7      	ldr	r5, [pc, #732]	; (cfc <main+0x3b8>)
     a1e:	47a8      	blx	r5
	DEBUG_PRINT_STATUS("Compiled on "__DATE__ " @ "__TIME__);
     a20:	1c38      	adds	r0, r7, #0
     a22:	47a0      	blx	r4
     a24:	48b6      	ldr	r0, [pc, #728]	; (d00 <main+0x3bc>)
     a26:	47a0      	blx	r4
     a28:	1c30      	adds	r0, r6, #0
     a2a:	47a8      	blx	r5
	
#ifdef ENABLE_AUTO_TIME_SETTING
	DEBUG_PRINT_STATUS("Retrieving time from server... RTC will be automatically set.");
     a2c:	1c38      	adds	r0, r7, #0
     a2e:	47a0      	blx	r4
     a30:	48b4      	ldr	r0, [pc, #720]	; (d04 <main+0x3c0>)
     a32:	47a0      	blx	r4
     a34:	1c30      	adds	r0, r6, #0
     a36:	47a8      	blx	r5
	GetTimeFromServer();
     a38:	4bb3      	ldr	r3, [pc, #716]	; (d08 <main+0x3c4>)
     a3a:	4798      	blx	r3
	my_time.day = 1;
	my_time.month = 1;
#endif

	/* Initialize the WINC1500 BSP. */
	nm_bsp_init();
     a3c:	4bb3      	ldr	r3, [pc, #716]	; (d0c <main+0x3c8>)
     a3e:	4798      	blx	r3
	
	DEBUG_PRINT_STATUS("TimeClient closed. Starting MQTT Phase...");
     a40:	1c38      	adds	r0, r7, #0
     a42:	47a0      	blx	r4
     a44:	48b2      	ldr	r0, [pc, #712]	; (d10 <main+0x3cc>)
     a46:	47a0      	blx	r4
     a48:	1c30      	adds	r0, r6, #0
     a4a:	47a8      	blx	r5
	
	configure_rtc_calendar();
     a4c:	4bb1      	ldr	r3, [pc, #708]	; (d14 <main+0x3d0>)
     a4e:	4798      	blx	r3
	configure_rtc_callbacks();
     a50:	4bb1      	ldr	r3, [pc, #708]	; (d18 <main+0x3d4>)
     a52:	4798      	blx	r3
	rtc_calendar_set_time(&rtc_instance, &my_time);
     a54:	4cb1      	ldr	r4, [pc, #708]	; (d1c <main+0x3d8>)
     a56:	1c20      	adds	r0, r4, #0
     a58:	49b1      	ldr	r1, [pc, #708]	; (d20 <main+0x3dc>)
     a5a:	4bb2      	ldr	r3, [pc, #712]	; (d24 <main+0x3e0>)
     a5c:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
     a5e:	1c20      	adds	r0, r4, #0
     a60:	4bb1      	ldr	r3, [pc, #708]	; (d28 <main+0x3e4>)
     a62:	4798      	blx	r3
	set_next_rtc_alarm(60);
     a64:	203c      	movs	r0, #60	; 0x3c
     a66:	4bb1      	ldr	r3, [pc, #708]	; (d2c <main+0x3e8>)
     a68:	4798      	blx	r3
	
	configure_extint_channel();
     a6a:	4bb1      	ldr	r3, [pc, #708]	; (d30 <main+0x3ec>)
     a6c:	4798      	blx	r3
	configure_extint_callbacks();
     a6e:	4bb1      	ldr	r3, [pc, #708]	; (d34 <main+0x3f0>)
     a70:	4798      	blx	r3
}

static void configure_timer(void)
{
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
     a72:	a806      	add	r0, sp, #24
     a74:	4bb0      	ldr	r3, [pc, #704]	; (d38 <main+0x3f4>)
     a76:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
     a78:	4cb0      	ldr	r4, [pc, #704]	; (d3c <main+0x3f8>)
     a7a:	1c20      	adds	r0, r4, #0
     a7c:	a906      	add	r1, sp, #24
     a7e:	4bb0      	ldr	r3, [pc, #704]	; (d40 <main+0x3fc>)
     a80:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
     a82:	1c20      	adds	r0, r4, #0
     a84:	4baf      	ldr	r3, [pc, #700]	; (d44 <main+0x400>)
     a86:	4798      	blx	r3
static void configure_mqtt(void)
{
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
     a88:	a806      	add	r0, sp, #24
     a8a:	4baf      	ldr	r3, [pc, #700]	; (d48 <main+0x404>)
     a8c:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
     a8e:	9407      	str	r4, [sp, #28]
	mqtt_conf.recv_buffer = mqtt_buffer;
     a90:	4bae      	ldr	r3, [pc, #696]	; (d4c <main+0x408>)
     a92:	9309      	str	r3, [sp, #36]	; 0x24
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
     a94:	2380      	movs	r3, #128	; 0x80
     a96:	930a      	str	r3, [sp, #40]	; 0x28

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
     a98:	48ad      	ldr	r0, [pc, #692]	; (d50 <main+0x40c>)
     a9a:	a906      	add	r1, sp, #24
     a9c:	4bad      	ldr	r3, [pc, #692]	; (d54 <main+0x410>)
     a9e:	4798      	blx	r3
     aa0:	1e01      	subs	r1, r0, #0
	if (result < 0) {
     aa2:	da03      	bge.n	aac <main+0x168>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
     aa4:	48ac      	ldr	r0, [pc, #688]	; (d58 <main+0x414>)
     aa6:	4b92      	ldr	r3, [pc, #584]	; (cf0 <main+0x3ac>)
     aa8:	4798      	blx	r3
     aaa:	e7fe      	b.n	aaa <main+0x166>
		while (1);
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
     aac:	48a8      	ldr	r0, [pc, #672]	; (d50 <main+0x40c>)
     aae:	49ab      	ldr	r1, [pc, #684]	; (d5c <main+0x418>)
     ab0:	4bab      	ldr	r3, [pc, #684]	; (d60 <main+0x41c>)
     ab2:	4798      	blx	r3
     ab4:	1e01      	subs	r1, r0, #0
	if (result < 0) {
     ab6:	da03      	bge.n	ac0 <main+0x17c>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
     ab8:	48aa      	ldr	r0, [pc, #680]	; (d64 <main+0x420>)
     aba:	4b8d      	ldr	r3, [pc, #564]	; (cf0 <main+0x3ac>)
     abc:	4798      	blx	r3
     abe:	e7fe      	b.n	abe <main+0x17a>
	/* Initialize the Timer. */
	configure_timer();

	/* Initialize the MQTT service. */
	configure_mqtt();
	mqtt_connection_state = CONNECTING;
     ac0:	2201      	movs	r2, #1
     ac2:	4ba9      	ldr	r3, [pc, #676]	; (d68 <main+0x424>)
     ac4:	701a      	strb	r2, [r3, #0]

	/* Setup user name first */
	strcpy(mqtt_user, "reed_switch");
     ac6:	4ba9      	ldr	r3, [pc, #676]	; (d6c <main+0x428>)
     ac8:	4aa9      	ldr	r2, [pc, #676]	; (d70 <main+0x42c>)
     aca:	1c19      	adds	r1, r3, #0
     acc:	ca31      	ldmia	r2!, {r0, r4, r5}
     ace:	c131      	stmia	r1!, {r0, r4, r5}
	sprintf(glb_topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user);
     ad0:	4da8      	ldr	r5, [pc, #672]	; (d74 <main+0x430>)
     ad2:	1c28      	adds	r0, r5, #0
     ad4:	49a8      	ldr	r1, [pc, #672]	; (d78 <main+0x434>)
     ad6:	4aa9      	ldr	r2, [pc, #676]	; (d7c <main+0x438>)
     ad8:	4ca9      	ldr	r4, [pc, #676]	; (d80 <main+0x43c>)
     ada:	47a0      	blx	r4
	DEBUG_PRINT_STATUS("Publishing to topic: %s", glb_topic);
     adc:	4883      	ldr	r0, [pc, #524]	; (cec <main+0x3a8>)
     ade:	4c84      	ldr	r4, [pc, #528]	; (cf0 <main+0x3ac>)
     ae0:	47a0      	blx	r4
     ae2:	48a8      	ldr	r0, [pc, #672]	; (d84 <main+0x440>)
     ae4:	1c29      	adds	r1, r5, #0
     ae6:	47a0      	blx	r4
     ae8:	4883      	ldr	r0, [pc, #524]	; (cf8 <main+0x3b4>)
     aea:	4b84      	ldr	r3, [pc, #528]	; (cfc <main+0x3b8>)
     aec:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     aee:	2300      	movs	r3, #0
     af0:	9327      	str	r3, [sp, #156]	; 0x9c
     af2:	9328      	str	r3, [sp, #160]	; 0xa0
     af4:	9329      	str	r3, [sp, #164]	; 0xa4
     af6:	932a      	str	r3, [sp, #168]	; 0xa8
     af8:	932b      	str	r3, [sp, #172]	; 0xac
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
     afa:	4ba3      	ldr	r3, [pc, #652]	; (d88 <main+0x444>)
     afc:	9326      	str	r3, [sp, #152]	; 0x98
	ret = m2m_wifi_init(&param);
     afe:	a826      	add	r0, sp, #152	; 0x98
     b00:	4ba2      	ldr	r3, [pc, #648]	; (d8c <main+0x448>)
     b02:	4798      	blx	r3
     b04:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) 
     b06:	d00b      	beq.n	b20 <main+0x1dc>
	{
		DEBUG_PRINT_ERR("Call Error: retval=%d", ret);
     b08:	48a1      	ldr	r0, [pc, #644]	; (d90 <main+0x44c>)
     b0a:	4c79      	ldr	r4, [pc, #484]	; (cf0 <main+0x3ac>)
     b0c:	47a0      	blx	r4
     b0e:	48a1      	ldr	r0, [pc, #644]	; (d94 <main+0x450>)
     b10:	1c29      	adds	r1, r5, #0
     b12:	47a0      	blx	r4
     b14:	48a0      	ldr	r0, [pc, #640]	; (d98 <main+0x454>)
     b16:	21ba      	movs	r1, #186	; 0xba
     b18:	0089      	lsls	r1, r1, #2
     b1a:	4aa0      	ldr	r2, [pc, #640]	; (d9c <main+0x458>)
     b1c:	47a0      	blx	r4
     b1e:	e7fe      	b.n	b1e <main+0x1da>
		while (1);
	}

	/* Initialize socket interface. */
	socketInit();
     b20:	4b9f      	ldr	r3, [pc, #636]	; (da0 <main+0x45c>)
     b22:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
     b24:	489f      	ldr	r0, [pc, #636]	; (da4 <main+0x460>)
     b26:	49a0      	ldr	r1, [pc, #640]	; (da8 <main+0x464>)
     b28:	4ba0      	ldr	r3, [pc, #640]	; (dac <main+0x468>)
     b2a:	4798      	blx	r3
		DEBUG_PRINT_STATUS("Sleep mode is M2M_PS_MANUAL");
		m2m_wifi_set_sleep_mode(MAIN_PS_SLEEP_MODE, 1);
	} 
	else if (MAIN_PS_SLEEP_MODE == M2M_PS_DEEP_AUTOMATIC) 
	{
		DEBUG_PRINT_STATUS("Sleep mode is M2M_PS_DEEP_AUTOMATIC");
     b2c:	4f6f      	ldr	r7, [pc, #444]	; (cec <main+0x3a8>)
     b2e:	1c38      	adds	r0, r7, #0
     b30:	4c6f      	ldr	r4, [pc, #444]	; (cf0 <main+0x3ac>)
     b32:	47a0      	blx	r4
     b34:	489e      	ldr	r0, [pc, #632]	; (db0 <main+0x46c>)
     b36:	47a0      	blx	r4
     b38:	4e6f      	ldr	r6, [pc, #444]	; (cf8 <main+0x3b4>)
     b3a:	1c30      	adds	r0, r6, #0
     b3c:	4a6f      	ldr	r2, [pc, #444]	; (cfc <main+0x3b8>)
     b3e:	4690      	mov	r8, r2
     b40:	4790      	blx	r2
		tstrM2mLsnInt strM2mLsnInt;
		m2m_wifi_set_sleep_mode(M2M_PS_DEEP_AUTOMATIC, 1);
     b42:	2003      	movs	r0, #3
     b44:	2101      	movs	r1, #1
     b46:	4b9b      	ldr	r3, [pc, #620]	; (db4 <main+0x470>)
     b48:	4798      	blx	r3
		strM2mLsnInt.u16LsnInt = M2M_LISTEN_INTERVAL;
     b4a:	a806      	add	r0, sp, #24
     b4c:	230a      	movs	r3, #10
     b4e:	8003      	strh	r3, [r0, #0]
		m2m_wifi_set_lsn_int(&strM2mLsnInt);
     b50:	4b99      	ldr	r3, [pc, #612]	; (db8 <main+0x474>)
     b52:	4798      	blx	r3
	const enum system_sleepmode sleep_mode)
{
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
     b54:	4b99      	ldr	r3, [pc, #612]	; (dbc <main+0x478>)
     b56:	6859      	ldr	r1, [r3, #4]
     b58:	22c0      	movs	r2, #192	; 0xc0
     b5a:	0092      	lsls	r2, r2, #2
     b5c:	430a      	orrs	r2, r1
     b5e:	605a      	str	r2, [r3, #4]

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     b60:	4b97      	ldr	r3, [pc, #604]	; (dc0 <main+0x47c>)
     b62:	691a      	ldr	r2, [r3, #16]
     b64:	2104      	movs	r1, #4
     b66:	438a      	bics	r2, r1
     b68:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
     b6a:	2200      	movs	r2, #0
     b6c:	4b95      	ldr	r3, [pc, #596]	; (dc4 <main+0x480>)
     b6e:	705a      	strb	r2, [r3, #1]
	}
	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_0);
	
	/* Connect to router. */
	DEBUG_PRINT_STATUS("Connecting to WiFi...");
     b70:	1c38      	adds	r0, r7, #0
     b72:	47a0      	blx	r4
     b74:	4894      	ldr	r0, [pc, #592]	; (dc8 <main+0x484>)
     b76:	47a0      	blx	r4
     b78:	1c30      	adds	r0, r6, #0
     b7a:	47c0      	blx	r8
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
     b7c:	23ff      	movs	r3, #255	; 0xff
     b7e:	9300      	str	r3, [sp, #0]
     b80:	4892      	ldr	r0, [pc, #584]	; (dcc <main+0x488>)
     b82:	2106      	movs	r1, #6
     b84:	2202      	movs	r2, #2
     b86:	4b92      	ldr	r3, [pc, #584]	; (dd0 <main+0x48c>)
     b88:	4d92      	ldr	r5, [pc, #584]	; (dd4 <main+0x490>)
     b8a:	47a8      	blx	r5
	DEBUG_PRINT_STATUS("Entering main loop...");
     b8c:	1c38      	adds	r0, r7, #0
     b8e:	47a0      	blx	r4
     b90:	4891      	ldr	r0, [pc, #580]	; (dd8 <main+0x494>)
     b92:	47a0      	blx	r4
     b94:	1c30      	adds	r0, r6, #0
     b96:	47c0      	blx	r8
	while (1) 
	{
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
     b98:	4e90      	ldr	r6, [pc, #576]	; (ddc <main+0x498>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
     b9a:	4d68      	ldr	r5, [pc, #416]	; (d3c <main+0x3f8>)
     b9c:	4c90      	ldr	r4, [pc, #576]	; (de0 <main+0x49c>)
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	DEBUG_PRINT_STATUS("Entering main loop...");
	while (1) 
	{
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
     b9e:	2000      	movs	r0, #0
     ba0:	47b0      	blx	r6
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
     ba2:	1c28      	adds	r0, r5, #0
     ba4:	47a0      	blx	r4
		switch(mqtt_connection_state)
     ba6:	4b70      	ldr	r3, [pc, #448]	; (d68 <main+0x424>)
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b00      	cmp	r3, #0
     bac:	d002      	beq.n	bb4 <main+0x270>
     bae:	2b02      	cmp	r3, #2
     bb0:	d010      	beq.n	bd4 <main+0x290>
     bb2:	e7f4      	b.n	b9e <main+0x25a>
		{
			case DISCONNECTED:
				mqtt_connect(&mqtt_inst, main_mqtt_broker);
     bb4:	4866      	ldr	r0, [pc, #408]	; (d50 <main+0x40c>)
     bb6:	498b      	ldr	r1, [pc, #556]	; (de4 <main+0x4a0>)
     bb8:	4b8b      	ldr	r3, [pc, #556]	; (de8 <main+0x4a4>)
     bba:	4798      	blx	r3
				DEBUG_PRINT_STATUS("Connecting to MQTT Broker...");
     bbc:	484b      	ldr	r0, [pc, #300]	; (cec <main+0x3a8>)
     bbe:	4f4c      	ldr	r7, [pc, #304]	; (cf0 <main+0x3ac>)
     bc0:	47b8      	blx	r7
     bc2:	488a      	ldr	r0, [pc, #552]	; (dec <main+0x4a8>)
     bc4:	47b8      	blx	r7
     bc6:	484c      	ldr	r0, [pc, #304]	; (cf8 <main+0x3b4>)
     bc8:	4b4c      	ldr	r3, [pc, #304]	; (cfc <main+0x3b8>)
     bca:	4798      	blx	r3
				mqtt_connection_state = CONNECTING;
     bcc:	2201      	movs	r2, #1
     bce:	4b66      	ldr	r3, [pc, #408]	; (d68 <main+0x424>)
     bd0:	701a      	strb	r2, [r3, #0]
				break;
     bd2:	e7e4      	b.n	b9e <main+0x25a>
				
			case CONNECTED:
				if(new_activity)
     bd4:	4b86      	ldr	r3, [pc, #536]	; (df0 <main+0x4ac>)
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	2b00      	cmp	r3, #0
     bda:	d032      	beq.n	c42 <main+0x2fe>
				{
					new_activity = 0;
     bdc:	2000      	movs	r0, #0
     bde:	4680      	mov	r8, r0
     be0:	4b83      	ldr	r3, [pc, #524]	; (df0 <main+0x4ac>)
     be2:	7018      	strb	r0, [r3, #0]
					rtc_calendar_get_time(&rtc_instance, &my_time);
     be4:	4f4e      	ldr	r7, [pc, #312]	; (d20 <main+0x3dc>)
     be6:	484d      	ldr	r0, [pc, #308]	; (d1c <main+0x3d8>)
     be8:	1c39      	adds	r1, r7, #0
     bea:	4b82      	ldr	r3, [pc, #520]	; (df4 <main+0x4b0>)
     bec:	4798      	blx	r3
					sprintf(ping_msg, "%s @ %d/%d/%d %d:%d:%d", glb_msg, my_time.day, my_time.month, my_time.year, my_time.hour, my_time.minute, my_time.second);
     bee:	4b82      	ldr	r3, [pc, #520]	; (df8 <main+0x4b4>)
     bf0:	4699      	mov	r9, r3
     bf2:	793b      	ldrb	r3, [r7, #4]
     bf4:	797a      	ldrb	r2, [r7, #5]
     bf6:	9200      	str	r2, [sp, #0]
     bf8:	88fa      	ldrh	r2, [r7, #6]
     bfa:	9201      	str	r2, [sp, #4]
     bfc:	78ba      	ldrb	r2, [r7, #2]
     bfe:	9202      	str	r2, [sp, #8]
     c00:	787a      	ldrb	r2, [r7, #1]
     c02:	9203      	str	r2, [sp, #12]
     c04:	783a      	ldrb	r2, [r7, #0]
     c06:	9204      	str	r2, [sp, #16]
     c08:	a816      	add	r0, sp, #88	; 0x58
     c0a:	497c      	ldr	r1, [pc, #496]	; (dfc <main+0x4b8>)
     c0c:	464a      	mov	r2, r9
     c0e:	4f5c      	ldr	r7, [pc, #368]	; (d80 <main+0x43c>)
     c10:	47b8      	blx	r7
					DEBUG_PRINT_STATUS("Sending: '%s' to %s", glb_msg, MAIN_CHAT_TOPIC);
     c12:	4836      	ldr	r0, [pc, #216]	; (cec <main+0x3a8>)
     c14:	4f36      	ldr	r7, [pc, #216]	; (cf0 <main+0x3ac>)
     c16:	47b8      	blx	r7
     c18:	4879      	ldr	r0, [pc, #484]	; (e00 <main+0x4bc>)
     c1a:	4649      	mov	r1, r9
     c1c:	4a57      	ldr	r2, [pc, #348]	; (d7c <main+0x438>)
     c1e:	47b8      	blx	r7
     c20:	4835      	ldr	r0, [pc, #212]	; (cf8 <main+0x3b4>)
     c22:	4b36      	ldr	r3, [pc, #216]	; (cfc <main+0x3b8>)
     c24:	4798      	blx	r3
					mqtt_publish(&mqtt_inst, glb_topic, ping_msg, strlen(ping_msg), 0, 1);
     c26:	a816      	add	r0, sp, #88	; 0x58
     c28:	4b76      	ldr	r3, [pc, #472]	; (e04 <main+0x4c0>)
     c2a:	4798      	blx	r3
     c2c:	1c03      	adds	r3, r0, #0
     c2e:	4640      	mov	r0, r8
     c30:	9000      	str	r0, [sp, #0]
     c32:	2201      	movs	r2, #1
     c34:	9201      	str	r2, [sp, #4]
     c36:	4846      	ldr	r0, [pc, #280]	; (d50 <main+0x40c>)
     c38:	494e      	ldr	r1, [pc, #312]	; (d74 <main+0x430>)
     c3a:	aa16      	add	r2, sp, #88	; 0x58
     c3c:	4f72      	ldr	r7, [pc, #456]	; (e08 <main+0x4c4>)
     c3e:	47b8      	blx	r7
     c40:	e7ad      	b.n	b9e <main+0x25a>
				}
				else if (rtc_activity)
     c42:	4b72      	ldr	r3, [pc, #456]	; (e0c <main+0x4c8>)
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	2b00      	cmp	r3, #0
     c48:	d0a9      	beq.n	b9e <main+0x25a>
				{
					rtc_activity = 0;
     c4a:	2200      	movs	r2, #0
     c4c:	4690      	mov	r8, r2
     c4e:	4b6f      	ldr	r3, [pc, #444]	; (e0c <main+0x4c8>)
     c50:	701a      	strb	r2, [r3, #0]
					rtc_calendar_get_time(&rtc_instance, &my_time);
     c52:	4f33      	ldr	r7, [pc, #204]	; (d20 <main+0x3dc>)
     c54:	4831      	ldr	r0, [pc, #196]	; (d1c <main+0x3d8>)
     c56:	1c39      	adds	r1, r7, #0
     c58:	4b66      	ldr	r3, [pc, #408]	; (df4 <main+0x4b0>)
     c5a:	4798      	blx	r3
					sprintf(ping_msg, "Ping @ %d/%d/%d %d:%d:%d", my_time.month, my_time.day, my_time.year, my_time.hour, my_time.minute, my_time.second);
     c5c:	797a      	ldrb	r2, [r7, #5]
     c5e:	793b      	ldrb	r3, [r7, #4]
     c60:	88f9      	ldrh	r1, [r7, #6]
     c62:	9100      	str	r1, [sp, #0]
     c64:	78b9      	ldrb	r1, [r7, #2]
     c66:	9101      	str	r1, [sp, #4]
     c68:	7879      	ldrb	r1, [r7, #1]
     c6a:	9102      	str	r1, [sp, #8]
     c6c:	7839      	ldrb	r1, [r7, #0]
     c6e:	9103      	str	r1, [sp, #12]
     c70:	a816      	add	r0, sp, #88	; 0x58
     c72:	4967      	ldr	r1, [pc, #412]	; (e10 <main+0x4cc>)
     c74:	4f42      	ldr	r7, [pc, #264]	; (d80 <main+0x43c>)
     c76:	47b8      	blx	r7
					DEBUG_PRINT_STATUS("Sending ping message: %s", ping_msg);
     c78:	481c      	ldr	r0, [pc, #112]	; (cec <main+0x3a8>)
     c7a:	4f1d      	ldr	r7, [pc, #116]	; (cf0 <main+0x3ac>)
     c7c:	47b8      	blx	r7
     c7e:	4865      	ldr	r0, [pc, #404]	; (e14 <main+0x4d0>)
     c80:	a916      	add	r1, sp, #88	; 0x58
     c82:	47b8      	blx	r7
     c84:	481c      	ldr	r0, [pc, #112]	; (cf8 <main+0x3b4>)
     c86:	4b1d      	ldr	r3, [pc, #116]	; (cfc <main+0x3b8>)
     c88:	4798      	blx	r3
					mqtt_publish(&mqtt_inst, "bs/monitor/ping", ping_msg, strlen(ping_msg), 0, 1);
     c8a:	a816      	add	r0, sp, #88	; 0x58
     c8c:	4b5d      	ldr	r3, [pc, #372]	; (e04 <main+0x4c0>)
     c8e:	4798      	blx	r3
     c90:	1c03      	adds	r3, r0, #0
     c92:	4642      	mov	r2, r8
     c94:	9200      	str	r2, [sp, #0]
     c96:	2201      	movs	r2, #1
     c98:	9201      	str	r2, [sp, #4]
     c9a:	482d      	ldr	r0, [pc, #180]	; (d50 <main+0x40c>)
     c9c:	495e      	ldr	r1, [pc, #376]	; (e18 <main+0x4d4>)
     c9e:	aa16      	add	r2, sp, #88	; 0x58
     ca0:	4f59      	ldr	r7, [pc, #356]	; (e08 <main+0x4c4>)
     ca2:	47b8      	blx	r7
     ca4:	e77b      	b.n	b9e <main+0x25a>
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	00005b95 	.word	0x00005b95
     cac:	002a0003 	.word	0x002a0003
     cb0:	002b0003 	.word	0x002b0003
     cb4:	2000080c 	.word	0x2000080c
     cb8:	20000bf4 	.word	0x20000bf4
     cbc:	0000051d 	.word	0x0000051d
     cc0:	20000bf0 	.word	0x20000bf0
     cc4:	000004f1 	.word	0x000004f1
     cc8:	20000bec 	.word	0x20000bec
     ccc:	42001800 	.word	0x42001800
     cd0:	00004e2d 	.word	0x00004e2d
     cd4:	20000078 	.word	0x20000078
     cd8:	00007d91 	.word	0x00007d91
     cdc:	00000111 	.word	0x00000111
     ce0:	000051d9 	.word	0x000051d9
     ce4:	0000492d 	.word	0x0000492d
     ce8:	e000e100 	.word	0xe000e100
     cec:	000091a8 	.word	0x000091a8
     cf0:	00007c39 	.word	0x00007c39
     cf4:	000093fc 	.word	0x000093fc
     cf8:	000093c4 	.word	0x000093c4
     cfc:	00007d59 	.word	0x00007d59
     d00:	00009418 	.word	0x00009418
     d04:	0000943c 	.word	0x0000943c
     d08:	00000805 	.word	0x00000805
     d0c:	00000ee1 	.word	0x00000ee1
     d10:	0000947c 	.word	0x0000947c
     d14:	000006b1 	.word	0x000006b1
     d18:	00000701 	.word	0x00000701
     d1c:	200008e4 	.word	0x200008e4
     d20:	2000099c 	.word	0x2000099c
     d24:	00004229 	.word	0x00004229
     d28:	00004359 	.word	0x00004359
     d2c:	00000729 	.word	0x00000729
     d30:	0000065d 	.word	0x0000065d
     d34:	0000068d 	.word	0x0000068d
     d38:	0000645d 	.word	0x0000645d
     d3c:	20000944 	.word	0x20000944
     d40:	00006469 	.word	0x00006469
     d44:	00006515 	.word	0x00006515
     d48:	000066a9 	.word	0x000066a9
     d4c:	20000718 	.word	0x20000718
     d50:	20000798 	.word	0x20000798
     d54:	000066cd 	.word	0x000066cd
     d58:	000094a8 	.word	0x000094a8
     d5c:	00000535 	.word	0x00000535
     d60:	00006759 	.word	0x00006759
     d64:	000094dc 	.word	0x000094dc
     d68:	200009a4 	.word	0x200009a4
     d6c:	20000694 	.word	0x20000694
     d70:	00009510 	.word	0x00009510
     d74:	200009a8 	.word	0x200009a8
     d78:	0000951c 	.word	0x0000951c
     d7c:	00009524 	.word	0x00009524
     d80:	00007eb1 	.word	0x00007eb1
     d84:	00009530 	.word	0x00009530
     d88:	000003ad 	.word	0x000003ad
     d8c:	00001d39 	.word	0x00001d39
     d90:	0000927c 	.word	0x0000927c
     d94:	00009548 	.word	0x00009548
     d98:	000092b8 	.word	0x000092b8
     d9c:	0000965c 	.word	0x0000965c
     da0:	000037dd 	.word	0x000037dd
     da4:	000003a1 	.word	0x000003a1
     da8:	00000395 	.word	0x00000395
     dac:	0000385d 	.word	0x0000385d
     db0:	00009560 	.word	0x00009560
     db4:	00001ff9 	.word	0x00001ff9
     db8:	00001fd9 	.word	0x00001fd9
     dbc:	41004000 	.word	0x41004000
     dc0:	e000ed00 	.word	0xe000ed00
     dc4:	40000400 	.word	0x40000400
     dc8:	00009584 	.word	0x00009584
     dcc:	000090c0 	.word	0x000090c0
     dd0:	000090c8 	.word	0x000090c8
     dd4:	00001f99 	.word	0x00001f99
     dd8:	0000959c 	.word	0x0000959c
     ddc:	00001da9 	.word	0x00001da9
     de0:	000065a1 	.word	0x000065a1
     de4:	00008f68 	.word	0x00008f68
     de8:	000067bd 	.word	0x000067bd
     dec:	000095b4 	.word	0x000095b4
     df0:	20000943 	.word	0x20000943
     df4:	00004241 	.word	0x00004241
     df8:	200008f8 	.word	0x200008f8
     dfc:	000095d4 	.word	0x000095d4
     e00:	000095ec 	.word	0x000095ec
     e04:	00007f19 	.word	0x00007f19
     e08:	00006b81 	.word	0x00006b81
     e0c:	20000942 	.word	0x20000942
     e10:	00009600 	.word	0x00009600
     e14:	0000961c 	.word	0x0000961c
     e18:	00009638 	.word	0x00009638

00000e1c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     e1c:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     e1e:	2000      	movs	r0, #0
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <delay_init+0x28>)
     e22:	4798      	blx	r3
	cycles_per_ms /= 1000;
     e24:	4c08      	ldr	r4, [pc, #32]	; (e48 <delay_init+0x2c>)
     e26:	21fa      	movs	r1, #250	; 0xfa
     e28:	0089      	lsls	r1, r1, #2
     e2a:	47a0      	blx	r4
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <delay_init+0x30>)
     e2e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     e30:	21fa      	movs	r1, #250	; 0xfa
     e32:	0089      	lsls	r1, r1, #2
     e34:	47a0      	blx	r4
     e36:	4b06      	ldr	r3, [pc, #24]	; (e50 <delay_init+0x34>)
     e38:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e3a:	2205      	movs	r2, #5
     e3c:	4b05      	ldr	r3, [pc, #20]	; (e54 <delay_init+0x38>)
     e3e:	601a      	str	r2, [r3, #0]
}
     e40:	bd10      	pop	{r4, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00005971 	.word	0x00005971
     e48:	0000741d 	.word	0x0000741d
     e4c:	20000008 	.word	0x20000008
     e50:	20000004 	.word	0x20000004
     e54:	e000e010 	.word	0xe000e010

00000e58 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     e58:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     e5a:	4b08      	ldr	r3, [pc, #32]	; (e7c <delay_cycles_ms+0x24>)
     e5c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     e5e:	4a08      	ldr	r2, [pc, #32]	; (e80 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     e60:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e62:	2180      	movs	r1, #128	; 0x80
     e64:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     e66:	e006      	b.n	e76 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     e68:	2c00      	cmp	r4, #0
     e6a:	d004      	beq.n	e76 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     e6c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     e6e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e70:	6813      	ldr	r3, [r2, #0]
     e72:	420b      	tst	r3, r1
     e74:	d0fc      	beq.n	e70 <delay_cycles_ms+0x18>
     e76:	3801      	subs	r0, #1
     e78:	d2f6      	bcs.n	e68 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     e7a:	bd30      	pop	{r4, r5, pc}
     e7c:	20000008 	.word	0x20000008
     e80:	e000e010 	.word	0xe000e010

00000e84 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     e84:	b508      	push	{r3, lr}
	if (gpfIsr) {
     e86:	4b03      	ldr	r3, [pc, #12]	; (e94 <chip_isr+0x10>)
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d000      	beq.n	e90 <chip_isr+0xc>
		gpfIsr();
     e8e:	4798      	blx	r3
	}
}
     e90:	bd08      	pop	{r3, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	20000840 	.word	0x20000840

00000e98 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     e98:	b538      	push	{r3, r4, r5, lr}
	while (u32TimeMsec--) {
     e9a:	2800      	cmp	r0, #0
     e9c:	d006      	beq.n	eac <nm_bsp_sleep+0x14>
     e9e:	1c04      	adds	r4, r0, #0
		delay_ms(1);
     ea0:	4d03      	ldr	r5, [pc, #12]	; (eb0 <nm_bsp_sleep+0x18>)
     ea2:	2001      	movs	r0, #1
     ea4:	47a8      	blx	r5
     ea6:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     ea8:	2c00      	cmp	r4, #0
     eaa:	d1fa      	bne.n	ea2 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     eac:	bd38      	pop	{r3, r4, r5, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	00000e59 	.word	0x00000e59

00000eb4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     eb6:	4c08      	ldr	r4, [pc, #32]	; (ed8 <nm_bsp_reset+0x24>)
     eb8:	2780      	movs	r7, #128	; 0x80
     eba:	057f      	lsls	r7, r7, #21
     ebc:	6167      	str	r7, [r4, #20]
     ebe:	2680      	movs	r6, #128	; 0x80
     ec0:	0536      	lsls	r6, r6, #20
     ec2:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
     ec4:	2064      	movs	r0, #100	; 0x64
     ec6:	4d05      	ldr	r5, [pc, #20]	; (edc <nm_bsp_reset+0x28>)
     ec8:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     eca:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(10);
     ecc:	200a      	movs	r0, #10
     ece:	47a8      	blx	r5
     ed0:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(100);
     ed2:	2064      	movs	r0, #100	; 0x64
     ed4:	47a8      	blx	r5
}
     ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ed8:	41004400 	.word	0x41004400
     edc:	00000e99 	.word	0x00000e99

00000ee0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	b082      	sub	sp, #8
	gpfIsr = NULL;
     ee4:	2300      	movs	r3, #0
     ee6:	4a13      	ldr	r2, [pc, #76]	; (f34 <nm_bsp_init+0x54>)
     ee8:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     eea:	ac01      	add	r4, sp, #4
     eec:	2501      	movs	r5, #1
     eee:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     ef0:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ef2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     ef4:	201b      	movs	r0, #27
     ef6:	1c21      	adds	r1, r4, #0
     ef8:	4e0f      	ldr	r6, [pc, #60]	; (f38 <nm_bsp_init+0x58>)
     efa:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     efc:	201c      	movs	r0, #28
     efe:	1c21      	adds	r1, r4, #0
     f00:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     f02:	2028      	movs	r0, #40	; 0x28
     f04:	1c21      	adds	r1, r4, #0
     f06:	47b0      	blx	r6

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     f08:	4b0c      	ldr	r3, [pc, #48]	; (f3c <nm_bsp_init+0x5c>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	421d      	tst	r5, r3
     f0e:	d003      	beq.n	f18 <nm_bsp_init+0x38>
     f10:	4b0a      	ldr	r3, [pc, #40]	; (f3c <nm_bsp_init+0x5c>)
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	079a      	lsls	r2, r3, #30
     f16:	d401      	bmi.n	f1c <nm_bsp_init+0x3c>
	    delay_init();
     f18:	4b09      	ldr	r3, [pc, #36]	; (f40 <nm_bsp_init+0x60>)
     f1a:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     f1c:	4b09      	ldr	r3, [pc, #36]	; (f44 <nm_bsp_init+0x64>)
     f1e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     f20:	2201      	movs	r2, #1
     f22:	4b09      	ldr	r3, [pc, #36]	; (f48 <nm_bsp_init+0x68>)
     f24:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f2a:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     f2c:	2000      	movs	r0, #0
     f2e:	b002      	add	sp, #8
     f30:	bd70      	pop	{r4, r5, r6, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	20000840 	.word	0x20000840
     f38:	0000411d 	.word	0x0000411d
     f3c:	e000e010 	.word	0xe000e010
     f40:	00000e1d 	.word	0x00000e1d
     f44:	00000eb5 	.word	0x00000eb5
     f48:	20000014 	.word	0x20000014

00000f4c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     f4c:	b510      	push	{r4, lr}
     f4e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     f50:	4b0e      	ldr	r3, [pc, #56]	; (f8c <nm_bsp_register_isr+0x40>)
     f52:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     f54:	ac01      	add	r4, sp, #4
     f56:	1c20      	adds	r0, r4, #0
     f58:	4b0d      	ldr	r3, [pc, #52]	; (f90 <nm_bsp_register_isr+0x44>)
     f5a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     f5c:	2329      	movs	r3, #41	; 0x29
     f5e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     f60:	2300      	movs	r3, #0
     f62:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     f64:	2301      	movs	r3, #1
     f66:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     f68:	2302      	movs	r3, #2
     f6a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     f6c:	2009      	movs	r0, #9
     f6e:	1c21      	adds	r1, r4, #0
     f70:	4b08      	ldr	r3, [pc, #32]	; (f94 <nm_bsp_register_isr+0x48>)
     f72:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     f74:	4808      	ldr	r0, [pc, #32]	; (f98 <nm_bsp_register_isr+0x4c>)
     f76:	2109      	movs	r1, #9
     f78:	2200      	movs	r2, #0
     f7a:	4b08      	ldr	r3, [pc, #32]	; (f9c <nm_bsp_register_isr+0x50>)
     f7c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     f7e:	2009      	movs	r0, #9
     f80:	2100      	movs	r1, #0
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <nm_bsp_register_isr+0x54>)
     f84:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     f86:	b004      	add	sp, #16
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000840 	.word	0x20000840
     f90:	00004091 	.word	0x00004091
     f94:	000040a5 	.word	0x000040a5
     f98:	00000e85 	.word	0x00000e85
     f9c:	00003f2d 	.word	0x00003f2d
     fa0:	00003f5d 	.word	0x00003f5d

00000fa4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     fa4:	b508      	push	{r3, lr}
	if (u8Enable) {
     fa6:	2800      	cmp	r0, #0
     fa8:	d004      	beq.n	fb4 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     faa:	2009      	movs	r0, #9
     fac:	2100      	movs	r1, #0
     fae:	4b04      	ldr	r3, [pc, #16]	; (fc0 <nm_bsp_interrupt_ctrl+0x1c>)
     fb0:	4798      	blx	r3
     fb2:	e003      	b.n	fbc <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     fb4:	2009      	movs	r0, #9
     fb6:	2100      	movs	r1, #0
     fb8:	4b02      	ldr	r3, [pc, #8]	; (fc4 <nm_bsp_interrupt_ctrl+0x20>)
     fba:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     fbc:	bd08      	pop	{r3, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	00003f5d 	.word	0x00003f5d
     fc4:	00003f7d 	.word	0x00003f7d

00000fc8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     fc8:	b530      	push	{r4, r5, lr}
     fca:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     fcc:	4c2e      	ldr	r4, [pc, #184]	; (1088 <nm_bus_init+0xc0>)
     fce:	230e      	movs	r3, #14
     fd0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     fd2:	2300      	movs	r3, #0
     fd4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     fd6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fd8:	a901      	add	r1, sp, #4
     fda:	2201      	movs	r2, #1
     fdc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     fde:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     fe0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     fe2:	200e      	movs	r0, #14
     fe4:	4b29      	ldr	r3, [pc, #164]	; (108c <nm_bus_init+0xc4>)
     fe6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     fe8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     fea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     fec:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     fee:	2900      	cmp	r1, #0
     ff0:	d103      	bne.n	ffa <nm_bus_init+0x32>
		return &(ports[port_index]->Group[group_index]);
     ff2:	095a      	lsrs	r2, r3, #5
     ff4:	01d2      	lsls	r2, r2, #7
     ff6:	4826      	ldr	r0, [pc, #152]	; (1090 <nm_bus_init+0xc8>)
     ff8:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ffa:	211f      	movs	r1, #31
     ffc:	400b      	ands	r3, r1
     ffe:	2101      	movs	r1, #1
    1000:	1c08      	adds	r0, r1, #0
    1002:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1004:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1006:	aa02      	add	r2, sp, #8
    1008:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    100a:	2300      	movs	r3, #0
    100c:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    100e:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1010:	20c0      	movs	r0, #192	; 0xc0
    1012:	0380      	lsls	r0, r0, #14
    1014:	60d0      	str	r0, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1016:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1018:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    101a:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    101c:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    101e:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1020:	2124      	movs	r1, #36	; 0x24
    1022:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1024:	9309      	str	r3, [sp, #36]	; 0x24
    1026:	930a      	str	r3, [sp, #40]	; 0x28
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    1028:	4b1a      	ldr	r3, [pc, #104]	; (1094 <nm_bus_init+0xcc>)
    102a:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    102c:	4b1a      	ldr	r3, [pc, #104]	; (1098 <nm_bus_init+0xd0>)
    102e:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    1030:	2301      	movs	r3, #1
    1032:	425b      	negs	r3, r3
    1034:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    1036:	4b19      	ldr	r3, [pc, #100]	; (109c <nm_bus_init+0xd4>)
    1038:	6353      	str	r3, [r2, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    103a:	4b19      	ldr	r3, [pc, #100]	; (10a0 <nm_bus_init+0xd8>)
    103c:	6193      	str	r3, [r2, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    103e:	4819      	ldr	r0, [pc, #100]	; (10a4 <nm_bus_init+0xdc>)
    1040:	4919      	ldr	r1, [pc, #100]	; (10a8 <nm_bus_init+0xe0>)
    1042:	4b1a      	ldr	r3, [pc, #104]	; (10ac <nm_bus_init+0xe4>)
    1044:	4798      	blx	r3
    1046:	2800      	cmp	r0, #0
    1048:	d11a      	bne.n	1080 <nm_bus_init+0xb8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    104a:	4d16      	ldr	r5, [pc, #88]	; (10a4 <nm_bus_init+0xdc>)
    104c:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    104e:	1c20      	adds	r0, r4, #0
    1050:	4b17      	ldr	r3, [pc, #92]	; (10b0 <nm_bus_init+0xe8>)
    1052:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1054:	231f      	movs	r3, #31
    1056:	4018      	ands	r0, r3
    1058:	2301      	movs	r3, #1
    105a:	4083      	lsls	r3, r0
    105c:	1c18      	adds	r0, r3, #0
    105e:	4b15      	ldr	r3, [pc, #84]	; (10b4 <nm_bus_init+0xec>)
    1060:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1062:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1064:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1066:	2b00      	cmp	r3, #0
    1068:	d1fc      	bne.n	1064 <nm_bus_init+0x9c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    106a:	6822      	ldr	r2, [r4, #0]
    106c:	2302      	movs	r3, #2
    106e:	4313      	orrs	r3, r2
    1070:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1072:	4b11      	ldr	r3, [pc, #68]	; (10b8 <nm_bus_init+0xf0>)
    1074:	4798      	blx	r3
	nm_bsp_sleep(1);
    1076:	2001      	movs	r0, #1
    1078:	4b10      	ldr	r3, [pc, #64]	; (10bc <nm_bus_init+0xf4>)
    107a:	4798      	blx	r3
#endif
	return result;
    107c:	2000      	movs	r0, #0
    107e:	e000      	b.n	1082 <nm_bus_init+0xba>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
    1080:	20fa      	movs	r0, #250	; 0xfa
    1082:	b240      	sxtb	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
    1084:	b011      	add	sp, #68	; 0x44
    1086:	bd30      	pop	{r4, r5, pc}
    1088:	20000aa8 	.word	0x20000aa8
    108c:	0000411d 	.word	0x0000411d
    1090:	41004400 	.word	0x41004400
    1094:	000c0002 	.word	0x000c0002
    1098:	000d0002 	.word	0x000d0002
    109c:	000f0002 	.word	0x000f0002
    10a0:	00b71b00 	.word	0x00b71b00
    10a4:	20000aac 	.word	0x20000aac
    10a8:	42001000 	.word	0x42001000
    10ac:	000049b9 	.word	0x000049b9
    10b0:	0000492d 	.word	0x0000492d
    10b4:	e000e100 	.word	0xe000e100
    10b8:	00000eb5 	.word	0x00000eb5
    10bc:	00000e99 	.word	0x00000e99

000010c0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	465f      	mov	r7, fp
    10c4:	4656      	mov	r6, sl
    10c6:	464d      	mov	r5, r9
    10c8:	4644      	mov	r4, r8
    10ca:	b4f0      	push	{r4, r5, r6, r7}
    10cc:	b087      	sub	sp, #28
	sint8 s8Ret = 0;
	switch(u8Cmd)
    10ce:	2803      	cmp	r0, #3
    10d0:	d16c      	bne.n	11ac <nm_bus_ioctl+0xec>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    10d2:	680e      	ldr	r6, [r1, #0]
    10d4:	684d      	ldr	r5, [r1, #4]
    10d6:	890f      	ldrh	r7, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
    10d8:	2200      	movs	r2, #0
    10da:	466b      	mov	r3, sp
    10dc:	75da      	strb	r2, [r3, #23]
    10de:	3317      	adds	r3, #23
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
    10e0:	2e00      	cmp	r6, #0
    10e2:	d005      	beq.n	10f0 <nm_bus_ioctl+0x30>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
    10e4:	2d00      	cmp	r5, #0
    10e6:	d15f      	bne.n	11a8 <nm_bus_ioctl+0xe8>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
    10e8:	2401      	movs	r4, #1
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    10ea:	9502      	str	r5, [sp, #8]
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
    10ec:	1c1d      	adds	r5, r3, #0
    10ee:	e004      	b.n	10fa <nm_bus_ioctl+0x3a>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    10f0:	2400      	movs	r4, #0
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
    10f2:	2001      	movs	r0, #1
    10f4:	9002      	str	r0, [sp, #8]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
    10f6:	466e      	mov	r6, sp
    10f8:	3617      	adds	r6, #23
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
    10fa:	4837      	ldr	r0, [pc, #220]	; (11d8 <nm_bus_ioctl+0x118>)
    10fc:	4937      	ldr	r1, [pc, #220]	; (11dc <nm_bus_ioctl+0x11c>)
    10fe:	2201      	movs	r2, #1
    1100:	4b37      	ldr	r3, [pc, #220]	; (11e0 <nm_bus_ioctl+0x120>)
    1102:	4798      	blx	r3

	while (u16Sz) {
    1104:	2f00      	cmp	r7, #0
    1106:	d042      	beq.n	118e <nm_bus_ioctl+0xce>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1108:	4b33      	ldr	r3, [pc, #204]	; (11d8 <nm_bus_ioctl+0x118>)
    110a:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    110c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    110e:	2204      	movs	r2, #4
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1110:	2000      	movs	r0, #0
    1112:	4684      	mov	ip, r0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1114:	2304      	movs	r3, #4
    1116:	4699      	mov	r9, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    1118:	201e      	movs	r0, #30
    111a:	4680      	mov	r8, r0
			;
		*pu8Miso = rxd_data;

		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
    111c:	4263      	negs	r3, r4
    111e:	4163      	adcs	r3, r4
    1120:	9303      	str	r3, [sp, #12]
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
    1122:	7834      	ldrb	r4, [r6, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1124:	4650      	mov	r0, sl
    1126:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1128:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    112a:	4208      	tst	r0, r1
    112c:	d0fc      	beq.n	1128 <nm_bus_ioctl+0x68>
    112e:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1130:	4208      	tst	r0, r1
    1132:	d0fc      	beq.n	112e <nm_bus_ioctl+0x6e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1134:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1136:	7e18      	ldrb	r0, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    1138:	4210      	tst	r0, r2
    113a:	d0fc      	beq.n	1136 <nm_bus_ioctl+0x76>
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    113c:	4826      	ldr	r0, [pc, #152]	; (11d8 <nm_bus_ioctl+0x118>)
    113e:	7984      	ldrb	r4, [r0, #6]
    1140:	9501      	str	r5, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1142:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1144:	4210      	tst	r0, r2
    1146:	d0fc      	beq.n	1142 <nm_bus_ioctl+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1148:	8b5d      	ldrh	r5, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    114a:	4660      	mov	r0, ip

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    114c:	4215      	tst	r5, r2
    114e:	d005      	beq.n	115c <nm_bus_ioctl+0x9c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1150:	8b58      	ldrh	r0, [r3, #26]
    1152:	464d      	mov	r5, r9
    1154:	4328      	orrs	r0, r5
    1156:	b280      	uxth	r0, r0
    1158:	8358      	strh	r0, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    115a:	4640      	mov	r0, r8
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    115c:	2c01      	cmp	r4, #1
    115e:	d104      	bne.n	116a <nm_bus_ioctl+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1160:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1162:	05ed      	lsls	r5, r5, #23
    1164:	0ded      	lsrs	r5, r5, #23
    1166:	46ab      	mov	fp, r5
    1168:	e002      	b.n	1170 <nm_bus_ioctl+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    116a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    116c:	b2ed      	uxtb	r5, r5
    116e:	46ab      	mov	fp, r5
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1170:	2800      	cmp	r0, #0
    1172:	d1e6      	bne.n	1142 <nm_bus_ioctl+0x82>
    1174:	9d01      	ldr	r5, [sp, #4]
			;
		*pu8Miso = rxd_data;
    1176:	4658      	mov	r0, fp
    1178:	7028      	strb	r0, [r5, #0]

		u16Sz--;
    117a:	3f01      	subs	r7, #1
    117c:	b2bf      	uxth	r7, r7
		if (!u8SkipMiso)
			pu8Miso++;
    117e:	9b03      	ldr	r3, [sp, #12]
    1180:	18ed      	adds	r5, r5, r3
		if (!u8SkipMosi)
			pu8Mosi++;
    1182:	9c02      	ldr	r4, [sp, #8]
    1184:	4263      	negs	r3, r4
    1186:	4163      	adcs	r3, r4
    1188:	18f6      	adds	r6, r6, r3
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    118a:	2f00      	cmp	r7, #0
    118c:	d1c9      	bne.n	1122 <nm_bus_ioctl+0x62>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    118e:	4b12      	ldr	r3, [pc, #72]	; (11d8 <nm_bus_ioctl+0x118>)
    1190:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1192:	2202      	movs	r2, #2
    1194:	7e0b      	ldrb	r3, [r1, #24]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    1196:	4213      	tst	r3, r2
    1198:	d0fc      	beq.n	1194 <nm_bus_ioctl+0xd4>
		;

	spi_select_slave(&master, &slave_inst, false);
    119a:	480f      	ldr	r0, [pc, #60]	; (11d8 <nm_bus_ioctl+0x118>)
    119c:	490f      	ldr	r1, [pc, #60]	; (11dc <nm_bus_ioctl+0x11c>)
    119e:	2200      	movs	r2, #0
    11a0:	4b0f      	ldr	r3, [pc, #60]	; (11e0 <nm_bus_ioctl+0x120>)
    11a2:	4798      	blx	r3

	return M2M_SUCCESS;
    11a4:	2000      	movs	r0, #0
    11a6:	e00e      	b.n	11c6 <nm_bus_ioctl+0x106>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
    11a8:	20fa      	movs	r0, #250	; 0xfa
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
    11aa:	e00c      	b.n	11c6 <nm_bus_ioctl+0x106>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
    11ac:	480d      	ldr	r0, [pc, #52]	; (11e4 <nm_bus_ioctl+0x124>)
    11ae:	490e      	ldr	r1, [pc, #56]	; (11e8 <nm_bus_ioctl+0x128>)
    11b0:	2286      	movs	r2, #134	; 0x86
    11b2:	0052      	lsls	r2, r2, #1
    11b4:	4b0d      	ldr	r3, [pc, #52]	; (11ec <nm_bus_ioctl+0x12c>)
    11b6:	4798      	blx	r3
    11b8:	480d      	ldr	r0, [pc, #52]	; (11f0 <nm_bus_ioctl+0x130>)
    11ba:	4b0e      	ldr	r3, [pc, #56]	; (11f4 <nm_bus_ioctl+0x134>)
    11bc:	4798      	blx	r3
    11be:	200d      	movs	r0, #13
    11c0:	4b0d      	ldr	r3, [pc, #52]	; (11f8 <nm_bus_ioctl+0x138>)
    11c2:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
    11c4:	20ff      	movs	r0, #255	; 0xff
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
    11c6:	b240      	sxtb	r0, r0
}
    11c8:	b007      	add	sp, #28
    11ca:	bc3c      	pop	{r2, r3, r4, r5}
    11cc:	4690      	mov	r8, r2
    11ce:	4699      	mov	r9, r3
    11d0:	46a2      	mov	sl, r4
    11d2:	46ab      	mov	fp, r5
    11d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	20000aac 	.word	0x20000aac
    11dc:	20000aa8 	.word	0x20000aa8
    11e0:	00004b95 	.word	0x00004b95
    11e4:	00009674 	.word	0x00009674
    11e8:	00009664 	.word	0x00009664
    11ec:	00007c39 	.word	0x00007c39
    11f0:	00009688 	.word	0x00009688
    11f4:	00007d59 	.word	0x00007d59
    11f8:	00007c6d 	.word	0x00007c6d

000011fc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    11fc:	b538      	push	{r3, r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11fe:	4d0b      	ldr	r5, [pc, #44]	; (122c <nm_bus_deinit+0x30>)
    1200:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1202:	1c20      	adds	r0, r4, #0
    1204:	4b0a      	ldr	r3, [pc, #40]	; (1230 <nm_bus_deinit+0x34>)
    1206:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1208:	231f      	movs	r3, #31
    120a:	4018      	ands	r0, r3
    120c:	2301      	movs	r3, #1
    120e:	4083      	lsls	r3, r0
    1210:	1c18      	adds	r0, r3, #0
    1212:	2380      	movs	r3, #128	; 0x80
    1214:	4a07      	ldr	r2, [pc, #28]	; (1234 <nm_bus_deinit+0x38>)
    1216:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1218:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    121a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    121c:	2b00      	cmp	r3, #0
    121e:	d1fc      	bne.n	121a <nm_bus_deinit+0x1e>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1220:	6823      	ldr	r3, [r4, #0]
    1222:	2202      	movs	r2, #2
    1224:	4393      	bics	r3, r2
    1226:	6023      	str	r3, [r4, #0]
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    1228:	2000      	movs	r0, #0
    122a:	bd38      	pop	{r3, r4, r5, pc}
    122c:	20000aac 	.word	0x20000aac
    1230:	0000492d 	.word	0x0000492d
    1234:	e000e100 	.word	0xe000e100

00001238 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1238:	2a00      	cmp	r2, #0
    123a:	d006      	beq.n	124a <m2m_memcpy+0x12>
    123c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    123e:	780b      	ldrb	r3, [r1, #0]
    1240:	7003      	strb	r3, [r0, #0]
		pDst++;
    1242:	3001      	adds	r0, #1
		pSrc++;
    1244:	3101      	adds	r1, #1
	}while(--sz);
    1246:	4290      	cmp	r0, r2
    1248:	d1f9      	bne.n	123e <m2m_memcpy+0x6>
}
    124a:	4770      	bx	lr

0000124c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    124c:	2a00      	cmp	r2, #0
    124e:	d004      	beq.n	125a <m2m_memset+0xe>
    1250:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1252:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1254:	3001      	adds	r0, #1
	}while(--sz);
    1256:	4290      	cmp	r0, r2
    1258:	d1fb      	bne.n	1252 <m2m_memset+0x6>
}
    125a:	4770      	bx	lr

0000125c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    125c:	1c03      	adds	r3, r0, #0
	uint16	u16StrLen = 0;
	while(*pcStr)
    125e:	7802      	ldrb	r2, [r0, #0]
    1260:	2a00      	cmp	r2, #0
    1262:	d007      	beq.n	1274 <m2m_strlen+0x18>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
    1264:	2000      	movs	r0, #0
	while(*pcStr)
	{
		u16StrLen ++;
    1266:	3001      	adds	r0, #1
    1268:	b280      	uxth	r0, r0
		pcStr++;
    126a:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    126c:	781a      	ldrb	r2, [r3, #0]
    126e:	2a00      	cmp	r2, #0
    1270:	d1f9      	bne.n	1266 <m2m_strlen+0xa>
    1272:	e000      	b.n	1276 <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
    1274:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
    1276:	4770      	bx	lr

00001278 <isr>:
tpfHifCallBack pfOtaCb = NULL;		/*!< pointer to OTA call back function */
tpfHifCallBack pfHifCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
    1278:	4b02      	ldr	r3, [pc, #8]	; (1284 <isr+0xc>)
    127a:	781a      	ldrb	r2, [r3, #0]
    127c:	3201      	adds	r2, #1
    127e:	b2d2      	uxtb	r2, r2
    1280:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    1282:	4770      	bx	lr
    1284:	20000848 	.word	0x20000848

00001288 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1288:	4770      	bx	lr
    128a:	46c0      	nop			; (mov r8, r8)

0000128c <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
    128c:	b500      	push	{lr}
    128e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    1290:	2001      	movs	r0, #1
    1292:	4b09      	ldr	r3, [pc, #36]	; (12b8 <hif_set_rx_done+0x2c>)
    1294:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1296:	4809      	ldr	r0, [pc, #36]	; (12bc <hif_set_rx_done+0x30>)
    1298:	a901      	add	r1, sp, #4
    129a:	4b09      	ldr	r3, [pc, #36]	; (12c0 <hif_set_rx_done+0x34>)
    129c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    129e:	2800      	cmp	r0, #0
    12a0:	d106      	bne.n	12b0 <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    12a2:	2102      	movs	r1, #2
    12a4:	9b01      	ldr	r3, [sp, #4]
    12a6:	4319      	orrs	r1, r3
    12a8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    12aa:	4804      	ldr	r0, [pc, #16]	; (12bc <hif_set_rx_done+0x30>)
    12ac:	4b05      	ldr	r3, [pc, #20]	; (12c4 <hif_set_rx_done+0x38>)
    12ae:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    12b0:	b240      	sxtb	r0, r0

}
    12b2:	b003      	add	sp, #12
    12b4:	bd00      	pop	{pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	00000fa5 	.word	0x00000fa5
    12bc:	00001070 	.word	0x00001070
    12c0:	00002705 	.word	0x00002705
    12c4:	00002711 	.word	0x00002711

000012c8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    12c8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
    12ca:	4b10      	ldr	r3, [pc, #64]	; (130c <hif_chip_wake+0x44>)
    12cc:	781b      	ldrb	r3, [r3, #0]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d113      	bne.n	12fa <hif_chip_wake+0x32>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    12d2:	4b0f      	ldr	r3, [pc, #60]	; (1310 <hif_chip_wake+0x48>)
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b03      	cmp	r3, #3
    12d8:	d004      	beq.n	12e4 <hif_chip_wake+0x1c>
    12da:	4b0d      	ldr	r3, [pc, #52]	; (1310 <hif_chip_wake+0x48>)
    12dc:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
    12de:	2000      	movs	r0, #0
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    12e0:	2b04      	cmp	r3, #4
    12e2:	d10b      	bne.n	12fc <hif_chip_wake+0x34>
		{
			ret = nm_clkless_wake();
    12e4:	4b0b      	ldr	r3, [pc, #44]	; (1314 <hif_chip_wake+0x4c>)
    12e6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    12e8:	2800      	cmp	r0, #0
    12ea:	d10c      	bne.n	1306 <hif_chip_wake+0x3e>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    12ec:	480a      	ldr	r0, [pc, #40]	; (1318 <hif_chip_wake+0x50>)
    12ee:	490b      	ldr	r1, [pc, #44]	; (131c <hif_chip_wake+0x54>)
    12f0:	4b0b      	ldr	r3, [pc, #44]	; (1320 <hif_chip_wake+0x58>)
    12f2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    12f4:	2800      	cmp	r0, #0
    12f6:	d001      	beq.n	12fc <hif_chip_wake+0x34>
    12f8:	e005      	b.n	1306 <hif_chip_wake+0x3e>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
    12fa:	2000      	movs	r0, #0
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    12fc:	4b03      	ldr	r3, [pc, #12]	; (130c <hif_chip_wake+0x44>)
    12fe:	781a      	ldrb	r2, [r3, #0]
    1300:	3201      	adds	r2, #1
    1302:	b2d2      	uxtb	r2, r2
    1304:	701a      	strb	r2, [r3, #0]
ERR1:
	return ret;
    1306:	b240      	sxtb	r0, r0
}
    1308:	bd08      	pop	{r3, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	20000860 	.word	0x20000860
    1310:	20000850 	.word	0x20000850
    1314:	00002071 	.word	0x00002071
    1318:	00001074 	.word	0x00001074
    131c:	00005678 	.word	0x00005678
    1320:	00002711 	.word	0x00002711

00001324 <hif_set_sleep_mode>:
	The function SHALL return 0 for success and a negative value otherwise.
*/

void hif_set_sleep_mode(uint8 u8Pstype)
{
	gu8ChipMode = u8Pstype;
    1324:	4b01      	ldr	r3, [pc, #4]	; (132c <hif_set_sleep_mode+0x8>)
    1326:	7018      	strb	r0, [r3, #0]
}
    1328:	4770      	bx	lr
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	20000850 	.word	0x20000850

00001330 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1330:	b500      	push	{lr}
    1332:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
    1334:	4b17      	ldr	r3, [pc, #92]	; (1394 <hif_chip_sleep+0x64>)
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	2b00      	cmp	r3, #0
    133a:	d004      	beq.n	1346 <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
    133c:	4b15      	ldr	r3, [pc, #84]	; (1394 <hif_chip_sleep+0x64>)
    133e:	781a      	ldrb	r2, [r3, #0]
    1340:	3a01      	subs	r2, #1
    1342:	b2d2      	uxtb	r2, r2
    1344:	701a      	strb	r2, [r3, #0]
	}

	if(gu8ChipSleep == 0)
    1346:	4b13      	ldr	r3, [pc, #76]	; (1394 <hif_chip_sleep+0x64>)
    1348:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
    134a:	2000      	movs	r0, #0
	if(gu8ChipSleep >= 1)
	{
		gu8ChipSleep--;
	}

	if(gu8ChipSleep == 0)
    134c:	2b00      	cmp	r3, #0
    134e:	d11e      	bne.n	138e <hif_chip_sleep+0x5e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1350:	4b11      	ldr	r3, [pc, #68]	; (1398 <hif_chip_sleep+0x68>)
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	2b03      	cmp	r3, #3
    1356:	d003      	beq.n	1360 <hif_chip_sleep+0x30>
    1358:	4b0f      	ldr	r3, [pc, #60]	; (1398 <hif_chip_sleep+0x68>)
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	2b04      	cmp	r3, #4
    135e:	d116      	bne.n	138e <hif_chip_sleep+0x5e>
		{
			uint32 reg = 0;
    1360:	2300      	movs	r3, #0
    1362:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    1364:	480d      	ldr	r0, [pc, #52]	; (139c <hif_chip_sleep+0x6c>)
    1366:	490e      	ldr	r1, [pc, #56]	; (13a0 <hif_chip_sleep+0x70>)
    1368:	4b0e      	ldr	r3, [pc, #56]	; (13a4 <hif_chip_sleep+0x74>)
    136a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    136c:	2800      	cmp	r0, #0
    136e:	d10e      	bne.n	138e <hif_chip_sleep+0x5e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    1370:	2001      	movs	r0, #1
    1372:	a901      	add	r1, sp, #4
    1374:	4b0c      	ldr	r3, [pc, #48]	; (13a8 <hif_chip_sleep+0x78>)
    1376:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1378:	2800      	cmp	r0, #0
    137a:	d108      	bne.n	138e <hif_chip_sleep+0x5e>
			if(reg&0x2)
    137c:	9901      	ldr	r1, [sp, #4]
    137e:	078b      	lsls	r3, r1, #30
    1380:	d505      	bpl.n	138e <hif_chip_sleep+0x5e>
			{
				reg &=~(1 << 1);
    1382:	2302      	movs	r3, #2
    1384:	4399      	bics	r1, r3
    1386:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
    1388:	2001      	movs	r0, #1
    138a:	4b06      	ldr	r3, [pc, #24]	; (13a4 <hif_chip_sleep+0x74>)
    138c:	4798      	blx	r3
		else
		{
		}
	}
ERR1:
	return ret;
    138e:	b240      	sxtb	r0, r0
}
    1390:	b003      	add	sp, #12
    1392:	bd00      	pop	{pc}
    1394:	20000860 	.word	0x20000860
    1398:	20000850 	.word	0x20000850
    139c:	00001074 	.word	0x00001074
    13a0:	00004321 	.word	0x00004321
    13a4:	00002711 	.word	0x00002711
    13a8:	00002705 	.word	0x00002705

000013ac <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    13ac:	b508      	push	{r3, lr}
			M2M_DBG("failed to stop power save\n");
			break;
		}
	}
#endif
	ret = hif_chip_wake();
    13ae:	4b0a      	ldr	r3, [pc, #40]	; (13d8 <hif_deinit+0x2c>)
    13b0:	4798      	blx	r3

	gu8ChipMode = 0;
    13b2:	2300      	movs	r3, #0
    13b4:	4a09      	ldr	r2, [pc, #36]	; (13dc <hif_deinit+0x30>)
    13b6:	7013      	strb	r3, [r2, #0]
	gu8ChipSleep = 0;
    13b8:	4a09      	ldr	r2, [pc, #36]	; (13e0 <hif_deinit+0x34>)
    13ba:	7013      	strb	r3, [r2, #0]
	gu8HifSizeDone = 0;
    13bc:	4a09      	ldr	r2, [pc, #36]	; (13e4 <hif_deinit+0x38>)
    13be:	7013      	strb	r3, [r2, #0]
	gu8Interrupt = 0;
    13c0:	4a09      	ldr	r2, [pc, #36]	; (13e8 <hif_deinit+0x3c>)
    13c2:	7013      	strb	r3, [r2, #0]

	pfWifiCb = NULL;
    13c4:	4a09      	ldr	r2, [pc, #36]	; (13ec <hif_deinit+0x40>)
    13c6:	6013      	str	r3, [r2, #0]
	pfIpCb  = NULL;
    13c8:	4a09      	ldr	r2, [pc, #36]	; (13f0 <hif_deinit+0x44>)
    13ca:	6013      	str	r3, [r2, #0]
	pfOtaCb = NULL;
    13cc:	4a09      	ldr	r2, [pc, #36]	; (13f4 <hif_deinit+0x48>)
    13ce:	6013      	str	r3, [r2, #0]
	pfHifCb = NULL;
    13d0:	4a09      	ldr	r2, [pc, #36]	; (13f8 <hif_deinit+0x4c>)
    13d2:	6013      	str	r3, [r2, #0]


	return ret;
}
    13d4:	bd08      	pop	{r3, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	000012c9 	.word	0x000012c9
    13dc:	20000850 	.word	0x20000850
    13e0:	20000860 	.word	0x20000860
    13e4:	20000858 	.word	0x20000858
    13e8:	20000848 	.word	0x20000848
    13ec:	20000844 	.word	0x20000844
    13f0:	20000854 	.word	0x20000854
    13f4:	2000085c 	.word	0x2000085c
    13f8:	2000084c 	.word	0x2000084c

000013fc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    13fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fe:	4657      	mov	r7, sl
    1400:	464e      	mov	r6, r9
    1402:	4645      	mov	r5, r8
    1404:	b4e0      	push	{r5, r6, r7}
    1406:	b086      	sub	sp, #24
    1408:	4682      	mov	sl, r0
    140a:	1c0d      	adds	r5, r1, #0
    140c:	4691      	mov	r9, r2
    140e:	4698      	mov	r8, r3
    1410:	ab0e      	add	r3, sp, #56	; 0x38
    1412:	cb04      	ldmia	r3!, {r2}
    1414:	881e      	ldrh	r6, [r3, #0]
    1416:	ab10      	add	r3, sp, #64	; 0x40
    1418:	881f      	ldrh	r7, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    141a:	237f      	movs	r3, #127	; 0x7f
    141c:	400b      	ands	r3, r1
    141e:	ac05      	add	r4, sp, #20
    1420:	7063      	strb	r3, [r4, #1]
	strHif.u8Gid		= u8Gid;
    1422:	7020      	strb	r0, [r4, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1424:	2308      	movs	r3, #8
    1426:	8063      	strh	r3, [r4, #2]
	if(pu8DataBuf != NULL)
    1428:	2a00      	cmp	r2, #0
    142a:	d005      	beq.n	1438 <hif_send+0x3c>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    142c:	8862      	ldrh	r2, [r4, #2]
    142e:	1992      	adds	r2, r2, r6
    1430:	18ba      	adds	r2, r7, r2
    1432:	b292      	uxth	r2, r2
    1434:	8062      	strh	r2, [r4, #2]
    1436:	e004      	b.n	1442 <hif_send+0x46>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    1438:	ab05      	add	r3, sp, #20
    143a:	885a      	ldrh	r2, [r3, #2]
    143c:	4442      	add	r2, r8
    143e:	b292      	uxth	r2, r2
    1440:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    1442:	4b55      	ldr	r3, [pc, #340]	; (1598 <hif_send+0x19c>)
    1444:	4798      	blx	r3
    1446:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1448:	d000      	beq.n	144c <hif_send+0x50>
    144a:	e08b      	b.n	1564 <hif_send+0x168>
	{
		volatile uint32 reg, dma_addr = 0;
    144c:	2300      	movs	r3, #0
    144e:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
    1450:	466a      	mov	r2, sp
    1452:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
    1454:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
    1456:	9b02      	ldr	r3, [sp, #8]
    1458:	4652      	mov	r2, sl
    145a:	4313      	orrs	r3, r2
    145c:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
    145e:	9b02      	ldr	r3, [sp, #8]
    1460:	022d      	lsls	r5, r5, #8
    1462:	431d      	orrs	r5, r3
    1464:	9502      	str	r5, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
    1466:	ab05      	add	r3, sp, #20
    1468:	885b      	ldrh	r3, [r3, #2]
    146a:	9a02      	ldr	r2, [sp, #8]
    146c:	041b      	lsls	r3, r3, #16
    146e:	4313      	orrs	r3, r2
    1470:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1472:	9902      	ldr	r1, [sp, #8]
    1474:	4849      	ldr	r0, [pc, #292]	; (159c <hif_send+0x1a0>)
    1476:	4b4a      	ldr	r3, [pc, #296]	; (15a0 <hif_send+0x1a4>)
    1478:	4798      	blx	r3
    147a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    147c:	d000      	beq.n	1480 <hif_send+0x84>
    147e:	e083      	b.n	1588 <hif_send+0x18c>


		reg = 0;
    1480:	2300      	movs	r3, #0
    1482:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
    1484:	9a02      	ldr	r2, [sp, #8]
    1486:	2302      	movs	r3, #2
    1488:	4313      	orrs	r3, r2
    148a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    148c:	9902      	ldr	r1, [sp, #8]
    148e:	4845      	ldr	r0, [pc, #276]	; (15a4 <hif_send+0x1a8>)
    1490:	4b43      	ldr	r3, [pc, #268]	; (15a0 <hif_send+0x1a4>)
    1492:	4798      	blx	r3
    1494:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1496:	d177      	bne.n	1588 <hif_send+0x18c>
		dma_addr = 0;
    1498:	2200      	movs	r2, #0
    149a:	9203      	str	r2, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    149c:	466b      	mov	r3, sp
    149e:	80da      	strh	r2, [r3, #6]
    14a0:	88da      	ldrh	r2, [r3, #6]
    14a2:	b292      	uxth	r2, r2
    14a4:	4b40      	ldr	r3, [pc, #256]	; (15a8 <hif_send+0x1ac>)
    14a6:	429a      	cmp	r2, r3
    14a8:	d81d      	bhi.n	14e6 <hif_send+0xea>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    14aa:	4b3e      	ldr	r3, [pc, #248]	; (15a4 <hif_send+0x1a8>)
    14ac:	469a      	mov	sl, r3
    14ae:	4d3f      	ldr	r5, [pc, #252]	; (15ac <hif_send+0x1b0>)
    14b0:	4650      	mov	r0, sl
    14b2:	a902      	add	r1, sp, #8
    14b4:	47a8      	blx	r5
			if(ret != M2M_SUCCESS) break;
    14b6:	2800      	cmp	r0, #0
    14b8:	d115      	bne.n	14e6 <hif_send+0xea>
			if (!(reg & 0x2))
    14ba:	9b02      	ldr	r3, [sp, #8]
    14bc:	079a      	lsls	r2, r3, #30
    14be:	d408      	bmi.n	14d2 <hif_send+0xd6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    14c0:	483b      	ldr	r0, [pc, #236]	; (15b0 <hif_send+0x1b4>)
    14c2:	a903      	add	r1, sp, #12
    14c4:	4b39      	ldr	r3, [pc, #228]	; (15ac <hif_send+0x1b0>)
    14c6:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
    14c8:	2800      	cmp	r0, #0
    14ca:	d00c      	beq.n	14e6 <hif_send+0xea>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    14cc:	2300      	movs	r3, #0
    14ce:	9303      	str	r3, [sp, #12]
    14d0:	e009      	b.n	14e6 <hif_send+0xea>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    14d2:	466c      	mov	r4, sp
    14d4:	88e3      	ldrh	r3, [r4, #6]
    14d6:	3301      	adds	r3, #1
    14d8:	b29b      	uxth	r3, r3
    14da:	80e3      	strh	r3, [r4, #6]
    14dc:	88e2      	ldrh	r2, [r4, #6]
    14de:	b292      	uxth	r2, r2
    14e0:	4b31      	ldr	r3, [pc, #196]	; (15a8 <hif_send+0x1ac>)
    14e2:	429a      	cmp	r2, r3
    14e4:	d9e4      	bls.n	14b0 <hif_send+0xb4>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    14e6:	9b03      	ldr	r3, [sp, #12]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d04c      	beq.n	1586 <hif_send+0x18a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    14ec:	9b03      	ldr	r3, [sp, #12]
    14ee:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    14f0:	a905      	add	r1, sp, #20
    14f2:	884b      	ldrh	r3, [r1, #2]
    14f4:	b29b      	uxth	r3, r3
    14f6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    14f8:	9804      	ldr	r0, [sp, #16]
    14fa:	2208      	movs	r2, #8
    14fc:	4b2d      	ldr	r3, [pc, #180]	; (15b4 <hif_send+0x1b8>)
    14fe:	4798      	blx	r3
    1500:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1502:	d141      	bne.n	1588 <hif_send+0x18c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1504:	9b04      	ldr	r3, [sp, #16]
    1506:	3308      	adds	r3, #8
    1508:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
    150a:	464b      	mov	r3, r9
    150c:	2b00      	cmp	r3, #0
    150e:	d009      	beq.n	1524 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1510:	9804      	ldr	r0, [sp, #16]
    1512:	4649      	mov	r1, r9
    1514:	4642      	mov	r2, r8
    1516:	4b27      	ldr	r3, [pc, #156]	; (15b4 <hif_send+0x1b8>)
    1518:	4798      	blx	r3
    151a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    151c:	d134      	bne.n	1588 <hif_send+0x18c>
				u32CurrAddr += u16CtrlBufSize;
    151e:	9b04      	ldr	r3, [sp, #16]
    1520:	4443      	add	r3, r8
    1522:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
    1524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1526:	2a00      	cmp	r2, #0
    1528:	d00e      	beq.n	1548 <hif_send+0x14c>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    152a:	9b04      	ldr	r3, [sp, #16]
    152c:	4642      	mov	r2, r8
    152e:	1abf      	subs	r7, r7, r2
    1530:	18ff      	adds	r7, r7, r3
    1532:	9704      	str	r7, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1534:	9804      	ldr	r0, [sp, #16]
    1536:	990e      	ldr	r1, [sp, #56]	; 0x38
    1538:	1c32      	adds	r2, r6, #0
    153a:	4b1e      	ldr	r3, [pc, #120]	; (15b4 <hif_send+0x1b8>)
    153c:	4798      	blx	r3
    153e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1540:	d122      	bne.n	1588 <hif_send+0x18c>
				u32CurrAddr += u16DataSize;
    1542:	9b04      	ldr	r3, [sp, #16]
    1544:	18f6      	adds	r6, r6, r3
    1546:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
    1548:	9b03      	ldr	r3, [sp, #12]
    154a:	009b      	lsls	r3, r3, #2
    154c:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
    154e:	9a02      	ldr	r2, [sp, #8]
    1550:	2302      	movs	r3, #2
    1552:	4313      	orrs	r3, r2
    1554:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1556:	9902      	ldr	r1, [sp, #8]
    1558:	4817      	ldr	r0, [pc, #92]	; (15b8 <hif_send+0x1bc>)
    155a:	4b11      	ldr	r3, [pc, #68]	; (15a0 <hif_send+0x1a4>)
    155c:	4798      	blx	r3
    155e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1560:	d112      	bne.n	1588 <hif_send+0x18c>
    1562:	e00c      	b.n	157e <hif_send+0x182>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1564:	4815      	ldr	r0, [pc, #84]	; (15bc <hif_send+0x1c0>)
    1566:	4916      	ldr	r1, [pc, #88]	; (15c0 <hif_send+0x1c4>)
    1568:	2296      	movs	r2, #150	; 0x96
    156a:	32ff      	adds	r2, #255	; 0xff
    156c:	4b15      	ldr	r3, [pc, #84]	; (15c4 <hif_send+0x1c8>)
    156e:	4798      	blx	r3
    1570:	4815      	ldr	r0, [pc, #84]	; (15c8 <hif_send+0x1cc>)
    1572:	4b16      	ldr	r3, [pc, #88]	; (15cc <hif_send+0x1d0>)
    1574:	4798      	blx	r3
    1576:	200d      	movs	r0, #13
    1578:	4b15      	ldr	r3, [pc, #84]	; (15d0 <hif_send+0x1d4>)
    157a:	4798      	blx	r3
		goto ERR1;
    157c:	e004      	b.n	1588 <hif_send+0x18c>
	}
	ret = hif_chip_sleep();
    157e:	4b15      	ldr	r3, [pc, #84]	; (15d4 <hif_send+0x1d8>)
    1580:	4798      	blx	r3
    1582:	1c04      	adds	r4, r0, #0
    1584:	e000      	b.n	1588 <hif_send+0x18c>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    1586:	24fd      	movs	r4, #253	; 0xfd
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    1588:	b260      	sxtb	r0, r4
}
    158a:	b006      	add	sp, #24
    158c:	bc1c      	pop	{r2, r3, r4}
    158e:	4690      	mov	r8, r2
    1590:	4699      	mov	r9, r3
    1592:	46a2      	mov	sl, r4
    1594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	000012c9 	.word	0x000012c9
    159c:	0000108c 	.word	0x0000108c
    15a0:	00002711 	.word	0x00002711
    15a4:	00001078 	.word	0x00001078
    15a8:	000003e7 	.word	0x000003e7
    15ac:	00002705 	.word	0x00002705
    15b0:	00150400 	.word	0x00150400
    15b4:	00002791 	.word	0x00002791
    15b8:	0000106c 	.word	0x0000106c
    15bc:	00009674 	.word	0x00009674
    15c0:	000096ac 	.word	0x000096ac
    15c4:	00007c39 	.word	0x00007c39
    15c8:	000096d0 	.word	0x000096d0
    15cc:	00007d59 	.word	0x00007d59
    15d0:	00007c6d 	.word	0x00007c6d
    15d4:	00001331 	.word	0x00001331

000015d8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    15d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15da:	465f      	mov	r7, fp
    15dc:	4656      	mov	r6, sl
    15de:	464d      	mov	r5, r9
    15e0:	b4e0      	push	{r5, r6, r7}
    15e2:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    15e4:	4aa4      	ldr	r2, [pc, #656]	; (1878 <hif_handle_isr+0x2a0>)
    15e6:	4692      	mov	sl, r2
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    15e8:	4691      	mov	r9, r2
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    15ea:	4ea4      	ldr	r6, [pc, #656]	; (187c <hif_handle_isr+0x2a4>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    15ec:	e137      	b.n	185e <hif_handle_isr+0x286>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    15ee:	464a      	mov	r2, r9
    15f0:	7813      	ldrb	r3, [r2, #0]
    15f2:	3b01      	subs	r3, #1
    15f4:	b2db      	uxtb	r3, r3
    15f6:	7013      	strb	r3, [r2, #0]
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    15f8:	4fa1      	ldr	r7, [pc, #644]	; (1880 <hif_handle_isr+0x2a8>)
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    15fa:	47b0      	blx	r6
    15fc:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    15fe:	d000      	beq.n	1602 <hif_handle_isr+0x2a>
    1600:	e110      	b.n	1824 <hif_handle_isr+0x24c>
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
    1602:	48a0      	ldr	r0, [pc, #640]	; (1884 <hif_handle_isr+0x2ac>)
    1604:	a903      	add	r1, sp, #12
    1606:	4ba0      	ldr	r3, [pc, #640]	; (1888 <hif_handle_isr+0x2b0>)
    1608:	4798      	blx	r3
    160a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
    160c:	d000      	beq.n	1610 <hif_handle_isr+0x38>
    160e:	e0fc      	b.n	180a <hif_handle_isr+0x232>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    1610:	9b03      	ldr	r3, [sp, #12]
    1612:	07db      	lsls	r3, r3, #31
    1614:	d400      	bmi.n	1618 <hif_handle_isr+0x40>
    1616:	e0ec      	b.n	17f2 <hif_handle_isr+0x21a>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    1618:	2000      	movs	r0, #0
    161a:	4b9c      	ldr	r3, [pc, #624]	; (188c <hif_handle_isr+0x2b4>)
    161c:	4798      	blx	r3
				/*Clearing RX interrupt*/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    161e:	4899      	ldr	r0, [pc, #612]	; (1884 <hif_handle_isr+0x2ac>)
    1620:	a903      	add	r1, sp, #12
    1622:	4b99      	ldr	r3, [pc, #612]	; (1888 <hif_handle_isr+0x2b0>)
    1624:	4798      	blx	r3
    1626:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
    1628:	d000      	beq.n	162c <hif_handle_isr+0x54>
    162a:	e10c      	b.n	1846 <hif_handle_isr+0x26e>
				reg &= ~(1<<0);
    162c:	2301      	movs	r3, #1
    162e:	9903      	ldr	r1, [sp, #12]
    1630:	4399      	bics	r1, r3
    1632:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1634:	4893      	ldr	r0, [pc, #588]	; (1884 <hif_handle_isr+0x2ac>)
    1636:	4b96      	ldr	r3, [pc, #600]	; (1890 <hif_handle_isr+0x2b8>)
    1638:	4798      	blx	r3
    163a:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
    163c:	d000      	beq.n	1640 <hif_handle_isr+0x68>
    163e:	e102      	b.n	1846 <hif_handle_isr+0x26e>
				/* read the rx size */
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1640:	4890      	ldr	r0, [pc, #576]	; (1884 <hif_handle_isr+0x2ac>)
    1642:	a903      	add	r1, sp, #12
    1644:	4b90      	ldr	r3, [pc, #576]	; (1888 <hif_handle_isr+0x2b0>)
    1646:	4798      	blx	r3
    1648:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    164a:	d00f      	beq.n	166c <hif_handle_isr+0x94>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
    164c:	488c      	ldr	r0, [pc, #560]	; (1880 <hif_handle_isr+0x2a8>)
    164e:	4991      	ldr	r1, [pc, #580]	; (1894 <hif_handle_isr+0x2bc>)
    1650:	22e0      	movs	r2, #224	; 0xe0
    1652:	0052      	lsls	r2, r2, #1
    1654:	4b90      	ldr	r3, [pc, #576]	; (1898 <hif_handle_isr+0x2c0>)
    1656:	4798      	blx	r3
    1658:	4890      	ldr	r0, [pc, #576]	; (189c <hif_handle_isr+0x2c4>)
    165a:	4b91      	ldr	r3, [pc, #580]	; (18a0 <hif_handle_isr+0x2c8>)
    165c:	4798      	blx	r3
    165e:	200d      	movs	r0, #13
    1660:	4b90      	ldr	r3, [pc, #576]	; (18a4 <hif_handle_isr+0x2cc>)
    1662:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1664:	2001      	movs	r0, #1
    1666:	4b89      	ldr	r3, [pc, #548]	; (188c <hif_handle_isr+0x2b4>)
    1668:	4798      	blx	r3
    166a:	e0ec      	b.n	1846 <hif_handle_isr+0x26e>
					goto ERR1;
				}
				gu8HifSizeDone = 0;
    166c:	2200      	movs	r2, #0
    166e:	4b8e      	ldr	r3, [pc, #568]	; (18a8 <hif_handle_isr+0x2d0>)
    1670:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    1672:	9a03      	ldr	r2, [sp, #12]
    1674:	0493      	lsls	r3, r2, #18
    1676:	0d1b      	lsrs	r3, r3, #20
    1678:	469b      	mov	fp, r3
				if (size > 0) {
    167a:	d100      	bne.n	167e <hif_handle_isr+0xa6>
    167c:	e0ac      	b.n	17d8 <hif_handle_isr+0x200>
					uint32 address = 0;
    167e:	2300      	movs	r3, #0
    1680:	9305      	str	r3, [sp, #20]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1682:	488a      	ldr	r0, [pc, #552]	; (18ac <hif_handle_isr+0x2d4>)
    1684:	a905      	add	r1, sp, #20
    1686:	4b80      	ldr	r3, [pc, #512]	; (1888 <hif_handle_isr+0x2b0>)
    1688:	4798      	blx	r3
    168a:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
    168c:	d00f      	beq.n	16ae <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    168e:	487c      	ldr	r0, [pc, #496]	; (1880 <hif_handle_isr+0x2a8>)
    1690:	4980      	ldr	r1, [pc, #512]	; (1894 <hif_handle_isr+0x2bc>)
    1692:	22e7      	movs	r2, #231	; 0xe7
    1694:	0052      	lsls	r2, r2, #1
    1696:	4b80      	ldr	r3, [pc, #512]	; (1898 <hif_handle_isr+0x2c0>)
    1698:	4798      	blx	r3
    169a:	4885      	ldr	r0, [pc, #532]	; (18b0 <hif_handle_isr+0x2d8>)
    169c:	4b80      	ldr	r3, [pc, #512]	; (18a0 <hif_handle_isr+0x2c8>)
    169e:	4798      	blx	r3
    16a0:	200d      	movs	r0, #13
    16a2:	4b80      	ldr	r3, [pc, #512]	; (18a4 <hif_handle_isr+0x2cc>)
    16a4:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    16a6:	2001      	movs	r0, #1
    16a8:	4b78      	ldr	r3, [pc, #480]	; (188c <hif_handle_isr+0x2b4>)
    16aa:	4798      	blx	r3
    16ac:	e0c9      	b.n	1842 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    16ae:	ad04      	add	r5, sp, #16
    16b0:	9805      	ldr	r0, [sp, #20]
    16b2:	1c29      	adds	r1, r5, #0
    16b4:	2204      	movs	r2, #4
    16b6:	4b7f      	ldr	r3, [pc, #508]	; (18b4 <hif_handle_isr+0x2dc>)
    16b8:	4798      	blx	r3
    16ba:	1c04      	adds	r4, r0, #0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    16bc:	886b      	ldrh	r3, [r5, #2]
    16be:	b29b      	uxth	r3, r3
    16c0:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
    16c2:	2800      	cmp	r0, #0
    16c4:	d00f      	beq.n	16e6 <hif_handle_isr+0x10e>
					{
						M2M_ERR("(hif) address bus fail\n");
    16c6:	486e      	ldr	r0, [pc, #440]	; (1880 <hif_handle_isr+0x2a8>)
    16c8:	4972      	ldr	r1, [pc, #456]	; (1894 <hif_handle_isr+0x2bc>)
    16ca:	22eb      	movs	r2, #235	; 0xeb
    16cc:	0052      	lsls	r2, r2, #1
    16ce:	4b72      	ldr	r3, [pc, #456]	; (1898 <hif_handle_isr+0x2c0>)
    16d0:	4798      	blx	r3
    16d2:	4879      	ldr	r0, [pc, #484]	; (18b8 <hif_handle_isr+0x2e0>)
    16d4:	4b72      	ldr	r3, [pc, #456]	; (18a0 <hif_handle_isr+0x2c8>)
    16d6:	4798      	blx	r3
    16d8:	200d      	movs	r0, #13
    16da:	4b72      	ldr	r3, [pc, #456]	; (18a4 <hif_handle_isr+0x2cc>)
    16dc:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    16de:	2001      	movs	r0, #1
    16e0:	4b6a      	ldr	r3, [pc, #424]	; (188c <hif_handle_isr+0x2b4>)
    16e2:	4798      	blx	r3
    16e4:	e0ad      	b.n	1842 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
    16e6:	ab04      	add	r3, sp, #16
    16e8:	885b      	ldrh	r3, [r3, #2]
    16ea:	b29b      	uxth	r3, r3
    16ec:	459b      	cmp	fp, r3
    16ee:	d01d      	beq.n	172c <hif_handle_isr+0x154>
					{
						if((size - strHif.u16Length) > 4)
    16f0:	ab04      	add	r3, sp, #16
    16f2:	885b      	ldrh	r3, [r3, #2]
    16f4:	465a      	mov	r2, fp
    16f6:	1ad3      	subs	r3, r2, r3
    16f8:	2b04      	cmp	r3, #4
    16fa:	dd17      	ble.n	172c <hif_handle_isr+0x154>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    16fc:	4860      	ldr	r0, [pc, #384]	; (1880 <hif_handle_isr+0x2a8>)
    16fe:	4965      	ldr	r1, [pc, #404]	; (1894 <hif_handle_isr+0x2bc>)
    1700:	22e0      	movs	r2, #224	; 0xe0
    1702:	32ff      	adds	r2, #255	; 0xff
    1704:	4c64      	ldr	r4, [pc, #400]	; (1898 <hif_handle_isr+0x2c0>)
    1706:	47a0      	blx	r4
    1708:	a904      	add	r1, sp, #16
    170a:	884a      	ldrh	r2, [r1, #2]
    170c:	b292      	uxth	r2, r2
    170e:	780b      	ldrb	r3, [r1, #0]
    1710:	b2db      	uxtb	r3, r3
    1712:	7849      	ldrb	r1, [r1, #1]
    1714:	9100      	str	r1, [sp, #0]
    1716:	4869      	ldr	r0, [pc, #420]	; (18bc <hif_handle_isr+0x2e4>)
    1718:	4659      	mov	r1, fp
    171a:	47a0      	blx	r4
    171c:	200d      	movs	r0, #13
    171e:	4b61      	ldr	r3, [pc, #388]	; (18a4 <hif_handle_isr+0x2cc>)
    1720:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    1722:	2001      	movs	r0, #1
    1724:	4b59      	ldr	r3, [pc, #356]	; (188c <hif_handle_isr+0x2b4>)
    1726:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    1728:	24fa      	movs	r4, #250	; 0xfa
    172a:	e08a      	b.n	1842 <hif_handle_isr+0x26a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
    172c:	ab04      	add	r3, sp, #16
    172e:	781b      	ldrb	r3, [r3, #0]
    1730:	2b01      	cmp	r3, #1
    1732:	d10d      	bne.n	1750 <hif_handle_isr+0x178>
					{
						if(pfWifiCb)
    1734:	4b62      	ldr	r3, [pc, #392]	; (18c0 <hif_handle_isr+0x2e8>)
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	2b00      	cmp	r3, #0
    173a:	d03b      	beq.n	17b4 <hif_handle_isr+0x1dc>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    173c:	aa04      	add	r2, sp, #16
    173e:	7850      	ldrb	r0, [r2, #1]
    1740:	b2c0      	uxtb	r0, r0
    1742:	8851      	ldrh	r1, [r2, #2]
    1744:	3908      	subs	r1, #8
    1746:	b289      	uxth	r1, r1
    1748:	9a05      	ldr	r2, [sp, #20]
    174a:	3208      	adds	r2, #8
    174c:	4798      	blx	r3
    174e:	e031      	b.n	17b4 <hif_handle_isr+0x1dc>

					}
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
    1750:	ab04      	add	r3, sp, #16
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	2b02      	cmp	r3, #2
    1756:	d10d      	bne.n	1774 <hif_handle_isr+0x19c>
					{
						if(pfIpCb)
    1758:	4b5a      	ldr	r3, [pc, #360]	; (18c4 <hif_handle_isr+0x2ec>)
    175a:	681c      	ldr	r4, [r3, #0]
    175c:	2c00      	cmp	r4, #0
    175e:	d029      	beq.n	17b4 <hif_handle_isr+0x1dc>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1760:	ab04      	add	r3, sp, #16
    1762:	7858      	ldrb	r0, [r3, #1]
    1764:	b2c0      	uxtb	r0, r0
    1766:	8859      	ldrh	r1, [r3, #2]
    1768:	3908      	subs	r1, #8
    176a:	b289      	uxth	r1, r1
    176c:	9a05      	ldr	r2, [sp, #20]
    176e:	3208      	adds	r2, #8
    1770:	47a0      	blx	r4
    1772:	e01f      	b.n	17b4 <hif_handle_isr+0x1dc>
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
    1774:	ab04      	add	r3, sp, #16
    1776:	781b      	ldrb	r3, [r3, #0]
    1778:	2b04      	cmp	r3, #4
    177a:	d10d      	bne.n	1798 <hif_handle_isr+0x1c0>
					{
						if(pfOtaCb)
    177c:	4b52      	ldr	r3, [pc, #328]	; (18c8 <hif_handle_isr+0x2f0>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	2b00      	cmp	r3, #0
    1782:	d017      	beq.n	17b4 <hif_handle_isr+0x1dc>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1784:	aa04      	add	r2, sp, #16
    1786:	7850      	ldrb	r0, [r2, #1]
    1788:	b2c0      	uxtb	r0, r0
    178a:	8851      	ldrh	r1, [r2, #2]
    178c:	3908      	subs	r1, #8
    178e:	b289      	uxth	r1, r1
    1790:	9a05      	ldr	r2, [sp, #20]
    1792:	3208      	adds	r2, #8
    1794:	4798      	blx	r3
    1796:	e00d      	b.n	17b4 <hif_handle_isr+0x1dc>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    1798:	4839      	ldr	r0, [pc, #228]	; (1880 <hif_handle_isr+0x2a8>)
    179a:	493e      	ldr	r1, [pc, #248]	; (1894 <hif_handle_isr+0x2bc>)
    179c:	22fc      	movs	r2, #252	; 0xfc
    179e:	0052      	lsls	r2, r2, #1
    17a0:	4b3d      	ldr	r3, [pc, #244]	; (1898 <hif_handle_isr+0x2c0>)
    17a2:	4798      	blx	r3
    17a4:	4849      	ldr	r0, [pc, #292]	; (18cc <hif_handle_isr+0x2f4>)
    17a6:	4b3e      	ldr	r3, [pc, #248]	; (18a0 <hif_handle_isr+0x2c8>)
    17a8:	4798      	blx	r3
    17aa:	200d      	movs	r0, #13
    17ac:	4b3d      	ldr	r3, [pc, #244]	; (18a4 <hif_handle_isr+0x2cc>)
    17ae:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    17b0:	24fa      	movs	r4, #250	; 0xfa
    17b2:	e046      	b.n	1842 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    17b4:	4b3c      	ldr	r3, [pc, #240]	; (18a8 <hif_handle_isr+0x2d0>)
    17b6:	781b      	ldrb	r3, [r3, #0]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d13f      	bne.n	183c <hif_handle_isr+0x264>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    17bc:	4830      	ldr	r0, [pc, #192]	; (1880 <hif_handle_isr+0x2a8>)
    17be:	4935      	ldr	r1, [pc, #212]	; (1894 <hif_handle_isr+0x2bc>)
    17c0:	4a43      	ldr	r2, [pc, #268]	; (18d0 <hif_handle_isr+0x2f8>)
    17c2:	4b35      	ldr	r3, [pc, #212]	; (1898 <hif_handle_isr+0x2c0>)
    17c4:	4798      	blx	r3
    17c6:	4843      	ldr	r0, [pc, #268]	; (18d4 <hif_handle_isr+0x2fc>)
    17c8:	4b35      	ldr	r3, [pc, #212]	; (18a0 <hif_handle_isr+0x2c8>)
    17ca:	4798      	blx	r3
    17cc:	200d      	movs	r0, #13
    17ce:	4b35      	ldr	r3, [pc, #212]	; (18a4 <hif_handle_isr+0x2cc>)
    17d0:	4798      	blx	r3
						ret = hif_set_rx_done();
    17d2:	4b41      	ldr	r3, [pc, #260]	; (18d8 <hif_handle_isr+0x300>)
    17d4:	4798      	blx	r3
    17d6:	e031      	b.n	183c <hif_handle_isr+0x264>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
    17d8:	4829      	ldr	r0, [pc, #164]	; (1880 <hif_handle_isr+0x2a8>)
    17da:	492e      	ldr	r1, [pc, #184]	; (1894 <hif_handle_isr+0x2bc>)
    17dc:	4a3f      	ldr	r2, [pc, #252]	; (18dc <hif_handle_isr+0x304>)
    17de:	4b2e      	ldr	r3, [pc, #184]	; (1898 <hif_handle_isr+0x2c0>)
    17e0:	4798      	blx	r3
    17e2:	483f      	ldr	r0, [pc, #252]	; (18e0 <hif_handle_isr+0x308>)
    17e4:	4b2e      	ldr	r3, [pc, #184]	; (18a0 <hif_handle_isr+0x2c8>)
    17e6:	4798      	blx	r3
    17e8:	200d      	movs	r0, #13
    17ea:	4b2e      	ldr	r3, [pc, #184]	; (18a4 <hif_handle_isr+0x2cc>)
    17ec:	4798      	blx	r3
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    17ee:	24fe      	movs	r4, #254	; 0xfe
    17f0:	e029      	b.n	1846 <hif_handle_isr+0x26e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    17f2:	4823      	ldr	r0, [pc, #140]	; (1880 <hif_handle_isr+0x2a8>)
    17f4:	4927      	ldr	r1, [pc, #156]	; (1894 <hif_handle_isr+0x2bc>)
    17f6:	4a3b      	ldr	r2, [pc, #236]	; (18e4 <hif_handle_isr+0x30c>)
    17f8:	4c27      	ldr	r4, [pc, #156]	; (1898 <hif_handle_isr+0x2c0>)
    17fa:	47a0      	blx	r4
    17fc:	483a      	ldr	r0, [pc, #232]	; (18e8 <hif_handle_isr+0x310>)
    17fe:	9903      	ldr	r1, [sp, #12]
    1800:	47a0      	blx	r4
    1802:	200d      	movs	r0, #13
    1804:	4b27      	ldr	r3, [pc, #156]	; (18a4 <hif_handle_isr+0x2cc>)
    1806:	4798      	blx	r3
    1808:	e018      	b.n	183c <hif_handle_isr+0x264>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    180a:	481d      	ldr	r0, [pc, #116]	; (1880 <hif_handle_isr+0x2a8>)
    180c:	4921      	ldr	r1, [pc, #132]	; (1894 <hif_handle_isr+0x2bc>)
    180e:	2285      	movs	r2, #133	; 0x85
    1810:	0092      	lsls	r2, r2, #2
    1812:	4b21      	ldr	r3, [pc, #132]	; (1898 <hif_handle_isr+0x2c0>)
    1814:	4798      	blx	r3
    1816:	4835      	ldr	r0, [pc, #212]	; (18ec <hif_handle_isr+0x314>)
    1818:	4b21      	ldr	r3, [pc, #132]	; (18a0 <hif_handle_isr+0x2c8>)
    181a:	4798      	blx	r3
    181c:	200d      	movs	r0, #13
    181e:	4b21      	ldr	r3, [pc, #132]	; (18a4 <hif_handle_isr+0x2cc>)
    1820:	4798      	blx	r3
    1822:	e010      	b.n	1846 <hif_handle_isr+0x26e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    1824:	1c38      	adds	r0, r7, #0
    1826:	491b      	ldr	r1, [pc, #108]	; (1894 <hif_handle_isr+0x2bc>)
    1828:	4a31      	ldr	r2, [pc, #196]	; (18f0 <hif_handle_isr+0x318>)
    182a:	4b1b      	ldr	r3, [pc, #108]	; (1898 <hif_handle_isr+0x2c0>)
    182c:	4798      	blx	r3
    182e:	4831      	ldr	r0, [pc, #196]	; (18f4 <hif_handle_isr+0x31c>)
    1830:	4b1b      	ldr	r3, [pc, #108]	; (18a0 <hif_handle_isr+0x2c8>)
    1832:	4798      	blx	r3
    1834:	200d      	movs	r0, #13
    1836:	4b1b      	ldr	r3, [pc, #108]	; (18a4 <hif_handle_isr+0x2cc>)
    1838:	4798      	blx	r3
    183a:	e004      	b.n	1846 <hif_handle_isr+0x26e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
    183c:	4b2e      	ldr	r3, [pc, #184]	; (18f8 <hif_handle_isr+0x320>)
    183e:	4798      	blx	r3
    1840:	1c04      	adds	r4, r0, #0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
    1842:	2c00      	cmp	r4, #0
    1844:	d00b      	beq.n	185e <hif_handle_isr+0x286>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1846:	480e      	ldr	r0, [pc, #56]	; (1880 <hif_handle_isr+0x2a8>)
    1848:	492c      	ldr	r1, [pc, #176]	; (18fc <hif_handle_isr+0x324>)
    184a:	4a2d      	ldr	r2, [pc, #180]	; (1900 <hif_handle_isr+0x328>)
    184c:	4d12      	ldr	r5, [pc, #72]	; (1898 <hif_handle_isr+0x2c0>)
    184e:	47a8      	blx	r5
    1850:	b261      	sxtb	r1, r4
    1852:	482c      	ldr	r0, [pc, #176]	; (1904 <hif_handle_isr+0x32c>)
    1854:	47a8      	blx	r5
    1856:	200d      	movs	r0, #13
    1858:	4b12      	ldr	r3, [pc, #72]	; (18a4 <hif_handle_isr+0x2cc>)
    185a:	4798      	blx	r3
			}
		}
    185c:	e6cd      	b.n	15fa <hif_handle_isr+0x22>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    185e:	4652      	mov	r2, sl
    1860:	7813      	ldrb	r3, [r2, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d000      	beq.n	1868 <hif_handle_isr+0x290>
    1866:	e6c2      	b.n	15ee <hif_handle_isr+0x16>
			}
		}
	}

	return ret;
}
    1868:	2000      	movs	r0, #0
    186a:	b006      	add	sp, #24
    186c:	bc1c      	pop	{r2, r3, r4}
    186e:	4691      	mov	r9, r2
    1870:	469a      	mov	sl, r3
    1872:	46a3      	mov	fp, r4
    1874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	20000848 	.word	0x20000848
    187c:	000012c9 	.word	0x000012c9
    1880:	00009674 	.word	0x00009674
    1884:	00001070 	.word	0x00001070
    1888:	00002705 	.word	0x00002705
    188c:	00000fa5 	.word	0x00000fa5
    1890:	00002711 	.word	0x00002711
    1894:	000096c8 	.word	0x000096c8
    1898:	00007c39 	.word	0x00007c39
    189c:	000096ec 	.word	0x000096ec
    18a0:	00007d59 	.word	0x00007d59
    18a4:	00007c6d 	.word	0x00007c6d
    18a8:	20000858 	.word	0x20000858
    18ac:	00001084 	.word	0x00001084
    18b0:	00009710 	.word	0x00009710
    18b4:	0000271d 	.word	0x0000271d
    18b8:	00009734 	.word	0x00009734
    18bc:	0000974c 	.word	0x0000974c
    18c0:	20000844 	.word	0x20000844
    18c4:	20000854 	.word	0x20000854
    18c8:	2000085c 	.word	0x2000085c
    18cc:	0000978c 	.word	0x0000978c
    18d0:	000001ff 	.word	0x000001ff
    18d4:	000097a4 	.word	0x000097a4
    18d8:	0000128d 	.word	0x0000128d
    18dc:	00000207 	.word	0x00000207
    18e0:	000097c8 	.word	0x000097c8
    18e4:	0000020e 	.word	0x0000020e
    18e8:	000097dc 	.word	0x000097dc
    18ec:	000097f8 	.word	0x000097f8
    18f0:	0000021a 	.word	0x0000021a
    18f4:	0000981c 	.word	0x0000981c
    18f8:	00001331 	.word	0x00001331
    18fc:	0000969c 	.word	0x0000969c
    1900:	00000239 	.word	0x00000239
    1904:	0000983c 	.word	0x0000983c

00001908 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1908:	b5f0      	push	{r4, r5, r6, r7, lr}
    190a:	464f      	mov	r7, r9
    190c:	4646      	mov	r6, r8
    190e:	b4c0      	push	{r6, r7}
    1910:	b083      	sub	sp, #12
    1912:	1c05      	adds	r5, r0, #0
    1914:	1c0f      	adds	r7, r1, #0
    1916:	1c16      	adds	r6, r2, #0
    1918:	4698      	mov	r8, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    191a:	2800      	cmp	r0, #0
    191c:	d003      	beq.n	1926 <hif_receive+0x1e>
    191e:	2900      	cmp	r1, #0
    1920:	d001      	beq.n	1926 <hif_receive+0x1e>
    1922:	2a00      	cmp	r2, #0
    1924:	d114      	bne.n	1950 <hif_receive+0x48>
	{
		if(isDone)
    1926:	4643      	mov	r3, r8
    1928:	2b00      	cmp	r3, #0
    192a:	d004      	beq.n	1936 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
    192c:	2201      	movs	r2, #1
    192e:	4b2f      	ldr	r3, [pc, #188]	; (19ec <hif_receive+0xe4>)
    1930:	701a      	strb	r2, [r3, #0]

			/* set RX done */
			ret = hif_set_rx_done();
    1932:	4b2f      	ldr	r3, [pc, #188]	; (19f0 <hif_receive+0xe8>)
    1934:	4798      	blx	r3
		}
			
		ret = M2M_ERR_FAIL;
		M2M_ERR(" hif_receive: Invalid argument\n");
    1936:	482f      	ldr	r0, [pc, #188]	; (19f4 <hif_receive+0xec>)
    1938:	492f      	ldr	r1, [pc, #188]	; (19f8 <hif_receive+0xf0>)
    193a:	4a30      	ldr	r2, [pc, #192]	; (19fc <hif_receive+0xf4>)
    193c:	4b30      	ldr	r3, [pc, #192]	; (1a00 <hif_receive+0xf8>)
    193e:	4798      	blx	r3
    1940:	4830      	ldr	r0, [pc, #192]	; (1a04 <hif_receive+0xfc>)
    1942:	4b31      	ldr	r3, [pc, #196]	; (1a08 <hif_receive+0x100>)
    1944:	4798      	blx	r3
    1946:	200d      	movs	r0, #13
    1948:	4b30      	ldr	r3, [pc, #192]	; (1a0c <hif_receive+0x104>)
    194a:	4798      	blx	r3

			/* set RX done */
			ret = hif_set_rx_done();
		}
			
		ret = M2M_ERR_FAIL;
    194c:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR(" hif_receive: Invalid argument\n");
		goto ERR1;
    194e:	e046      	b.n	19de <hif_receive+0xd6>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1950:	482f      	ldr	r0, [pc, #188]	; (1a10 <hif_receive+0x108>)
    1952:	4669      	mov	r1, sp
    1954:	4a2f      	ldr	r2, [pc, #188]	; (1a14 <hif_receive+0x10c>)
    1956:	4790      	blx	r2
    1958:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
    195a:	d140      	bne.n	19de <hif_receive+0xd6>


	size = (uint16)((reg >> 2) & 0xfff);
    195c:	9b00      	ldr	r3, [sp, #0]
    195e:	4699      	mov	r9, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    1960:	482d      	ldr	r0, [pc, #180]	; (1a18 <hif_receive+0x110>)
    1962:	a901      	add	r1, sp, #4
    1964:	4b2b      	ldr	r3, [pc, #172]	; (1a14 <hif_receive+0x10c>)
    1966:	4798      	blx	r3
    1968:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
    196a:	d138      	bne.n	19de <hif_receive+0xd6>

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    196c:	1c28      	adds	r0, r5, #0
    196e:	1c39      	adds	r1, r7, #0
    1970:	1c32      	adds	r2, r6, #0
    1972:	4b2a      	ldr	r3, [pc, #168]	; (1a1c <hif_receive+0x114>)
    1974:	4798      	blx	r3
    1976:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
    1978:	d131      	bne.n	19de <hif_receive+0xd6>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
    197a:	464b      	mov	r3, r9
    197c:	049f      	lsls	r7, r3, #18
    197e:	0d3f      	lsrs	r7, r7, #20

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
    1980:	42be      	cmp	r6, r7
    1982:	d90d      	bls.n	19a0 <hif_receive+0x98>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    1984:	481b      	ldr	r0, [pc, #108]	; (19f4 <hif_receive+0xec>)
    1986:	491c      	ldr	r1, [pc, #112]	; (19f8 <hif_receive+0xf0>)
    1988:	4a25      	ldr	r2, [pc, #148]	; (1a20 <hif_receive+0x118>)
    198a:	4c1d      	ldr	r4, [pc, #116]	; (1a00 <hif_receive+0xf8>)
    198c:	47a0      	blx	r4
    198e:	4825      	ldr	r0, [pc, #148]	; (1a24 <hif_receive+0x11c>)
    1990:	1c31      	adds	r1, r6, #0
    1992:	1c3a      	adds	r2, r7, #0
    1994:	47a0      	blx	r4
    1996:	200d      	movs	r0, #13
    1998:	4b1c      	ldr	r3, [pc, #112]	; (1a0c <hif_receive+0x104>)
    199a:	4798      	blx	r3
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
    199c:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
    199e:	e01e      	b.n	19de <hif_receive+0xd6>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    19a0:	9b01      	ldr	r3, [sp, #4]
    19a2:	429d      	cmp	r5, r3
    19a4:	d303      	bcc.n	19ae <hif_receive+0xa6>
    19a6:	19ad      	adds	r5, r5, r6
    19a8:	18ff      	adds	r7, r7, r3
    19aa:	42bd      	cmp	r5, r7
    19ac:	d90c      	bls.n	19c8 <hif_receive+0xc0>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    19ae:	4811      	ldr	r0, [pc, #68]	; (19f4 <hif_receive+0xec>)
    19b0:	4911      	ldr	r1, [pc, #68]	; (19f8 <hif_receive+0xf0>)
    19b2:	4a1d      	ldr	r2, [pc, #116]	; (1a28 <hif_receive+0x120>)
    19b4:	4b12      	ldr	r3, [pc, #72]	; (1a00 <hif_receive+0xf8>)
    19b6:	4798      	blx	r3
    19b8:	481c      	ldr	r0, [pc, #112]	; (1a2c <hif_receive+0x124>)
    19ba:	4b13      	ldr	r3, [pc, #76]	; (1a08 <hif_receive+0x100>)
    19bc:	4798      	blx	r3
    19be:	200d      	movs	r0, #13
    19c0:	4b12      	ldr	r3, [pc, #72]	; (1a0c <hif_receive+0x104>)
    19c2:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
    19c4:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    19c6:	e00a      	b.n	19de <hif_receive+0xd6>
	}

	/* check if this is the last packet */
	if((((address+size) - (u32Addr+u16Sz)) <= 0) || isDone)
    19c8:	42bd      	cmp	r5, r7
    19ca:	d002      	beq.n	19d2 <hif_receive+0xca>
    19cc:	4643      	mov	r3, r8
    19ce:	2b00      	cmp	r3, #0
    19d0:	d005      	beq.n	19de <hif_receive+0xd6>
	{
		gu8HifSizeDone = 1;
    19d2:	2201      	movs	r2, #1
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <hif_receive+0xe4>)
    19d6:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <hif_receive+0xe8>)
    19da:	4798      	blx	r3
    19dc:	1c04      	adds	r4, r0, #0
	}



ERR1:
	return ret;
    19de:	b260      	sxtb	r0, r4
}
    19e0:	b003      	add	sp, #12
    19e2:	bc0c      	pop	{r2, r3}
    19e4:	4690      	mov	r8, r2
    19e6:	4699      	mov	r9, r3
    19e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	20000858 	.word	0x20000858
    19f0:	0000128d 	.word	0x0000128d
    19f4:	00009674 	.word	0x00009674
    19f8:	00009920 	.word	0x00009920
    19fc:	0000025e 	.word	0x0000025e
    1a00:	00007c39 	.word	0x00007c39
    1a04:	0000986c 	.word	0x0000986c
    1a08:	00007d59 	.word	0x00007d59
    1a0c:	00007c6d 	.word	0x00007c6d
    1a10:	00001070 	.word	0x00001070
    1a14:	00002705 	.word	0x00002705
    1a18:	00001084 	.word	0x00001084
    1a1c:	0000271d 	.word	0x0000271d
    1a20:	00000271 	.word	0x00000271
    1a24:	0000988c 	.word	0x0000988c
    1a28:	00000277 	.word	0x00000277
    1a2c:	000098d0 	.word	0x000098d0

00001a30 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1a30:	b538      	push	{r3, r4, r5, lr}
    1a32:	1e04      	subs	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1a34:	2c02      	cmp	r4, #2
    1a36:	d009      	beq.n	1a4c <hif_register_cb+0x1c>
    1a38:	2802      	cmp	r0, #2
    1a3a:	d802      	bhi.n	1a42 <hif_register_cb+0x12>
    1a3c:	2801      	cmp	r0, #1
    1a3e:	d009      	beq.n	1a54 <hif_register_cb+0x24>
    1a40:	e014      	b.n	1a6c <hif_register_cb+0x3c>
    1a42:	2803      	cmp	r0, #3
    1a44:	d00e      	beq.n	1a64 <hif_register_cb+0x34>
    1a46:	2804      	cmp	r0, #4
    1a48:	d008      	beq.n	1a5c <hif_register_cb+0x2c>
    1a4a:	e00f      	b.n	1a6c <hif_register_cb+0x3c>
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <hif_register_cb+0x58>)
    1a4e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1a50:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
    1a52:	e017      	b.n	1a84 <hif_register_cb+0x54>
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
    1a54:	4b0d      	ldr	r3, [pc, #52]	; (1a8c <hif_register_cb+0x5c>)
    1a56:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1a58:	2000      	movs	r0, #0
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
    1a5a:	e013      	b.n	1a84 <hif_register_cb+0x54>
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
    1a5c:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <hif_register_cb+0x60>)
    1a5e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1a60:	2000      	movs	r0, #0
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
    1a62:	e00f      	b.n	1a84 <hif_register_cb+0x54>
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
    1a64:	4b0b      	ldr	r3, [pc, #44]	; (1a94 <hif_register_cb+0x64>)
    1a66:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1a68:	2000      	movs	r0, #0
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
			break;
    1a6a:	e00b      	b.n	1a84 <hif_register_cb+0x54>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1a6c:	480a      	ldr	r0, [pc, #40]	; (1a98 <hif_register_cb+0x68>)
    1a6e:	490b      	ldr	r1, [pc, #44]	; (1a9c <hif_register_cb+0x6c>)
    1a70:	4a0b      	ldr	r2, [pc, #44]	; (1aa0 <hif_register_cb+0x70>)
    1a72:	4d0c      	ldr	r5, [pc, #48]	; (1aa4 <hif_register_cb+0x74>)
    1a74:	47a8      	blx	r5
    1a76:	480c      	ldr	r0, [pc, #48]	; (1aa8 <hif_register_cb+0x78>)
    1a78:	1c21      	adds	r1, r4, #0
    1a7a:	47a8      	blx	r5
    1a7c:	200d      	movs	r0, #13
    1a7e:	4b0b      	ldr	r3, [pc, #44]	; (1aac <hif_register_cb+0x7c>)
    1a80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1a82:	20f4      	movs	r0, #244	; 0xf4
			break;
	}
	return ret;
    1a84:	b240      	sxtb	r0, r0
}
    1a86:	bd38      	pop	{r3, r4, r5, pc}
    1a88:	20000854 	.word	0x20000854
    1a8c:	20000844 	.word	0x20000844
    1a90:	2000085c 	.word	0x2000085c
    1a94:	2000084c 	.word	0x2000084c
    1a98:	00009674 	.word	0x00009674
    1a9c:	000096b8 	.word	0x000096b8
    1aa0:	000002a6 	.word	0x000002a6
    1aa4:	00007c39 	.word	0x00007c39
    1aa8:	00009914 	.word	0x00009914
    1aac:	00007c6d 	.word	0x00007c6d

00001ab0 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    1ab0:	b508      	push	{r3, lr}
	pfWifiCb = NULL;
    1ab2:	2300      	movs	r3, #0
    1ab4:	4a09      	ldr	r2, [pc, #36]	; (1adc <hif_init+0x2c>)
    1ab6:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
    1ab8:	4a09      	ldr	r2, [pc, #36]	; (1ae0 <hif_init+0x30>)
    1aba:	6013      	str	r3, [r2, #0]

	gu8ChipSleep = 0;
    1abc:	4a09      	ldr	r2, [pc, #36]	; (1ae4 <hif_init+0x34>)
    1abe:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
    1ac0:	4a09      	ldr	r2, [pc, #36]	; (1ae8 <hif_init+0x38>)
    1ac2:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
    1ac4:	4a09      	ldr	r2, [pc, #36]	; (1aec <hif_init+0x3c>)
    1ac6:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
    1ac8:	4809      	ldr	r0, [pc, #36]	; (1af0 <hif_init+0x40>)
    1aca:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <hif_init+0x44>)
    1acc:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GRP_HIF,m2m_hif_cb);
    1ace:	2003      	movs	r0, #3
    1ad0:	4909      	ldr	r1, [pc, #36]	; (1af8 <hif_init+0x48>)
    1ad2:	4b0a      	ldr	r3, [pc, #40]	; (1afc <hif_init+0x4c>)
    1ad4:	4798      	blx	r3

	return M2M_SUCCESS;
}
    1ad6:	2000      	movs	r0, #0
    1ad8:	bd08      	pop	{r3, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	20000844 	.word	0x20000844
    1ae0:	20000854 	.word	0x20000854
    1ae4:	20000860 	.word	0x20000860
    1ae8:	20000850 	.word	0x20000850
    1aec:	20000848 	.word	0x20000848
    1af0:	00001279 	.word	0x00001279
    1af4:	00000f4d 	.word	0x00000f4d
    1af8:	00001289 	.word	0x00001289
    1afc:	00001a31 	.word	0x00001a31

00001b00 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1b00:	b530      	push	{r4, r5, lr}
    1b02:	b09f      	sub	sp, #124	; 0x7c
    1b04:	1c04      	adds	r4, r0, #0
    1b06:	1c15      	adds	r5, r2, #0
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1b08:	282c      	cmp	r0, #44	; 0x2c
    1b0a:	d111      	bne.n	1b30 <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1b0c:	1c10      	adds	r0, r2, #0
    1b0e:	a903      	add	r1, sp, #12
    1b10:	2204      	movs	r2, #4
    1b12:	2300      	movs	r3, #0
    1b14:	4c7c      	ldr	r4, [pc, #496]	; (1d08 <m2m_wifi_cb+0x208>)
    1b16:	47a0      	blx	r4
    1b18:	2800      	cmp	r0, #0
    1b1a:	d000      	beq.n	1b1e <m2m_wifi_cb+0x1e>
    1b1c:	e0f1      	b.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1b1e:	4b7b      	ldr	r3, [pc, #492]	; (1d0c <m2m_wifi_cb+0x20c>)
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d100      	bne.n	1b28 <m2m_wifi_cb+0x28>
    1b26:	e0ec      	b.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1b28:	202c      	movs	r0, #44	; 0x2c
    1b2a:	a903      	add	r1, sp, #12
    1b2c:	4798      	blx	r3
    1b2e:	e0e8      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1b30:	2806      	cmp	r0, #6
    1b32:	d111      	bne.n	1b58 <m2m_wifi_cb+0x58>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1b34:	1c10      	adds	r0, r2, #0
    1b36:	a903      	add	r1, sp, #12
    1b38:	2230      	movs	r2, #48	; 0x30
    1b3a:	2301      	movs	r3, #1
    1b3c:	4c72      	ldr	r4, [pc, #456]	; (1d08 <m2m_wifi_cb+0x208>)
    1b3e:	47a0      	blx	r4
    1b40:	2800      	cmp	r0, #0
    1b42:	d000      	beq.n	1b46 <m2m_wifi_cb+0x46>
    1b44:	e0dd      	b.n	1d02 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
    1b46:	4b71      	ldr	r3, [pc, #452]	; (1d0c <m2m_wifi_cb+0x20c>)
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d100      	bne.n	1b50 <m2m_wifi_cb+0x50>
    1b4e:	e0d8      	b.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1b50:	2006      	movs	r0, #6
    1b52:	a903      	add	r1, sp, #12
    1b54:	4798      	blx	r3
    1b56:	e0d4      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1b58:	280e      	cmp	r0, #14
    1b5a:	d100      	bne.n	1b5e <m2m_wifi_cb+0x5e>
    1b5c:	e0d1      	b.n	1d02 <m2m_wifi_cb+0x202>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1b5e:	2836      	cmp	r0, #54	; 0x36
    1b60:	d111      	bne.n	1b86 <m2m_wifi_cb+0x86>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1b62:	1c10      	adds	r0, r2, #0
    1b64:	a903      	add	r1, sp, #12
    1b66:	2210      	movs	r2, #16
    1b68:	2300      	movs	r3, #0
    1b6a:	4c67      	ldr	r4, [pc, #412]	; (1d08 <m2m_wifi_cb+0x208>)
    1b6c:	47a0      	blx	r4
    1b6e:	2800      	cmp	r0, #0
    1b70:	d000      	beq.n	1b74 <m2m_wifi_cb+0x74>
    1b72:	e0c6      	b.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1b74:	4b65      	ldr	r3, [pc, #404]	; (1d0c <m2m_wifi_cb+0x20c>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d100      	bne.n	1b7e <m2m_wifi_cb+0x7e>
    1b7c:	e0c1      	b.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig.u32StaticIP);
    1b7e:	2036      	movs	r0, #54	; 0x36
    1b80:	a903      	add	r1, sp, #12
    1b82:	4798      	blx	r3
    1b84:	e0bd      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1b86:	2833      	cmp	r0, #51	; 0x33
    1b88:	d116      	bne.n	1bb8 <m2m_wifi_cb+0xb8>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1b8a:	a803      	add	r0, sp, #12
    1b8c:	2100      	movs	r1, #0
    1b8e:	2264      	movs	r2, #100	; 0x64
    1b90:	4b5f      	ldr	r3, [pc, #380]	; (1d10 <m2m_wifi_cb+0x210>)
    1b92:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1b94:	1c28      	adds	r0, r5, #0
    1b96:	a903      	add	r1, sp, #12
    1b98:	2264      	movs	r2, #100	; 0x64
    1b9a:	2300      	movs	r3, #0
    1b9c:	4c5a      	ldr	r4, [pc, #360]	; (1d08 <m2m_wifi_cb+0x208>)
    1b9e:	47a0      	blx	r4
    1ba0:	2800      	cmp	r0, #0
    1ba2:	d000      	beq.n	1ba6 <m2m_wifi_cb+0xa6>
    1ba4:	e0ad      	b.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1ba6:	4b59      	ldr	r3, [pc, #356]	; (1d0c <m2m_wifi_cb+0x20c>)
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d100      	bne.n	1bb0 <m2m_wifi_cb+0xb0>
    1bae:	e0a8      	b.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1bb0:	2033      	movs	r0, #51	; 0x33
    1bb2:	a903      	add	r1, sp, #12
    1bb4:	4798      	blx	r3
    1bb6:	e0a4      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1bb8:	2838      	cmp	r0, #56	; 0x38
    1bba:	d123      	bne.n	1c04 <m2m_wifi_cb+0x104>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1bbc:	1c10      	adds	r0, r2, #0
    1bbe:	a903      	add	r1, sp, #12
    1bc0:	2204      	movs	r2, #4
    1bc2:	2300      	movs	r3, #0
    1bc4:	4c50      	ldr	r4, [pc, #320]	; (1d08 <m2m_wifi_cb+0x208>)
    1bc6:	47a0      	blx	r4
    1bc8:	2800      	cmp	r0, #0
    1bca:	d000      	beq.n	1bce <m2m_wifi_cb+0xce>
    1bcc:	e099      	b.n	1d02 <m2m_wifi_cb+0x202>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
    1bce:	4851      	ldr	r0, [pc, #324]	; (1d14 <m2m_wifi_cb+0x214>)
    1bd0:	4c51      	ldr	r4, [pc, #324]	; (1d18 <m2m_wifi_cb+0x218>)
    1bd2:	47a0      	blx	r4
    1bd4:	9803      	ldr	r0, [sp, #12]
    1bd6:	23ff      	movs	r3, #255	; 0xff
    1bd8:	1c19      	adds	r1, r3, #0
    1bda:	4001      	ands	r1, r0
    1bdc:	0a02      	lsrs	r2, r0, #8
    1bde:	401a      	ands	r2, r3
    1be0:	0c05      	lsrs	r5, r0, #16
    1be2:	402b      	ands	r3, r5
    1be4:	0e00      	lsrs	r0, r0, #24
    1be6:	9000      	str	r0, [sp, #0]
    1be8:	484c      	ldr	r0, [pc, #304]	; (1d1c <m2m_wifi_cb+0x21c>)
    1bea:	47a0      	blx	r4
    1bec:	200d      	movs	r0, #13
    1bee:	4b4c      	ldr	r3, [pc, #304]	; (1d20 <m2m_wifi_cb+0x220>)
    1bf0:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    1bf2:	4b46      	ldr	r3, [pc, #280]	; (1d0c <m2m_wifi_cb+0x20c>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d100      	bne.n	1bfc <m2m_wifi_cb+0xfc>
    1bfa:	e082      	b.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1bfc:	2038      	movs	r0, #56	; 0x38
    1bfe:	2100      	movs	r1, #0
    1c00:	4798      	blx	r3
    1c02:	e07e      	b.n	1d02 <m2m_wifi_cb+0x202>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1c04:	2811      	cmp	r0, #17
    1c06:	d116      	bne.n	1c36 <m2m_wifi_cb+0x136>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    1c08:	2200      	movs	r2, #0
    1c0a:	4b46      	ldr	r3, [pc, #280]	; (1d24 <m2m_wifi_cb+0x224>)
    1c0c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1c0e:	1c28      	adds	r0, r5, #0
    1c10:	a903      	add	r1, sp, #12
    1c12:	2204      	movs	r2, #4
    1c14:	2300      	movs	r3, #0
    1c16:	4c3c      	ldr	r4, [pc, #240]	; (1d08 <m2m_wifi_cb+0x208>)
    1c18:	47a0      	blx	r4
    1c1a:	2800      	cmp	r0, #0
    1c1c:	d171      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			gu8ChNum = strState.u8NumofCh;
    1c1e:	ab03      	add	r3, sp, #12
    1c20:	781a      	ldrb	r2, [r3, #0]
    1c22:	4b41      	ldr	r3, [pc, #260]	; (1d28 <m2m_wifi_cb+0x228>)
    1c24:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1c26:	4b39      	ldr	r3, [pc, #228]	; (1d0c <m2m_wifi_cb+0x20c>)
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d069      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1c2e:	2011      	movs	r0, #17
    1c30:	a903      	add	r1, sp, #12
    1c32:	4798      	blx	r3
    1c34:	e065      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1c36:	2813      	cmp	r0, #19
    1c38:	d10f      	bne.n	1c5a <m2m_wifi_cb+0x15a>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1c3a:	1c10      	adds	r0, r2, #0
    1c3c:	a903      	add	r1, sp, #12
    1c3e:	222c      	movs	r2, #44	; 0x2c
    1c40:	2300      	movs	r3, #0
    1c42:	4c31      	ldr	r4, [pc, #196]	; (1d08 <m2m_wifi_cb+0x208>)
    1c44:	47a0      	blx	r4
    1c46:	2800      	cmp	r0, #0
    1c48:	d15b      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1c4a:	4b30      	ldr	r3, [pc, #192]	; (1d0c <m2m_wifi_cb+0x20c>)
    1c4c:	681b      	ldr	r3, [r3, #0]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d057      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1c52:	2013      	movs	r0, #19
    1c54:	a903      	add	r1, sp, #12
    1c56:	4798      	blx	r3
    1c58:	e053      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1c5a:	2804      	cmp	r0, #4
    1c5c:	d10f      	bne.n	1c7e <m2m_wifi_cb+0x17e>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c5e:	1c10      	adds	r0, r2, #0
    1c60:	a91c      	add	r1, sp, #112	; 0x70
    1c62:	2204      	movs	r2, #4
    1c64:	2300      	movs	r3, #0
    1c66:	4c28      	ldr	r4, [pc, #160]	; (1d08 <m2m_wifi_cb+0x208>)
    1c68:	47a0      	blx	r4
    1c6a:	2800      	cmp	r0, #0
    1c6c:	d149      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1c6e:	4b27      	ldr	r3, [pc, #156]	; (1d0c <m2m_wifi_cb+0x20c>)
    1c70:	681b      	ldr	r3, [r3, #0]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d045      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1c76:	2004      	movs	r0, #4
    1c78:	a91c      	add	r1, sp, #112	; 0x70
    1c7a:	4798      	blx	r3
    1c7c:	e041      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1c7e:	2815      	cmp	r0, #21
    1c80:	d10f      	bne.n	1ca2 <m2m_wifi_cb+0x1a2>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c82:	1c10      	adds	r0, r2, #0
    1c84:	a91c      	add	r1, sp, #112	; 0x70
    1c86:	2204      	movs	r2, #4
    1c88:	2300      	movs	r3, #0
    1c8a:	4c1f      	ldr	r4, [pc, #124]	; (1d08 <m2m_wifi_cb+0x208>)
    1c8c:	47a0      	blx	r4
    1c8e:	2800      	cmp	r0, #0
    1c90:	d137      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
    1c92:	4b1e      	ldr	r3, [pc, #120]	; (1d0c <m2m_wifi_cb+0x20c>)
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d033      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1c9a:	2015      	movs	r0, #21
    1c9c:	a91c      	add	r1, sp, #112	; 0x70
    1c9e:	4798      	blx	r3
    1ca0:	e02f      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1ca2:	2809      	cmp	r0, #9
    1ca4:	d10f      	bne.n	1cc6 <m2m_wifi_cb+0x1c6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1ca6:	1c10      	adds	r0, r2, #0
    1ca8:	a903      	add	r1, sp, #12
    1caa:	2264      	movs	r2, #100	; 0x64
    1cac:	2301      	movs	r3, #1
    1cae:	4c16      	ldr	r4, [pc, #88]	; (1d08 <m2m_wifi_cb+0x208>)
    1cb0:	47a0      	blx	r4
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d125      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
    1cb6:	4b15      	ldr	r3, [pc, #84]	; (1d0c <m2m_wifi_cb+0x20c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d021      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1cbe:	2009      	movs	r0, #9
    1cc0:	a903      	add	r1, sp, #12
    1cc2:	4798      	blx	r3
    1cc4:	e01d      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1cc6:	282a      	cmp	r0, #42	; 0x2a
    1cc8:	d10f      	bne.n	1cea <m2m_wifi_cb+0x1ea>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1cca:	1c10      	adds	r0, r2, #0
    1ccc:	a903      	add	r1, sp, #12
    1cce:	2204      	movs	r2, #4
    1cd0:	2301      	movs	r3, #1
    1cd2:	4c0d      	ldr	r4, [pc, #52]	; (1d08 <m2m_wifi_cb+0x208>)
    1cd4:	47a0      	blx	r4
    1cd6:	2800      	cmp	r0, #0
    1cd8:	d113      	bne.n	1d02 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
    1cda:	4b0c      	ldr	r3, [pc, #48]	; (1d0c <m2m_wifi_cb+0x20c>)
    1cdc:	681b      	ldr	r3, [r3, #0]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d00f      	beq.n	1d02 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1ce2:	202a      	movs	r0, #42	; 0x2a
    1ce4:	a903      	add	r1, sp, #12
    1ce6:	4798      	blx	r3
    1ce8:	e00b      	b.n	1d02 <m2m_wifi_cb+0x202>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1cea:	4810      	ldr	r0, [pc, #64]	; (1d2c <m2m_wifi_cb+0x22c>)
    1cec:	4910      	ldr	r1, [pc, #64]	; (1d30 <m2m_wifi_cb+0x230>)
    1cee:	2288      	movs	r2, #136	; 0x88
    1cf0:	0052      	lsls	r2, r2, #1
    1cf2:	4d09      	ldr	r5, [pc, #36]	; (1d18 <m2m_wifi_cb+0x218>)
    1cf4:	47a8      	blx	r5
    1cf6:	480f      	ldr	r0, [pc, #60]	; (1d34 <m2m_wifi_cb+0x234>)
    1cf8:	1c21      	adds	r1, r4, #0
    1cfa:	47a8      	blx	r5
    1cfc:	200d      	movs	r0, #13
    1cfe:	4b08      	ldr	r3, [pc, #32]	; (1d20 <m2m_wifi_cb+0x220>)
    1d00:	4798      	blx	r3
	}
}
    1d02:	b01f      	add	sp, #124	; 0x7c
    1d04:	bd30      	pop	{r4, r5, pc}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	00001909 	.word	0x00001909
    1d0c:	20000864 	.word	0x20000864
    1d10:	0000124d 	.word	0x0000124d
    1d14:	00009938 	.word	0x00009938
    1d18:	00007c39 	.word	0x00007c39
    1d1c:	00009944 	.word	0x00009944
    1d20:	00007c6d 	.word	0x00007c6d
    1d24:	20000868 	.word	0x20000868
    1d28:	20000869 	.word	0x20000869
    1d2c:	00009674 	.word	0x00009674
    1d30:	0000992c 	.word	0x0000992c
    1d34:	00009964 	.word	0x00009964

00001d38 <m2m_wifi_init>:
ERR1:
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1d38:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	gpfAppWifiCb = param->pfAppWifiCb;
    1d3a:	6802      	ldr	r2, [r0, #0]
    1d3c:	4b0c      	ldr	r3, [pc, #48]	; (1d70 <m2m_wifi_init+0x38>)
    1d3e:	601a      	str	r2, [r3, #0]
#endif

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1d40:	2200      	movs	r2, #0
    1d42:	4b0c      	ldr	r3, [pc, #48]	; (1d74 <m2m_wifi_init+0x3c>)
    1d44:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
    1d46:	2000      	movs	r0, #0
    1d48:	4b0b      	ldr	r3, [pc, #44]	; (1d78 <m2m_wifi_init+0x40>)
    1d4a:	4798      	blx	r3
    1d4c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1d4e:	d10c      	bne.n	1d6a <m2m_wifi_init+0x32>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1d50:	2000      	movs	r0, #0
    1d52:	4b0a      	ldr	r3, [pc, #40]	; (1d7c <m2m_wifi_init+0x44>)
    1d54:	4798      	blx	r3
    1d56:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1d58:	d104      	bne.n	1d64 <m2m_wifi_init+0x2c>

	hif_register_cb(M2M_REQ_GRP_WIFI,m2m_wifi_cb);
    1d5a:	2001      	movs	r0, #1
    1d5c:	4908      	ldr	r1, [pc, #32]	; (1d80 <m2m_wifi_init+0x48>)
    1d5e:	4b09      	ldr	r3, [pc, #36]	; (1d84 <m2m_wifi_init+0x4c>)
    1d60:	4798      	blx	r3

	return ret;
    1d62:	e002      	b.n	1d6a <m2m_wifi_init+0x32>

_EXIT1:
	nm_drv_deinit(NULL);
    1d64:	2000      	movs	r0, #0
    1d66:	4b08      	ldr	r3, [pc, #32]	; (1d88 <m2m_wifi_init+0x50>)
    1d68:	4798      	blx	r3
    1d6a:	b260      	sxtb	r0, r4
_EXIT0:
	return ret;
}
    1d6c:	bd10      	pop	{r4, pc}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	20000864 	.word	0x20000864
    1d74:	20000868 	.word	0x20000868
    1d78:	00002805 	.word	0x00002805
    1d7c:	00001ab1 	.word	0x00001ab1
    1d80:	00001b01 	.word	0x00001b01
    1d84:	00001a31 	.word	0x00001a31
    1d88:	00002a09 	.word	0x00002a09

00001d8c <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    1d8c:	b508      	push	{r3, lr}

	hif_deinit(NULL);
    1d8e:	2000      	movs	r0, #0
    1d90:	4b03      	ldr	r3, [pc, #12]	; (1da0 <m2m_wifi_deinit+0x14>)
    1d92:	4798      	blx	r3

	nm_drv_deinit(NULL);
    1d94:	2000      	movs	r0, #0
    1d96:	4b03      	ldr	r3, [pc, #12]	; (1da4 <m2m_wifi_deinit+0x18>)
    1d98:	4798      	blx	r3

	return M2M_SUCCESS;
}
    1d9a:	2000      	movs	r0, #0
    1d9c:	bd08      	pop	{r3, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	000013ad 	.word	0x000013ad
    1da4:	00002a09 	.word	0x00002a09

00001da8 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    1da8:	b508      	push	{r3, lr}
	return hif_handle_isr();
    1daa:	4b01      	ldr	r3, [pc, #4]	; (1db0 <m2m_wifi_handle_events+0x8>)
    1dac:	4798      	blx	r3
}
    1dae:	bd08      	pop	{r3, pc}
    1db0:	000015d9 	.word	0x000015d9

00001db4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	4657      	mov	r7, sl
    1db8:	464e      	mov	r6, r9
    1dba:	4645      	mov	r5, r8
    1dbc:	b4e0      	push	{r5, r6, r7}
    1dbe:	b0a0      	sub	sp, #128	; 0x80
    1dc0:	4681      	mov	r9, r0
    1dc2:	1c0f      	adds	r7, r1, #0
    1dc4:	1c14      	adds	r4, r2, #0
    1dc6:	1c1e      	adds	r6, r3, #0
    1dc8:	ab28      	add	r3, sp, #160	; 0xa0
    1dca:	881b      	ldrh	r3, [r3, #0]
    1dcc:	4698      	mov	r8, r3
    1dce:	ab29      	add	r3, sp, #164	; 0xa4
    1dd0:	781b      	ldrb	r3, [r3, #0]
    1dd2:	469a      	mov	sl, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;
	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1dd4:	2a01      	cmp	r2, #1
    1dd6:	d019      	beq.n	1e0c <m2m_wifi_connect_sc+0x58>
	{
		if((pvAuthInfo == NULL)||(m2m_strlen(pvAuthInfo)<=0)||(m2m_strlen(pvAuthInfo)>=M2M_MAX_PSK_LEN))
    1dd8:	2e00      	cmp	r6, #0
    1dda:	d009      	beq.n	1df0 <m2m_wifi_connect_sc+0x3c>
    1ddc:	1c30      	adds	r0, r6, #0
    1dde:	4b60      	ldr	r3, [pc, #384]	; (1f60 <m2m_wifi_connect_sc+0x1ac>)
    1de0:	4798      	blx	r3
    1de2:	2800      	cmp	r0, #0
    1de4:	d004      	beq.n	1df0 <m2m_wifi_connect_sc+0x3c>
    1de6:	1c30      	adds	r0, r6, #0
    1de8:	4b5d      	ldr	r3, [pc, #372]	; (1f60 <m2m_wifi_connect_sc+0x1ac>)
    1dea:	4798      	blx	r3
    1dec:	2840      	cmp	r0, #64	; 0x40
    1dee:	d90d      	bls.n	1e0c <m2m_wifi_connect_sc+0x58>
		{
			M2M_ERR("PSK LEN INVALID\n");
    1df0:	485c      	ldr	r0, [pc, #368]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1df2:	495d      	ldr	r1, [pc, #372]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1df4:	22d9      	movs	r2, #217	; 0xd9
    1df6:	0052      	lsls	r2, r2, #1
    1df8:	4b5c      	ldr	r3, [pc, #368]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1dfa:	4798      	blx	r3
    1dfc:	485c      	ldr	r0, [pc, #368]	; (1f70 <m2m_wifi_connect_sc+0x1bc>)
    1dfe:	4b5d      	ldr	r3, [pc, #372]	; (1f74 <m2m_wifi_connect_sc+0x1c0>)
    1e00:	4798      	blx	r3
    1e02:	200d      	movs	r0, #13
    1e04:	4b5c      	ldr	r3, [pc, #368]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1e06:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e08:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1e0a:	e0a1      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1e0c:	1e7b      	subs	r3, r7, #1
    1e0e:	2b1f      	cmp	r3, #31
    1e10:	d90d      	bls.n	1e2e <m2m_wifi_connect_sc+0x7a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    1e12:	4854      	ldr	r0, [pc, #336]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1e14:	4954      	ldr	r1, [pc, #336]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1e16:	22ba      	movs	r2, #186	; 0xba
    1e18:	32ff      	adds	r2, #255	; 0xff
    1e1a:	4b54      	ldr	r3, [pc, #336]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1e1c:	4798      	blx	r3
    1e1e:	4857      	ldr	r0, [pc, #348]	; (1f7c <m2m_wifi_connect_sc+0x1c8>)
    1e20:	4b54      	ldr	r3, [pc, #336]	; (1f74 <m2m_wifi_connect_sc+0x1c0>)
    1e22:	4798      	blx	r3
    1e24:	200d      	movs	r0, #13
    1e26:	4b54      	ldr	r3, [pc, #336]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1e28:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e2a:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    1e2c:	e090      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    1e2e:	4641      	mov	r1, r8
    1e30:	290d      	cmp	r1, #13
    1e32:	d90f      	bls.n	1e54 <m2m_wifi_connect_sc+0xa0>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1e34:	29ff      	cmp	r1, #255	; 0xff
    1e36:	d00d      	beq.n	1e54 <m2m_wifi_connect_sc+0xa0>
		{
			M2M_ERR("CH INVALID\n");
    1e38:	484a      	ldr	r0, [pc, #296]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1e3a:	494b      	ldr	r1, [pc, #300]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1e3c:	22e1      	movs	r2, #225	; 0xe1
    1e3e:	0052      	lsls	r2, r2, #1
    1e40:	4b4a      	ldr	r3, [pc, #296]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1e42:	4798      	blx	r3
    1e44:	484e      	ldr	r0, [pc, #312]	; (1f80 <m2m_wifi_connect_sc+0x1cc>)
    1e46:	4b4b      	ldr	r3, [pc, #300]	; (1f74 <m2m_wifi_connect_sc+0x1c0>)
    1e48:	4798      	blx	r3
    1e4a:	200d      	movs	r0, #13
    1e4c:	4b4a      	ldr	r3, [pc, #296]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1e4e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e50:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1e52:	e07d      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1e54:	ad05      	add	r5, sp, #20
    1e56:	4668      	mov	r0, sp
    1e58:	305a      	adds	r0, #90	; 0x5a
    1e5a:	4649      	mov	r1, r9
    1e5c:	1c3a      	adds	r2, r7, #0
    1e5e:	4b49      	ldr	r3, [pc, #292]	; (1f84 <m2m_wifi_connect_sc+0x1d0>)
    1e60:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1e62:	19ef      	adds	r7, r5, r7
    1e64:	3740      	adds	r7, #64	; 0x40
    1e66:	2300      	movs	r3, #0
    1e68:	71bb      	strb	r3, [r7, #6]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1e6a:	2344      	movs	r3, #68	; 0x44
    1e6c:	4642      	mov	r2, r8
    1e6e:	52ea      	strh	r2, [r5, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1e70:	4652      	mov	r2, sl
    1e72:	1e53      	subs	r3, r2, #1
    1e74:	419a      	sbcs	r2, r3
    1e76:	2367      	movs	r3, #103	; 0x67
    1e78:	54ea      	strb	r2, [r5, r3]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1e7a:	2341      	movs	r3, #65	; 0x41
    1e7c:	54ec      	strb	r4, [r5, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1e7e:	2c03      	cmp	r4, #3
    1e80:	d138      	bne.n	1ef4 <m2m_wifi_connect_sc+0x140>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1e82:	7833      	ldrb	r3, [r6, #0]
    1e84:	3b01      	subs	r3, #1
    1e86:	b2db      	uxtb	r3, r3
    1e88:	aa05      	add	r2, sp, #20
    1e8a:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d90e      	bls.n	1eae <m2m_wifi_connect_sc+0xfa>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1e90:	4834      	ldr	r0, [pc, #208]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1e92:	4935      	ldr	r1, [pc, #212]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1e94:	22da      	movs	r2, #218	; 0xda
    1e96:	32ff      	adds	r2, #255	; 0xff
    1e98:	4c34      	ldr	r4, [pc, #208]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1e9a:	47a0      	blx	r4
    1e9c:	ab05      	add	r3, sp, #20
    1e9e:	7819      	ldrb	r1, [r3, #0]
    1ea0:	4839      	ldr	r0, [pc, #228]	; (1f88 <m2m_wifi_connect_sc+0x1d4>)
    1ea2:	47a0      	blx	r4
    1ea4:	200d      	movs	r0, #13
    1ea6:	4b34      	ldr	r3, [pc, #208]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1ea8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1eaa:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1eac:	e050      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1eae:	7872      	ldrb	r2, [r6, #1]
    1eb0:	1e51      	subs	r1, r2, #1
    1eb2:	ab05      	add	r3, sp, #20
    1eb4:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1eb6:	2310      	movs	r3, #16
    1eb8:	1c11      	adds	r1, r2, #0
    1eba:	4399      	bics	r1, r3
    1ebc:	290b      	cmp	r1, #11
    1ebe:	d00e      	beq.n	1ede <m2m_wifi_connect_sc+0x12a>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1ec0:	4828      	ldr	r0, [pc, #160]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1ec2:	4929      	ldr	r1, [pc, #164]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1ec4:	22f0      	movs	r2, #240	; 0xf0
    1ec6:	0052      	lsls	r2, r2, #1
    1ec8:	4c28      	ldr	r4, [pc, #160]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1eca:	47a0      	blx	r4
    1ecc:	ab05      	add	r3, sp, #20
    1ece:	7859      	ldrb	r1, [r3, #1]
    1ed0:	482e      	ldr	r0, [pc, #184]	; (1f8c <m2m_wifi_connect_sc+0x1d8>)
    1ed2:	47a0      	blx	r4
    1ed4:	200d      	movs	r0, #13
    1ed6:	4b28      	ldr	r3, [pc, #160]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1ed8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1eda:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1edc:	e038      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1ede:	1cb1      	adds	r1, r6, #2
    1ee0:	4668      	mov	r0, sp
    1ee2:	3016      	adds	r0, #22
    1ee4:	4b27      	ldr	r3, [pc, #156]	; (1f84 <m2m_wifi_connect_sc+0x1d0>)
    1ee6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1ee8:	7873      	ldrb	r3, [r6, #1]
    1eea:	aa05      	add	r2, sp, #20
    1eec:	18d3      	adds	r3, r2, r3
    1eee:	2200      	movs	r2, #0
    1ef0:	709a      	strb	r2, [r3, #2]
    1ef2:	e023      	b.n	1f3c <m2m_wifi_connect_sc+0x188>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1ef4:	2c02      	cmp	r4, #2
    1ef6:	d109      	bne.n	1f0c <m2m_wifi_connect_sc+0x158>
	{
		uint8	u8KeyLen = m2m_strlen((uint8*)pvAuthInfo) + 1;
    1ef8:	1c30      	adds	r0, r6, #0
    1efa:	4b19      	ldr	r3, [pc, #100]	; (1f60 <m2m_wifi_connect_sc+0x1ac>)
    1efc:	4798      	blx	r3
    1efe:	1c42      	adds	r2, r0, #1
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u8KeyLen);
    1f00:	b2d2      	uxtb	r2, r2
    1f02:	a805      	add	r0, sp, #20
    1f04:	1c31      	adds	r1, r6, #0
    1f06:	4b1f      	ldr	r3, [pc, #124]	; (1f84 <m2m_wifi_connect_sc+0x1d0>)
    1f08:	4798      	blx	r3
    1f0a:	e017      	b.n	1f3c <m2m_wifi_connect_sc+0x188>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1f0c:	2c04      	cmp	r4, #4
    1f0e:	d105      	bne.n	1f1c <m2m_wifi_connect_sc+0x168>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1f10:	a805      	add	r0, sp, #20
    1f12:	1c31      	adds	r1, r6, #0
    1f14:	223e      	movs	r2, #62	; 0x3e
    1f16:	4b1b      	ldr	r3, [pc, #108]	; (1f84 <m2m_wifi_connect_sc+0x1d0>)
    1f18:	4798      	blx	r3
    1f1a:	e00f      	b.n	1f3c <m2m_wifi_connect_sc+0x188>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1f1c:	2c01      	cmp	r4, #1
    1f1e:	d00d      	beq.n	1f3c <m2m_wifi_connect_sc+0x188>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    1f20:	4810      	ldr	r0, [pc, #64]	; (1f64 <m2m_wifi_connect_sc+0x1b0>)
    1f22:	4911      	ldr	r1, [pc, #68]	; (1f68 <m2m_wifi_connect_sc+0x1b4>)
    1f24:	22fa      	movs	r2, #250	; 0xfa
    1f26:	32ff      	adds	r2, #255	; 0xff
    1f28:	4b10      	ldr	r3, [pc, #64]	; (1f6c <m2m_wifi_connect_sc+0x1b8>)
    1f2a:	4798      	blx	r3
    1f2c:	4818      	ldr	r0, [pc, #96]	; (1f90 <m2m_wifi_connect_sc+0x1dc>)
    1f2e:	4b11      	ldr	r3, [pc, #68]	; (1f74 <m2m_wifi_connect_sc+0x1c0>)
    1f30:	4798      	blx	r3
    1f32:	200d      	movs	r0, #13
    1f34:	4b10      	ldr	r3, [pc, #64]	; (1f78 <m2m_wifi_connect_sc+0x1c4>)
    1f36:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1f38:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    1f3a:	e009      	b.n	1f50 <m2m_wifi_connect_sc+0x19c>
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1f3c:	2300      	movs	r3, #0
    1f3e:	9300      	str	r3, [sp, #0]
    1f40:	9301      	str	r3, [sp, #4]
    1f42:	9302      	str	r3, [sp, #8]
    1f44:	2001      	movs	r0, #1
    1f46:	2128      	movs	r1, #40	; 0x28
    1f48:	aa05      	add	r2, sp, #20
    1f4a:	236c      	movs	r3, #108	; 0x6c
    1f4c:	4c11      	ldr	r4, [pc, #68]	; (1f94 <m2m_wifi_connect_sc+0x1e0>)
    1f4e:	47a0      	blx	r4

ERR1:
	return ret;
    1f50:	b240      	sxtb	r0, r0
}
    1f52:	b020      	add	sp, #128	; 0x80
    1f54:	bc1c      	pop	{r2, r3, r4}
    1f56:	4690      	mov	r8, r2
    1f58:	4699      	mov	r9, r3
    1f5a:	46a2      	mov	sl, r4
    1f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	0000125d 	.word	0x0000125d
    1f64:	00009674 	.word	0x00009674
    1f68:	00009b10 	.word	0x00009b10
    1f6c:	00007c39 	.word	0x00007c39
    1f70:	00009a10 	.word	0x00009a10
    1f74:	00007d59 	.word	0x00007d59
    1f78:	00007c6d 	.word	0x00007c6d
    1f7c:	00009a20 	.word	0x00009a20
    1f80:	00009a34 	.word	0x00009a34
    1f84:	00001239 	.word	0x00001239
    1f88:	00009a40 	.word	0x00009a40
    1f8c:	00009a5c 	.word	0x00009a5c
    1f90:	00009a78 	.word	0x00009a78
    1f94:	000013fd 	.word	0x000013fd

00001f98 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	b082      	sub	sp, #8
    1f9c:	ac04      	add	r4, sp, #16
    1f9e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1fa0:	9400      	str	r4, [sp, #0]
    1fa2:	2400      	movs	r4, #0
    1fa4:	9401      	str	r4, [sp, #4]
    1fa6:	4c02      	ldr	r4, [pc, #8]	; (1fb0 <m2m_wifi_connect+0x18>)
    1fa8:	47a0      	blx	r4
}
    1faa:	b002      	add	sp, #8
    1fac:	bd10      	pop	{r4, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	00001db5 	.word	0x00001db5

00001fb4 <m2m_wifi_disconnect>:
ERR1:
	return ret;
}

sint8 m2m_wifi_disconnect(void)
{
    1fb4:	b510      	push	{r4, lr}
    1fb6:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
    1fb8:	2300      	movs	r3, #0
    1fba:	9300      	str	r3, [sp, #0]
    1fbc:	9301      	str	r3, [sp, #4]
    1fbe:	9302      	str	r3, [sp, #8]
    1fc0:	2001      	movs	r0, #1
    1fc2:	212b      	movs	r1, #43	; 0x2b
    1fc4:	2200      	movs	r2, #0
    1fc6:	4c02      	ldr	r4, [pc, #8]	; (1fd0 <m2m_wifi_disconnect+0x1c>)
    1fc8:	47a0      	blx	r4
}
    1fca:	b004      	add	sp, #16
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	000013fd 	.word	0x000013fd

00001fd4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1fd4:	2000      	movs	r0, #0
    1fd6:	4770      	bx	lr

00001fd8 <m2m_wifi_set_lsn_int>:


}

sint8 m2m_wifi_set_lsn_int(tstrM2mLsnInt* pstrM2mLsnInt)
{
    1fd8:	b510      	push	{r4, lr}
    1fda:	b084      	sub	sp, #16
    1fdc:	1c02      	adds	r2, r0, #0
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_LSN_INT, (uint8*)pstrM2mLsnInt, sizeof(tstrM2mLsnInt), NULL, 0, 0);
    1fde:	2300      	movs	r3, #0
    1fe0:	9300      	str	r3, [sp, #0]
    1fe2:	9301      	str	r3, [sp, #4]
    1fe4:	9302      	str	r3, [sp, #8]
    1fe6:	2001      	movs	r0, #1
    1fe8:	213d      	movs	r1, #61	; 0x3d
    1fea:	2304      	movs	r3, #4
    1fec:	4c01      	ldr	r4, [pc, #4]	; (1ff4 <m2m_wifi_set_lsn_int+0x1c>)
    1fee:	47a0      	blx	r4
}
    1ff0:	b004      	add	sp, #16
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	000013fd 	.word	0x000013fd

00001ff8 <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa			tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	b086      	sub	sp, #24
    1ffc:	1c04      	adds	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	tstrM2mPsType strPs;
	strPs.u8PsType = PsTyp;
    1ffe:	aa05      	add	r2, sp, #20
    2000:	7010      	strb	r0, [r2, #0]
	strPs.u8BcastEn = BcastEn;
    2002:	7051      	strb	r1, [r2, #1]
	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8*) &strPs,sizeof(tstrM2mPsType), NULL, 0, 0);
    2004:	2300      	movs	r3, #0
    2006:	9300      	str	r3, [sp, #0]
    2008:	9301      	str	r3, [sp, #4]
    200a:	9302      	str	r3, [sp, #8]
    200c:	2001      	movs	r0, #1
    200e:	212d      	movs	r1, #45	; 0x2d
    2010:	2304      	movs	r3, #4
    2012:	4d09      	ldr	r5, [pc, #36]	; (2038 <STACK_SIZE+0x38>)
    2014:	47a8      	blx	r5
    2016:	1c06      	adds	r6, r0, #0
	M2M_INFO("POWER SAVE %d\n",PsTyp);
    2018:	4808      	ldr	r0, [pc, #32]	; (203c <STACK_SIZE+0x3c>)
    201a:	4d09      	ldr	r5, [pc, #36]	; (2040 <STACK_SIZE+0x40>)
    201c:	47a8      	blx	r5
    201e:	4809      	ldr	r0, [pc, #36]	; (2044 <STACK_SIZE+0x44>)
    2020:	1c21      	adds	r1, r4, #0
    2022:	47a8      	blx	r5
    2024:	200d      	movs	r0, #13
    2026:	4b08      	ldr	r3, [pc, #32]	; (2048 <STACK_SIZE+0x48>)
    2028:	4798      	blx	r3
	hif_set_sleep_mode(PsTyp);
    202a:	1c20      	adds	r0, r4, #0
    202c:	4b07      	ldr	r3, [pc, #28]	; (204c <STACK_SIZE+0x4c>)
    202e:	4798      	blx	r3
	return ret;
}
    2030:	1c30      	adds	r0, r6, #0
    2032:	b006      	add	sp, #24
    2034:	bd70      	pop	{r4, r5, r6, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	000013fd 	.word	0x000013fd
    203c:	00009938 	.word	0x00009938
    2040:	00007c39 	.word	0x00007c39
    2044:	00009aec 	.word	0x00009aec
    2048:	00007c6d 	.word	0x00007c6d
    204c:	00001325 	.word	0x00001325

00002050 <m2m_wifi_get_connection_info>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_STOP_PROVISION_MODE, NULL, 0, NULL, 0, 0);
}

sint8 m2m_wifi_get_connection_info(void)
{
    2050:	b510      	push	{r4, lr}
    2052:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_GET_CONN_INFO, NULL, 0, NULL, 0, 0);
    2054:	2300      	movs	r3, #0
    2056:	9300      	str	r3, [sp, #0]
    2058:	9301      	str	r3, [sp, #4]
    205a:	9302      	str	r3, [sp, #8]
    205c:	2001      	movs	r0, #1
    205e:	2105      	movs	r1, #5
    2060:	2200      	movs	r2, #0
    2062:	4c02      	ldr	r4, [pc, #8]	; (206c <m2m_wifi_get_connection_info+0x1c>)
    2064:	47a0      	blx	r4
}
    2066:	b004      	add	sp, #16
    2068:	bd10      	pop	{r4, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	000013fd 	.word	0x000013fd

00002070 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    2070:	b5f0      	push	{r4, r5, r6, r7, lr}
    2072:	465f      	mov	r7, fp
    2074:	4656      	mov	r6, sl
    2076:	464d      	mov	r5, r9
    2078:	4644      	mov	r4, r8
    207a:	b4f0      	push	{r4, r5, r6, r7}
    207c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	ret = nm_read_reg_with_ret(0x1, &reg);
    207e:	2001      	movs	r0, #1
    2080:	a901      	add	r1, sp, #4
    2082:	4b39      	ldr	r3, [pc, #228]	; (2168 <nm_clkless_wake+0xf8>)
    2084:	4798      	blx	r3
    2086:	4680      	mov	r8, r0
	if(ret != M2M_SUCCESS) {
    2088:	2400      	movs	r4, #0
    208a:	2800      	cmp	r0, #0
    208c:	d00b      	beq.n	20a6 <nm_clkless_wake+0x36>
		M2M_ERR("Bus error (1). Wake up failed\n");
    208e:	4837      	ldr	r0, [pc, #220]	; (216c <nm_clkless_wake+0xfc>)
    2090:	4937      	ldr	r1, [pc, #220]	; (2170 <nm_clkless_wake+0x100>)
    2092:	224b      	movs	r2, #75	; 0x4b
    2094:	4b37      	ldr	r3, [pc, #220]	; (2174 <nm_clkless_wake+0x104>)
    2096:	4798      	blx	r3
    2098:	4837      	ldr	r0, [pc, #220]	; (2178 <nm_clkless_wake+0x108>)
    209a:	4b38      	ldr	r3, [pc, #224]	; (217c <nm_clkless_wake+0x10c>)
    209c:	4798      	blx	r3
    209e:	200d      	movs	r0, #13
    20a0:	4b37      	ldr	r3, [pc, #220]	; (2180 <nm_clkless_wake+0x110>)
    20a2:	4798      	blx	r3
		goto _WAKE_EXIT;
    20a4:	e04c      	b.n	2140 <nm_clkless_wake+0xd0>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    20a6:	4b37      	ldr	r3, [pc, #220]	; (2184 <nm_clkless_wake+0x114>)
    20a8:	469b      	mov	fp, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    20aa:	4b37      	ldr	r3, [pc, #220]	; (2188 <nm_clkless_wake+0x118>)
    20ac:	469a      	mov	sl, r3
    20ae:	4b2e      	ldr	r3, [pc, #184]	; (2168 <nm_clkless_wake+0xf8>)
    20b0:	4699      	mov	r9, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    20b2:	2102      	movs	r1, #2
    20b4:	9b01      	ldr	r3, [sp, #4]
    20b6:	4319      	orrs	r1, r3
    20b8:	2001      	movs	r0, #1
    20ba:	47d8      	blx	fp
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    20bc:	4653      	mov	r3, sl
    20be:	6818      	ldr	r0, [r3, #0]
    20c0:	4669      	mov	r1, sp
    20c2:	47c8      	blx	r9
    20c4:	4680      	mov	r8, r0
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    20c6:	2800      	cmp	r0, #0
    20c8:	d106      	bne.n	20d8 <nm_clkless_wake+0x68>
    20ca:	9b00      	ldr	r3, [sp, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d003      	beq.n	20d8 <nm_clkless_wake+0x68>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    20d0:	4d2e      	ldr	r5, [pc, #184]	; (218c <nm_clkless_wake+0x11c>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    20d2:	4f2f      	ldr	r7, [pc, #188]	; (2190 <nm_clkless_wake+0x120>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    20d4:	4e2c      	ldr	r6, [pc, #176]	; (2188 <nm_clkless_wake+0x118>)
    20d6:	e029      	b.n	212c <nm_clkless_wake+0xbc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    20d8:	220e      	movs	r2, #14
    20da:	4b2b      	ldr	r3, [pc, #172]	; (2188 <nm_clkless_wake+0x118>)
    20dc:	601a      	str	r2, [r3, #0]
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    20de:	200e      	movs	r0, #14
    20e0:	4669      	mov	r1, sp
    20e2:	4b21      	ldr	r3, [pc, #132]	; (2168 <nm_clkless_wake+0xf8>)
    20e4:	4798      	blx	r3
    20e6:	4680      	mov	r8, r0
			if(ret != M2M_SUCCESS) {
    20e8:	2800      	cmp	r0, #0
    20ea:	d0f1      	beq.n	20d0 <nm_clkless_wake+0x60>
				M2M_ERR("Bus error (2). Wake up failed\n");
    20ec:	481f      	ldr	r0, [pc, #124]	; (216c <nm_clkless_wake+0xfc>)
    20ee:	4920      	ldr	r1, [pc, #128]	; (2170 <nm_clkless_wake+0x100>)
    20f0:	2261      	movs	r2, #97	; 0x61
    20f2:	4b20      	ldr	r3, [pc, #128]	; (2174 <nm_clkless_wake+0x104>)
    20f4:	4798      	blx	r3
    20f6:	4827      	ldr	r0, [pc, #156]	; (2194 <nm_clkless_wake+0x124>)
    20f8:	4b20      	ldr	r3, [pc, #128]	; (217c <nm_clkless_wake+0x10c>)
    20fa:	4798      	blx	r3
    20fc:	200d      	movs	r0, #13
    20fe:	4b20      	ldr	r3, [pc, #128]	; (2180 <nm_clkless_wake+0x110>)
    2100:	4798      	blx	r3
				goto _WAKE_EXIT;
    2102:	e01d      	b.n	2140 <nm_clkless_wake+0xd0>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    2104:	2001      	movs	r0, #1
    2106:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2108:	6830      	ldr	r0, [r6, #0]
    210a:	4669      	mov	r1, sp
    210c:	4b16      	ldr	r3, [pc, #88]	; (2168 <nm_clkless_wake+0xf8>)
    210e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    2110:	9b00      	ldr	r3, [sp, #0]
    2112:	075b      	lsls	r3, r3, #29
    2114:	d40a      	bmi.n	212c <nm_clkless_wake+0xbc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    2116:	4815      	ldr	r0, [pc, #84]	; (216c <nm_clkless_wake+0xfc>)
    2118:	4915      	ldr	r1, [pc, #84]	; (2170 <nm_clkless_wake+0x100>)
    211a:	2274      	movs	r2, #116	; 0x74
    211c:	4b15      	ldr	r3, [pc, #84]	; (2174 <nm_clkless_wake+0x104>)
    211e:	4798      	blx	r3
    2120:	481d      	ldr	r0, [pc, #116]	; (2198 <nm_clkless_wake+0x128>)
    2122:	4b16      	ldr	r3, [pc, #88]	; (217c <nm_clkless_wake+0x10c>)
    2124:	4798      	blx	r3
    2126:	200d      	movs	r0, #13
    2128:	4b15      	ldr	r3, [pc, #84]	; (2180 <nm_clkless_wake+0x110>)
    212a:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    212c:	9b00      	ldr	r3, [sp, #0]
    212e:	075b      	lsls	r3, r3, #29
    2130:	d406      	bmi.n	2140 <nm_clkless_wake+0xd0>
    2132:	3401      	adds	r4, #1
    2134:	1c20      	adds	r0, r4, #0
    2136:	2103      	movs	r1, #3
    2138:	47a8      	blx	r5
    213a:	2900      	cmp	r1, #0
    213c:	d0e2      	beq.n	2104 <nm_clkless_wake+0x94>
    213e:	e002      	b.n	2146 <nm_clkless_wake+0xd6>
			nm_write_reg(0x1, reg | (1 << 1));
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
    2140:	4643      	mov	r3, r8
    2142:	b258      	sxtb	r0, r3
    2144:	e009      	b.n	215a <nm_clkless_wake+0xea>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    2146:	2102      	movs	r1, #2
    2148:	9b01      	ldr	r3, [sp, #4]
    214a:	4319      	orrs	r1, r3
    214c:	2001      	movs	r0, #1
    214e:	4b0d      	ldr	r3, [pc, #52]	; (2184 <nm_clkless_wake+0x114>)
    2150:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    2152:	9b00      	ldr	r3, [sp, #0]
    2154:	075b      	lsls	r3, r3, #29
    2156:	d5ac      	bpl.n	20b2 <nm_clkless_wake+0x42>
    2158:	e7f2      	b.n	2140 <nm_clkless_wake+0xd0>

_WAKE_EXIT:
	return ret;
}
    215a:	b003      	add	sp, #12
    215c:	bc3c      	pop	{r2, r3, r4, r5}
    215e:	4690      	mov	r8, r2
    2160:	4699      	mov	r9, r3
    2162:	46a2      	mov	sl, r4
    2164:	46ab      	mov	fp, r5
    2166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2168:	00002705 	.word	0x00002705
    216c:	00009674 	.word	0x00009674
    2170:	00009c50 	.word	0x00009c50
    2174:	00007c39 	.word	0x00007c39
    2178:	00009b3c 	.word	0x00009b3c
    217c:	00007d59 	.word	0x00007d59
    2180:	00007c6d 	.word	0x00007c6d
    2184:	00002711 	.word	0x00002711
    2188:	20000010 	.word	0x20000010
    218c:	000074a5 	.word	0x000074a5
    2190:	00000e99 	.word	0x00000e99
    2194:	00009b5c 	.word	0x00009b5c
    2198:	00009b7c 	.word	0x00009b7c

0000219c <chip_idle>:
void chip_idle(void)
{
    219c:	b500      	push	{lr}
    219e:	b083      	sub	sp, #12
	uint32 reg =0;
    21a0:	2300      	movs	r3, #0
    21a2:	9301      	str	r3, [sp, #4]
	nm_read_reg_with_ret(0x1, &reg);
    21a4:	2001      	movs	r0, #1
    21a6:	a901      	add	r1, sp, #4
    21a8:	4b06      	ldr	r3, [pc, #24]	; (21c4 <chip_idle+0x28>)
    21aa:	4798      	blx	r3
	if(reg&0x2)
    21ac:	9901      	ldr	r1, [sp, #4]
    21ae:	078b      	lsls	r3, r1, #30
    21b0:	d505      	bpl.n	21be <chip_idle+0x22>
	{
		reg &=~(1 << 1);
    21b2:	2302      	movs	r3, #2
    21b4:	4399      	bics	r1, r3
    21b6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1, reg);
    21b8:	2001      	movs	r0, #1
    21ba:	4b03      	ldr	r3, [pc, #12]	; (21c8 <chip_idle+0x2c>)
    21bc:	4798      	blx	r3
	}
}
    21be:	b003      	add	sp, #12
    21c0:	bd00      	pop	{pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	00002705 	.word	0x00002705
    21c8:	00002711 	.word	0x00002711

000021cc <enable_rf_blocks>:

void enable_rf_blocks(void)
{
    21cc:	b538      	push	{r3, r4, r5, lr}
	nm_write_reg(0x6, 0xdb);
    21ce:	2006      	movs	r0, #6
    21d0:	21db      	movs	r1, #219	; 0xdb
    21d2:	4c0c      	ldr	r4, [pc, #48]	; (2204 <enable_rf_blocks+0x38>)
    21d4:	47a0      	blx	r4
	nm_write_reg(0x7, 0x6);
    21d6:	2007      	movs	r0, #7
    21d8:	2106      	movs	r1, #6
    21da:	47a0      	blx	r4
	nm_bsp_sleep(10);
    21dc:	200a      	movs	r0, #10
    21de:	4d0a      	ldr	r5, [pc, #40]	; (2208 <enable_rf_blocks+0x3c>)
    21e0:	47a8      	blx	r5
	nm_write_reg(0x1480, 0);
    21e2:	20a4      	movs	r0, #164	; 0xa4
    21e4:	0140      	lsls	r0, r0, #5
    21e6:	2100      	movs	r1, #0
    21e8:	47a0      	blx	r4
	nm_write_reg(0x1484, 0);
    21ea:	4808      	ldr	r0, [pc, #32]	; (220c <enable_rf_blocks+0x40>)
    21ec:	2100      	movs	r1, #0
    21ee:	47a0      	blx	r4
	nm_bsp_sleep(10);
    21f0:	200a      	movs	r0, #10
    21f2:	47a8      	blx	r5

	nm_write_reg(0x6, 0x0);
    21f4:	2006      	movs	r0, #6
    21f6:	2100      	movs	r1, #0
    21f8:	47a0      	blx	r4
	nm_write_reg(0x7, 0x0);
    21fa:	2007      	movs	r0, #7
    21fc:	2100      	movs	r1, #0
    21fe:	47a0      	blx	r4
}
    2200:	bd38      	pop	{r3, r4, r5, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	00002711 	.word	0x00002711
    2208:	00000e99 	.word	0x00000e99
    220c:	00001484 	.word	0x00001484

00002210 <enable_interrupts>:

sint8 enable_interrupts(void)
{
    2210:	b500      	push	{lr}
    2212:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2214:	4816      	ldr	r0, [pc, #88]	; (2270 <enable_interrupts+0x60>)
    2216:	a901      	add	r1, sp, #4
    2218:	4b16      	ldr	r3, [pc, #88]	; (2274 <enable_interrupts+0x64>)
    221a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    221c:	2800      	cmp	r0, #0
    221e:	d11e      	bne.n	225e <enable_interrupts+0x4e>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    2220:	2180      	movs	r1, #128	; 0x80
    2222:	0049      	lsls	r1, r1, #1
    2224:	9b01      	ldr	r3, [sp, #4]
    2226:	4319      	orrs	r1, r3
    2228:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    222a:	4811      	ldr	r0, [pc, #68]	; (2270 <enable_interrupts+0x60>)
    222c:	4b12      	ldr	r3, [pc, #72]	; (2278 <enable_interrupts+0x68>)
    222e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2230:	2800      	cmp	r0, #0
    2232:	d116      	bne.n	2262 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2234:	20d0      	movs	r0, #208	; 0xd0
    2236:	0140      	lsls	r0, r0, #5
    2238:	a901      	add	r1, sp, #4
    223a:	4b0e      	ldr	r3, [pc, #56]	; (2274 <enable_interrupts+0x64>)
    223c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    223e:	2800      	cmp	r0, #0
    2240:	d111      	bne.n	2266 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    2242:	2180      	movs	r1, #128	; 0x80
    2244:	0249      	lsls	r1, r1, #9
    2246:	9b01      	ldr	r3, [sp, #4]
    2248:	4319      	orrs	r1, r3
    224a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    224c:	20d0      	movs	r0, #208	; 0xd0
    224e:	0140      	lsls	r0, r0, #5
    2250:	4b09      	ldr	r3, [pc, #36]	; (2278 <enable_interrupts+0x68>)
    2252:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
    2254:	2300      	movs	r3, #0
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
    2256:	2800      	cmp	r0, #0
    2258:	d006      	beq.n	2268 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
    225a:	23fa      	movs	r3, #250	; 0xfa
    225c:	e004      	b.n	2268 <enable_interrupts+0x58>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    225e:	23fa      	movs	r3, #250	; 0xfa
    2260:	e002      	b.n	2268 <enable_interrupts+0x58>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    2262:	23fa      	movs	r3, #250	; 0xfa
    2264:	e000      	b.n	2268 <enable_interrupts+0x58>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    2266:	23fa      	movs	r3, #250	; 0xfa
    2268:	b258      	sxtb	r0, r3
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
    226a:	b003      	add	sp, #12
    226c:	bd00      	pop	{pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	00001408 	.word	0x00001408
    2274:	00002705 	.word	0x00002705
    2278:	00002711 	.word	0x00002711

0000227c <cpu_start>:

sint8 cpu_start(void) {
    227c:	b510      	push	{r4, lr}
    227e:	b082      	sub	sp, #8
	sint8 ret;

	/**
	reset regs
	*/
	nm_write_reg(BOOTROM_REG,0);
    2280:	4825      	ldr	r0, [pc, #148]	; (2318 <cpu_start+0x9c>)
    2282:	2100      	movs	r1, #0
    2284:	4c25      	ldr	r4, [pc, #148]	; (231c <cpu_start+0xa0>)
    2286:	47a0      	blx	r4
	nm_write_reg(NMI_STATE_REG,0);
    2288:	4825      	ldr	r0, [pc, #148]	; (2320 <cpu_start+0xa4>)
    228a:	2100      	movs	r1, #0
    228c:	47a0      	blx	r4
	nm_write_reg(NMI_REV_REG,0);
    228e:	4825      	ldr	r0, [pc, #148]	; (2324 <cpu_start+0xa8>)
    2290:	2100      	movs	r1, #0
    2292:	47a0      	blx	r4

	/**
	Go...
	**/
	ret = nm_read_reg_with_ret(0x1118, &reg);
    2294:	4824      	ldr	r0, [pc, #144]	; (2328 <cpu_start+0xac>)
    2296:	a901      	add	r1, sp, #4
    2298:	4b24      	ldr	r3, [pc, #144]	; (232c <cpu_start+0xb0>)
    229a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    229c:	2800      	cmp	r0, #0
    229e:	d00a      	beq.n	22b6 <cpu_start+0x3a>
		ret = M2M_ERR_BUS_FAIL;
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
    22a0:	4823      	ldr	r0, [pc, #140]	; (2330 <cpu_start+0xb4>)
    22a2:	4924      	ldr	r1, [pc, #144]	; (2334 <cpu_start+0xb8>)
    22a4:	22ca      	movs	r2, #202	; 0xca
    22a6:	4b24      	ldr	r3, [pc, #144]	; (2338 <cpu_start+0xbc>)
    22a8:	4798      	blx	r3
    22aa:	4824      	ldr	r0, [pc, #144]	; (233c <cpu_start+0xc0>)
    22ac:	4b24      	ldr	r3, [pc, #144]	; (2340 <cpu_start+0xc4>)
    22ae:	4798      	blx	r3
    22b0:	200d      	movs	r0, #13
    22b2:	4b24      	ldr	r3, [pc, #144]	; (2344 <cpu_start+0xc8>)
    22b4:	4798      	blx	r3
	}
	reg |= (1 << 0);
    22b6:	2101      	movs	r1, #1
    22b8:	9a01      	ldr	r2, [sp, #4]
    22ba:	4311      	orrs	r1, r2
    22bc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(0x1118, reg);
    22be:	481a      	ldr	r0, [pc, #104]	; (2328 <cpu_start+0xac>)
    22c0:	4c16      	ldr	r4, [pc, #88]	; (231c <cpu_start+0xa0>)
    22c2:	47a0      	blx	r4
	ret = nm_write_reg(0x150014, 0x1);
    22c4:	4820      	ldr	r0, [pc, #128]	; (2348 <cpu_start+0xcc>)
    22c6:	2101      	movs	r1, #1
    22c8:	47a0      	blx	r4
    22ca:	1c04      	adds	r4, r0, #0
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    22cc:	20a0      	movs	r0, #160	; 0xa0
    22ce:	0140      	lsls	r0, r0, #5
    22d0:	a901      	add	r1, sp, #4
    22d2:	4b16      	ldr	r3, [pc, #88]	; (232c <cpu_start+0xb0>)
    22d4:	4798      	blx	r3
    22d6:	1824      	adds	r4, r4, r0
    22d8:	b2e4      	uxtb	r4, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
    22da:	9b01      	ldr	r3, [sp, #4]
    22dc:	055a      	lsls	r2, r3, #21
    22de:	d401      	bmi.n	22e4 <cpu_start+0x68>
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
	}
	reg |= (1 << 0);
	ret = nm_write_reg(0x1118, reg);
	ret = nm_write_reg(0x150014, 0x1);
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    22e0:	b2e4      	uxtb	r4, r4
    22e2:	e008      	b.n	22f6 <cpu_start+0x7a>
	if ((reg & (1ul << 10)) == (1ul << 10)) {
		reg &= ~(1ul << 10);
    22e4:	4919      	ldr	r1, [pc, #100]	; (234c <cpu_start+0xd0>)
    22e6:	4019      	ands	r1, r3
    22e8:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    22ea:	20a0      	movs	r0, #160	; 0xa0
    22ec:	0140      	lsls	r0, r0, #5
    22ee:	4b0b      	ldr	r3, [pc, #44]	; (231c <cpu_start+0xa0>)
    22f0:	4798      	blx	r3
    22f2:	1824      	adds	r4, r4, r0
    22f4:	b2e4      	uxtb	r4, r4
	}

	reg |= (1ul << 10);
    22f6:	2180      	movs	r1, #128	; 0x80
    22f8:	00c9      	lsls	r1, r1, #3
    22fa:	9b01      	ldr	r3, [sp, #4]
    22fc:	4319      	orrs	r1, r3
    22fe:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    2300:	20a0      	movs	r0, #160	; 0xa0
    2302:	0140      	lsls	r0, r0, #5
    2304:	4b05      	ldr	r3, [pc, #20]	; (231c <cpu_start+0xa0>)
    2306:	4798      	blx	r3
    2308:	1824      	adds	r4, r4, r0
    230a:	b2e4      	uxtb	r4, r4
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    230c:	2001      	movs	r0, #1
    230e:	4b10      	ldr	r3, [pc, #64]	; (2350 <cpu_start+0xd4>)
    2310:	4798      	blx	r3
	return ret;
    2312:	b260      	sxtb	r0, r4
}
    2314:	b002      	add	sp, #8
    2316:	bd10      	pop	{r4, pc}
    2318:	000c000c 	.word	0x000c000c
    231c:	00002711 	.word	0x00002711
    2320:	0000108c 	.word	0x0000108c
    2324:	000207ac 	.word	0x000207ac
    2328:	00001118 	.word	0x00001118
    232c:	00002705 	.word	0x00002705
    2330:	00009674 	.word	0x00009674
    2334:	00009b24 	.word	0x00009b24
    2338:	00007c39 	.word	0x00007c39
    233c:	00009ba0 	.word	0x00009ba0
    2340:	00007d59 	.word	0x00007d59
    2344:	00007c6d 	.word	0x00007c6d
    2348:	00150014 	.word	0x00150014
    234c:	fffffbff 	.word	0xfffffbff
    2350:	00000e99 	.word	0x00000e99

00002354 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
    2354:	b500      	push	{lr}
    2356:	b083      	sub	sp, #12
	static uint32 chipid = 0;

	if (chipid == 0) {
    2358:	4b21      	ldr	r3, [pc, #132]	; (23e0 <nmi_get_chipid+0x8c>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	2b00      	cmp	r3, #0
    235e:	d13a      	bne.n	23d6 <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2360:	2080      	movs	r0, #128	; 0x80
    2362:	0140      	lsls	r0, r0, #5
    2364:	491e      	ldr	r1, [pc, #120]	; (23e0 <nmi_get_chipid+0x8c>)
    2366:	4b1f      	ldr	r3, [pc, #124]	; (23e4 <nmi_get_chipid+0x90>)
    2368:	4798      	blx	r3
    236a:	2800      	cmp	r0, #0
    236c:	d003      	beq.n	2376 <nmi_get_chipid+0x22>
			chipid = 0;
    236e:	2200      	movs	r2, #0
    2370:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <nmi_get_chipid+0x8c>)
    2372:	601a      	str	r2, [r3, #0]
			return 0;
    2374:	e02d      	b.n	23d2 <nmi_get_chipid+0x7e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2376:	481c      	ldr	r0, [pc, #112]	; (23e8 <nmi_get_chipid+0x94>)
    2378:	a901      	add	r1, sp, #4
    237a:	4b1a      	ldr	r3, [pc, #104]	; (23e4 <nmi_get_chipid+0x90>)
    237c:	4798      	blx	r3
    237e:	2800      	cmp	r0, #0
    2380:	d003      	beq.n	238a <nmi_get_chipid+0x36>
			chipid = 0;
    2382:	2200      	movs	r2, #0
    2384:	4b16      	ldr	r3, [pc, #88]	; (23e0 <nmi_get_chipid+0x8c>)
    2386:	601a      	str	r2, [r3, #0]
			return 0;
    2388:	e023      	b.n	23d2 <nmi_get_chipid+0x7e>
		}

		if (chipid == 0x1002a0)  {
    238a:	4b15      	ldr	r3, [pc, #84]	; (23e0 <nmi_get_chipid+0x8c>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	4a17      	ldr	r2, [pc, #92]	; (23ec <nmi_get_chipid+0x98>)
    2390:	4293      	cmp	r3, r2
    2392:	d106      	bne.n	23a2 <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    2394:	9901      	ldr	r1, [sp, #4]
    2396:	2901      	cmp	r1, #1
    2398:	d012      	beq.n	23c0 <nmi_get_chipid+0x6c>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    239a:	4a15      	ldr	r2, [pc, #84]	; (23f0 <nmi_get_chipid+0x9c>)
    239c:	4b10      	ldr	r3, [pc, #64]	; (23e0 <nmi_get_chipid+0x8c>)
    239e:	601a      	str	r2, [r3, #0]
    23a0:	e00e      	b.n	23c0 <nmi_get_chipid+0x6c>
			}
		} else if(chipid == 0x1002b0) {
    23a2:	4a14      	ldr	r2, [pc, #80]	; (23f4 <nmi_get_chipid+0xa0>)
    23a4:	4293      	cmp	r3, r2
    23a6:	d10b      	bne.n	23c0 <nmi_get_chipid+0x6c>
			if(rfrevid == 3) { /* 1002B0 */
    23a8:	9b01      	ldr	r3, [sp, #4]
    23aa:	2b03      	cmp	r3, #3
    23ac:	d008      	beq.n	23c0 <nmi_get_chipid+0x6c>
			} else if(rfrevid == 4) { /* 1002B1 */
    23ae:	2b04      	cmp	r3, #4
    23b0:	d103      	bne.n	23ba <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    23b2:	4a11      	ldr	r2, [pc, #68]	; (23f8 <nmi_get_chipid+0xa4>)
    23b4:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <nmi_get_chipid+0x8c>)
    23b6:	601a      	str	r2, [r3, #0]
    23b8:	e002      	b.n	23c0 <nmi_get_chipid+0x6c>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    23ba:	4a10      	ldr	r2, [pc, #64]	; (23fc <nmi_get_chipid+0xa8>)
    23bc:	4b08      	ldr	r3, [pc, #32]	; (23e0 <nmi_get_chipid+0x8c>)
    23be:	601a      	str	r2, [r3, #0]
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    23c0:	4b07      	ldr	r3, [pc, #28]	; (23e0 <nmi_get_chipid+0x8c>)
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    23c2:	4a0f      	ldr	r2, [pc, #60]	; (2400 <nmi_get_chipid+0xac>)
    23c4:	6819      	ldr	r1, [r3, #0]
    23c6:	400a      	ands	r2, r1
		chipid |= 0x050000;
    23c8:	21a0      	movs	r1, #160	; 0xa0
    23ca:	02c9      	lsls	r1, r1, #11
    23cc:	430a      	orrs	r2, r1
    23ce:	601a      	str	r2, [r3, #0]
    23d0:	e001      	b.n	23d6 <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
			chipid = 0;
			return 0;
    23d2:	2000      	movs	r0, #0
    23d4:	e001      	b.n	23da <nmi_get_chipid+0x86>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    23d6:	4b02      	ldr	r3, [pc, #8]	; (23e0 <nmi_get_chipid+0x8c>)
    23d8:	6818      	ldr	r0, [r3, #0]
}
    23da:	b003      	add	sp, #12
    23dc:	bd00      	pop	{pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	2000086c 	.word	0x2000086c
    23e4:	00002705 	.word	0x00002705
    23e8:	000013f4 	.word	0x000013f4
    23ec:	001002a0 	.word	0x001002a0
    23f0:	001002a1 	.word	0x001002a1
    23f4:	001002b0 	.word	0x001002b0
    23f8:	001002b1 	.word	0x001002b1
    23fc:	001002b2 	.word	0x001002b2
    2400:	fff0ffff 	.word	0xfff0ffff

00002404 <restore_pmu_settings_after_global_reset>:
    }
    return rfrevid;
}

void restore_pmu_settings_after_global_reset(void)
{
    2404:	b508      	push	{r3, lr}
	/*
	* Must restore PMU register value after
	* global reset if PMU toggle is done at
	* least once since the last hard reset.
	*/
	if(REV(nmi_get_chipid()) >= REV_2B0) {
    2406:	4b06      	ldr	r3, [pc, #24]	; (2420 <restore_pmu_settings_after_global_reset+0x1c>)
    2408:	4798      	blx	r3
    240a:	0500      	lsls	r0, r0, #20
    240c:	0d00      	lsrs	r0, r0, #20
    240e:	4b05      	ldr	r3, [pc, #20]	; (2424 <restore_pmu_settings_after_global_reset+0x20>)
    2410:	4298      	cmp	r0, r3
    2412:	d903      	bls.n	241c <restore_pmu_settings_after_global_reset+0x18>
		nm_write_reg(0x1e48, 0xb78469ce);
    2414:	4804      	ldr	r0, [pc, #16]	; (2428 <restore_pmu_settings_after_global_reset+0x24>)
    2416:	4905      	ldr	r1, [pc, #20]	; (242c <restore_pmu_settings_after_global_reset+0x28>)
    2418:	4b05      	ldr	r3, [pc, #20]	; (2430 <restore_pmu_settings_after_global_reset+0x2c>)
    241a:	4798      	blx	r3
	}
}
    241c:	bd08      	pop	{r3, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	00002355 	.word	0x00002355
    2424:	000002af 	.word	0x000002af
    2428:	00001e48 	.word	0x00001e48
    242c:	b78469ce 	.word	0xb78469ce
    2430:	00002711 	.word	0x00002711

00002434 <nmi_update_pll>:

void nmi_update_pll(void)
{
    2434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32 pll;

	pll = nm_read_reg(0x1428);
    2436:	4c08      	ldr	r4, [pc, #32]	; (2458 <nmi_update_pll+0x24>)
    2438:	1c20      	adds	r0, r4, #0
    243a:	4b08      	ldr	r3, [pc, #32]	; (245c <nmi_update_pll+0x28>)
    243c:	4798      	blx	r3
	pll &= ~0x1ul;
    243e:	2601      	movs	r6, #1
    2440:	1c07      	adds	r7, r0, #0
    2442:	43b7      	bics	r7, r6
	nm_write_reg(0x1428, pll);
    2444:	1c20      	adds	r0, r4, #0
    2446:	1c39      	adds	r1, r7, #0
    2448:	4d05      	ldr	r5, [pc, #20]	; (2460 <nmi_update_pll+0x2c>)
    244a:	47a8      	blx	r5
	pll |= 0x1ul;
    244c:	1c39      	adds	r1, r7, #0
    244e:	4331      	orrs	r1, r6
	nm_write_reg(0x1428, pll);
    2450:	1c20      	adds	r0, r4, #0
    2452:	47a8      	blx	r5

}
    2454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	00001428 	.word	0x00001428
    245c:	000026f9 	.word	0x000026f9
    2460:	00002711 	.word	0x00002711

00002464 <nmi_set_sys_clk_src_to_xo>:
void nmi_set_sys_clk_src_to_xo(void)
{
    2464:	b510      	push	{r4, lr}
	uint32 val32;

	/* Switch system clock source to XO. This will take effect after nmi_update_pll(). */
	val32 = nm_read_reg(0x141c);
    2466:	4c06      	ldr	r4, [pc, #24]	; (2480 <nmi_set_sys_clk_src_to_xo+0x1c>)
    2468:	1c20      	adds	r0, r4, #0
    246a:	4b06      	ldr	r3, [pc, #24]	; (2484 <nmi_set_sys_clk_src_to_xo+0x20>)
    246c:	4798      	blx	r3
	val32 |= (1 << 2);
    246e:	2304      	movs	r3, #4
    2470:	1c01      	adds	r1, r0, #0
    2472:	4319      	orrs	r1, r3
	nm_write_reg(0x141c, val32);
    2474:	1c20      	adds	r0, r4, #0
    2476:	4b04      	ldr	r3, [pc, #16]	; (2488 <nmi_set_sys_clk_src_to_xo+0x24>)
    2478:	4798      	blx	r3

	/* Do PLL update */
	nmi_update_pll();
    247a:	4b04      	ldr	r3, [pc, #16]	; (248c <nmi_set_sys_clk_src_to_xo+0x28>)
    247c:	4798      	blx	r3
}
    247e:	bd10      	pop	{r4, pc}
    2480:	0000141c 	.word	0x0000141c
    2484:	000026f9 	.word	0x000026f9
    2488:	00002711 	.word	0x00002711
    248c:	00002435 	.word	0x00002435

00002490 <chip_wake>:
sint8 chip_wake(void)
{
    2490:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	ret  = nm_clkless_wake();
    2492:	4b04      	ldr	r3, [pc, #16]	; (24a4 <chip_wake+0x14>)
    2494:	4798      	blx	r3
    2496:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) return ret;
    2498:	d101      	bne.n	249e <chip_wake+0xe>

	enable_rf_blocks();
    249a:	4b03      	ldr	r3, [pc, #12]	; (24a8 <chip_wake+0x18>)
    249c:	4798      	blx	r3

	return ret;
}
    249e:	1c20      	adds	r0, r4, #0
    24a0:	bd10      	pop	{r4, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	00002071 	.word	0x00002071
    24a8:	000021cd 	.word	0x000021cd

000024ac <chip_reset>:
	nm_write_reg(NMI_REV_REG,0);
	nm_write_reg(NMI_PIN_MUX_0, 0x11111000);
	return ret;
}
sint8 chip_reset(void)
{
    24ac:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifndef CONF_WINC_USE_UART
	nmi_set_sys_clk_src_to_xo();
    24ae:	4b07      	ldr	r3, [pc, #28]	; (24cc <chip_reset+0x20>)
    24b0:	4798      	blx	r3
#endif
	ret += nm_write_reg(NMI_GLB_RESET_0, 0);
    24b2:	20a0      	movs	r0, #160	; 0xa0
    24b4:	0140      	lsls	r0, r0, #5
    24b6:	2100      	movs	r1, #0
    24b8:	4b05      	ldr	r3, [pc, #20]	; (24d0 <chip_reset+0x24>)
    24ba:	4798      	blx	r3
    24bc:	1c04      	adds	r4, r0, #0
	nm_bsp_sleep(50);
    24be:	2032      	movs	r0, #50	; 0x32
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <chip_reset+0x28>)
    24c2:	4798      	blx	r3
#ifndef CONF_WINC_USE_UART
	restore_pmu_settings_after_global_reset();
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <chip_reset+0x2c>)
    24c6:	4798      	blx	r3
#endif
	return ret;
}
    24c8:	1c20      	adds	r0, r4, #0
    24ca:	bd10      	pop	{r4, pc}
    24cc:	00002465 	.word	0x00002465
    24d0:	00002711 	.word	0x00002711
    24d4:	00000e99 	.word	0x00000e99
    24d8:	00002405 	.word	0x00002405

000024dc <wait_for_bootrom>:

}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(uint8 arg)
{
    24dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24de:	4647      	mov	r7, r8
    24e0:	b480      	push	{r7}
    24e2:	4680      	mov	r8, r0
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    24e4:	4d1b      	ldr	r5, [pc, #108]	; (2554 <wait_for_bootrom+0x78>)
    24e6:	4c1c      	ldr	r4, [pc, #112]	; (2558 <wait_for_bootrom+0x7c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    24e8:	4e1c      	ldr	r6, [pc, #112]	; (255c <wait_for_bootrom+0x80>)
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    24ea:	1c28      	adds	r0, r5, #0
    24ec:	47a0      	blx	r4
		if (reg & 0x80000000) {
    24ee:	2800      	cmp	r0, #0
    24f0:	db02      	blt.n	24f8 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    24f2:	2001      	movs	r0, #1
    24f4:	47b0      	blx	r6
	}
    24f6:	e7f8      	b.n	24ea <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    24f8:	4819      	ldr	r0, [pc, #100]	; (2560 <wait_for_bootrom+0x84>)
    24fa:	4b17      	ldr	r3, [pc, #92]	; (2558 <wait_for_bootrom+0x7c>)
    24fc:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    24fe:	07c3      	lsls	r3, r0, #31
    2500:	d519      	bpl.n	2536 <wait_for_bootrom+0x5a>
    2502:	e008      	b.n	2516 <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2504:	2001      	movs	r0, #1
    2506:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    2508:	4816      	ldr	r0, [pc, #88]	; (2564 <wait_for_bootrom+0x88>)
    250a:	47b0      	blx	r6
    250c:	3c01      	subs	r4, #1

			if(++cnt > TIMEOUT)
    250e:	2c00      	cmp	r4, #0
    2510:	d00e      	beq.n	2530 <wait_for_bootrom+0x54>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    2512:	42a8      	cmp	r0, r5
    2514:	d1f6      	bne.n	2504 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}

	if(2 == arg) {
    2516:	4643      	mov	r3, r8
    2518:	2b02      	cmp	r3, #2
    251a:	d103      	bne.n	2524 <wait_for_bootrom+0x48>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    251c:	4812      	ldr	r0, [pc, #72]	; (2568 <wait_for_bootrom+0x8c>)
    251e:	4913      	ldr	r1, [pc, #76]	; (256c <wait_for_bootrom+0x90>)
    2520:	4b13      	ldr	r3, [pc, #76]	; (2570 <wait_for_bootrom+0x94>)
    2522:	4798      	blx	r3
	} else {
		/*bypass this step*/
	}

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2524:	480f      	ldr	r0, [pc, #60]	; (2564 <wait_for_bootrom+0x88>)
    2526:	4913      	ldr	r1, [pc, #76]	; (2574 <wait_for_bootrom+0x98>)
    2528:	4b11      	ldr	r3, [pc, #68]	; (2570 <wait_for_bootrom+0x94>)
    252a:	4798      	blx	r3
}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    252c:	2000      	movs	r0, #0
    252e:	e000      	b.n	2532 <wait_for_bootrom+0x56>
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > TIMEOUT)
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    2530:	20fb      	movs	r0, #251	; 0xfb
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2532:	b240      	sxtb	r0, r0
    2534:	e00b      	b.n	254e <wait_for_bootrom+0x72>
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2536:	2001      	movs	r0, #1
    2538:	4b08      	ldr	r3, [pc, #32]	; (255c <wait_for_bootrom+0x80>)
    253a:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    253c:	4809      	ldr	r0, [pc, #36]	; (2564 <wait_for_bootrom+0x88>)
    253e:	4b06      	ldr	r3, [pc, #24]	; (2558 <wait_for_bootrom+0x7c>)
    2540:	4798      	blx	r3
    2542:	24fa      	movs	r4, #250	; 0xfa
    2544:	00e4      	lsls	r4, r4, #3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    2546:	4d0c      	ldr	r5, [pc, #48]	; (2578 <wait_for_bootrom+0x9c>)
		{
			nm_bsp_sleep(1);
    2548:	4f04      	ldr	r7, [pc, #16]	; (255c <wait_for_bootrom+0x80>)
			reg = nm_read_reg(BOOTROM_REG);
    254a:	4e03      	ldr	r6, [pc, #12]	; (2558 <wait_for_bootrom+0x7c>)
    254c:	e7e1      	b.n	2512 <wait_for_bootrom+0x36>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    254e:	bc04      	pop	{r2}
    2550:	4690      	mov	r8, r2
    2552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2554:	00001014 	.word	0x00001014
    2558:	000026f9 	.word	0x000026f9
    255c:	00000e99 	.word	0x00000e99
    2560:	000207bc 	.word	0x000207bc
    2564:	000c000c 	.word	0x000c000c
    2568:	000207ac 	.word	0x000207ac
    256c:	3c1cd57d 	.word	0x3c1cd57d
    2570:	00002711 	.word	0x00002711
    2574:	ef522f61 	.word	0xef522f61
    2578:	10add09e 	.word	0x10add09e

0000257c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    257c:	b570      	push	{r4, r5, r6, lr}
    257e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	volatile uint32 regAddress = NMI_STATE_REG;
    2580:	4b14      	ldr	r3, [pc, #80]	; (25d4 <wait_for_firmware_start+0x58>)
    2582:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2584:	4b14      	ldr	r3, [pc, #80]	; (25d8 <wait_for_firmware_start+0x5c>)
    2586:	9300      	str	r3, [sp, #0]

	if(2 == arg) {
    2588:	2802      	cmp	r0, #2
    258a:	d10c      	bne.n	25a6 <wait_for_firmware_start+0x2a>
		regAddress = NMI_REV_REG;
    258c:	4b13      	ldr	r3, [pc, #76]	; (25dc <wait_for_firmware_start+0x60>)
    258e:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2590:	4b13      	ldr	r3, [pc, #76]	; (25e0 <wait_for_firmware_start+0x64>)
    2592:	9300      	str	r3, [sp, #0]
    2594:	e007      	b.n	25a6 <wait_for_firmware_start+0x2a>
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2596:	2002      	movs	r0, #2
    2598:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    259a:	9801      	ldr	r0, [sp, #4]
    259c:	47a8      	blx	r5
    259e:	3c01      	subs	r4, #1
		if(++cnt > TIMEOUT)
    25a0:	2c00      	cmp	r4, #0
    25a2:	d104      	bne.n	25ae <wait_for_firmware_start+0x32>
    25a4:	e011      	b.n	25ca <wait_for_firmware_start+0x4e>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    25a6:	4c0f      	ldr	r4, [pc, #60]	; (25e4 <wait_for_firmware_start+0x68>)
    25a8:	2000      	movs	r0, #0
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    25aa:	4e0f      	ldr	r6, [pc, #60]	; (25e8 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    25ac:	4d0f      	ldr	r5, [pc, #60]	; (25ec <wait_for_firmware_start+0x70>)
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg)
    25ae:	9b00      	ldr	r3, [sp, #0]
    25b0:	4283      	cmp	r3, r0
    25b2:	d1f0      	bne.n	2596 <wait_for_firmware_start+0x1a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    25b4:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    25b6:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    25b8:	4b07      	ldr	r3, [pc, #28]	; (25d8 <wait_for_firmware_start+0x5c>)
    25ba:	429a      	cmp	r2, r3
    25bc:	d106      	bne.n	25cc <wait_for_firmware_start+0x50>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    25be:	4805      	ldr	r0, [pc, #20]	; (25d4 <wait_for_firmware_start+0x58>)
    25c0:	2100      	movs	r1, #0
    25c2:	4b0b      	ldr	r3, [pc, #44]	; (25f0 <wait_for_firmware_start+0x74>)
    25c4:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    25c6:	2000      	movs	r0, #0
    25c8:	e000      	b.n	25cc <wait_for_firmware_start+0x50>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt > TIMEOUT)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    25ca:	20fb      	movs	r0, #251	; 0xfb
	if(M2M_FINISH_INIT_STATE == checkValue)
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
    25cc:	b240      	sxtb	r0, r0
}
    25ce:	b002      	add	sp, #8
    25d0:	bd70      	pop	{r4, r5, r6, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	0000108c 	.word	0x0000108c
    25d8:	02532636 	.word	0x02532636
    25dc:	000207ac 	.word	0x000207ac
    25e0:	d75dc1c3 	.word	0xd75dc1c3
    25e4:	000007d1 	.word	0x000007d1
    25e8:	00000e99 	.word	0x00000e99
    25ec:	000026f9 	.word	0x000026f9
    25f0:	00002711 	.word	0x00002711

000025f4 <chip_deinit>:

sint8 chip_deinit(void)
{
    25f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25f6:	4647      	mov	r7, r8
    25f8:	b480      	push	{r7}
    25fa:	b082      	sub	sp, #8
	uint32 reg = 0;
    25fc:	2300      	movs	r3, #0
    25fe:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2600:	20a0      	movs	r0, #160	; 0xa0
    2602:	0140      	lsls	r0, r0, #5
    2604:	a901      	add	r1, sp, #4
    2606:	4b29      	ldr	r3, [pc, #164]	; (26ac <chip_deinit+0xb8>)
    2608:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    260a:	2800      	cmp	r0, #0
    260c:	d00a      	beq.n	2624 <chip_deinit+0x30>
		M2M_ERR("failed to de-initialize\n");
    260e:	4828      	ldr	r0, [pc, #160]	; (26b0 <chip_deinit+0xbc>)
    2610:	4928      	ldr	r1, [pc, #160]	; (26b4 <chip_deinit+0xc0>)
    2612:	4a29      	ldr	r2, [pc, #164]	; (26b8 <chip_deinit+0xc4>)
    2614:	4b29      	ldr	r3, [pc, #164]	; (26bc <chip_deinit+0xc8>)
    2616:	4798      	blx	r3
    2618:	4829      	ldr	r0, [pc, #164]	; (26c0 <chip_deinit+0xcc>)
    261a:	4b2a      	ldr	r3, [pc, #168]	; (26c4 <chip_deinit+0xd0>)
    261c:	4798      	blx	r3
    261e:	200d      	movs	r0, #13
    2620:	4b29      	ldr	r3, [pc, #164]	; (26c8 <chip_deinit+0xd4>)
    2622:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    2624:	4929      	ldr	r1, [pc, #164]	; (26cc <chip_deinit+0xd8>)
    2626:	9a01      	ldr	r2, [sp, #4]
    2628:	4011      	ands	r1, r2
    262a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    262c:	20a0      	movs	r0, #160	; 0xa0
    262e:	0140      	lsls	r0, r0, #5
    2630:	4b27      	ldr	r3, [pc, #156]	; (26d0 <chip_deinit+0xdc>)
    2632:	4798      	blx	r3
    2634:	1c06      	adds	r6, r0, #0

	if (ret != M2M_SUCCESS) {
    2636:	240a      	movs	r4, #10
    2638:	2800      	cmp	r0, #0
    263a:	d00c      	beq.n	2656 <chip_deinit+0x62>
		M2M_ERR("Error while writing reg\n");
    263c:	481c      	ldr	r0, [pc, #112]	; (26b0 <chip_deinit+0xbc>)
    263e:	491d      	ldr	r1, [pc, #116]	; (26b4 <chip_deinit+0xc0>)
    2640:	4a24      	ldr	r2, [pc, #144]	; (26d4 <chip_deinit+0xe0>)
    2642:	4b1e      	ldr	r3, [pc, #120]	; (26bc <chip_deinit+0xc8>)
    2644:	4798      	blx	r3
    2646:	4824      	ldr	r0, [pc, #144]	; (26d8 <chip_deinit+0xe4>)
    2648:	4b1e      	ldr	r3, [pc, #120]	; (26c4 <chip_deinit+0xd0>)
    264a:	4798      	blx	r3
    264c:	200d      	movs	r0, #13
    264e:	4b1e      	ldr	r3, [pc, #120]	; (26c8 <chip_deinit+0xd4>)
    2650:	4798      	blx	r3
		return ret;
    2652:	1c30      	adds	r0, r6, #0
    2654:	e025      	b.n	26a2 <chip_deinit+0xae>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2656:	25a0      	movs	r5, #160	; 0xa0
    2658:	016d      	lsls	r5, r5, #5
    265a:	4f14      	ldr	r7, [pc, #80]	; (26ac <chip_deinit+0xb8>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    265c:	4b1c      	ldr	r3, [pc, #112]	; (26d0 <chip_deinit+0xdc>)
    265e:	4698      	mov	r8, r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2660:	1c28      	adds	r0, r5, #0
    2662:	a901      	add	r1, sp, #4
    2664:	47b8      	blx	r7
    2666:	1e06      	subs	r6, r0, #0
		if (ret != M2M_SUCCESS) {
    2668:	d00d      	beq.n	2686 <chip_deinit+0x92>
			M2M_ERR("Error while reading reg\n");
    266a:	4811      	ldr	r0, [pc, #68]	; (26b0 <chip_deinit+0xbc>)
    266c:	4911      	ldr	r1, [pc, #68]	; (26b4 <chip_deinit+0xc0>)
    266e:	228b      	movs	r2, #139	; 0x8b
    2670:	0092      	lsls	r2, r2, #2
    2672:	4b12      	ldr	r3, [pc, #72]	; (26bc <chip_deinit+0xc8>)
    2674:	4798      	blx	r3
    2676:	4819      	ldr	r0, [pc, #100]	; (26dc <chip_deinit+0xe8>)
    2678:	4b12      	ldr	r3, [pc, #72]	; (26c4 <chip_deinit+0xd0>)
    267a:	4798      	blx	r3
    267c:	200d      	movs	r0, #13
    267e:	4b12      	ldr	r3, [pc, #72]	; (26c8 <chip_deinit+0xd4>)
    2680:	4798      	blx	r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2682:	1c30      	adds	r0, r6, #0
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
    2684:	e00d      	b.n	26a2 <chip_deinit+0xae>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    2686:	9b01      	ldr	r3, [sp, #4]
    2688:	055a      	lsls	r2, r3, #21
    268a:	d509      	bpl.n	26a0 <chip_deinit+0xac>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    268c:	490f      	ldr	r1, [pc, #60]	; (26cc <chip_deinit+0xd8>)
    268e:	4019      	ands	r1, r3
    2690:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2692:	1c28      	adds	r0, r5, #0
    2694:	47c0      	blx	r8
    2696:	3c01      	subs	r4, #1
    2698:	b2e4      	uxtb	r4, r4
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    269a:	2c00      	cmp	r4, #0
    269c:	d1e0      	bne.n	2660 <chip_deinit+0x6c>
    269e:	e000      	b.n	26a2 <chip_deinit+0xae>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    26a0:	2000      	movs	r0, #0
    26a2:	b240      	sxtb	r0, r0
		}

	} while (timeout);

	return ret;
}
    26a4:	b002      	add	sp, #8
    26a6:	bc04      	pop	{r2}
    26a8:	4690      	mov	r8, r2
    26aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ac:	00002705 	.word	0x00002705
    26b0:	00009674 	.word	0x00009674
    26b4:	00009b30 	.word	0x00009b30
    26b8:	0000021f 	.word	0x0000021f
    26bc:	00007c39 	.word	0x00007c39
    26c0:	00009bc8 	.word	0x00009bc8
    26c4:	00007d59 	.word	0x00007d59
    26c8:	00007c6d 	.word	0x00007c6d
    26cc:	fffffbff 	.word	0xfffffbff
    26d0:	00002711 	.word	0x00002711
    26d4:	00000225 	.word	0x00000225
    26d8:	00009be0 	.word	0x00009be0
    26dc:	00009bf8 	.word	0x00009bf8

000026e0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    26e0:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    26e2:	4b01      	ldr	r3, [pc, #4]	; (26e8 <nm_bus_iface_init+0x8>)
    26e4:	4798      	blx	r3

	return ret;
}
    26e6:	bd08      	pop	{r3, pc}
    26e8:	00000fc9 	.word	0x00000fc9

000026ec <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    26ec:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    26ee:	4b01      	ldr	r3, [pc, #4]	; (26f4 <nm_bus_iface_deinit+0x8>)
    26f0:	4798      	blx	r3

	return ret;
}
    26f2:	bd08      	pop	{r3, pc}
    26f4:	000011fd 	.word	0x000011fd

000026f8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    26f8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    26fa:	4b01      	ldr	r3, [pc, #4]	; (2700 <nm_read_reg+0x8>)
    26fc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    26fe:	bd08      	pop	{r3, pc}
    2700:	00003021 	.word	0x00003021

00002704 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2704:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2706:	4b01      	ldr	r3, [pc, #4]	; (270c <nm_read_reg_with_ret+0x8>)
    2708:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    270a:	bd08      	pop	{r3, pc}
    270c:	00003035 	.word	0x00003035

00002710 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2710:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2712:	4b01      	ldr	r3, [pc, #4]	; (2718 <nm_write_reg+0x8>)
    2714:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2716:	bd08      	pop	{r3, pc}
    2718:	0000304d 	.word	0x0000304d

0000271c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    271e:	465f      	mov	r7, fp
    2720:	4656      	mov	r6, sl
    2722:	464d      	mov	r5, r9
    2724:	4644      	mov	r4, r8
    2726:	b4f0      	push	{r4, r5, r6, r7}
    2728:	468b      	mov	fp, r1
    272a:	1c16      	adds	r6, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    272c:	4b16      	ldr	r3, [pc, #88]	; (2788 <nm_read_block+0x6c>)
    272e:	881b      	ldrh	r3, [r3, #0]
    2730:	3b08      	subs	r3, #8
    2732:	b29b      	uxth	r3, r3
    2734:	4698      	mov	r8, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2736:	1c1d      	adds	r5, r3, #0
    2738:	429a      	cmp	r2, r3
    273a:	d808      	bhi.n	274e <nm_read_block+0x32>
    273c:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    273e:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2740:	465b      	mov	r3, fp
    2742:	19d9      	adds	r1, r3, r7
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2744:	b2b2      	uxth	r2, r6
    2746:	1c20      	adds	r0, r4, #0
    2748:	4b10      	ldr	r3, [pc, #64]	; (278c <nm_read_block+0x70>)
    274a:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    274c:	e014      	b.n	2778 <nm_read_block+0x5c>
    274e:	1ad6      	subs	r6, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2750:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    2752:	2700      	movs	r7, #0
    2754:	1a0b      	subs	r3, r1, r0
    2756:	469a      	mov	sl, r3
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2758:	4b0c      	ldr	r3, [pc, #48]	; (278c <nm_read_block+0x70>)
    275a:	4699      	mov	r9, r3
    275c:	4653      	mov	r3, sl
    275e:	1919      	adds	r1, r3, r4
    2760:	1c20      	adds	r0, r4, #0
    2762:	4642      	mov	r2, r8
    2764:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2766:	2800      	cmp	r0, #0
    2768:	d106      	bne.n	2778 <nm_read_block+0x5c>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    276a:	197f      	adds	r7, r7, r5
			u32Addr += u16MaxTrxSz;
    276c:	1964      	adds	r4, r4, r5
    276e:	1b73      	subs	r3, r6, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2770:	42ae      	cmp	r6, r5
    2772:	d9e5      	bls.n	2740 <nm_read_block+0x24>
    2774:	1c1e      	adds	r6, r3, #0
    2776:	e7f1      	b.n	275c <nm_read_block+0x40>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2778:	b240      	sxtb	r0, r0
}
    277a:	bc3c      	pop	{r2, r3, r4, r5}
    277c:	4690      	mov	r8, r2
    277e:	4699      	mov	r9, r3
    2780:	46a2      	mov	sl, r4
    2782:	46ab      	mov	fp, r5
    2784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	2000000c 	.word	0x2000000c
    278c:	00003189 	.word	0x00003189

00002790 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2792:	465f      	mov	r7, fp
    2794:	4656      	mov	r6, sl
    2796:	464d      	mov	r5, r9
    2798:	4644      	mov	r4, r8
    279a:	b4f0      	push	{r4, r5, r6, r7}
    279c:	468b      	mov	fp, r1
    279e:	1c16      	adds	r6, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    27a0:	4b16      	ldr	r3, [pc, #88]	; (27fc <nm_write_block+0x6c>)
    27a2:	881b      	ldrh	r3, [r3, #0]
    27a4:	3b08      	subs	r3, #8
    27a6:	b29b      	uxth	r3, r3
    27a8:	4698      	mov	r8, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    27aa:	1c1d      	adds	r5, r3, #0
    27ac:	429a      	cmp	r2, r3
    27ae:	d808      	bhi.n	27c2 <nm_write_block+0x32>
    27b0:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    27b2:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    27b4:	465b      	mov	r3, fp
    27b6:	19d9      	adds	r1, r3, r7
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    27b8:	b2b2      	uxth	r2, r6
    27ba:	1c20      	adds	r0, r4, #0
    27bc:	4b10      	ldr	r3, [pc, #64]	; (2800 <nm_write_block+0x70>)
    27be:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    27c0:	e014      	b.n	27ec <nm_write_block+0x5c>
    27c2:	1ad6      	subs	r6, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    27c4:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    27c6:	2700      	movs	r7, #0
    27c8:	1a0b      	subs	r3, r1, r0
    27ca:	469a      	mov	sl, r3
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    27cc:	4b0c      	ldr	r3, [pc, #48]	; (2800 <nm_write_block+0x70>)
    27ce:	4699      	mov	r9, r3
    27d0:	4653      	mov	r3, sl
    27d2:	1919      	adds	r1, r3, r4
    27d4:	1c20      	adds	r0, r4, #0
    27d6:	4642      	mov	r2, r8
    27d8:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    27da:	2800      	cmp	r0, #0
    27dc:	d106      	bne.n	27ec <nm_write_block+0x5c>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    27de:	197f      	adds	r7, r7, r5
			u32Addr += u16MaxTrxSz;
    27e0:	1964      	adds	r4, r4, r5
    27e2:	1b73      	subs	r3, r6, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    27e4:	42ae      	cmp	r6, r5
    27e6:	d9e5      	bls.n	27b4 <nm_write_block+0x24>
    27e8:	1c1e      	adds	r6, r3, #0
    27ea:	e7f1      	b.n	27d0 <nm_write_block+0x40>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    27ec:	b240      	sxtb	r0, r0
}
    27ee:	bc3c      	pop	{r2, r3, r4, r5}
    27f0:	4690      	mov	r8, r2
    27f2:	4699      	mov	r9, r3
    27f4:	46a2      	mov	sl, r4
    27f6:	46ab      	mov	fp, r5
    27f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	2000000c 	.word	0x2000000c
    2800:	00003265 	.word	0x00003265

00002804 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2804:	b5f0      	push	{r4, r5, r6, r7, lr}
    2806:	465f      	mov	r7, fp
    2808:	4656      	mov	r6, sl
    280a:	464d      	mov	r5, r9
    280c:	4644      	mov	r4, r8
    280e:	b4f0      	push	{r4, r5, r6, r7}
    2810:	b08d      	sub	sp, #52	; 0x34
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;

	if(NULL != arg) {
    2812:	2800      	cmp	r0, #0
    2814:	d005      	beq.n	2822 <nm_drv_init+0x1e>
		if(M2M_WIFI_MODE_CONFIG == *((uint8 *)arg)) {
    2816:	7800      	ldrb	r0, [r0, #0]
*/
sint8 nm_drv_init(void * arg)
{
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    2818:	3802      	subs	r0, #2
    281a:	4243      	negs	r3, r0
    281c:	4158      	adcs	r0, r3
    281e:	1c45      	adds	r5, r0, #1
    2820:	e000      	b.n	2824 <nm_drv_init+0x20>
    2822:	2501      	movs	r5, #1
		}
	} else {
		/*continue running*/
	}

	ret = nm_bus_iface_init(NULL);
    2824:	2000      	movs	r0, #0
    2826:	4b5a      	ldr	r3, [pc, #360]	; (2990 <nm_drv_init+0x18c>)
    2828:	4798      	blx	r3
    282a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    282c:	d00b      	beq.n	2846 <nm_drv_init+0x42>
		M2M_ERR("[nmi start]: fail init bus\n");
    282e:	4859      	ldr	r0, [pc, #356]	; (2994 <nm_drv_init+0x190>)
    2830:	4959      	ldr	r1, [pc, #356]	; (2998 <nm_drv_init+0x194>)
    2832:	22a4      	movs	r2, #164	; 0xa4
    2834:	4b59      	ldr	r3, [pc, #356]	; (299c <nm_drv_init+0x198>)
    2836:	4798      	blx	r3
    2838:	4859      	ldr	r0, [pc, #356]	; (29a0 <nm_drv_init+0x19c>)
    283a:	4b5a      	ldr	r3, [pc, #360]	; (29a4 <nm_drv_init+0x1a0>)
    283c:	4798      	blx	r3
    283e:	200d      	movs	r0, #13
    2840:	4b59      	ldr	r3, [pc, #356]	; (29a8 <nm_drv_init+0x1a4>)
    2842:	4798      	blx	r3
		goto ERR1;
    2844:	e09c      	b.n	2980 <nm_drv_init+0x17c>

#ifdef BUS_ONLY
	return;
#endif

	ret = chip_wake();
    2846:	4b59      	ldr	r3, [pc, #356]	; (29ac <nm_drv_init+0x1a8>)
    2848:	4798      	blx	r3
    284a:	1c04      	adds	r4, r0, #0
	nm_bsp_sleep(10);
    284c:	200a      	movs	r0, #10
    284e:	4b58      	ldr	r3, [pc, #352]	; (29b0 <nm_drv_init+0x1ac>)
    2850:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2852:	2c00      	cmp	r4, #0
    2854:	d00b      	beq.n	286e <nm_drv_init+0x6a>
		M2M_ERR("[nmi start]: fail chip_wakeup\n");
    2856:	484f      	ldr	r0, [pc, #316]	; (2994 <nm_drv_init+0x190>)
    2858:	494f      	ldr	r1, [pc, #316]	; (2998 <nm_drv_init+0x194>)
    285a:	22af      	movs	r2, #175	; 0xaf
    285c:	4b4f      	ldr	r3, [pc, #316]	; (299c <nm_drv_init+0x198>)
    285e:	4798      	blx	r3
    2860:	4854      	ldr	r0, [pc, #336]	; (29b4 <nm_drv_init+0x1b0>)
    2862:	4b50      	ldr	r3, [pc, #320]	; (29a4 <nm_drv_init+0x1a0>)
    2864:	4798      	blx	r3
    2866:	200d      	movs	r0, #13
    2868:	4b4f      	ldr	r3, [pc, #316]	; (29a8 <nm_drv_init+0x1a4>)
    286a:	4798      	blx	r3
		goto ERR2;
    286c:	e086      	b.n	297c <nm_drv_init+0x178>
	}

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    286e:	4852      	ldr	r0, [pc, #328]	; (29b8 <nm_drv_init+0x1b4>)
    2870:	4c4a      	ldr	r4, [pc, #296]	; (299c <nm_drv_init+0x198>)
    2872:	47a0      	blx	r4
    2874:	4b51      	ldr	r3, [pc, #324]	; (29bc <nm_drv_init+0x1b8>)
    2876:	4798      	blx	r3
    2878:	1c01      	adds	r1, r0, #0
    287a:	4851      	ldr	r0, [pc, #324]	; (29c0 <nm_drv_init+0x1bc>)
    287c:	47a0      	blx	r4
    287e:	200d      	movs	r0, #13
    2880:	4b49      	ldr	r3, [pc, #292]	; (29a8 <nm_drv_init+0x1a4>)
    2882:	4798      	blx	r3

	/**
	Go...
	**/
	ret = chip_reset();
    2884:	4b4f      	ldr	r3, [pc, #316]	; (29c4 <nm_drv_init+0x1c0>)
    2886:	4798      	blx	r3
    2888:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    288a:	d177      	bne.n	297c <nm_drv_init+0x178>
		goto ERR2;
	}

#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    288c:	4b4e      	ldr	r3, [pc, #312]	; (29c8 <nm_drv_init+0x1c4>)
    288e:	4798      	blx	r3
#endif
	/*return power save to default value*/
	chip_idle();
    2890:	4b4e      	ldr	r3, [pc, #312]	; (29cc <nm_drv_init+0x1c8>)
    2892:	4798      	blx	r3
	//M2M_INFO("Chip ID %x\n", (unsigned int)nmi_get_chipid());

	ret = cpu_start();
    2894:	4b4e      	ldr	r3, [pc, #312]	; (29d0 <nm_drv_init+0x1cc>)
    2896:	4798      	blx	r3
    2898:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    289a:	d16f      	bne.n	297c <nm_drv_init+0x178>
		goto ERR2;
	}

	ret = wait_for_bootrom(u8Mode);
    289c:	1c28      	adds	r0, r5, #0
    289e:	4b4d      	ldr	r3, [pc, #308]	; (29d4 <nm_drv_init+0x1d0>)
    28a0:	4798      	blx	r3
    28a2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    28a4:	d16a      	bne.n	297c <nm_drv_init+0x178>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
    28a6:	1c28      	adds	r0, r5, #0
    28a8:	4b4b      	ldr	r3, [pc, #300]	; (29d8 <nm_drv_init+0x1d4>)
    28aa:	4798      	blx	r3
    28ac:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    28ae:	d165      	bne.n	297c <nm_drv_init+0x178>
		goto ERR2;
	}

	if(M2M_WIFI_MODE_CONFIG == u8Mode) {
    28b0:	2d02      	cmp	r5, #2
    28b2:	d065      	beq.n	2980 <nm_drv_init+0x17c>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
    28b4:	4b49      	ldr	r3, [pc, #292]	; (29dc <nm_drv_init+0x1d8>)
    28b6:	4798      	blx	r3
    28b8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    28ba:	d00b      	beq.n	28d4 <nm_drv_init+0xd0>
		M2M_ERR("failed to enable interrupts..\n");
    28bc:	4835      	ldr	r0, [pc, #212]	; (2994 <nm_drv_init+0x190>)
    28be:	4936      	ldr	r1, [pc, #216]	; (2998 <nm_drv_init+0x194>)
    28c0:	22dc      	movs	r2, #220	; 0xdc
    28c2:	4b36      	ldr	r3, [pc, #216]	; (299c <nm_drv_init+0x198>)
    28c4:	4798      	blx	r3
    28c6:	4846      	ldr	r0, [pc, #280]	; (29e0 <nm_drv_init+0x1dc>)
    28c8:	4b36      	ldr	r3, [pc, #216]	; (29a4 <nm_drv_init+0x1a0>)
    28ca:	4798      	blx	r3
    28cc:	200d      	movs	r0, #13
    28ce:	4b36      	ldr	r3, [pc, #216]	; (29a8 <nm_drv_init+0x1a4>)
    28d0:	4798      	blx	r3
		goto ERR2;
    28d2:	e053      	b.n	297c <nm_drv_init+0x178>
#endif
#ifdef __ENABLE_LEGACY_RF_SETTINGS__
	val32 |= rHAVE_LEGACY_RF_SETTINGS;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    28d4:	20a5      	movs	r0, #165	; 0xa5
    28d6:	0140      	lsls	r0, r0, #5
    28d8:	2100      	movs	r1, #0
    28da:	4b42      	ldr	r3, [pc, #264]	; (29e4 <nm_drv_init+0x1e0>)
    28dc:	4798      	blx	r3
*	@version	1.0
*/
static sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    28de:	2100      	movs	r1, #0
    28e0:	4689      	mov	r9, r1
    28e2:	9103      	str	r1, [sp, #12]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    28e4:	4840      	ldr	r0, [pc, #256]	; (29e8 <nm_drv_init+0x1e4>)
    28e6:	a903      	add	r1, sp, #12
    28e8:	4b40      	ldr	r3, [pc, #256]	; (29ec <nm_drv_init+0x1e8>)
    28ea:	4798      	blx	r3

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    28ec:	9f03      	ldr	r7, [sp, #12]
    28ee:	0c3b      	lsrs	r3, r7, #16
    28f0:	469a      	mov	sl, r3
    28f2:	b299      	uxth	r1, r3
    28f4:	468b      	mov	fp, r1
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    28f6:	b2bb      	uxth	r3, r7
    28f8:	0a1a      	lsrs	r2, r3, #8
    28fa:	9200      	str	r2, [sp, #0]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    28fc:	091b      	lsrs	r3, r3, #4
    28fe:	260f      	movs	r6, #15
    2900:	4033      	ands	r3, r6
    2902:	9301      	str	r3, [sp, #4]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
    2904:	4b2d      	ldr	r3, [pc, #180]	; (29bc <nm_drv_init+0x1b8>)
    2906:	4798      	blx	r3
	
	chip_apply_conf();

	nm_get_firmware_info(&strtmp);

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    2908:	4b2b      	ldr	r3, [pc, #172]	; (29b8 <nm_drv_init+0x1b4>)
    290a:	4698      	mov	r8, r3
    290c:	1c18      	adds	r0, r3, #0
    290e:	4d23      	ldr	r5, [pc, #140]	; (299c <nm_drv_init+0x198>)
    2910:	47a8      	blx	r5
    2912:	1c3b      	adds	r3, r7, #0
    2914:	4033      	ands	r3, r6
    2916:	4836      	ldr	r0, [pc, #216]	; (29f0 <nm_drv_init+0x1ec>)
    2918:	9900      	ldr	r1, [sp, #0]
    291a:	9a01      	ldr	r2, [sp, #4]
    291c:	47a8      	blx	r5
    291e:	200d      	movs	r0, #13
    2920:	4f21      	ldr	r7, [pc, #132]	; (29a8 <nm_drv_init+0x1a4>)
    2922:	47b8      	blx	r7
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2924:	4640      	mov	r0, r8
    2926:	47a8      	blx	r5
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    2928:	465a      	mov	r2, fp
    292a:	0a11      	lsrs	r1, r2, #8
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    292c:	0912      	lsrs	r2, r2, #4
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    292e:	4032      	ands	r2, r6
	chip_apply_conf();

	nm_get_firmware_info(&strtmp);

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2930:	4653      	mov	r3, sl
    2932:	4033      	ands	r3, r6
    2934:	482f      	ldr	r0, [pc, #188]	; (29f4 <nm_drv_init+0x1f0>)
    2936:	47a8      	blx	r5
    2938:	200d      	movs	r0, #13
    293a:	47b8      	blx	r7
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    293c:	4640      	mov	r0, r8
    293e:	47a8      	blx	r5
    2940:	482d      	ldr	r0, [pc, #180]	; (29f8 <nm_drv_init+0x1f4>)
    2942:	2112      	movs	r1, #18
    2944:	2203      	movs	r2, #3
    2946:	464b      	mov	r3, r9
    2948:	47a8      	blx	r5
    294a:	200d      	movs	r0, #13
    294c:	47b8      	blx	r7

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
    294e:	ab04      	add	r3, sp, #16
    2950:	9900      	ldr	r1, [sp, #0]
    2952:	7019      	strb	r1, [r3, #0]
    2954:	466a      	mov	r2, sp
    2956:	9901      	ldr	r1, [sp, #4]
    2958:	7451      	strb	r1, [r2, #17]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
    295a:	881a      	ldrh	r2, [r3, #0]
    295c:	4b27      	ldr	r3, [pc, #156]	; (29fc <nm_drv_init+0x1f8>)
    295e:	429a      	cmp	r2, r3
    2960:	d00e      	beq.n	2980 <nm_drv_init+0x17c>
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
		M2M_ERR("Firmware version mismatch!\n");
    2962:	480c      	ldr	r0, [pc, #48]	; (2994 <nm_drv_init+0x190>)
    2964:	490c      	ldr	r1, [pc, #48]	; (2998 <nm_drv_init+0x194>)
    2966:	22ec      	movs	r2, #236	; 0xec
    2968:	4b0c      	ldr	r3, [pc, #48]	; (299c <nm_drv_init+0x198>)
    296a:	4798      	blx	r3
    296c:	4824      	ldr	r0, [pc, #144]	; (2a00 <nm_drv_init+0x1fc>)
    296e:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <nm_drv_init+0x1a0>)
    2970:	4798      	blx	r3
    2972:	200d      	movs	r0, #13
    2974:	4b0c      	ldr	r3, [pc, #48]	; (29a8 <nm_drv_init+0x1a4>)
    2976:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    2978:	24f3      	movs	r4, #243	; 0xf3
    297a:	e001      	b.n	2980 <nm_drv_init+0x17c>
		M2M_ERR("Firmware version mismatch!\n");
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    297c:	4b21      	ldr	r3, [pc, #132]	; (2a04 <nm_drv_init+0x200>)
    297e:	4798      	blx	r3
    2980:	b260      	sxtb	r0, r4
ERR1:
	return ret;
}
    2982:	b00d      	add	sp, #52	; 0x34
    2984:	bc3c      	pop	{r2, r3, r4, r5}
    2986:	4690      	mov	r8, r2
    2988:	4699      	mov	r9, r3
    298a:	46a2      	mov	sl, r4
    298c:	46ab      	mov	fp, r5
    298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2990:	000026e1 	.word	0x000026e1
    2994:	00009674 	.word	0x00009674
    2998:	00009d78 	.word	0x00009d78
    299c:	00007c39 	.word	0x00007c39
    29a0:	00009c60 	.word	0x00009c60
    29a4:	00007d59 	.word	0x00007d59
    29a8:	00007c6d 	.word	0x00007c6d
    29ac:	00002491 	.word	0x00002491
    29b0:	00000e99 	.word	0x00000e99
    29b4:	00009c8c 	.word	0x00009c8c
    29b8:	00009938 	.word	0x00009938
    29bc:	00002355 	.word	0x00002355
    29c0:	00009c7c 	.word	0x00009c7c
    29c4:	000024ad 	.word	0x000024ad
    29c8:	00003065 	.word	0x00003065
    29cc:	0000219d 	.word	0x0000219d
    29d0:	0000227d 	.word	0x0000227d
    29d4:	000024dd 	.word	0x000024dd
    29d8:	0000257d 	.word	0x0000257d
    29dc:	00002211 	.word	0x00002211
    29e0:	00009cac 	.word	0x00009cac
    29e4:	00002711 	.word	0x00002711
    29e8:	000207ac 	.word	0x000207ac
    29ec:	00002705 	.word	0x00002705
    29f0:	00009ccc 	.word	0x00009ccc
    29f4:	00009ce8 	.word	0x00009ce8
    29f8:	00009d04 	.word	0x00009d04
    29fc:	00000312 	.word	0x00000312
    2a00:	00009d20 	.word	0x00009d20
    2a04:	000026ed 	.word	0x000026ed

00002a08 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2a08:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2a0a:	4b13      	ldr	r3, [pc, #76]	; (2a58 <nm_drv_deinit+0x50>)
    2a0c:	4798      	blx	r3
    2a0e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2a10:	d00c      	beq.n	2a2c <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2a12:	4812      	ldr	r0, [pc, #72]	; (2a5c <nm_drv_deinit+0x54>)
    2a14:	4912      	ldr	r1, [pc, #72]	; (2a60 <nm_drv_deinit+0x58>)
    2a16:	2281      	movs	r2, #129	; 0x81
    2a18:	0052      	lsls	r2, r2, #1
    2a1a:	4b12      	ldr	r3, [pc, #72]	; (2a64 <nm_drv_deinit+0x5c>)
    2a1c:	4798      	blx	r3
    2a1e:	4812      	ldr	r0, [pc, #72]	; (2a68 <nm_drv_deinit+0x60>)
    2a20:	4b12      	ldr	r3, [pc, #72]	; (2a6c <nm_drv_deinit+0x64>)
    2a22:	4798      	blx	r3
    2a24:	200d      	movs	r0, #13
    2a26:	4b12      	ldr	r3, [pc, #72]	; (2a70 <nm_drv_deinit+0x68>)
    2a28:	4798      	blx	r3
		goto ERR1;
    2a2a:	e012      	b.n	2a52 <nm_drv_deinit+0x4a>
	}

	ret = nm_bus_iface_deinit();
    2a2c:	4b11      	ldr	r3, [pc, #68]	; (2a74 <nm_drv_deinit+0x6c>)
    2a2e:	4798      	blx	r3
    2a30:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2a32:	d00c      	beq.n	2a4e <nm_drv_deinit+0x46>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2a34:	4809      	ldr	r0, [pc, #36]	; (2a5c <nm_drv_deinit+0x54>)
    2a36:	490a      	ldr	r1, [pc, #40]	; (2a60 <nm_drv_deinit+0x58>)
    2a38:	2284      	movs	r2, #132	; 0x84
    2a3a:	0052      	lsls	r2, r2, #1
    2a3c:	4b09      	ldr	r3, [pc, #36]	; (2a64 <nm_drv_deinit+0x5c>)
    2a3e:	4798      	blx	r3
    2a40:	480d      	ldr	r0, [pc, #52]	; (2a78 <nm_drv_deinit+0x70>)
    2a42:	4b0a      	ldr	r3, [pc, #40]	; (2a6c <nm_drv_deinit+0x64>)
    2a44:	4798      	blx	r3
    2a46:	200d      	movs	r0, #13
    2a48:	4b09      	ldr	r3, [pc, #36]	; (2a70 <nm_drv_deinit+0x68>)
    2a4a:	4798      	blx	r3
		goto ERR1;
    2a4c:	e001      	b.n	2a52 <nm_drv_deinit+0x4a>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2a4e:	4b0b      	ldr	r3, [pc, #44]	; (2a7c <nm_drv_deinit+0x74>)
    2a50:	4798      	blx	r3
#endif

ERR1:
	return ret;
    2a52:	b260      	sxtb	r0, r4
}
    2a54:	bd10      	pop	{r4, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	000025f5 	.word	0x000025f5
    2a5c:	00009674 	.word	0x00009674
    2a60:	00009d84 	.word	0x00009d84
    2a64:	00007c39 	.word	0x00007c39
    2a68:	00009d3c 	.word	0x00009d3c
    2a6c:	00007d59 	.word	0x00007d59
    2a70:	00007c6d 	.word	0x00007c6d
    2a74:	000026ed 	.word	0x000026ed
    2a78:	00009d5c 	.word	0x00009d5c
    2a7c:	00003011 	.word	0x00003011

00002a80 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    2a80:	b500      	push	{lr}
    2a82:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    2a84:	ab01      	add	r3, sp, #4
    2a86:	2200      	movs	r2, #0
    2a88:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2a8a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2a8c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2a8e:	2003      	movs	r0, #3
    2a90:	1c19      	adds	r1, r3, #0
    2a92:	4b02      	ldr	r3, [pc, #8]	; (2a9c <nmi_spi_read+0x1c>)
    2a94:	4798      	blx	r3
}
    2a96:	b005      	add	sp, #20
    2a98:	bd00      	pop	{pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	000010c1 	.word	0x000010c1

00002aa0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa2:	b083      	sub	sp, #12
    2aa4:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2aa6:	2ecf      	cmp	r6, #207	; 0xcf
    2aa8:	d004      	beq.n	2ab4 <spi_cmd_rsp+0x14>
    2aaa:	1c03      	adds	r3, r0, #0
    2aac:	333b      	adds	r3, #59	; 0x3b
    2aae:	b2db      	uxtb	r3, r3
    2ab0:	2b01      	cmp	r3, #1
    2ab2:	d807      	bhi.n	2ac4 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ab4:	4668      	mov	r0, sp
    2ab6:	3007      	adds	r0, #7
    2ab8:	2101      	movs	r1, #1
    2aba:	4b25      	ldr	r3, [pc, #148]	; (2b50 <spi_cmd_rsp+0xb0>)
    2abc:	4798      	blx	r3
			result = N_FAIL;
    2abe:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d141      	bne.n	2b48 <spi_cmd_rsp+0xa8>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2ac4:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ac6:	466d      	mov	r5, sp
    2ac8:	3507      	adds	r5, #7
    2aca:	4f21      	ldr	r7, [pc, #132]	; (2b50 <spi_cmd_rsp+0xb0>)
    2acc:	1c28      	adds	r0, r5, #0
    2ace:	2101      	movs	r1, #1
    2ad0:	47b8      	blx	r7
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d00d      	beq.n	2af2 <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2ad6:	481f      	ldr	r0, [pc, #124]	; (2b54 <spi_cmd_rsp+0xb4>)
    2ad8:	491f      	ldr	r1, [pc, #124]	; (2b58 <spi_cmd_rsp+0xb8>)
    2ada:	223c      	movs	r2, #60	; 0x3c
    2adc:	32ff      	adds	r2, #255	; 0xff
    2ade:	4b1f      	ldr	r3, [pc, #124]	; (2b5c <spi_cmd_rsp+0xbc>)
    2ae0:	4798      	blx	r3
    2ae2:	481f      	ldr	r0, [pc, #124]	; (2b60 <spi_cmd_rsp+0xc0>)
    2ae4:	4b1f      	ldr	r3, [pc, #124]	; (2b64 <spi_cmd_rsp+0xc4>)
    2ae6:	4798      	blx	r3
    2ae8:	200d      	movs	r0, #13
    2aea:	4b1f      	ldr	r3, [pc, #124]	; (2b68 <spi_cmd_rsp+0xc8>)
    2aec:	4798      	blx	r3
			result = N_FAIL;
    2aee:	2300      	movs	r3, #0
			goto _fail_;
    2af0:	e02a      	b.n	2b48 <spi_cmd_rsp+0xa8>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2af2:	782b      	ldrb	r3, [r5, #0]
    2af4:	42b3      	cmp	r3, r6
    2af6:	d104      	bne.n	2b02 <spi_cmd_rsp+0x62>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2af8:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2afa:	466d      	mov	r5, sp
    2afc:	3507      	adds	r5, #7
    2afe:	4e14      	ldr	r6, [pc, #80]	; (2b50 <spi_cmd_rsp+0xb0>)
    2b00:	e004      	b.n	2b0c <spi_cmd_rsp+0x6c>
    2b02:	3c01      	subs	r4, #1
    2b04:	b2e4      	uxtb	r4, r4
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2b06:	2c00      	cmp	r4, #0
    2b08:	d1e0      	bne.n	2acc <spi_cmd_rsp+0x2c>
    2b0a:	e7f5      	b.n	2af8 <spi_cmd_rsp+0x58>
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b0c:	1c28      	adds	r0, r5, #0
    2b0e:	2101      	movs	r1, #1
    2b10:	47b0      	blx	r6
    2b12:	2800      	cmp	r0, #0
    2b14:	d00d      	beq.n	2b32 <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2b16:	480f      	ldr	r0, [pc, #60]	; (2b54 <spi_cmd_rsp+0xb4>)
    2b18:	490f      	ldr	r1, [pc, #60]	; (2b58 <spi_cmd_rsp+0xb8>)
    2b1a:	224a      	movs	r2, #74	; 0x4a
    2b1c:	32ff      	adds	r2, #255	; 0xff
    2b1e:	4b0f      	ldr	r3, [pc, #60]	; (2b5c <spi_cmd_rsp+0xbc>)
    2b20:	4798      	blx	r3
    2b22:	480f      	ldr	r0, [pc, #60]	; (2b60 <spi_cmd_rsp+0xc0>)
    2b24:	4b0f      	ldr	r3, [pc, #60]	; (2b64 <spi_cmd_rsp+0xc4>)
    2b26:	4798      	blx	r3
    2b28:	200d      	movs	r0, #13
    2b2a:	4b0f      	ldr	r3, [pc, #60]	; (2b68 <spi_cmd_rsp+0xc8>)
    2b2c:	4798      	blx	r3
			result = N_FAIL;
    2b2e:	2300      	movs	r3, #0
			goto _fail_;
    2b30:	e00a      	b.n	2b48 <spi_cmd_rsp+0xa8>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2b32:	782b      	ldrb	r3, [r5, #0]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d004      	beq.n	2b42 <spi_cmd_rsp+0xa2>
    2b38:	3c01      	subs	r4, #1
    2b3a:	b2e4      	uxtb	r4, r4
    2b3c:	2c00      	cmp	r4, #0
    2b3e:	d1e5      	bne.n	2b0c <spi_cmd_rsp+0x6c>
    2b40:	e001      	b.n	2b46 <spi_cmd_rsp+0xa6>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    2b42:	2301      	movs	r3, #1
    2b44:	e000      	b.n	2b48 <spi_cmd_rsp+0xa8>
    2b46:	2301      	movs	r3, #1
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
    2b48:	b258      	sxtb	r0, r3
}
    2b4a:	b003      	add	sp, #12
    2b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	00002a81 	.word	0x00002a81
    2b54:	00009674 	.word	0x00009674
    2b58:	0000a2b8 	.word	0x0000a2b8
    2b5c:	00007c39 	.word	0x00007c39
    2b60:	00009e14 	.word	0x00009e14
    2b64:	00007d59 	.word	0x00007d59
    2b68:	00007c6d 	.word	0x00007c6d

00002b6c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b6e:	465f      	mov	r7, fp
    2b70:	4656      	mov	r6, sl
    2b72:	464d      	mov	r5, r9
    2b74:	4644      	mov	r4, r8
    2b76:	b4f0      	push	{r4, r5, r6, r7}
    2b78:	b083      	sub	sp, #12
    2b7a:	4682      	mov	sl, r0
    2b7c:	1c0f      	adds	r7, r1, #0
    2b7e:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2b80:	2200      	movs	r2, #0
    2b82:	4690      	mov	r8, r2
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b84:	4e40      	ldr	r6, [pc, #256]	; (2c88 <spi_data_read+0x11c>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    2b86:	2380      	movs	r3, #128	; 0x80
    2b88:	019b      	lsls	r3, r3, #6
    2b8a:	429f      	cmp	r7, r3
    2b8c:	d802      	bhi.n	2b94 <spi_data_read+0x28>
			nbytes = sz;
    2b8e:	b2bb      	uxth	r3, r7
    2b90:	4699      	mov	r9, r3
    2b92:	e002      	b.n	2b9a <spi_data_read+0x2e>
		else
			nbytes = DATA_PKT_SZ;
    2b94:	2380      	movs	r3, #128	; 0x80
    2b96:	019b      	lsls	r3, r3, #6
    2b98:	4699      	mov	r9, r3

		/**
			Data Respnose header
		**/
		retry = 10;
    2b9a:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b9c:	466d      	mov	r5, sp
    2b9e:	3503      	adds	r5, #3
    2ba0:	1c28      	adds	r0, r5, #0
    2ba2:	2101      	movs	r1, #1
    2ba4:	47b0      	blx	r6
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d00d      	beq.n	2bc6 <spi_data_read+0x5a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2baa:	4838      	ldr	r0, [pc, #224]	; (2c8c <spi_data_read+0x120>)
    2bac:	4938      	ldr	r1, [pc, #224]	; (2c90 <spi_data_read+0x124>)
    2bae:	226c      	movs	r2, #108	; 0x6c
    2bb0:	32ff      	adds	r2, #255	; 0xff
    2bb2:	4b38      	ldr	r3, [pc, #224]	; (2c94 <spi_data_read+0x128>)
    2bb4:	4798      	blx	r3
    2bb6:	4838      	ldr	r0, [pc, #224]	; (2c98 <spi_data_read+0x12c>)
    2bb8:	4b38      	ldr	r3, [pc, #224]	; (2c9c <spi_data_read+0x130>)
    2bba:	4798      	blx	r3
    2bbc:	200d      	movs	r0, #13
    2bbe:	4b38      	ldr	r3, [pc, #224]	; (2ca0 <spi_data_read+0x134>)
    2bc0:	4798      	blx	r3
				result = N_FAIL;
    2bc2:	2000      	movs	r0, #0
    2bc4:	e057      	b.n	2c76 <spi_data_read+0x10a>
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    2bc6:	782b      	ldrb	r3, [r5, #0]
    2bc8:	091b      	lsrs	r3, r3, #4
    2bca:	2b0f      	cmp	r3, #15
    2bcc:	d005      	beq.n	2bda <spi_data_read+0x6e>
				break;
		} while (retry--);
    2bce:	3c01      	subs	r4, #1
    2bd0:	b2a4      	uxth	r4, r4
    2bd2:	b223      	sxth	r3, r4
    2bd4:	3301      	adds	r3, #1
    2bd6:	d1e3      	bne.n	2ba0 <spi_data_read+0x34>
    2bd8:	e002      	b.n	2be0 <spi_data_read+0x74>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    2bda:	b224      	sxth	r4, r4
    2bdc:	2c00      	cmp	r4, #0
    2bde:	dc0e      	bgt.n	2bfe <spi_data_read+0x92>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2be0:	482a      	ldr	r0, [pc, #168]	; (2c8c <spi_data_read+0x120>)
    2be2:	492b      	ldr	r1, [pc, #172]	; (2c90 <spi_data_read+0x124>)
    2be4:	2278      	movs	r2, #120	; 0x78
    2be6:	32ff      	adds	r2, #255	; 0xff
    2be8:	4c2a      	ldr	r4, [pc, #168]	; (2c94 <spi_data_read+0x128>)
    2bea:	47a0      	blx	r4
    2bec:	466b      	mov	r3, sp
    2bee:	78d9      	ldrb	r1, [r3, #3]
    2bf0:	482c      	ldr	r0, [pc, #176]	; (2ca4 <spi_data_read+0x138>)
    2bf2:	47a0      	blx	r4
    2bf4:	200d      	movs	r0, #13
    2bf6:	4b2a      	ldr	r3, [pc, #168]	; (2ca0 <spi_data_read+0x134>)
    2bf8:	4798      	blx	r3
			result = N_FAIL;
    2bfa:	2000      	movs	r0, #0
			break;
    2bfc:	e03b      	b.n	2c76 <spi_data_read+0x10a>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2bfe:	464a      	mov	r2, r9
    2c00:	b294      	uxth	r4, r2
    2c02:	4643      	mov	r3, r8
    2c04:	b218      	sxth	r0, r3
    2c06:	4450      	add	r0, sl
    2c08:	1c21      	adds	r1, r4, #0
    2c0a:	4a1f      	ldr	r2, [pc, #124]	; (2c88 <spi_data_read+0x11c>)
    2c0c:	4790      	blx	r2
    2c0e:	2800      	cmp	r0, #0
    2c10:	d00d      	beq.n	2c2e <spi_data_read+0xc2>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2c12:	481e      	ldr	r0, [pc, #120]	; (2c8c <spi_data_read+0x120>)
    2c14:	491e      	ldr	r1, [pc, #120]	; (2c90 <spi_data_read+0x124>)
    2c16:	22c0      	movs	r2, #192	; 0xc0
    2c18:	0052      	lsls	r2, r2, #1
    2c1a:	4b1e      	ldr	r3, [pc, #120]	; (2c94 <spi_data_read+0x128>)
    2c1c:	4798      	blx	r3
    2c1e:	4822      	ldr	r0, [pc, #136]	; (2ca8 <spi_data_read+0x13c>)
    2c20:	4b1e      	ldr	r3, [pc, #120]	; (2c9c <spi_data_read+0x130>)
    2c22:	4798      	blx	r3
    2c24:	200d      	movs	r0, #13
    2c26:	4b1e      	ldr	r3, [pc, #120]	; (2ca0 <spi_data_read+0x134>)
    2c28:	4798      	blx	r3
			result = N_FAIL;
    2c2a:	2000      	movs	r0, #0
			break;
    2c2c:	e023      	b.n	2c76 <spi_data_read+0x10a>
		}
		if(!clockless)
    2c2e:	465b      	mov	r3, fp
    2c30:	2b00      	cmp	r3, #0
    2c32:	d117      	bne.n	2c64 <spi_data_read+0xf8>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2c34:	4a1d      	ldr	r2, [pc, #116]	; (2cac <spi_data_read+0x140>)
    2c36:	7813      	ldrb	r3, [r2, #0]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d113      	bne.n	2c64 <spi_data_read+0xf8>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2c3c:	a801      	add	r0, sp, #4
    2c3e:	2102      	movs	r1, #2
    2c40:	4b11      	ldr	r3, [pc, #68]	; (2c88 <spi_data_read+0x11c>)
    2c42:	4798      	blx	r3
    2c44:	2800      	cmp	r0, #0
    2c46:	d00d      	beq.n	2c64 <spi_data_read+0xf8>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2c48:	4810      	ldr	r0, [pc, #64]	; (2c8c <spi_data_read+0x120>)
    2c4a:	4911      	ldr	r1, [pc, #68]	; (2c90 <spi_data_read+0x124>)
    2c4c:	228c      	movs	r2, #140	; 0x8c
    2c4e:	32ff      	adds	r2, #255	; 0xff
    2c50:	4b10      	ldr	r3, [pc, #64]	; (2c94 <spi_data_read+0x128>)
    2c52:	4798      	blx	r3
    2c54:	4816      	ldr	r0, [pc, #88]	; (2cb0 <spi_data_read+0x144>)
    2c56:	4b11      	ldr	r3, [pc, #68]	; (2c9c <spi_data_read+0x130>)
    2c58:	4798      	blx	r3
    2c5a:	200d      	movs	r0, #13
    2c5c:	4b10      	ldr	r3, [pc, #64]	; (2ca0 <spi_data_read+0x134>)
    2c5e:	4798      	blx	r3
					result = N_FAIL;
    2c60:	2000      	movs	r0, #0
					break;
    2c62:	e008      	b.n	2c76 <spi_data_read+0x10a>
				}
			}
		}
		ix += nbytes;
    2c64:	4642      	mov	r2, r8
    2c66:	18a3      	adds	r3, r4, r2
    2c68:	b29b      	uxth	r3, r3
    2c6a:	4698      	mov	r8, r3
		sz -= nbytes;
    2c6c:	1b3f      	subs	r7, r7, r4
    2c6e:	b2bf      	uxth	r7, r7

	} while (sz);
    2c70:	2f00      	cmp	r7, #0
    2c72:	d188      	bne.n	2b86 <spi_data_read+0x1a>
    2c74:	2001      	movs	r0, #1

	return result;
    2c76:	b240      	sxtb	r0, r0
}
    2c78:	b003      	add	sp, #12
    2c7a:	bc3c      	pop	{r2, r3, r4, r5}
    2c7c:	4690      	mov	r8, r2
    2c7e:	4699      	mov	r9, r3
    2c80:	46a2      	mov	sl, r4
    2c82:	46ab      	mov	fp, r5
    2c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	00002a81 	.word	0x00002a81
    2c8c:	00009674 	.word	0x00009674
    2c90:	0000a3e0 	.word	0x0000a3e0
    2c94:	00007c39 	.word	0x00007c39
    2c98:	00009e48 	.word	0x00009e48
    2c9c:	00007d59 	.word	0x00007d59
    2ca0:	00007c6d 	.word	0x00007c6d
    2ca4:	00009e7c 	.word	0x00009e7c
    2ca8:	00009eac 	.word	0x00009eac
    2cac:	20000870 	.word	0x20000870
    2cb0:	00009edc 	.word	0x00009edc

00002cb4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2cb4:	b500      	push	{lr}
    2cb6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2cb8:	ab01      	add	r3, sp, #4
    2cba:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2cbc:	2200      	movs	r2, #0
    2cbe:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2cc0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2cc2:	2003      	movs	r0, #3
    2cc4:	1c19      	adds	r1, r3, #0
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <nmi_spi_write+0x1c>)
    2cc8:	4798      	blx	r3
}
    2cca:	b005      	add	sp, #20
    2ccc:	bd00      	pop	{pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	000010c1 	.word	0x000010c1

00002cd4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2cd4:	b570      	push	{r4, r5, r6, lr}
    2cd6:	b084      	sub	sp, #16
    2cd8:	ac08      	add	r4, sp, #32
    2cda:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2cdc:	ac01      	add	r4, sp, #4
    2cde:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2ce0:	303f      	adds	r0, #63	; 0x3f
    2ce2:	b2c4      	uxtb	r4, r0
    2ce4:	2c0e      	cmp	r4, #14
    2ce6:	d900      	bls.n	2cea <spi_cmd+0x16>
    2ce8:	e09c      	b.n	2e24 <spi_cmd+0x150>
    2cea:	00a0      	lsls	r0, r4, #2
    2cec:	4c52      	ldr	r4, [pc, #328]	; (2e38 <spi_cmd+0x164>)
    2cee:	5820      	ldr	r0, [r4, r0]
    2cf0:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2cf2:	ab01      	add	r3, sp, #4
    2cf4:	0c0a      	lsrs	r2, r1, #16
    2cf6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2cf8:	0a0a      	lsrs	r2, r1, #8
    2cfa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2cfc:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2cfe:	2105      	movs	r1, #5
		break;
    2d00:	e093      	b.n	2e2a <spi_cmd+0x156>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    2d02:	0a0b      	lsrs	r3, r1, #8
    2d04:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d06:	2d00      	cmp	r5, #0
    2d08:	d102      	bne.n	2d10 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    2d0a:	aa01      	add	r2, sp, #4
    2d0c:	7053      	strb	r3, [r2, #1]
    2d0e:	e004      	b.n	2d1a <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    2d10:	2280      	movs	r2, #128	; 0x80
    2d12:	4252      	negs	r2, r2
    2d14:	4313      	orrs	r3, r2
    2d16:	aa01      	add	r2, sp, #4
    2d18:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2d1a:	ab01      	add	r3, sp, #4
    2d1c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2d1e:	2200      	movs	r2, #0
    2d20:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d22:	2105      	movs	r1, #5
		break;
    2d24:	e081      	b.n	2e2a <spi_cmd+0x156>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    2d26:	ab01      	add	r3, sp, #4
    2d28:	2200      	movs	r2, #0
    2d2a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d2c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d2e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d30:	2105      	movs	r1, #5
		break;
    2d32:	e07a      	b.n	2e2a <spi_cmd+0x156>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    2d34:	ab01      	add	r3, sp, #4
    2d36:	2200      	movs	r2, #0
    2d38:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d3a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d3c:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d3e:	2105      	movs	r1, #5
		break;
    2d40:	e073      	b.n	2e2a <spi_cmd+0x156>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    2d42:	ab01      	add	r3, sp, #4
    2d44:	22ff      	movs	r2, #255	; 0xff
    2d46:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2d48:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2d4a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d4c:	2105      	movs	r1, #5
		break;
    2d4e:	e06c      	b.n	2e2a <spi_cmd+0x156>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    2d50:	aa01      	add	r2, sp, #4
    2d52:	0c08      	lsrs	r0, r1, #16
    2d54:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2d56:	0a08      	lsrs	r0, r1, #8
    2d58:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2d5a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2d5c:	0a19      	lsrs	r1, r3, #8
    2d5e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2d60:	7153      	strb	r3, [r2, #5]
		len = 7;
    2d62:	2107      	movs	r1, #7
		break;
    2d64:	e061      	b.n	2e2a <spi_cmd+0x156>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    2d66:	aa01      	add	r2, sp, #4
    2d68:	0c08      	lsrs	r0, r1, #16
    2d6a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2d6c:	0a08      	lsrs	r0, r1, #8
    2d6e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2d70:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2d72:	0c19      	lsrs	r1, r3, #16
    2d74:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2d76:	0a19      	lsrs	r1, r3, #8
    2d78:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2d7a:	7193      	strb	r3, [r2, #6]
		len = 8;
    2d7c:	2108      	movs	r1, #8
		break;
    2d7e:	e054      	b.n	2e2a <spi_cmd+0x156>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2d80:	0a0b      	lsrs	r3, r1, #8
    2d82:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d84:	2d00      	cmp	r5, #0
    2d86:	d102      	bne.n	2d8e <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2d88:	a801      	add	r0, sp, #4
    2d8a:	7043      	strb	r3, [r0, #1]
    2d8c:	e004      	b.n	2d98 <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    2d8e:	2080      	movs	r0, #128	; 0x80
    2d90:	4240      	negs	r0, r0
    2d92:	4303      	orrs	r3, r0
    2d94:	a801      	add	r0, sp, #4
    2d96:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2d98:	ab01      	add	r3, sp, #4
    2d9a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2d9c:	0e11      	lsrs	r1, r2, #24
    2d9e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2da0:	0c11      	lsrs	r1, r2, #16
    2da2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2da4:	0a11      	lsrs	r1, r2, #8
    2da6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2da8:	719a      	strb	r2, [r3, #6]
		len = 8;
    2daa:	2108      	movs	r1, #8
		break;
    2dac:	e03d      	b.n	2e2a <spi_cmd+0x156>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2dae:	ab01      	add	r3, sp, #4
    2db0:	0c08      	lsrs	r0, r1, #16
    2db2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2db4:	0a08      	lsrs	r0, r1, #8
    2db6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2db8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2dba:	0e11      	lsrs	r1, r2, #24
    2dbc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2dbe:	0c11      	lsrs	r1, r2, #16
    2dc0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2dc2:	0a11      	lsrs	r1, r2, #8
    2dc4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2dc6:	71da      	strb	r2, [r3, #7]
		len = 9;
    2dc8:	2109      	movs	r1, #9
		break;
    2dca:	e02e      	b.n	2e2a <spi_cmd+0x156>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2dcc:	1e4e      	subs	r6, r1, #1
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    2dce:	2e00      	cmp	r6, #0
    2dd0:	d00d      	beq.n	2dee <spi_cmd+0x11a>
    2dd2:	ab01      	add	r3, sp, #4
    2dd4:	2203      	movs	r2, #3
    2dd6:	446a      	add	r2, sp
    2dd8:	1855      	adds	r5, r2, r1
    2dda:	227f      	movs	r2, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    2ddc:	4c17      	ldr	r4, [pc, #92]	; (2e3c <spi_cmd+0x168>)
    2dde:	7818      	ldrb	r0, [r3, #0]
    2de0:	0052      	lsls	r2, r2, #1
    2de2:	4042      	eors	r2, r0
    2de4:	5ca2      	ldrb	r2, [r4, r2]
    2de6:	3301      	adds	r3, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    2de8:	42ab      	cmp	r3, r5
    2dea:	d1f8      	bne.n	2dde <spi_cmd+0x10a>
    2dec:	e000      	b.n	2df0 <spi_cmd+0x11c>
    2dee:	227f      	movs	r2, #127	; 0x7f
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2df0:	0052      	lsls	r2, r2, #1
    2df2:	ab01      	add	r3, sp, #4
    2df4:	559a      	strb	r2, [r3, r6]
    2df6:	e001      	b.n	2dfc <spi_cmd+0x128>
		else
			len-=1;
    2df8:	3901      	subs	r1, #1
    2dfa:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2dfc:	a801      	add	r0, sp, #4
    2dfe:	4b10      	ldr	r3, [pc, #64]	; (2e40 <spi_cmd+0x16c>)
    2e00:	4798      	blx	r3
    2e02:	2301      	movs	r3, #1
    2e04:	2800      	cmp	r0, #0
    2e06:	d00e      	beq.n	2e26 <spi_cmd+0x152>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2e08:	480e      	ldr	r0, [pc, #56]	; (2e44 <spi_cmd+0x170>)
    2e0a:	490f      	ldr	r1, [pc, #60]	; (2e48 <spi_cmd+0x174>)
    2e0c:	228e      	movs	r2, #142	; 0x8e
    2e0e:	0052      	lsls	r2, r2, #1
    2e10:	4b0e      	ldr	r3, [pc, #56]	; (2e4c <spi_cmd+0x178>)
    2e12:	4798      	blx	r3
    2e14:	480e      	ldr	r0, [pc, #56]	; (2e50 <spi_cmd+0x17c>)
    2e16:	4b0f      	ldr	r3, [pc, #60]	; (2e54 <spi_cmd+0x180>)
    2e18:	4798      	blx	r3
    2e1a:	200d      	movs	r0, #13
    2e1c:	4b0e      	ldr	r3, [pc, #56]	; (2e58 <spi_cmd+0x184>)
    2e1e:	4798      	blx	r3
			result = N_FAIL;
    2e20:	2300      	movs	r3, #0
    2e22:	e000      	b.n	2e26 <spi_cmd+0x152>
		bc[6] = (uint8)(u32data >> 8);
		bc[7] = (uint8)(u32data);
		len = 9;
		break;
	default:
		result = N_FAIL;
    2e24:	2300      	movs	r3, #0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    2e26:	b258      	sxtb	r0, r3
    2e28:	e004      	b.n	2e34 <spi_cmd+0x160>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2e2a:	4b0c      	ldr	r3, [pc, #48]	; (2e5c <spi_cmd+0x188>)
    2e2c:	781b      	ldrb	r3, [r3, #0]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d0cc      	beq.n	2dcc <spi_cmd+0xf8>
    2e32:	e7e1      	b.n	2df8 <spi_cmd+0x124>
			result = N_FAIL;
		}
	}

	return result;
}
    2e34:	b004      	add	sp, #16
    2e36:	bd70      	pop	{r4, r5, r6, pc}
    2e38:	00009d94 	.word	0x00009d94
    2e3c:	0000a2e0 	.word	0x0000a2e0
    2e40:	00002cb5 	.word	0x00002cb5
    2e44:	00009674 	.word	0x00009674
    2e48:	00009e0c 	.word	0x00009e0c
    2e4c:	00007c39 	.word	0x00007c39
    2e50:	00009f10 	.word	0x00009f10
    2e54:	00007d59 	.word	0x00007d59
    2e58:	00007c6d 	.word	0x00007c6d
    2e5c:	20000870 	.word	0x20000870

00002e60 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2e60:	b570      	push	{r4, r5, r6, lr}
    2e62:	b082      	sub	sp, #8
    2e64:	1c04      	adds	r4, r0, #0
    2e66:	1c0a      	adds	r2, r1, #0
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    2e68:	2830      	cmp	r0, #48	; 0x30
    2e6a:	d802      	bhi.n	2e72 <spi_write_reg+0x12>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    2e6c:	2301      	movs	r3, #1
	if (addr <= 0x30)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2e6e:	25c3      	movs	r5, #195	; 0xc3
    2e70:	e001      	b.n	2e76 <spi_write_reg+0x16>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    2e72:	2300      	movs	r3, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    2e74:	25c9      	movs	r5, #201	; 0xc9
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2e76:	9300      	str	r3, [sp, #0]
    2e78:	1c28      	adds	r0, r5, #0
    2e7a:	1c21      	adds	r1, r4, #0
    2e7c:	2304      	movs	r3, #4
    2e7e:	4e16      	ldr	r6, [pc, #88]	; (2ed8 <spi_write_reg+0x78>)
    2e80:	47b0      	blx	r6
	if (result != N_OK) {
    2e82:	2801      	cmp	r0, #1
    2e84:	d00c      	beq.n	2ea0 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2e86:	4815      	ldr	r0, [pc, #84]	; (2edc <spi_write_reg+0x7c>)
    2e88:	4915      	ldr	r1, [pc, #84]	; (2ee0 <spi_write_reg+0x80>)
    2e8a:	4a16      	ldr	r2, [pc, #88]	; (2ee4 <spi_write_reg+0x84>)
    2e8c:	4d16      	ldr	r5, [pc, #88]	; (2ee8 <spi_write_reg+0x88>)
    2e8e:	47a8      	blx	r5
    2e90:	4816      	ldr	r0, [pc, #88]	; (2eec <spi_write_reg+0x8c>)
    2e92:	1c21      	adds	r1, r4, #0
    2e94:	47a8      	blx	r5
    2e96:	200d      	movs	r0, #13
    2e98:	4b15      	ldr	r3, [pc, #84]	; (2ef0 <spi_write_reg+0x90>)
    2e9a:	4798      	blx	r3
		return N_FAIL;
    2e9c:	2300      	movs	r3, #0
    2e9e:	e018      	b.n	2ed2 <spi_write_reg+0x72>
	}

	result = spi_cmd_rsp(cmd);
    2ea0:	1c28      	adds	r0, r5, #0
    2ea2:	4b14      	ldr	r3, [pc, #80]	; (2ef4 <spi_write_reg+0x94>)
    2ea4:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    2ea6:	2301      	movs	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    2ea8:	2801      	cmp	r0, #1
    2eaa:	d012      	beq.n	2ed2 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2eac:	480b      	ldr	r0, [pc, #44]	; (2edc <spi_write_reg+0x7c>)
    2eae:	490c      	ldr	r1, [pc, #48]	; (2ee0 <spi_write_reg+0x80>)
    2eb0:	4a11      	ldr	r2, [pc, #68]	; (2ef8 <spi_write_reg+0x98>)
    2eb2:	4d0d      	ldr	r5, [pc, #52]	; (2ee8 <spi_write_reg+0x88>)
    2eb4:	47a8      	blx	r5
    2eb6:	4811      	ldr	r0, [pc, #68]	; (2efc <spi_write_reg+0x9c>)
    2eb8:	1c21      	adds	r1, r4, #0
    2eba:	47a8      	blx	r5
    2ebc:	200d      	movs	r0, #13
    2ebe:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <spi_write_reg+0x90>)
    2ec0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2ec2:	2300      	movs	r3, #0
    2ec4:	9300      	str	r3, [sp, #0]
    2ec6:	20cf      	movs	r0, #207	; 0xcf
    2ec8:	2100      	movs	r1, #0
    2eca:	2200      	movs	r2, #0
    2ecc:	4c02      	ldr	r4, [pc, #8]	; (2ed8 <spi_write_reg+0x78>)
    2ece:	47a0      	blx	r4
		return N_FAIL;
    2ed0:	2300      	movs	r3, #0
    2ed2:	b258      	sxtb	r0, r3
	}

	return result;

#endif
}
    2ed4:	b002      	add	sp, #8
    2ed6:	bd70      	pop	{r4, r5, r6, pc}
    2ed8:	00002cd5 	.word	0x00002cd5
    2edc:	00009674 	.word	0x00009674
    2ee0:	00009dec 	.word	0x00009dec
    2ee4:	000001ff 	.word	0x000001ff
    2ee8:	00007c39 	.word	0x00007c39
    2eec:	00009f3c 	.word	0x00009f3c
    2ef0:	00007c6d 	.word	0x00007c6d
    2ef4:	00002aa1 	.word	0x00002aa1
    2ef8:	00000205 	.word	0x00000205
    2efc:	00009f68 	.word	0x00009f68

00002f00 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f02:	4647      	mov	r7, r8
    2f04:	b480      	push	{r7}
    2f06:	b084      	sub	sp, #16
    2f08:	1c04      	adds	r4, r0, #0
    2f0a:	4688      	mov	r8, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    2f0c:	28ff      	cmp	r0, #255	; 0xff
    2f0e:	d802      	bhi.n	2f16 <spi_read_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    2f10:	2601      	movs	r6, #1
	if (addr <= 0xff)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    2f12:	25c4      	movs	r5, #196	; 0xc4
    2f14:	e001      	b.n	2f1a <spi_read_reg+0x1a>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    2f16:	2600      	movs	r6, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    2f18:	25ca      	movs	r5, #202	; 0xca
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2f1a:	9600      	str	r6, [sp, #0]
    2f1c:	1c28      	adds	r0, r5, #0
    2f1e:	1c21      	adds	r1, r4, #0
    2f20:	2200      	movs	r2, #0
    2f22:	2304      	movs	r3, #4
    2f24:	4f2c      	ldr	r7, [pc, #176]	; (2fd8 <spi_read_reg+0xd8>)
    2f26:	47b8      	blx	r7
	if (result != N_OK) {
    2f28:	2801      	cmp	r0, #1
    2f2a:	d00c      	beq.n	2f46 <spi_read_reg+0x46>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2f2c:	482b      	ldr	r0, [pc, #172]	; (2fdc <spi_read_reg+0xdc>)
    2f2e:	492c      	ldr	r1, [pc, #176]	; (2fe0 <spi_read_reg+0xe0>)
    2f30:	4a2c      	ldr	r2, [pc, #176]	; (2fe4 <spi_read_reg+0xe4>)
    2f32:	4d2d      	ldr	r5, [pc, #180]	; (2fe8 <spi_read_reg+0xe8>)
    2f34:	47a8      	blx	r5
    2f36:	482d      	ldr	r0, [pc, #180]	; (2fec <spi_read_reg+0xec>)
    2f38:	1c21      	adds	r1, r4, #0
    2f3a:	47a8      	blx	r5
    2f3c:	200d      	movs	r0, #13
    2f3e:	4b2c      	ldr	r3, [pc, #176]	; (2ff0 <spi_read_reg+0xf0>)
    2f40:	4798      	blx	r3
		return N_FAIL;
    2f42:	2000      	movs	r0, #0
    2f44:	e042      	b.n	2fcc <spi_read_reg+0xcc>
	}

	result = spi_cmd_rsp(cmd);
    2f46:	1c28      	adds	r0, r5, #0
    2f48:	4b2a      	ldr	r3, [pc, #168]	; (2ff4 <spi_read_reg+0xf4>)
    2f4a:	4798      	blx	r3
	if (result != N_OK) {
    2f4c:	2801      	cmp	r0, #1
    2f4e:	d013      	beq.n	2f78 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2f50:	4822      	ldr	r0, [pc, #136]	; (2fdc <spi_read_reg+0xdc>)
    2f52:	4923      	ldr	r1, [pc, #140]	; (2fe0 <spi_read_reg+0xe0>)
    2f54:	4a28      	ldr	r2, [pc, #160]	; (2ff8 <spi_read_reg+0xf8>)
    2f56:	4d24      	ldr	r5, [pc, #144]	; (2fe8 <spi_read_reg+0xe8>)
    2f58:	47a8      	blx	r5
    2f5a:	4828      	ldr	r0, [pc, #160]	; (2ffc <spi_read_reg+0xfc>)
    2f5c:	1c21      	adds	r1, r4, #0
    2f5e:	47a8      	blx	r5
    2f60:	200d      	movs	r0, #13
    2f62:	4b23      	ldr	r3, [pc, #140]	; (2ff0 <spi_read_reg+0xf0>)
    2f64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2f66:	2300      	movs	r3, #0
    2f68:	9300      	str	r3, [sp, #0]
    2f6a:	20cf      	movs	r0, #207	; 0xcf
    2f6c:	2100      	movs	r1, #0
    2f6e:	2200      	movs	r2, #0
    2f70:	4c19      	ldr	r4, [pc, #100]	; (2fd8 <spi_read_reg+0xd8>)
    2f72:	47a0      	blx	r4
		return N_FAIL;
    2f74:	2000      	movs	r0, #0
    2f76:	e029      	b.n	2fcc <spi_read_reg+0xcc>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2f78:	a803      	add	r0, sp, #12
    2f7a:	2104      	movs	r1, #4
    2f7c:	1c32      	adds	r2, r6, #0
    2f7e:	4b20      	ldr	r3, [pc, #128]	; (3000 <spi_read_reg+0x100>)
    2f80:	4798      	blx	r3
	if (result != N_OK) {
    2f82:	2801      	cmp	r0, #1
    2f84:	d013      	beq.n	2fae <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2f86:	4815      	ldr	r0, [pc, #84]	; (2fdc <spi_read_reg+0xdc>)
    2f88:	4915      	ldr	r1, [pc, #84]	; (2fe0 <spi_read_reg+0xe0>)
    2f8a:	4a1e      	ldr	r2, [pc, #120]	; (3004 <spi_read_reg+0x104>)
    2f8c:	4b16      	ldr	r3, [pc, #88]	; (2fe8 <spi_read_reg+0xe8>)
    2f8e:	4798      	blx	r3
    2f90:	481d      	ldr	r0, [pc, #116]	; (3008 <spi_read_reg+0x108>)
    2f92:	4b1e      	ldr	r3, [pc, #120]	; (300c <spi_read_reg+0x10c>)
    2f94:	4798      	blx	r3
    2f96:	200d      	movs	r0, #13
    2f98:	4b15      	ldr	r3, [pc, #84]	; (2ff0 <spi_read_reg+0xf0>)
    2f9a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2f9c:	2300      	movs	r3, #0
    2f9e:	9300      	str	r3, [sp, #0]
    2fa0:	20cf      	movs	r0, #207	; 0xcf
    2fa2:	2100      	movs	r1, #0
    2fa4:	2200      	movs	r2, #0
    2fa6:	4c0c      	ldr	r4, [pc, #48]	; (2fd8 <spi_read_reg+0xd8>)
    2fa8:	47a0      	blx	r4
		return N_FAIL;
    2faa:	2000      	movs	r0, #0
    2fac:	e00e      	b.n	2fcc <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2fae:	ab03      	add	r3, sp, #12
    2fb0:	7859      	ldrb	r1, [r3, #1]
    2fb2:	0209      	lsls	r1, r1, #8
		((uint32)tmp[2] << 16) |
    2fb4:	789a      	ldrb	r2, [r3, #2]
    2fb6:	0412      	lsls	r2, r2, #16
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2fb8:	4311      	orrs	r1, r2
    2fba:	781a      	ldrb	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
    2fbc:	4311      	orrs	r1, r2
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    2fbe:	78da      	ldrb	r2, [r3, #3]
    2fc0:	0612      	lsls	r2, r2, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    2fc2:	1c0b      	adds	r3, r1, #0
    2fc4:	4313      	orrs	r3, r2
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2fc6:	4642      	mov	r2, r8
    2fc8:	6013      	str	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    2fca:	2001      	movs	r0, #1
    2fcc:	b240      	sxtb	r0, r0
}
    2fce:	b004      	add	sp, #16
    2fd0:	bc04      	pop	{r2}
    2fd2:	4690      	mov	r8, r2
    2fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	00002cd5 	.word	0x00002cd5
    2fdc:	00009674 	.word	0x00009674
    2fe0:	0000a2c4 	.word	0x0000a2c4
    2fe4:	00000259 	.word	0x00000259
    2fe8:	00007c39 	.word	0x00007c39
    2fec:	00009fa0 	.word	0x00009fa0
    2ff0:	00007c6d 	.word	0x00007c6d
    2ff4:	00002aa1 	.word	0x00002aa1
    2ff8:	0000025f 	.word	0x0000025f
    2ffc:	00009fcc 	.word	0x00009fcc
    3000:	00002b6d 	.word	0x00002b6d
    3004:	00000267 	.word	0x00000267
    3008:	0000a000 	.word	0x0000a000
    300c:	00007d59 	.word	0x00007d59

00003010 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3010:	2200      	movs	r2, #0
    3012:	4b02      	ldr	r3, [pc, #8]	; (301c <nm_spi_deinit+0xc>)
    3014:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    3016:	2000      	movs	r0, #0
    3018:	4770      	bx	lr
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	20000870 	.word	0x20000870

00003020 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3020:	b500      	push	{lr}
    3022:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3024:	a901      	add	r1, sp, #4
    3026:	4b02      	ldr	r3, [pc, #8]	; (3030 <nm_spi_read_reg+0x10>)
    3028:	4798      	blx	r3

	return u32Val;
}
    302a:	9801      	ldr	r0, [sp, #4]
    302c:	b003      	add	sp, #12
    302e:	bd00      	pop	{pc}
    3030:	00002f01 	.word	0x00002f01

00003034 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3034:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    3036:	4b04      	ldr	r3, [pc, #16]	; (3048 <nm_spi_read_reg_with_ret+0x14>)
    3038:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    303a:	2801      	cmp	r0, #1
    303c:	d101      	bne.n	3042 <nm_spi_read_reg_with_ret+0xe>
    303e:	2000      	movs	r0, #0
    3040:	e000      	b.n	3044 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3042:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    3044:	b240      	sxtb	r0, r0
}
    3046:	bd08      	pop	{r3, pc}
    3048:	00002f01 	.word	0x00002f01

0000304c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    304c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    304e:	4b04      	ldr	r3, [pc, #16]	; (3060 <nm_spi_write_reg+0x14>)
    3050:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3052:	2801      	cmp	r0, #1
    3054:	d101      	bne.n	305a <nm_spi_write_reg+0xe>
    3056:	2000      	movs	r0, #0
    3058:	e000      	b.n	305c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    305a:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    305c:	b240      	sxtb	r0, r0
}
    305e:	bd08      	pop	{r3, pc}
    3060:	00002e61 	.word	0x00002e61

00003064 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    3064:	b510      	push	{r4, lr}
    3066:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    3068:	2300      	movs	r3, #0
    306a:	9300      	str	r3, [sp, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    306c:	4a35      	ldr	r2, [pc, #212]	; (3144 <nm_spi_init+0xe0>)
    306e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3070:	4835      	ldr	r0, [pc, #212]	; (3148 <nm_spi_init+0xe4>)
    3072:	4669      	mov	r1, sp
    3074:	4b35      	ldr	r3, [pc, #212]	; (314c <nm_spi_init+0xe8>)
    3076:	4798      	blx	r3
    3078:	2800      	cmp	r0, #0
    307a:	d120      	bne.n	30be <nm_spi_init+0x5a>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    307c:	2201      	movs	r2, #1
    307e:	4b31      	ldr	r3, [pc, #196]	; (3144 <nm_spi_init+0xe0>)
    3080:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3082:	4833      	ldr	r0, [pc, #204]	; (3150 <nm_spi_init+0xec>)
    3084:	4933      	ldr	r1, [pc, #204]	; (3154 <nm_spi_init+0xf0>)
    3086:	4a34      	ldr	r2, [pc, #208]	; (3158 <nm_spi_init+0xf4>)
    3088:	4b34      	ldr	r3, [pc, #208]	; (315c <nm_spi_init+0xf8>)
    308a:	4798      	blx	r3
    308c:	4834      	ldr	r0, [pc, #208]	; (3160 <nm_spi_init+0xfc>)
    308e:	4b35      	ldr	r3, [pc, #212]	; (3164 <nm_spi_init+0x100>)
    3090:	4798      	blx	r3
    3092:	200d      	movs	r0, #13
    3094:	4b34      	ldr	r3, [pc, #208]	; (3168 <nm_spi_init+0x104>)
    3096:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3098:	482b      	ldr	r0, [pc, #172]	; (3148 <nm_spi_init+0xe4>)
    309a:	4669      	mov	r1, sp
    309c:	4b2b      	ldr	r3, [pc, #172]	; (314c <nm_spi_init+0xe8>)
    309e:	4798      	blx	r3
    30a0:	1e04      	subs	r4, r0, #0
    30a2:	d10c      	bne.n	30be <nm_spi_init+0x5a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    30a4:	482a      	ldr	r0, [pc, #168]	; (3150 <nm_spi_init+0xec>)
    30a6:	492b      	ldr	r1, [pc, #172]	; (3154 <nm_spi_init+0xf0>)
    30a8:	22b7      	movs	r2, #183	; 0xb7
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	4b2b      	ldr	r3, [pc, #172]	; (315c <nm_spi_init+0xf8>)
    30ae:	4798      	blx	r3
    30b0:	482e      	ldr	r0, [pc, #184]	; (316c <nm_spi_init+0x108>)
    30b2:	4b2c      	ldr	r3, [pc, #176]	; (3164 <nm_spi_init+0x100>)
    30b4:	4798      	blx	r3
    30b6:	200d      	movs	r0, #13
    30b8:	4b2b      	ldr	r3, [pc, #172]	; (3168 <nm_spi_init+0x104>)
    30ba:	4798      	blx	r3
			return 0;
    30bc:	e03f      	b.n	313e <nm_spi_init+0xda>
		}
	}
	if(gu8Crc_off == 0)
    30be:	4b21      	ldr	r3, [pc, #132]	; (3144 <nm_spi_init+0xe0>)
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d119      	bne.n	30fa <nm_spi_init+0x96>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
    30c6:	237c      	movs	r3, #124	; 0x7c
    30c8:	9900      	ldr	r1, [sp, #0]
    30ca:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    30cc:	2350      	movs	r3, #80	; 0x50
    30ce:	4319      	orrs	r1, r3
    30d0:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    30d2:	481d      	ldr	r0, [pc, #116]	; (3148 <nm_spi_init+0xe4>)
    30d4:	4b26      	ldr	r3, [pc, #152]	; (3170 <nm_spi_init+0x10c>)
    30d6:	4798      	blx	r3
    30d8:	1e04      	subs	r4, r0, #0
    30da:	d10b      	bne.n	30f4 <nm_spi_init+0x90>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    30dc:	481c      	ldr	r0, [pc, #112]	; (3150 <nm_spi_init+0xec>)
    30de:	491d      	ldr	r1, [pc, #116]	; (3154 <nm_spi_init+0xf0>)
    30e0:	4a24      	ldr	r2, [pc, #144]	; (3174 <nm_spi_init+0x110>)
    30e2:	4b1e      	ldr	r3, [pc, #120]	; (315c <nm_spi_init+0xf8>)
    30e4:	4798      	blx	r3
    30e6:	4824      	ldr	r0, [pc, #144]	; (3178 <nm_spi_init+0x114>)
    30e8:	4b1e      	ldr	r3, [pc, #120]	; (3164 <nm_spi_init+0x100>)
    30ea:	4798      	blx	r3
    30ec:	200d      	movs	r0, #13
    30ee:	4b1e      	ldr	r3, [pc, #120]	; (3168 <nm_spi_init+0x104>)
    30f0:	4798      	blx	r3
			return 0;
    30f2:	e024      	b.n	313e <nm_spi_init+0xda>
		}
		gu8Crc_off = 1;
    30f4:	2201      	movs	r2, #1
    30f6:	4b13      	ldr	r3, [pc, #76]	; (3144 <nm_spi_init+0xe0>)
    30f8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    30fa:	2080      	movs	r0, #128	; 0x80
    30fc:	0140      	lsls	r0, r0, #5
    30fe:	a901      	add	r1, sp, #4
    3100:	4b12      	ldr	r3, [pc, #72]	; (314c <nm_spi_init+0xe8>)
    3102:	4798      	blx	r3
    3104:	2800      	cmp	r0, #0
    3106:	d10d      	bne.n	3124 <nm_spi_init+0xc0>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3108:	4811      	ldr	r0, [pc, #68]	; (3150 <nm_spi_init+0xec>)
    310a:	4912      	ldr	r1, [pc, #72]	; (3154 <nm_spi_init+0xf0>)
    310c:	22bc      	movs	r2, #188	; 0xbc
    310e:	0092      	lsls	r2, r2, #2
    3110:	4b12      	ldr	r3, [pc, #72]	; (315c <nm_spi_init+0xf8>)
    3112:	4798      	blx	r3
    3114:	4819      	ldr	r0, [pc, #100]	; (317c <nm_spi_init+0x118>)
    3116:	4b13      	ldr	r3, [pc, #76]	; (3164 <nm_spi_init+0x100>)
    3118:	4798      	blx	r3
    311a:	200d      	movs	r0, #13
    311c:	4b12      	ldr	r3, [pc, #72]	; (3168 <nm_spi_init+0x104>)
    311e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3120:	24fa      	movs	r4, #250	; 0xfa
    3122:	e00c      	b.n	313e <nm_spi_init+0xda>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    3124:	4c08      	ldr	r4, [pc, #32]	; (3148 <nm_spi_init+0xe4>)
    3126:	1c20      	adds	r0, r4, #0
    3128:	4b15      	ldr	r3, [pc, #84]	; (3180 <nm_spi_init+0x11c>)
    312a:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    312c:	2370      	movs	r3, #112	; 0x70
    312e:	1c01      	adds	r1, r0, #0
    3130:	4399      	bics	r1, r3
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    3132:	2350      	movs	r3, #80	; 0x50
    3134:	4319      	orrs	r1, r3

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3136:	1c20      	adds	r0, r4, #0
    3138:	4b12      	ldr	r3, [pc, #72]	; (3184 <nm_spi_init+0x120>)
    313a:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    313c:	2400      	movs	r4, #0
    313e:	b260      	sxtb	r0, r4
}
    3140:	b002      	add	sp, #8
    3142:	bd10      	pop	{r4, pc}
    3144:	20000870 	.word	0x20000870
    3148:	0000e824 	.word	0x0000e824
    314c:	00002f01 	.word	0x00002f01
    3150:	00009674 	.word	0x00009674
    3154:	00009de0 	.word	0x00009de0
    3158:	000002d9 	.word	0x000002d9
    315c:	00007c39 	.word	0x00007c39
    3160:	0000a020 	.word	0x0000a020
    3164:	00007d59 	.word	0x00007d59
    3168:	00007c6d 	.word	0x00007c6d
    316c:	0000a070 	.word	0x0000a070
    3170:	00002e61 	.word	0x00002e61
    3174:	000002e6 	.word	0x000002e6
    3178:	0000a09c 	.word	0x0000a09c
    317c:	0000a0d0 	.word	0x0000a0d0
    3180:	00003021 	.word	0x00003021
    3184:	0000304d 	.word	0x0000304d

00003188 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3188:	b5f0      	push	{r4, r5, r6, r7, lr}
    318a:	b083      	sub	sp, #12
    318c:	1c04      	adds	r4, r0, #0
    318e:	1c0f      	adds	r7, r1, #0
    3190:	1c15      	adds	r5, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    3192:	2300      	movs	r3, #0
    3194:	9300      	str	r3, [sp, #0]
    3196:	20c8      	movs	r0, #200	; 0xc8
    3198:	1c21      	adds	r1, r4, #0
    319a:	2200      	movs	r2, #0
    319c:	1c2b      	adds	r3, r5, #0
    319e:	4e25      	ldr	r6, [pc, #148]	; (3234 <nm_spi_read_block+0xac>)
    31a0:	47b0      	blx	r6
	if (result != N_OK) {
    31a2:	2801      	cmp	r0, #1
    31a4:	d00c      	beq.n	31c0 <nm_spi_read_block+0x38>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    31a6:	4824      	ldr	r0, [pc, #144]	; (3238 <nm_spi_read_block+0xb0>)
    31a8:	4924      	ldr	r1, [pc, #144]	; (323c <nm_spi_read_block+0xb4>)
    31aa:	22a2      	movs	r2, #162	; 0xa2
    31ac:	0092      	lsls	r2, r2, #2
    31ae:	4d24      	ldr	r5, [pc, #144]	; (3240 <nm_spi_read_block+0xb8>)
    31b0:	47a8      	blx	r5
    31b2:	4824      	ldr	r0, [pc, #144]	; (3244 <nm_spi_read_block+0xbc>)
    31b4:	1c21      	adds	r1, r4, #0
    31b6:	47a8      	blx	r5
    31b8:	200d      	movs	r0, #13
    31ba:	4b23      	ldr	r3, [pc, #140]	; (3248 <nm_spi_read_block+0xc0>)
    31bc:	4798      	blx	r3
    31be:	e035      	b.n	322c <nm_spi_read_block+0xa4>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    31c0:	20c8      	movs	r0, #200	; 0xc8
    31c2:	4b22      	ldr	r3, [pc, #136]	; (324c <nm_spi_read_block+0xc4>)
    31c4:	4798      	blx	r3
	if (result != N_OK) {
    31c6:	2801      	cmp	r0, #1
    31c8:	d012      	beq.n	31f0 <nm_spi_read_block+0x68>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    31ca:	481b      	ldr	r0, [pc, #108]	; (3238 <nm_spi_read_block+0xb0>)
    31cc:	491b      	ldr	r1, [pc, #108]	; (323c <nm_spi_read_block+0xb4>)
    31ce:	4a20      	ldr	r2, [pc, #128]	; (3250 <nm_spi_read_block+0xc8>)
    31d0:	4d1b      	ldr	r5, [pc, #108]	; (3240 <nm_spi_read_block+0xb8>)
    31d2:	47a8      	blx	r5
    31d4:	481f      	ldr	r0, [pc, #124]	; (3254 <nm_spi_read_block+0xcc>)
    31d6:	1c21      	adds	r1, r4, #0
    31d8:	47a8      	blx	r5
    31da:	200d      	movs	r0, #13
    31dc:	4b1a      	ldr	r3, [pc, #104]	; (3248 <nm_spi_read_block+0xc0>)
    31de:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31e0:	2300      	movs	r3, #0
    31e2:	9300      	str	r3, [sp, #0]
    31e4:	20cf      	movs	r0, #207	; 0xcf
    31e6:	2100      	movs	r1, #0
    31e8:	2200      	movs	r2, #0
    31ea:	4c12      	ldr	r4, [pc, #72]	; (3234 <nm_spi_read_block+0xac>)
    31ec:	47a0      	blx	r4
    31ee:	e01d      	b.n	322c <nm_spi_read_block+0xa4>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    31f0:	1c38      	adds	r0, r7, #0
    31f2:	1c29      	adds	r1, r5, #0
    31f4:	2200      	movs	r2, #0
    31f6:	4b18      	ldr	r3, [pc, #96]	; (3258 <nm_spi_read_block+0xd0>)
    31f8:	4798      	blx	r3
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    31fa:	2300      	movs	r3, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    31fc:	2801      	cmp	r0, #1
    31fe:	d013      	beq.n	3228 <nm_spi_read_block+0xa0>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3200:	480d      	ldr	r0, [pc, #52]	; (3238 <nm_spi_read_block+0xb0>)
    3202:	490e      	ldr	r1, [pc, #56]	; (323c <nm_spi_read_block+0xb4>)
    3204:	22a6      	movs	r2, #166	; 0xa6
    3206:	0092      	lsls	r2, r2, #2
    3208:	4b0d      	ldr	r3, [pc, #52]	; (3240 <nm_spi_read_block+0xb8>)
    320a:	4798      	blx	r3
    320c:	4813      	ldr	r0, [pc, #76]	; (325c <nm_spi_read_block+0xd4>)
    320e:	4b14      	ldr	r3, [pc, #80]	; (3260 <nm_spi_read_block+0xd8>)
    3210:	4798      	blx	r3
    3212:	200d      	movs	r0, #13
    3214:	4b0c      	ldr	r3, [pc, #48]	; (3248 <nm_spi_read_block+0xc0>)
    3216:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3218:	2300      	movs	r3, #0
    321a:	9300      	str	r3, [sp, #0]
    321c:	20cf      	movs	r0, #207	; 0xcf
    321e:	2100      	movs	r1, #0
    3220:	2200      	movs	r2, #0
    3222:	4c04      	ldr	r4, [pc, #16]	; (3234 <nm_spi_read_block+0xac>)
    3224:	47a0      	blx	r4
    3226:	e001      	b.n	322c <nm_spi_read_block+0xa4>
	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    3228:	b258      	sxtb	r0, r3
    322a:	e001      	b.n	3230 <nm_spi_read_block+0xa8>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    322c:	23fa      	movs	r3, #250	; 0xfa
    322e:	e7fb      	b.n	3228 <nm_spi_read_block+0xa0>

	return s8Ret;
}
    3230:	b003      	add	sp, #12
    3232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3234:	00002cd5 	.word	0x00002cd5
    3238:	00009674 	.word	0x00009674
    323c:	0000a2d4 	.word	0x0000a2d4
    3240:	00007c39 	.word	0x00007c39
    3244:	0000a0f4 	.word	0x0000a0f4
    3248:	00007c6d 	.word	0x00007c6d
    324c:	00002aa1 	.word	0x00002aa1
    3250:	0000028e 	.word	0x0000028e
    3254:	0000a124 	.word	0x0000a124
    3258:	00002b6d 	.word	0x00002b6d
    325c:	0000a15c 	.word	0x0000a15c
    3260:	00007d59 	.word	0x00007d59

00003264 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	4657      	mov	r7, sl
    3268:	464e      	mov	r6, r9
    326a:	4645      	mov	r5, r8
    326c:	b4e0      	push	{r5, r6, r7}
    326e:	b084      	sub	sp, #16
    3270:	1c05      	adds	r5, r0, #0
    3272:	4688      	mov	r8, r1
    3274:	1c14      	adds	r4, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    3276:	2300      	movs	r3, #0
    3278:	9300      	str	r3, [sp, #0]
    327a:	20c7      	movs	r0, #199	; 0xc7
    327c:	1c29      	adds	r1, r5, #0
    327e:	2200      	movs	r2, #0
    3280:	1c23      	adds	r3, r4, #0
    3282:	4e55      	ldr	r6, [pc, #340]	; (33d8 <nm_spi_write_block+0x174>)
    3284:	47b0      	blx	r6
	if (result != N_OK) {
    3286:	2801      	cmp	r0, #1
    3288:	d00b      	beq.n	32a2 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    328a:	4854      	ldr	r0, [pc, #336]	; (33dc <nm_spi_write_block+0x178>)
    328c:	4954      	ldr	r1, [pc, #336]	; (33e0 <nm_spi_write_block+0x17c>)
    328e:	4a55      	ldr	r2, [pc, #340]	; (33e4 <nm_spi_write_block+0x180>)
    3290:	4c55      	ldr	r4, [pc, #340]	; (33e8 <nm_spi_write_block+0x184>)
    3292:	47a0      	blx	r4
    3294:	4855      	ldr	r0, [pc, #340]	; (33ec <nm_spi_write_block+0x188>)
    3296:	1c29      	adds	r1, r5, #0
    3298:	47a0      	blx	r4
    329a:	200d      	movs	r0, #13
    329c:	4b54      	ldr	r3, [pc, #336]	; (33f0 <nm_spi_write_block+0x18c>)
    329e:	4798      	blx	r3
    32a0:	e08f      	b.n	33c2 <nm_spi_write_block+0x15e>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    32a2:	20c7      	movs	r0, #199	; 0xc7
    32a4:	4b53      	ldr	r3, [pc, #332]	; (33f4 <nm_spi_write_block+0x190>)
    32a6:	4798      	blx	r3
	if (result != N_OK) {
    32a8:	2801      	cmp	r0, #1
    32aa:	d012      	beq.n	32d2 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    32ac:	484b      	ldr	r0, [pc, #300]	; (33dc <nm_spi_write_block+0x178>)
    32ae:	494c      	ldr	r1, [pc, #304]	; (33e0 <nm_spi_write_block+0x17c>)
    32b0:	4a51      	ldr	r2, [pc, #324]	; (33f8 <nm_spi_write_block+0x194>)
    32b2:	4c4d      	ldr	r4, [pc, #308]	; (33e8 <nm_spi_write_block+0x184>)
    32b4:	47a0      	blx	r4
    32b6:	4851      	ldr	r0, [pc, #324]	; (33fc <nm_spi_write_block+0x198>)
    32b8:	1c29      	adds	r1, r5, #0
    32ba:	47a0      	blx	r4
    32bc:	200d      	movs	r0, #13
    32be:	4b4c      	ldr	r3, [pc, #304]	; (33f0 <nm_spi_write_block+0x18c>)
    32c0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    32c2:	2300      	movs	r3, #0
    32c4:	9300      	str	r3, [sp, #0]
    32c6:	20cf      	movs	r0, #207	; 0xcf
    32c8:	2100      	movs	r1, #0
    32ca:	2200      	movs	r2, #0
    32cc:	4c42      	ldr	r4, [pc, #264]	; (33d8 <nm_spi_write_block+0x174>)
    32ce:	47a0      	blx	r4
    32d0:	e077      	b.n	33c2 <nm_spi_write_block+0x15e>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    32d2:	2200      	movs	r2, #0
    32d4:	ab03      	add	r3, sp, #12
    32d6:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    32d8:	2500      	movs	r5, #0
    32da:	2780      	movs	r7, #128	; 0x80
    32dc:	01bf      	lsls	r7, r7, #6
    32de:	46ba      	mov	sl, r7
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    32e0:	4b47      	ldr	r3, [pc, #284]	; (3400 <nm_spi_write_block+0x19c>)
    32e2:	4699      	mov	r9, r3
    32e4:	1c26      	adds	r6, r4, #0
    32e6:	42bc      	cmp	r4, r7
    32e8:	d900      	bls.n	32ec <nm_spi_write_block+0x88>
    32ea:	4656      	mov	r6, sl
    32ec:	b2b6      	uxth	r6, r6

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    32ee:	2d00      	cmp	r5, #0
    32f0:	d104      	bne.n	32fc <nm_spi_write_block+0x98>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
    32f2:	2301      	movs	r3, #1
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    32f4:	42bc      	cmp	r4, r7
    32f6:	d806      	bhi.n	3306 <nm_spi_write_block+0xa2>
				order = 0x3;
    32f8:	2303      	movs	r3, #3
    32fa:	e004      	b.n	3306 <nm_spi_write_block+0xa2>
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    32fc:	42a7      	cmp	r7, r4
    32fe:	419b      	sbcs	r3, r3
    3300:	425b      	negs	r3, r3
    3302:	2203      	movs	r2, #3
    3304:	1ad3      	subs	r3, r2, r3
			else
				order = 0x2;
		}
		cmd |= order;
    3306:	4668      	mov	r0, sp
    3308:	300b      	adds	r0, #11
    330a:	2210      	movs	r2, #16
    330c:	4252      	negs	r2, r2
    330e:	4313      	orrs	r3, r2
    3310:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3312:	2101      	movs	r1, #1
    3314:	47c8      	blx	r9
    3316:	2800      	cmp	r0, #0
    3318:	d00c      	beq.n	3334 <nm_spi_write_block+0xd0>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    331a:	4830      	ldr	r0, [pc, #192]	; (33dc <nm_spi_write_block+0x178>)
    331c:	4939      	ldr	r1, [pc, #228]	; (3404 <nm_spi_write_block+0x1a0>)
    331e:	22de      	movs	r2, #222	; 0xde
    3320:	0052      	lsls	r2, r2, #1
    3322:	4b31      	ldr	r3, [pc, #196]	; (33e8 <nm_spi_write_block+0x184>)
    3324:	4798      	blx	r3
    3326:	4838      	ldr	r0, [pc, #224]	; (3408 <nm_spi_write_block+0x1a4>)
    3328:	4b38      	ldr	r3, [pc, #224]	; (340c <nm_spi_write_block+0x1a8>)
    332a:	4798      	blx	r3
    332c:	200d      	movs	r0, #13
    332e:	4b30      	ldr	r3, [pc, #192]	; (33f0 <nm_spi_write_block+0x18c>)
    3330:	4798      	blx	r3
    3332:	e033      	b.n	339c <nm_spi_write_block+0x138>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3334:	b228      	sxth	r0, r5
    3336:	4440      	add	r0, r8
    3338:	1c31      	adds	r1, r6, #0
    333a:	4b31      	ldr	r3, [pc, #196]	; (3400 <nm_spi_write_block+0x19c>)
    333c:	4798      	blx	r3
    333e:	2800      	cmp	r0, #0
    3340:	d00c      	beq.n	335c <nm_spi_write_block+0xf8>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3342:	4826      	ldr	r0, [pc, #152]	; (33dc <nm_spi_write_block+0x178>)
    3344:	492f      	ldr	r1, [pc, #188]	; (3404 <nm_spi_write_block+0x1a0>)
    3346:	22c6      	movs	r2, #198	; 0xc6
    3348:	32ff      	adds	r2, #255	; 0xff
    334a:	4b27      	ldr	r3, [pc, #156]	; (33e8 <nm_spi_write_block+0x184>)
    334c:	4798      	blx	r3
    334e:	4830      	ldr	r0, [pc, #192]	; (3410 <nm_spi_write_block+0x1ac>)
    3350:	4b2e      	ldr	r3, [pc, #184]	; (340c <nm_spi_write_block+0x1a8>)
    3352:	4798      	blx	r3
    3354:	200d      	movs	r0, #13
    3356:	4b26      	ldr	r3, [pc, #152]	; (33f0 <nm_spi_write_block+0x18c>)
    3358:	4798      	blx	r3
    335a:	e01f      	b.n	339c <nm_spi_write_block+0x138>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    335c:	4b2d      	ldr	r3, [pc, #180]	; (3414 <nm_spi_write_block+0x1b0>)
    335e:	781b      	ldrb	r3, [r3, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d112      	bne.n	338a <nm_spi_write_block+0x126>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3364:	a803      	add	r0, sp, #12
    3366:	2102      	movs	r1, #2
    3368:	4b25      	ldr	r3, [pc, #148]	; (3400 <nm_spi_write_block+0x19c>)
    336a:	4798      	blx	r3
    336c:	2800      	cmp	r0, #0
    336e:	d00c      	beq.n	338a <nm_spi_write_block+0x126>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3370:	481a      	ldr	r0, [pc, #104]	; (33dc <nm_spi_write_block+0x178>)
    3372:	4924      	ldr	r1, [pc, #144]	; (3404 <nm_spi_write_block+0x1a0>)
    3374:	22d0      	movs	r2, #208	; 0xd0
    3376:	32ff      	adds	r2, #255	; 0xff
    3378:	4b1b      	ldr	r3, [pc, #108]	; (33e8 <nm_spi_write_block+0x184>)
    337a:	4798      	blx	r3
    337c:	4826      	ldr	r0, [pc, #152]	; (3418 <nm_spi_write_block+0x1b4>)
    337e:	4b23      	ldr	r3, [pc, #140]	; (340c <nm_spi_write_block+0x1a8>)
    3380:	4798      	blx	r3
    3382:	200d      	movs	r0, #13
    3384:	4b1a      	ldr	r3, [pc, #104]	; (33f0 <nm_spi_write_block+0x18c>)
    3386:	4798      	blx	r3
    3388:	e008      	b.n	339c <nm_spi_write_block+0x138>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    338a:	1975      	adds	r5, r6, r5
    338c:	b2ad      	uxth	r5, r5
		sz -= nbytes;
    338e:	1ba4      	subs	r4, r4, r6
    3390:	b2a4      	uxth	r4, r4
	} while (sz);
    3392:	2c00      	cmp	r4, #0
    3394:	d1a6      	bne.n	32e4 <nm_spi_write_block+0x80>
    3396:	e016      	b.n	33c6 <nm_spi_write_block+0x162>
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    3398:	b240      	sxtb	r0, r0
    339a:	e016      	b.n	33ca <nm_spi_write_block+0x166>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    339c:	480f      	ldr	r0, [pc, #60]	; (33dc <nm_spi_write_block+0x178>)
    339e:	4910      	ldr	r1, [pc, #64]	; (33e0 <nm_spi_write_block+0x17c>)
    33a0:	4a1e      	ldr	r2, [pc, #120]	; (341c <nm_spi_write_block+0x1b8>)
    33a2:	4b11      	ldr	r3, [pc, #68]	; (33e8 <nm_spi_write_block+0x184>)
    33a4:	4798      	blx	r3
    33a6:	481e      	ldr	r0, [pc, #120]	; (3420 <nm_spi_write_block+0x1bc>)
    33a8:	4b18      	ldr	r3, [pc, #96]	; (340c <nm_spi_write_block+0x1a8>)
    33aa:	4798      	blx	r3
    33ac:	200d      	movs	r0, #13
    33ae:	4b10      	ldr	r3, [pc, #64]	; (33f0 <nm_spi_write_block+0x18c>)
    33b0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    33b2:	2300      	movs	r3, #0
    33b4:	9300      	str	r3, [sp, #0]
    33b6:	20cf      	movs	r0, #207	; 0xcf
    33b8:	2100      	movs	r1, #0
    33ba:	2200      	movs	r2, #0
    33bc:	4c06      	ldr	r4, [pc, #24]	; (33d8 <nm_spi_write_block+0x174>)
    33be:	47a0      	blx	r4
    33c0:	e001      	b.n	33c6 <nm_spi_write_block+0x162>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    33c2:	20fa      	movs	r0, #250	; 0xfa
    33c4:	e7e8      	b.n	3398 <nm_spi_write_block+0x134>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    33c6:	2000      	movs	r0, #0
    33c8:	e7e6      	b.n	3398 <nm_spi_write_block+0x134>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    33ca:	b004      	add	sp, #16
    33cc:	bc1c      	pop	{r2, r3, r4}
    33ce:	4690      	mov	r8, r2
    33d0:	4699      	mov	r9, r3
    33d2:	46a2      	mov	sl, r4
    33d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	00002cd5 	.word	0x00002cd5
    33dc:	00009674 	.word	0x00009674
    33e0:	00009dfc 	.word	0x00009dfc
    33e4:	00000223 	.word	0x00000223
    33e8:	00007c39 	.word	0x00007c39
    33ec:	0000a184 	.word	0x0000a184
    33f0:	00007c6d 	.word	0x00007c6d
    33f4:	00002aa1 	.word	0x00002aa1
    33f8:	00000229 	.word	0x00000229
    33fc:	0000a1b4 	.word	0x0000a1b4
    3400:	00002cb5 	.word	0x00002cb5
    3404:	00009dd0 	.word	0x00009dd0
    3408:	0000a1ec 	.word	0x0000a1ec
    340c:	00007d59 	.word	0x00007d59
    3410:	0000a224 	.word	0x0000a224
    3414:	20000870 	.word	0x20000870
    3418:	0000a258 	.word	0x0000a258
    341c:	0000023a 	.word	0x0000023a
    3420:	0000a290 	.word	0x0000a290

00003424 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    3424:	b5f0      	push	{r4, r5, r6, r7, lr}
    3426:	465f      	mov	r7, fp
    3428:	4656      	mov	r6, sl
    342a:	464d      	mov	r5, r9
    342c:	4644      	mov	r4, r8
    342e:	b4f0      	push	{r4, r5, r6, r7}
    3430:	b083      	sub	sp, #12
    3432:	1c0e      	adds	r6, r1, #0
    3434:	4692      	mov	sl, r2
    3436:	4698      	mov	r8, r3
    3438:	ab0c      	add	r3, sp, #48	; 0x30
    343a:	881d      	ldrh	r5, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    343c:	2d00      	cmp	r5, #0
    343e:	d059      	beq.n	34f4 <Socket_ReadSocketData+0xd0>
    3440:	0042      	lsls	r2, r0, #1
    3442:	1812      	adds	r2, r2, r0
    3444:	0092      	lsls	r2, r2, #2
    3446:	4b2f      	ldr	r3, [pc, #188]	; (3504 <Socket_ReadSocketData+0xe0>)
    3448:	58d3      	ldr	r3, [r2, r3]
    344a:	2b00      	cmp	r3, #0
    344c:	d052      	beq.n	34f4 <Socket_ReadSocketData+0xd0>
    344e:	1c13      	adds	r3, r2, #0
    3450:	4a2c      	ldr	r2, [pc, #176]	; (3504 <Socket_ReadSocketData+0xe0>)
    3452:	18d3      	adds	r3, r2, r3
    3454:	889b      	ldrh	r3, [r3, #4]
    3456:	b29b      	uxth	r3, r3
    3458:	2b00      	cmp	r3, #0
    345a:	d04b      	beq.n	34f4 <Socket_ReadSocketData+0xd0>
    345c:	0043      	lsls	r3, r0, #1
    345e:	181b      	adds	r3, r3, r0
    3460:	009b      	lsls	r3, r3, #2
    3462:	18d3      	adds	r3, r2, r3
    3464:	799b      	ldrb	r3, [r3, #6]
    3466:	2b01      	cmp	r3, #1
    3468:	d144      	bne.n	34f4 <Socket_ReadSocketData+0xd0>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    346a:	80f5      	strh	r5, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    346c:	0043      	lsls	r3, r0, #1
    346e:	1819      	adds	r1, r3, r0
    3470:	0089      	lsls	r1, r1, #2
    3472:	4689      	mov	r9, r1
    3474:	4693      	mov	fp, r2
    3476:	44cb      	add	fp, r9
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3478:	4643      	mov	r3, r8
    347a:	4680      	mov	r8, r0
    347c:	9301      	str	r3, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    347e:	465a      	mov	r2, fp
    3480:	8893      	ldrh	r3, [r2, #4]
    3482:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    3484:	b21b      	sxth	r3, r3
    3486:	2b00      	cmp	r3, #0
    3488:	dd06      	ble.n	3498 <Socket_ReadSocketData+0x74>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
    348a:	4f1e      	ldr	r7, [pc, #120]	; (3504 <Socket_ReadSocketData+0xe0>)
    348c:	1c3b      	adds	r3, r7, #0
    348e:	444b      	add	r3, r9
    3490:	889c      	ldrh	r4, [r3, #4]
    3492:	b2a4      	uxth	r4, r4
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    3494:	2300      	movs	r3, #0
    3496:	e001      	b.n	349c <Socket_ReadSocketData+0x78>
    3498:	1c2c      	adds	r4, r5, #0
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    349a:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    349c:	4648      	mov	r0, r9
    349e:	4f19      	ldr	r7, [pc, #100]	; (3504 <Socket_ReadSocketData+0xe0>)
    34a0:	59c1      	ldr	r1, [r0, r7]
    34a2:	9801      	ldr	r0, [sp, #4]
    34a4:	1c22      	adds	r2, r4, #0
    34a6:	4f18      	ldr	r7, [pc, #96]	; (3508 <Socket_ReadSocketData+0xe4>)
    34a8:	47b8      	blx	r7
    34aa:	2800      	cmp	r0, #0
    34ac:	d119      	bne.n	34e2 <Socket_ReadSocketData+0xbe>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    34ae:	4b15      	ldr	r3, [pc, #84]	; (3504 <Socket_ReadSocketData+0xe0>)
    34b0:	4648      	mov	r0, r9
    34b2:	58c3      	ldr	r3, [r0, r3]
    34b4:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    34b6:	80b4      	strh	r4, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    34b8:	88f3      	ldrh	r3, [r6, #6]
    34ba:	1b1b      	subs	r3, r3, r4
    34bc:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    34be:	4b13      	ldr	r3, [pc, #76]	; (350c <Socket_ReadSocketData+0xe8>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d005      	beq.n	34d2 <Socket_ReadSocketData+0xae>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    34c6:	4b11      	ldr	r3, [pc, #68]	; (350c <Socket_ReadSocketData+0xe8>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	4640      	mov	r0, r8
    34cc:	4651      	mov	r1, sl
    34ce:	1c32      	adds	r2, r6, #0
    34d0:	4798      	blx	r3

				u16ReadCount -= u16Read;
    34d2:	1b2d      	subs	r5, r5, r4
    34d4:	b2ad      	uxth	r5, r5
				u32Address += u16Read;
    34d6:	9a01      	ldr	r2, [sp, #4]
    34d8:	1912      	adds	r2, r2, r4
    34da:	9201      	str	r2, [sp, #4]
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    34dc:	2d00      	cmp	r5, #0
    34de:	d1ce      	bne.n	347e <Socket_ReadSocketData+0x5a>
    34e0:	e008      	b.n	34f4 <Socket_ReadSocketData+0xd0>
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    34e2:	480b      	ldr	r0, [pc, #44]	; (3510 <Socket_ReadSocketData+0xec>)
    34e4:	4c0b      	ldr	r4, [pc, #44]	; (3514 <Socket_ReadSocketData+0xf0>)
    34e6:	47a0      	blx	r4
    34e8:	480b      	ldr	r0, [pc, #44]	; (3518 <Socket_ReadSocketData+0xf4>)
    34ea:	1c29      	adds	r1, r5, #0
    34ec:	47a0      	blx	r4
    34ee:	200d      	movs	r0, #13
    34f0:	4b0a      	ldr	r3, [pc, #40]	; (351c <Socket_ReadSocketData+0xf8>)
    34f2:	4798      	blx	r3
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    34f4:	b003      	add	sp, #12
    34f6:	bc3c      	pop	{r2, r3, r4, r5}
    34f8:	4690      	mov	r8, r2
    34fa:	4699      	mov	r9, r3
    34fc:	46a2      	mov	sl, r4
    34fe:	46ab      	mov	fp, r5
    3500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	20000aec 	.word	0x20000aec
    3508:	00001909 	.word	0x00001909
    350c:	20000b70 	.word	0x20000b70
    3510:	00009938 	.word	0x00009938
    3514:	00007c39 	.word	0x00007c39
    3518:	0000a3f0 	.word	0x0000a3f0
    351c:	00007c6d 	.word	0x00007c6d

00003520 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3520:	b5f0      	push	{r4, r5, r6, r7, lr}
    3522:	465f      	mov	r7, fp
    3524:	4656      	mov	r6, sl
    3526:	464d      	mov	r5, r9
    3528:	4644      	mov	r4, r8
    352a:	b4f0      	push	{r4, r5, r6, r7}
    352c:	b09b      	sub	sp, #108	; 0x6c
    352e:	1c0d      	adds	r5, r1, #0
    3530:	1c14      	adds	r4, r2, #0
	if(u8OpCode == SOCKET_CMD_BIND)
    3532:	2841      	cmp	r0, #65	; 0x41
    3534:	d11a      	bne.n	356c <m2m_ip_cb+0x4c>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3536:	1c10      	adds	r0, r2, #0
    3538:	a909      	add	r1, sp, #36	; 0x24
    353a:	2204      	movs	r2, #4
    353c:	2300      	movs	r3, #0
    353e:	4ca1      	ldr	r4, [pc, #644]	; (37c4 <m2m_ip_cb+0x2a4>)
    3540:	47a0      	blx	r4
    3542:	2800      	cmp	r0, #0
    3544:	d000      	beq.n	3548 <m2m_ip_cb+0x28>
    3546:	e136      	b.n	37b6 <m2m_ip_cb+0x296>
		{
			strBind.status = strBindReply.s8Status;
    3548:	ab09      	add	r3, sp, #36	; 0x24
    354a:	785a      	ldrb	r2, [r3, #1]
    354c:	ab05      	add	r3, sp, #20
    354e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3550:	4b9d      	ldr	r3, [pc, #628]	; (37c8 <m2m_ip_cb+0x2a8>)
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	2b00      	cmp	r3, #0
    3556:	d100      	bne.n	355a <m2m_ip_cb+0x3a>
    3558:	e12d      	b.n	37b6 <m2m_ip_cb+0x296>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    355a:	4b9b      	ldr	r3, [pc, #620]	; (37c8 <m2m_ip_cb+0x2a8>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	aa09      	add	r2, sp, #36	; 0x24
    3560:	2000      	movs	r0, #0
    3562:	5610      	ldrsb	r0, [r2, r0]
    3564:	2101      	movs	r1, #1
    3566:	aa05      	add	r2, sp, #20
    3568:	4798      	blx	r3
    356a:	e124      	b.n	37b6 <m2m_ip_cb+0x296>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    356c:	2842      	cmp	r0, #66	; 0x42
    356e:	d11a      	bne.n	35a6 <m2m_ip_cb+0x86>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3570:	1c10      	adds	r0, r2, #0
    3572:	a909      	add	r1, sp, #36	; 0x24
    3574:	2204      	movs	r2, #4
    3576:	2300      	movs	r3, #0
    3578:	4c92      	ldr	r4, [pc, #584]	; (37c4 <m2m_ip_cb+0x2a4>)
    357a:	47a0      	blx	r4
    357c:	2800      	cmp	r0, #0
    357e:	d000      	beq.n	3582 <m2m_ip_cb+0x62>
    3580:	e119      	b.n	37b6 <m2m_ip_cb+0x296>
		{
			strListen.status = strListenReply.s8Status;
    3582:	ab09      	add	r3, sp, #36	; 0x24
    3584:	785a      	ldrb	r2, [r3, #1]
    3586:	ab05      	add	r3, sp, #20
    3588:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    358a:	4b8f      	ldr	r3, [pc, #572]	; (37c8 <m2m_ip_cb+0x2a8>)
    358c:	681b      	ldr	r3, [r3, #0]
    358e:	2b00      	cmp	r3, #0
    3590:	d100      	bne.n	3594 <m2m_ip_cb+0x74>
    3592:	e110      	b.n	37b6 <m2m_ip_cb+0x296>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3594:	4b8c      	ldr	r3, [pc, #560]	; (37c8 <m2m_ip_cb+0x2a8>)
    3596:	681b      	ldr	r3, [r3, #0]
    3598:	aa09      	add	r2, sp, #36	; 0x24
    359a:	2000      	movs	r0, #0
    359c:	5610      	ldrsb	r0, [r2, r0]
    359e:	2102      	movs	r1, #2
    35a0:	aa05      	add	r2, sp, #20
    35a2:	4798      	blx	r3
    35a4:	e107      	b.n	37b6 <m2m_ip_cb+0x296>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    35a6:	2843      	cmp	r0, #67	; 0x43
    35a8:	d144      	bne.n	3634 <m2m_ip_cb+0x114>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    35aa:	1c10      	adds	r0, r2, #0
    35ac:	a905      	add	r1, sp, #20
    35ae:	220c      	movs	r2, #12
    35b0:	2300      	movs	r3, #0
    35b2:	4c84      	ldr	r4, [pc, #528]	; (37c4 <m2m_ip_cb+0x2a4>)
    35b4:	47a0      	blx	r4
    35b6:	2800      	cmp	r0, #0
    35b8:	d000      	beq.n	35bc <m2m_ip_cb+0x9c>
    35ba:	e0fc      	b.n	37b6 <m2m_ip_cb+0x296>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    35bc:	ab05      	add	r3, sp, #20
    35be:	7a5a      	ldrb	r2, [r3, #9]
    35c0:	b253      	sxtb	r3, r2
    35c2:	2b00      	cmp	r3, #0
    35c4:	db1f      	blt.n	3606 <m2m_ip_cb+0xe6>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    35c6:	0059      	lsls	r1, r3, #1
    35c8:	18c9      	adds	r1, r1, r3
    35ca:	0089      	lsls	r1, r1, #2
    35cc:	487f      	ldr	r0, [pc, #508]	; (37cc <m2m_ip_cb+0x2ac>)
    35ce:	1841      	adds	r1, r0, r1
    35d0:	2000      	movs	r0, #0
    35d2:	71c8      	strb	r0, [r1, #7]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    35d4:	2001      	movs	r0, #1
    35d6:	7188      	strb	r0, [r1, #6]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    35d8:	497d      	ldr	r1, [pc, #500]	; (37d0 <m2m_ip_cb+0x2b0>)
    35da:	8808      	ldrh	r0, [r1, #0]
    35dc:	3001      	adds	r0, #1
    35de:	b280      	uxth	r0, r0
    35e0:	8008      	strh	r0, [r1, #0]
				if(gu16SessionID == 0)
    35e2:	8809      	ldrh	r1, [r1, #0]
    35e4:	b289      	uxth	r1, r1
    35e6:	2900      	cmp	r1, #0
    35e8:	d104      	bne.n	35f4 <m2m_ip_cb+0xd4>
					++gu16SessionID;
    35ea:	4979      	ldr	r1, [pc, #484]	; (37d0 <m2m_ip_cb+0x2b0>)
    35ec:	8808      	ldrh	r0, [r1, #0]
    35ee:	3001      	adds	r0, #1
    35f0:	b280      	uxth	r0, r0
    35f2:	8008      	strh	r0, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    35f4:	4976      	ldr	r1, [pc, #472]	; (37d0 <m2m_ip_cb+0x2b0>)
    35f6:	8809      	ldrh	r1, [r1, #0]
    35f8:	b289      	uxth	r1, r1
    35fa:	0058      	lsls	r0, r3, #1
    35fc:	18c3      	adds	r3, r0, r3
    35fe:	009b      	lsls	r3, r3, #2
    3600:	4872      	ldr	r0, [pc, #456]	; (37cc <m2m_ip_cb+0x2ac>)
    3602:	18c3      	adds	r3, r0, r3
    3604:	8159      	strh	r1, [r3, #10]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    3606:	ab09      	add	r3, sp, #36	; 0x24
    3608:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    360a:	2202      	movs	r2, #2
    360c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    360e:	aa05      	add	r2, sp, #20
    3610:	8851      	ldrh	r1, [r2, #2]
    3612:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3614:	9a06      	ldr	r2, [sp, #24]
    3616:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3618:	4b6b      	ldr	r3, [pc, #428]	; (37c8 <m2m_ip_cb+0x2a8>)
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	2b00      	cmp	r3, #0
    361e:	d100      	bne.n	3622 <m2m_ip_cb+0x102>
    3620:	e0c9      	b.n	37b6 <m2m_ip_cb+0x296>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3622:	4b69      	ldr	r3, [pc, #420]	; (37c8 <m2m_ip_cb+0x2a8>)
    3624:	681b      	ldr	r3, [r3, #0]
    3626:	aa05      	add	r2, sp, #20
    3628:	2008      	movs	r0, #8
    362a:	5610      	ldrsb	r0, [r2, r0]
    362c:	2104      	movs	r1, #4
    362e:	aa09      	add	r2, sp, #36	; 0x24
    3630:	4798      	blx	r3
    3632:	e0c0      	b.n	37b6 <m2m_ip_cb+0x296>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3634:	2844      	cmp	r0, #68	; 0x44
    3636:	d001      	beq.n	363c <m2m_ip_cb+0x11c>
    3638:	284b      	cmp	r0, #75	; 0x4b
    363a:	d11a      	bne.n	3672 <m2m_ip_cb+0x152>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    363c:	1c20      	adds	r0, r4, #0
    363e:	a909      	add	r1, sp, #36	; 0x24
    3640:	2204      	movs	r2, #4
    3642:	2300      	movs	r3, #0
    3644:	4c5f      	ldr	r4, [pc, #380]	; (37c4 <m2m_ip_cb+0x2a4>)
    3646:	47a0      	blx	r4
    3648:	2800      	cmp	r0, #0
    364a:	d000      	beq.n	364e <m2m_ip_cb+0x12e>
    364c:	e0b3      	b.n	37b6 <m2m_ip_cb+0x296>
		{
			strConnMsg.sock		= strConnectReply.sock;
    364e:	aa09      	add	r2, sp, #36	; 0x24
    3650:	7810      	ldrb	r0, [r2, #0]
    3652:	ab05      	add	r3, sp, #20
    3654:	7018      	strb	r0, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3656:	7852      	ldrb	r2, [r2, #1]
    3658:	705a      	strb	r2, [r3, #1]
			if(gpfAppSocketCb)
    365a:	4b5b      	ldr	r3, [pc, #364]	; (37c8 <m2m_ip_cb+0x2a8>)
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	2b00      	cmp	r3, #0
    3660:	d100      	bne.n	3664 <m2m_ip_cb+0x144>
    3662:	e0a8      	b.n	37b6 <m2m_ip_cb+0x296>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3664:	4b58      	ldr	r3, [pc, #352]	; (37c8 <m2m_ip_cb+0x2a8>)
    3666:	681b      	ldr	r3, [r3, #0]
    3668:	b240      	sxtb	r0, r0
    366a:	2105      	movs	r1, #5
    366c:	aa05      	add	r2, sp, #20
    366e:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    3670:	e0a1      	b.n	37b6 <m2m_ip_cb+0x296>
			strConnMsg.s8Error	= strConnectReply.s8Error;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3672:	284a      	cmp	r0, #74	; 0x4a
    3674:	d113      	bne.n	369e <m2m_ip_cb+0x17e>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3676:	1c10      	adds	r0, r2, #0
    3678:	a909      	add	r1, sp, #36	; 0x24
    367a:	2244      	movs	r2, #68	; 0x44
    367c:	2300      	movs	r3, #0
    367e:	4c51      	ldr	r4, [pc, #324]	; (37c4 <m2m_ip_cb+0x2a4>)
    3680:	47a0      	blx	r4
    3682:	2800      	cmp	r0, #0
    3684:	d000      	beq.n	3688 <m2m_ip_cb+0x168>
    3686:	e096      	b.n	37b6 <m2m_ip_cb+0x296>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    3688:	9919      	ldr	r1, [sp, #100]	; 0x64
			if(gpfAppResolveCb)
    368a:	4b52      	ldr	r3, [pc, #328]	; (37d4 <m2m_ip_cb+0x2b4>)
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	2b00      	cmp	r3, #0
    3690:	d100      	bne.n	3694 <m2m_ip_cb+0x174>
    3692:	e090      	b.n	37b6 <m2m_ip_cb+0x296>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3694:	4b4f      	ldr	r3, [pc, #316]	; (37d4 <m2m_ip_cb+0x2b4>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	a809      	add	r0, sp, #36	; 0x24
    369a:	4798      	blx	r3
    369c:	e08b      	b.n	37b6 <m2m_ip_cb+0x296>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    369e:	2846      	cmp	r0, #70	; 0x46
    36a0:	d006      	beq.n	36b0 <m2m_ip_cb+0x190>
    36a2:	2848      	cmp	r0, #72	; 0x48
    36a4:	d007      	beq.n	36b6 <m2m_ip_cb+0x196>
    36a6:	284d      	cmp	r0, #77	; 0x4d
    36a8:	d157      	bne.n	375a <m2m_ip_cb+0x23a>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    36aa:	2006      	movs	r0, #6
    36ac:	4680      	mov	r8, r0
    36ae:	e004      	b.n	36ba <m2m_ip_cb+0x19a>
    36b0:	2106      	movs	r1, #6
    36b2:	4688      	mov	r8, r1
    36b4:	e001      	b.n	36ba <m2m_ip_cb+0x19a>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    36b6:	2209      	movs	r2, #9
    36b8:	4690      	mov	r8, r2
		
		/* Read RECV REPLY data structure. 
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    36ba:	1c20      	adds	r0, r4, #0
    36bc:	a905      	add	r1, sp, #20
    36be:	2210      	movs	r2, #16
    36c0:	2300      	movs	r3, #0
    36c2:	4e40      	ldr	r6, [pc, #256]	; (37c4 <m2m_ip_cb+0x2a4>)
    36c4:	47b0      	blx	r6
    36c6:	2800      	cmp	r0, #0
    36c8:	d175      	bne.n	37b6 <m2m_ip_cb+0x296>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    36ca:	ae05      	add	r6, sp, #20
    36cc:	7b33      	ldrb	r3, [r6, #12]
    36ce:	9303      	str	r3, [sp, #12]
			u16SessionID = strRecvReply.u16SessionID;
    36d0:	89f0      	ldrh	r0, [r6, #14]
    36d2:	4684      	mov	ip, r0
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/ 
			gastrSockets[sock].bIsRecvPending = 0;
    36d4:	b25f      	sxtb	r7, r3
    36d6:	4b3d      	ldr	r3, [pc, #244]	; (37cc <m2m_ip_cb+0x2ac>)
    36d8:	007a      	lsls	r2, r7, #1
    36da:	19d1      	adds	r1, r2, r7
    36dc:	0089      	lsls	r1, r1, #2
    36de:	1858      	adds	r0, r3, r1
    36e0:	2100      	movs	r1, #0
    36e2:	7201      	strb	r1, [r0, #8]
	
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    36e4:	8930      	ldrh	r0, [r6, #8]
    36e6:	4681      	mov	r9, r0
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    36e8:	8971      	ldrh	r1, [r6, #10]
    36ea:	468a      	mov	sl, r1
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    36ec:	a909      	add	r1, sp, #36	; 0x24
    36ee:	8870      	ldrh	r0, [r6, #2]
    36f0:	8148      	strh	r0, [r1, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    36f2:	9e06      	ldr	r6, [sp, #24]
    36f4:	960c      	str	r6, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    36f6:	19d2      	adds	r2, r2, r7
    36f8:	0092      	lsls	r2, r2, #2
    36fa:	189b      	adds	r3, r3, r2
    36fc:	895a      	ldrh	r2, [r3, #10]
    36fe:	b292      	uxth	r2, r2
    3700:	4562      	cmp	r2, ip
    3702:	d121      	bne.n	3748 <m2m_ip_cb+0x228>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3704:	4649      	mov	r1, r9
    3706:	b20b      	sxth	r3, r1
    3708:	2b00      	cmp	r3, #0
    370a:	dd0c      	ble.n	3726 <m2m_ip_cb+0x206>
    370c:	42ab      	cmp	r3, r5
    370e:	da0a      	bge.n	3726 <m2m_ip_cb+0x206>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3710:	9a03      	ldr	r2, [sp, #12]
    3712:	b250      	sxtb	r0, r2
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    3714:	4651      	mov	r1, sl
    3716:	1863      	adds	r3, r4, r1
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3718:	464a      	mov	r2, r9
    371a:	9200      	str	r2, [sp, #0]
    371c:	a909      	add	r1, sp, #36	; 0x24
    371e:	4642      	mov	r2, r8
    3720:	4c2d      	ldr	r4, [pc, #180]	; (37d8 <m2m_ip_cb+0x2b8>)
    3722:	47a0      	blx	r4
    3724:	e047      	b.n	37b6 <m2m_ip_cb+0x296>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3726:	ab09      	add	r3, sp, #36	; 0x24
    3728:	4648      	mov	r0, r9
    372a:	8098      	strh	r0, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    372c:	2300      	movs	r3, #0
    372e:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3730:	4b25      	ldr	r3, [pc, #148]	; (37c8 <m2m_ip_cb+0x2a8>)
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	2b00      	cmp	r3, #0
    3736:	d03e      	beq.n	37b6 <m2m_ip_cb+0x296>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3738:	4b23      	ldr	r3, [pc, #140]	; (37c8 <m2m_ip_cb+0x2a8>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	9903      	ldr	r1, [sp, #12]
    373e:	b248      	sxtb	r0, r1
    3740:	4641      	mov	r1, r8
    3742:	aa09      	add	r2, sp, #36	; 0x24
    3744:	4798      	blx	r3
    3746:	e036      	b.n	37b6 <m2m_ip_cb+0x296>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    3748:	2d10      	cmp	r5, #16
    374a:	d934      	bls.n	37b6 <m2m_ip_cb+0x296>
					hif_receive(0, NULL, 0, 1);
    374c:	2000      	movs	r0, #0
    374e:	2100      	movs	r1, #0
    3750:	2200      	movs	r2, #0
    3752:	2301      	movs	r3, #1
    3754:	4c1b      	ldr	r4, [pc, #108]	; (37c4 <m2m_ip_cb+0x2a4>)
    3756:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    3758:	e02d      	b.n	37b6 <m2m_ip_cb+0x296>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    375a:	2845      	cmp	r0, #69	; 0x45
    375c:	d005      	beq.n	376a <m2m_ip_cb+0x24a>
    375e:	2847      	cmp	r0, #71	; 0x47
    3760:	d005      	beq.n	376e <m2m_ip_cb+0x24e>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3762:	2507      	movs	r5, #7
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3764:	284c      	cmp	r0, #76	; 0x4c
    3766:	d003      	beq.n	3770 <m2m_ip_cb+0x250>
    3768:	e025      	b.n	37b6 <m2m_ip_cb+0x296>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    376a:	2507      	movs	r5, #7
    376c:	e000      	b.n	3770 <m2m_ip_cb+0x250>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    376e:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3770:	1c20      	adds	r0, r4, #0
    3772:	a909      	add	r1, sp, #36	; 0x24
    3774:	2208      	movs	r2, #8
    3776:	2300      	movs	r3, #0
    3778:	4c12      	ldr	r4, [pc, #72]	; (37c4 <m2m_ip_cb+0x2a4>)
    377a:	47a0      	blx	r4
    377c:	2800      	cmp	r0, #0
    377e:	d11a      	bne.n	37b6 <m2m_ip_cb+0x296>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    3780:	ab09      	add	r3, sp, #36	; 0x24
    3782:	7818      	ldrb	r0, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    3784:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3786:	8859      	ldrh	r1, [r3, #2]
    3788:	ab05      	add	r3, sp, #20
    378a:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    378c:	b243      	sxtb	r3, r0
    378e:	0059      	lsls	r1, r3, #1
    3790:	18cb      	adds	r3, r1, r3
    3792:	009b      	lsls	r3, r3, #2
    3794:	490d      	ldr	r1, [pc, #52]	; (37cc <m2m_ip_cb+0x2ac>)
    3796:	18cb      	adds	r3, r1, r3
    3798:	3308      	adds	r3, #8
    379a:	885b      	ldrh	r3, [r3, #2]
    379c:	b29b      	uxth	r3, r3
    379e:	4293      	cmp	r3, r2
    37a0:	d109      	bne.n	37b6 <m2m_ip_cb+0x296>
			{
				if(gpfAppSocketCb)
    37a2:	4b09      	ldr	r3, [pc, #36]	; (37c8 <m2m_ip_cb+0x2a8>)
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d005      	beq.n	37b6 <m2m_ip_cb+0x296>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    37aa:	4b07      	ldr	r3, [pc, #28]	; (37c8 <m2m_ip_cb+0x2a8>)
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	b240      	sxtb	r0, r0
    37b0:	1c29      	adds	r1, r5, #0
    37b2:	aa05      	add	r2, sp, #20
    37b4:	4798      	blx	r3
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}	
}
    37b6:	b01b      	add	sp, #108	; 0x6c
    37b8:	bc3c      	pop	{r2, r3, r4, r5}
    37ba:	4690      	mov	r8, r2
    37bc:	4699      	mov	r9, r3
    37be:	46a2      	mov	sl, r4
    37c0:	46ab      	mov	fp, r5
    37c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37c4:	00001909 	.word	0x00001909
    37c8:	20000b70 	.word	0x20000b70
    37cc:	20000aec 	.word	0x20000aec
    37d0:	20000872 	.word	0x20000872
    37d4:	20000b74 	.word	0x20000b74
    37d8:	00003425 	.word	0x00003425

000037dc <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    37dc:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
    37de:	4b0a      	ldr	r3, [pc, #40]	; (3808 <socketInit+0x2c>)
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d10e      	bne.n	3804 <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    37e6:	4809      	ldr	r0, [pc, #36]	; (380c <socketInit+0x30>)
    37e8:	2100      	movs	r1, #0
    37ea:	2284      	movs	r2, #132	; 0x84
    37ec:	4b08      	ldr	r3, [pc, #32]	; (3810 <socketInit+0x34>)
    37ee:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GRP_IP,m2m_ip_cb);
    37f0:	2002      	movs	r0, #2
    37f2:	4908      	ldr	r1, [pc, #32]	; (3814 <socketInit+0x38>)
    37f4:	4b08      	ldr	r3, [pc, #32]	; (3818 <socketInit+0x3c>)
    37f6:	4798      	blx	r3
		gbSocketInit=1;
    37f8:	2201      	movs	r2, #1
    37fa:	4b03      	ldr	r3, [pc, #12]	; (3808 <socketInit+0x2c>)
    37fc:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    37fe:	2200      	movs	r2, #0
    3800:	4b06      	ldr	r3, [pc, #24]	; (381c <socketInit+0x40>)
    3802:	801a      	strh	r2, [r3, #0]
	}
}
    3804:	bd08      	pop	{r3, pc}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	20000871 	.word	0x20000871
    380c:	20000aec 	.word	0x20000aec
    3810:	0000124d 	.word	0x0000124d
    3814:	00003521 	.word	0x00003521
    3818:	00001a31 	.word	0x00001a31
    381c:	20000872 	.word	0x20000872

00003820 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    3820:	b508      	push	{r3, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3822:	4808      	ldr	r0, [pc, #32]	; (3844 <socketDeinit+0x24>)
    3824:	2100      	movs	r1, #0
    3826:	2284      	movs	r2, #132	; 0x84
    3828:	4b07      	ldr	r3, [pc, #28]	; (3848 <socketDeinit+0x28>)
    382a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GRP_IP, NULL);
    382c:	2002      	movs	r0, #2
    382e:	2100      	movs	r1, #0
    3830:	4b06      	ldr	r3, [pc, #24]	; (384c <socketDeinit+0x2c>)
    3832:	4798      	blx	r3
	gpfAppSocketCb = NULL;
    3834:	2300      	movs	r3, #0
    3836:	4a06      	ldr	r2, [pc, #24]	; (3850 <socketDeinit+0x30>)
    3838:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = NULL;
    383a:	4a06      	ldr	r2, [pc, #24]	; (3854 <socketDeinit+0x34>)
    383c:	6013      	str	r3, [r2, #0]
	gbSocketInit = 0;
    383e:	4a06      	ldr	r2, [pc, #24]	; (3858 <socketDeinit+0x38>)
    3840:	7013      	strb	r3, [r2, #0]
}
    3842:	bd08      	pop	{r3, pc}
    3844:	20000aec 	.word	0x20000aec
    3848:	0000124d 	.word	0x0000124d
    384c:	00001a31 	.word	0x00001a31
    3850:	20000b70 	.word	0x20000b70
    3854:	20000b74 	.word	0x20000b74
    3858:	20000871 	.word	0x20000871

0000385c <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    385c:	4b02      	ldr	r3, [pc, #8]	; (3868 <registerSocketCallback+0xc>)
    385e:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3860:	4b02      	ldr	r3, [pc, #8]	; (386c <registerSocketCallback+0x10>)
    3862:	6019      	str	r1, [r3, #0]
}
    3864:	4770      	bx	lr
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	20000b70 	.word	0x20000b70
    386c:	20000b74 	.word	0x20000b74

00003870 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3870:	b530      	push	{r4, r5, lr}
    3872:	b087      	sub	sp, #28
	SOCKET	sock = -1;
    3874:	24ff      	movs	r4, #255	; 0xff
	uint8	u8Count,u8SocketCount = MAX_SOCKET;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3876:	2802      	cmp	r0, #2
    3878:	d147      	bne.n	390a <socket+0x9a>
	{
		if(u8Type == SOCK_STREAM)
    387a:	2901      	cmp	r1, #1
    387c:	d047      	beq.n	390e <socket+0x9e>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    387e:	240b      	movs	r4, #11
			u8Count = TCP_SOCK_MAX;
    3880:	2007      	movs	r0, #7
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    3882:	2902      	cmp	r1, #2
    3884:	d045      	beq.n	3912 <socket+0xa2>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
    3886:	24ff      	movs	r4, #255	; 0xff
    3888:	e03f      	b.n	390a <socket+0x9a>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    388a:	1c01      	adds	r1, r0, #0
    388c:	0043      	lsls	r3, r0, #1
    388e:	181b      	adds	r3, r3, r0
    3890:	009b      	lsls	r3, r3, #2
    3892:	18eb      	adds	r3, r5, r3
    3894:	799b      	ldrb	r3, [r3, #6]
    3896:	2b00      	cmp	r3, #0
    3898:	d132      	bne.n	3900 <socket+0x90>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    389a:	004b      	lsls	r3, r1, #1
    389c:	185b      	adds	r3, r3, r1
    389e:	009b      	lsls	r3, r3, #2
    38a0:	4c22      	ldr	r4, [pc, #136]	; (392c <socket+0xbc>)
    38a2:	18e3      	adds	r3, r4, r3
    38a4:	2401      	movs	r4, #1
    38a6:	719c      	strb	r4, [r3, #6]
				
				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    38a8:	4b21      	ldr	r3, [pc, #132]	; (3930 <socket+0xc0>)
    38aa:	881c      	ldrh	r4, [r3, #0]
    38ac:	3401      	adds	r4, #1
    38ae:	b2a4      	uxth	r4, r4
    38b0:	801c      	strh	r4, [r3, #0]
				if(gu16SessionID == 0)
    38b2:	881b      	ldrh	r3, [r3, #0]
    38b4:	b29b      	uxth	r3, r3
    38b6:	2b00      	cmp	r3, #0
    38b8:	d104      	bne.n	38c4 <socket+0x54>
					++gu16SessionID;
    38ba:	4b1d      	ldr	r3, [pc, #116]	; (3930 <socket+0xc0>)
    38bc:	881c      	ldrh	r4, [r3, #0]
    38be:	3401      	adds	r4, #1
    38c0:	b2a4      	uxth	r4, r4
    38c2:	801c      	strh	r4, [r3, #0]
				
				gastrSockets[u8Count].u16SessionID = gu16SessionID;
    38c4:	4b1a      	ldr	r3, [pc, #104]	; (3930 <socket+0xc0>)
    38c6:	881c      	ldrh	r4, [r3, #0]
    38c8:	b2a4      	uxth	r4, r4
    38ca:	004b      	lsls	r3, r1, #1
    38cc:	185b      	adds	r3, r3, r1
    38ce:	009b      	lsls	r3, r3, #2
    38d0:	4d16      	ldr	r5, [pc, #88]	; (392c <socket+0xbc>)
    38d2:	18eb      	adds	r3, r5, r3
    38d4:	815c      	strh	r4, [r3, #10]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    38d6:	b2c4      	uxtb	r4, r0

				if(u8Flags & SOCKET_FLAGS_SSL)
    38d8:	07d3      	lsls	r3, r2, #31
    38da:	d516      	bpl.n	390a <socket+0x9a>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    38dc:	aa05      	add	r2, sp, #20
    38de:	7014      	strb	r4, [r2, #0]
					gastrSockets[u8Count].u8SSLFlags = SSL_FLAGS_ACTIVE;
    38e0:	004b      	lsls	r3, r1, #1
    38e2:	1859      	adds	r1, r3, r1
    38e4:	0089      	lsls	r1, r1, #2
    38e6:	186b      	adds	r3, r5, r1
    38e8:	2101      	movs	r1, #1
    38ea:	71d9      	strb	r1, [r3, #7]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    38ec:	2300      	movs	r3, #0
    38ee:	9300      	str	r3, [sp, #0]
    38f0:	9301      	str	r3, [sp, #4]
    38f2:	9302      	str	r3, [sp, #8]
    38f4:	2002      	movs	r0, #2
    38f6:	2150      	movs	r1, #80	; 0x50
    38f8:	2304      	movs	r3, #4
    38fa:	4d0e      	ldr	r5, [pc, #56]	; (3934 <socket+0xc4>)
    38fc:	47a8      	blx	r5
    38fe:	e004      	b.n	390a <socket+0x9a>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    3900:	3001      	adds	r0, #1
    3902:	b2c0      	uxtb	r0, r0
    3904:	4284      	cmp	r4, r0
    3906:	d8c0      	bhi.n	388a <socket+0x1a>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET	sock = -1;
    3908:	24ff      	movs	r4, #255	; 0xff
    390a:	b260      	sxtb	r0, r4
    390c:	e00b      	b.n	3926 <socket+0xb6>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    390e:	2407      	movs	r4, #7
			u8Count = 0;
    3910:	2000      	movs	r0, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    3912:	1c01      	adds	r1, r0, #0
    3914:	0043      	lsls	r3, r0, #1
    3916:	181b      	adds	r3, r3, r0
    3918:	009b      	lsls	r3, r3, #2
    391a:	4d04      	ldr	r5, [pc, #16]	; (392c <socket+0xbc>)
    391c:	18eb      	adds	r3, r5, r3
    391e:	799b      	ldrb	r3, [r3, #6]
    3920:	2b00      	cmp	r3, #0
    3922:	d0ba      	beq.n	389a <socket+0x2a>
    3924:	e7ec      	b.n	3900 <socket+0x90>
				break;
			}
		}
	}
	return sock;
}
    3926:	b007      	add	sp, #28
    3928:	bd30      	pop	{r4, r5, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	20000aec 	.word	0x20000aec
    3930:	20000872 	.word	0x20000872
    3934:	000013fd 	.word	0x000013fd

00003938 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3938:	b530      	push	{r4, r5, lr}
    393a:	b089      	sub	sp, #36	; 0x24
    393c:	1c04      	adds	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    393e:	2900      	cmp	r1, #0
    3940:	d026      	beq.n	3990 <bind+0x58>
    3942:	2800      	cmp	r0, #0
    3944:	db26      	blt.n	3994 <bind+0x5c>
    3946:	0043      	lsls	r3, r0, #1
    3948:	181b      	adds	r3, r3, r0
    394a:	009b      	lsls	r3, r3, #2
    394c:	4815      	ldr	r0, [pc, #84]	; (39a4 <bind+0x6c>)
    394e:	18c3      	adds	r3, r0, r3
    3950:	799b      	ldrb	r3, [r3, #6]
    3952:	2b01      	cmp	r3, #1
    3954:	d120      	bne.n	3998 <bind+0x60>
    3956:	2a00      	cmp	r2, #0
    3958:	d020      	beq.n	399c <bind+0x64>
	{
		tstrBindCmd			strBind;

		/* Build the bind request. */
		strBind.sock = sock;
    395a:	ad05      	add	r5, sp, #20
    395c:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    395e:	1c28      	adds	r0, r5, #0
    3960:	2208      	movs	r2, #8
    3962:	4b11      	ldr	r3, [pc, #68]	; (39a8 <bind+0x70>)
    3964:	4798      	blx	r3
		//strBind.strAddr = *((tstrSockAddr*)pstrAddr);

		strBind.strAddr.u16Family	= strBind.strAddr.u16Family;
		strBind.strAddr.u16Port		= strBind.strAddr.u16Port;
		strBind.strAddr.u32IPAddr	= strBind.strAddr.u32IPAddr;
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    3966:	0063      	lsls	r3, r4, #1
    3968:	191c      	adds	r4, r3, r4
    396a:	00a4      	lsls	r4, r4, #2
    396c:	4b0d      	ldr	r3, [pc, #52]	; (39a4 <bind+0x6c>)
    396e:	191c      	adds	r4, r3, r4
    3970:	8963      	ldrh	r3, [r4, #10]
    3972:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_BIND, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    3974:	2300      	movs	r3, #0
    3976:	9300      	str	r3, [sp, #0]
    3978:	9301      	str	r3, [sp, #4]
    397a:	9302      	str	r3, [sp, #8]
    397c:	2002      	movs	r0, #2
    397e:	2141      	movs	r1, #65	; 0x41
    3980:	1c2a      	adds	r2, r5, #0
    3982:	230c      	movs	r3, #12
    3984:	4c09      	ldr	r4, [pc, #36]	; (39ac <bind+0x74>)
    3986:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR) 
    3988:	2800      	cmp	r0, #0
    398a:	d008      	beq.n	399e <bind+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    398c:	20f7      	movs	r0, #247	; 0xf7
    398e:	e006      	b.n	399e <bind+0x66>
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3990:	20fa      	movs	r0, #250	; 0xfa
    3992:	e004      	b.n	399e <bind+0x66>
    3994:	20fa      	movs	r0, #250	; 0xfa
    3996:	e002      	b.n	399e <bind+0x66>
    3998:	20fa      	movs	r0, #250	; 0xfa
    399a:	e000      	b.n	399e <bind+0x66>
    399c:	20fa      	movs	r0, #250	; 0xfa
		if(s8Ret != SOCK_ERR_NO_ERROR) 
		{
			s8Ret = SOCK_ERR_INVALID;
		}  
	}
	return s8Ret;
    399e:	b240      	sxtb	r0, r0
}
    39a0:	b009      	add	sp, #36	; 0x24
    39a2:	bd30      	pop	{r4, r5, pc}
    39a4:	20000aec 	.word	0x20000aec
    39a8:	00001239 	.word	0x00001239
    39ac:	000013fd 	.word	0x000013fd

000039b0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    39b0:	b570      	push	{r4, r5, r6, lr}
    39b2:	b088      	sub	sp, #32
    39b4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    39b6:	db36      	blt.n	3a26 <connect+0x76>
    39b8:	2900      	cmp	r1, #0
    39ba:	d036      	beq.n	3a2a <connect+0x7a>
    39bc:	0043      	lsls	r3, r0, #1
    39be:	181b      	adds	r3, r3, r0
    39c0:	009b      	lsls	r3, r3, #2
    39c2:	481e      	ldr	r0, [pc, #120]	; (3a3c <connect+0x8c>)
    39c4:	18c3      	adds	r3, r0, r3
    39c6:	799b      	ldrb	r3, [r3, #6]
    39c8:	2b01      	cmp	r3, #1
    39ca:	d130      	bne.n	3a2e <connect+0x7e>
    39cc:	2a00      	cmp	r2, #0
    39ce:	d030      	beq.n	3a32 <connect+0x82>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    39d0:	0063      	lsls	r3, r4, #1
    39d2:	191b      	adds	r3, r3, r4
    39d4:	009b      	lsls	r3, r3, #2
    39d6:	18c3      	adds	r3, r0, r3
    39d8:	79db      	ldrb	r3, [r3, #7]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    39da:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    39dc:	07da      	lsls	r2, r3, #31
    39de:	d507      	bpl.n	39f0 <connect+0x40>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    39e0:	0063      	lsls	r3, r4, #1
    39e2:	191b      	adds	r3, r3, r4
    39e4:	009b      	lsls	r3, r3, #2
    39e6:	18c3      	adds	r3, r0, r3
    39e8:	79da      	ldrb	r2, [r3, #7]
    39ea:	ab05      	add	r3, sp, #20
    39ec:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    39ee:	264b      	movs	r6, #75	; 0x4b
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    39f0:	ad05      	add	r5, sp, #20
    39f2:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    39f4:	1c28      	adds	r0, r5, #0
    39f6:	2208      	movs	r2, #8
    39f8:	4b11      	ldr	r3, [pc, #68]	; (3a40 <connect+0x90>)
    39fa:	4798      	blx	r3

		strConnect.strAddr.u16Family	= strConnect.strAddr.u16Family;
		strConnect.strAddr.u16Port		= strConnect.strAddr.u16Port;
		strConnect.strAddr.u32IPAddr	= strConnect.strAddr.u32IPAddr;
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    39fc:	0063      	lsls	r3, r4, #1
    39fe:	191c      	adds	r4, r3, r4
    3a00:	00a4      	lsls	r4, r4, #2
    3a02:	4b0e      	ldr	r3, [pc, #56]	; (3a3c <connect+0x8c>)
    3a04:	191c      	adds	r4, r3, r4
    3a06:	8963      	ldrh	r3, [r4, #10]
    3a08:	816b      	strh	r3, [r5, #10]
		
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3a0a:	2300      	movs	r3, #0
    3a0c:	9300      	str	r3, [sp, #0]
    3a0e:	9301      	str	r3, [sp, #4]
    3a10:	9302      	str	r3, [sp, #8]
    3a12:	2002      	movs	r0, #2
    3a14:	1c31      	adds	r1, r6, #0
    3a16:	1c2a      	adds	r2, r5, #0
    3a18:	230c      	movs	r3, #12
    3a1a:	4c0a      	ldr	r4, [pc, #40]	; (3a44 <connect+0x94>)
    3a1c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR) 
    3a1e:	2800      	cmp	r0, #0
    3a20:	d008      	beq.n	3a34 <connect+0x84>
		{
			s8Ret = SOCK_ERR_INVALID;
    3a22:	20f7      	movs	r0, #247	; 0xf7
    3a24:	e006      	b.n	3a34 <connect+0x84>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3a26:	20fa      	movs	r0, #250	; 0xfa
    3a28:	e004      	b.n	3a34 <connect+0x84>
    3a2a:	20fa      	movs	r0, #250	; 0xfa
    3a2c:	e002      	b.n	3a34 <connect+0x84>
    3a2e:	20fa      	movs	r0, #250	; 0xfa
    3a30:	e000      	b.n	3a34 <connect+0x84>
    3a32:	20fa      	movs	r0, #250	; 0xfa
		if(s8Ret != SOCK_ERR_NO_ERROR) 
		{
			s8Ret = SOCK_ERR_INVALID;
		} 
	}
	return s8Ret;
    3a34:	b240      	sxtb	r0, r0
}
    3a36:	b008      	add	sp, #32
    3a38:	bd70      	pop	{r4, r5, r6, pc}
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	20000aec 	.word	0x20000aec
    3a40:	00001239 	.word	0x00001239
    3a44:	000013fd 	.word	0x000013fd

00003a48 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3a48:	b530      	push	{r4, r5, lr}
    3a4a:	b089      	sub	sp, #36	; 0x24
    3a4c:	1c0c      	adds	r4, r1, #0
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3a4e:	2800      	cmp	r0, #0
    3a50:	db36      	blt.n	3ac0 <send+0x78>
    3a52:	2900      	cmp	r1, #0
    3a54:	d036      	beq.n	3ac4 <send+0x7c>
    3a56:	23af      	movs	r3, #175	; 0xaf
    3a58:	00db      	lsls	r3, r3, #3
    3a5a:	429a      	cmp	r2, r3
    3a5c:	d834      	bhi.n	3ac8 <send+0x80>
    3a5e:	0043      	lsls	r3, r0, #1
    3a60:	181b      	adds	r3, r3, r0
    3a62:	009b      	lsls	r3, r3, #2
    3a64:	491b      	ldr	r1, [pc, #108]	; (3ad4 <send+0x8c>)
    3a66:	18cb      	adds	r3, r1, r3
    3a68:	799b      	ldrb	r3, [r3, #6]
    3a6a:	2b01      	cmp	r3, #1
    3a6c:	d12e      	bne.n	3acc <send+0x84>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock		= sock;
    3a6e:	ab04      	add	r3, sp, #16
    3a70:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    3a72:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;
    3a74:	0041      	lsls	r1, r0, #1
    3a76:	1809      	adds	r1, r1, r0
    3a78:	0089      	lsls	r1, r1, #2
    3a7a:	4d16      	ldr	r5, [pc, #88]	; (3ad4 <send+0x8c>)
    3a7c:	1869      	adds	r1, r5, r1
    3a7e:	3108      	adds	r1, #8
    3a80:	8849      	ldrh	r1, [r1, #2]
    3a82:	8199      	strh	r1, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3a84:	2344      	movs	r3, #68	; 0x44

		strSend.sock		= sock;
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    3a86:	2806      	cmp	r0, #6
    3a88:	dc00      	bgt.n	3a8c <send+0x44>
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3a8a:	2350      	movs	r3, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3a8c:	0041      	lsls	r1, r0, #1
    3a8e:	1808      	adds	r0, r1, r0
    3a90:	0080      	lsls	r0, r0, #2
    3a92:	4910      	ldr	r1, [pc, #64]	; (3ad4 <send+0x8c>)
    3a94:	1808      	adds	r0, r1, r0
    3a96:	79c1      	ldrb	r1, [r0, #7]
    3a98:	07c8      	lsls	r0, r1, #31
    3a9a:	d401      	bmi.n	3aa0 <send+0x58>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3a9c:	2045      	movs	r0, #69	; 0x45
    3a9e:	e001      	b.n	3aa4 <send+0x5c>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3aa0:	204c      	movs	r0, #76	; 0x4c
			u16DataOffset	= SSL_TX_PACKET_OFFSET;
    3aa2:	2355      	movs	r3, #85	; 0x55
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3aa4:	2180      	movs	r1, #128	; 0x80
    3aa6:	4301      	orrs	r1, r0
    3aa8:	9400      	str	r4, [sp, #0]
    3aaa:	9201      	str	r2, [sp, #4]
    3aac:	9302      	str	r3, [sp, #8]
    3aae:	2002      	movs	r0, #2
    3ab0:	aa04      	add	r2, sp, #16
    3ab2:	2310      	movs	r3, #16
    3ab4:	4c08      	ldr	r4, [pc, #32]	; (3ad8 <send+0x90>)
    3ab6:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3ab8:	2800      	cmp	r0, #0
    3aba:	d008      	beq.n	3ace <send+0x86>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3abc:	4807      	ldr	r0, [pc, #28]	; (3adc <send+0x94>)
    3abe:	e006      	b.n	3ace <send+0x86>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3ac0:	4807      	ldr	r0, [pc, #28]	; (3ae0 <send+0x98>)
    3ac2:	e004      	b.n	3ace <send+0x86>
    3ac4:	4806      	ldr	r0, [pc, #24]	; (3ae0 <send+0x98>)
    3ac6:	e002      	b.n	3ace <send+0x86>
    3ac8:	4805      	ldr	r0, [pc, #20]	; (3ae0 <send+0x98>)
    3aca:	e000      	b.n	3ace <send+0x86>
    3acc:	4804      	ldr	r0, [pc, #16]	; (3ae0 <send+0x98>)
		if(s16Ret != SOCK_ERR_NO_ERROR)
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
    3ace:	b200      	sxth	r0, r0
}
    3ad0:	b009      	add	sp, #36	; 0x24
    3ad2:	bd30      	pop	{r4, r5, pc}
    3ad4:	20000aec 	.word	0x20000aec
    3ad8:	000013fd 	.word	0x000013fd
    3adc:	0000fff2 	.word	0x0000fff2
    3ae0:	0000fffa 	.word	0x0000fffa

00003ae4 <sendto>:

Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
    3ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae6:	4647      	mov	r7, r8
    3ae8:	b480      	push	{r7}
    3aea:	b088      	sub	sp, #32
    3aec:	1c04      	adds	r4, r0, #0
    3aee:	4688      	mov	r8, r1
    3af0:	1c17      	adds	r7, r2, #0
    3af2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3af4:	2800      	cmp	r0, #0
    3af6:	db3b      	blt.n	3b70 <sendto+0x8c>
    3af8:	2900      	cmp	r1, #0
    3afa:	d03b      	beq.n	3b74 <sendto+0x90>
    3afc:	23af      	movs	r3, #175	; 0xaf
    3afe:	00db      	lsls	r3, r3, #3
    3b00:	429a      	cmp	r2, r3
    3b02:	d839      	bhi.n	3b78 <sendto+0x94>
    3b04:	0043      	lsls	r3, r0, #1
    3b06:	181b      	adds	r3, r3, r0
    3b08:	009b      	lsls	r3, r3, #2
    3b0a:	4a20      	ldr	r2, [pc, #128]	; (3b8c <sendto+0xa8>)
    3b0c:	18d3      	adds	r3, r2, r3
    3b0e:	799b      	ldrb	r3, [r3, #6]
    3b10:	2b01      	cmp	r3, #1
    3b12:	d133      	bne.n	3b7c <sendto+0x98>
	{
		if(gastrSockets[sock].bIsUsed)
    3b14:	0043      	lsls	r3, r0, #1
    3b16:	181b      	adds	r3, r3, r0
    3b18:	009b      	lsls	r3, r3, #2
    3b1a:	18d3      	adds	r3, r2, r3
    3b1c:	799b      	ldrb	r3, [r3, #6]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d02e      	beq.n	3b80 <sendto+0x9c>
		{
			tstrSendCmd	strSendTo;

			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
    3b22:	ad04      	add	r5, sp, #16
    3b24:	1c28      	adds	r0, r5, #0
    3b26:	2100      	movs	r1, #0
    3b28:	2210      	movs	r2, #16
    3b2a:	4b19      	ldr	r3, [pc, #100]	; (3b90 <sendto+0xac>)
    3b2c:	4798      	blx	r3

			strSendTo.sock			= sock;
    3b2e:	702c      	strb	r4, [r5, #0]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    3b30:	806f      	strh	r7, [r5, #2]
			strSendTo.u16SessionID		= gastrSockets[sock].u16SessionID;
    3b32:	0063      	lsls	r3, r4, #1
    3b34:	191c      	adds	r4, r3, r4
    3b36:	00a4      	lsls	r4, r4, #2
    3b38:	4b14      	ldr	r3, [pc, #80]	; (3b8c <sendto+0xa8>)
    3b3a:	191c      	adds	r4, r3, r4
    3b3c:	8963      	ldrh	r3, [r4, #10]
    3b3e:	81ab      	strh	r3, [r5, #12]
			
			if(pstrDestAddr != NULL)
    3b40:	2e00      	cmp	r6, #0
    3b42:	d006      	beq.n	3b52 <sendto+0x6e>
			{
				struct sockaddr_in	*pstrAddr;
				pstrAddr = (void*)pstrDestAddr;
	
				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
    3b44:	ab04      	add	r3, sp, #16
    3b46:	8832      	ldrh	r2, [r6, #0]
    3b48:	809a      	strh	r2, [r3, #4]
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
    3b4a:	8872      	ldrh	r2, [r6, #2]
    3b4c:	80da      	strh	r2, [r3, #6]
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
    3b4e:	6876      	ldr	r6, [r6, #4]
    3b50:	9606      	str	r6, [sp, #24]
			}
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd), 
    3b52:	4642      	mov	r2, r8
    3b54:	9200      	str	r2, [sp, #0]
    3b56:	9701      	str	r7, [sp, #4]
    3b58:	2344      	movs	r3, #68	; 0x44
    3b5a:	9302      	str	r3, [sp, #8]
    3b5c:	2002      	movs	r0, #2
    3b5e:	21c7      	movs	r1, #199	; 0xc7
    3b60:	aa04      	add	r2, sp, #16
    3b62:	2310      	movs	r3, #16
    3b64:	4c0b      	ldr	r4, [pc, #44]	; (3b94 <sendto+0xb0>)
    3b66:	47a0      	blx	r4
				pvSendBuffer, u16SendLength, UDP_TX_PACKET_OFFSET);

			if(s16Ret != SOCK_ERR_NO_ERROR)
    3b68:	2800      	cmp	r0, #0
    3b6a:	d00a      	beq.n	3b82 <sendto+0x9e>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3b6c:	480a      	ldr	r0, [pc, #40]	; (3b98 <sendto+0xb4>)
    3b6e:	e008      	b.n	3b82 <sendto+0x9e>
Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3b70:	480a      	ldr	r0, [pc, #40]	; (3b9c <sendto+0xb8>)
    3b72:	e006      	b.n	3b82 <sendto+0x9e>
    3b74:	4809      	ldr	r0, [pc, #36]	; (3b9c <sendto+0xb8>)
    3b76:	e004      	b.n	3b82 <sendto+0x9e>
    3b78:	4808      	ldr	r0, [pc, #32]	; (3b9c <sendto+0xb8>)
    3b7a:	e002      	b.n	3b82 <sendto+0x9e>
    3b7c:	4807      	ldr	r0, [pc, #28]	; (3b9c <sendto+0xb8>)
    3b7e:	e000      	b.n	3b82 <sendto+0x9e>
    3b80:	4806      	ldr	r0, [pc, #24]	; (3b9c <sendto+0xb8>)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
    3b82:	b200      	sxth	r0, r0
}
    3b84:	b008      	add	sp, #32
    3b86:	bc04      	pop	{r2}
    3b88:	4690      	mov	r8, r2
    3b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8c:	20000aec 	.word	0x20000aec
    3b90:	0000124d 	.word	0x0000124d
    3b94:	000013fd 	.word	0x000013fd
    3b98:	0000fff2 	.word	0x0000fff2
    3b9c:	0000fffa 	.word	0x0000fffa

00003ba0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3ba0:	b570      	push	{r4, r5, r6, lr}
    3ba2:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3ba4:	2800      	cmp	r0, #0
    3ba6:	db3b      	blt.n	3c20 <recv+0x80>
    3ba8:	2900      	cmp	r1, #0
    3baa:	d03b      	beq.n	3c24 <recv+0x84>
    3bac:	2a00      	cmp	r2, #0
    3bae:	d03b      	beq.n	3c28 <recv+0x88>
    3bb0:	0044      	lsls	r4, r0, #1
    3bb2:	1824      	adds	r4, r4, r0
    3bb4:	00a4      	lsls	r4, r4, #2
    3bb6:	4d1f      	ldr	r5, [pc, #124]	; (3c34 <recv+0x94>)
    3bb8:	192c      	adds	r4, r5, r4
    3bba:	79a4      	ldrb	r4, [r4, #6]
    3bbc:	2c01      	cmp	r4, #1
    3bbe:	d135      	bne.n	3c2c <recv+0x8c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3bc0:	1c2c      	adds	r4, r5, #0
    3bc2:	0045      	lsls	r5, r0, #1
    3bc4:	182e      	adds	r6, r5, r0
    3bc6:	00b6      	lsls	r6, r6, #2
    3bc8:	5131      	str	r1, [r6, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3bca:	19a1      	adds	r1, r4, r6
    3bcc:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3bce:	7a09      	ldrb	r1, [r1, #8]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    3bd0:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    3bd2:	2900      	cmp	r1, #0
    3bd4:	d12b      	bne.n	3c2e <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
    3bd6:	19a2      	adds	r2, r4, r6
    3bd8:	2101      	movs	r1, #1
    3bda:	7211      	strb	r1, [r2, #8]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3bdc:	79d2      	ldrb	r2, [r2, #7]
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3bde:	214d      	movs	r1, #77	; 0x4d
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3be0:	07d4      	lsls	r4, r2, #31
    3be2:	d400      	bmi.n	3be6 <recv+0x46>
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3be4:	2146      	movs	r1, #70	; 0x46
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3be6:	2b00      	cmp	r3, #0
    3be8:	d103      	bne.n	3bf2 <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3bea:	2301      	movs	r3, #1
    3bec:	425b      	negs	r3, r3
    3bee:	9304      	str	r3, [sp, #16]
    3bf0:	e000      	b.n	3bf4 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3bf2:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    3bf4:	aa04      	add	r2, sp, #16
    3bf6:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3bf8:	0043      	lsls	r3, r0, #1
    3bfa:	1818      	adds	r0, r3, r0
    3bfc:	0080      	lsls	r0, r0, #2
    3bfe:	4b0d      	ldr	r3, [pc, #52]	; (3c34 <recv+0x94>)
    3c00:	1818      	adds	r0, r3, r0
    3c02:	8943      	ldrh	r3, [r0, #10]
    3c04:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3c06:	2300      	movs	r3, #0
    3c08:	9300      	str	r3, [sp, #0]
    3c0a:	9301      	str	r3, [sp, #4]
    3c0c:	9302      	str	r3, [sp, #8]
    3c0e:	2002      	movs	r0, #2
    3c10:	2308      	movs	r3, #8
    3c12:	4c09      	ldr	r4, [pc, #36]	; (3c38 <recv+0x98>)
    3c14:	47a0      	blx	r4
    3c16:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3c18:	2800      	cmp	r0, #0
    3c1a:	d008      	beq.n	3c2e <recv+0x8e>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3c1c:	4a07      	ldr	r2, [pc, #28]	; (3c3c <recv+0x9c>)
    3c1e:	e006      	b.n	3c2e <recv+0x8e>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3c20:	4a07      	ldr	r2, [pc, #28]	; (3c40 <recv+0xa0>)
    3c22:	e004      	b.n	3c2e <recv+0x8e>
    3c24:	4a06      	ldr	r2, [pc, #24]	; (3c40 <recv+0xa0>)
    3c26:	e002      	b.n	3c2e <recv+0x8e>
    3c28:	4a05      	ldr	r2, [pc, #20]	; (3c40 <recv+0xa0>)
    3c2a:	e000      	b.n	3c2e <recv+0x8e>
    3c2c:	4a04      	ldr	r2, [pc, #16]	; (3c40 <recv+0xa0>)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
    3c2e:	b210      	sxth	r0, r2
}
    3c30:	b006      	add	sp, #24
    3c32:	bd70      	pop	{r4, r5, r6, pc}
    3c34:	20000aec 	.word	0x20000aec
    3c38:	000013fd 	.word	0x000013fd
    3c3c:	0000fff2 	.word	0x0000fff2
    3c40:	0000fffa 	.word	0x0000fffa

00003c44 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3c44:	b530      	push	{r4, r5, lr}
    3c46:	b087      	sub	sp, #28
    3c48:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3c4a:	db2e      	blt.n	3caa <close+0x66>
    3c4c:	0043      	lsls	r3, r0, #1
    3c4e:	181b      	adds	r3, r3, r0
    3c50:	009b      	lsls	r3, r3, #2
    3c52:	4a19      	ldr	r2, [pc, #100]	; (3cb8 <close+0x74>)
    3c54:	18d3      	adds	r3, r2, r3
    3c56:	799b      	ldrb	r3, [r3, #6]
    3c58:	2b01      	cmp	r3, #1
    3c5a:	d128      	bne.n	3cae <close+0x6a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3c5c:	aa05      	add	r2, sp, #20
    3c5e:	7010      	strb	r0, [r2, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3c60:	0043      	lsls	r3, r0, #1
    3c62:	181b      	adds	r3, r3, r0
    3c64:	009b      	lsls	r3, r3, #2
    3c66:	4914      	ldr	r1, [pc, #80]	; (3cb8 <close+0x74>)
    3c68:	18cb      	adds	r3, r1, r3
    3c6a:	8958      	ldrh	r0, [r3, #10]
    3c6c:	8050      	strh	r0, [r2, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3c6e:	2200      	movs	r2, #0
    3c70:	719a      	strb	r2, [r3, #6]
		gastrSockets[sock].u16SessionID =0;
    3c72:	815a      	strh	r2, [r3, #10]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c74:	79db      	ldrb	r3, [r3, #7]
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3c76:	214e      	movs	r1, #78	; 0x4e
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c78:	07da      	lsls	r2, r3, #31
    3c7a:	d400      	bmi.n	3c7e <close+0x3a>
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3c7c:	2149      	movs	r1, #73	; 0x49
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3c7e:	2300      	movs	r3, #0
    3c80:	9300      	str	r3, [sp, #0]
    3c82:	9301      	str	r3, [sp, #4]
    3c84:	9302      	str	r3, [sp, #8]
    3c86:	2002      	movs	r0, #2
    3c88:	aa05      	add	r2, sp, #20
    3c8a:	2304      	movs	r3, #4
    3c8c:	4d0b      	ldr	r5, [pc, #44]	; (3cbc <close+0x78>)
    3c8e:	47a8      	blx	r5
    3c90:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3c92:	d000      	beq.n	3c96 <close+0x52>
		{
			s8Ret = SOCK_ERR_INVALID;
    3c94:	25f7      	movs	r5, #247	; 0xf7
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3c96:	0060      	lsls	r0, r4, #1
    3c98:	1900      	adds	r0, r0, r4
    3c9a:	0080      	lsls	r0, r0, #2
    3c9c:	4b06      	ldr	r3, [pc, #24]	; (3cb8 <close+0x74>)
    3c9e:	18c0      	adds	r0, r0, r3
    3ca0:	2100      	movs	r1, #0
    3ca2:	220c      	movs	r2, #12
    3ca4:	4b06      	ldr	r3, [pc, #24]	; (3cc0 <close+0x7c>)
    3ca6:	4798      	blx	r3
    3ca8:	e002      	b.n	3cb0 <close+0x6c>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3caa:	25fa      	movs	r5, #250	; 0xfa
    3cac:	e000      	b.n	3cb0 <close+0x6c>
    3cae:	25fa      	movs	r5, #250	; 0xfa
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
    3cb0:	b268      	sxtb	r0, r5
}
    3cb2:	b007      	add	sp, #28
    3cb4:	bd30      	pop	{r4, r5, pc}
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	20000aec 	.word	0x20000aec
    3cbc:	000013fd 	.word	0x000013fd
    3cc0:	0000124d 	.word	0x0000124d

00003cc4 <recvfrom>:

Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3cc4:	b570      	push	{r4, r5, r6, lr}
    3cc6:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3cc8:	2800      	cmp	r0, #0
    3cca:	db40      	blt.n	3d4e <recvfrom+0x8a>
    3ccc:	2900      	cmp	r1, #0
    3cce:	d040      	beq.n	3d52 <recvfrom+0x8e>
    3cd0:	2a00      	cmp	r2, #0
    3cd2:	d040      	beq.n	3d56 <recvfrom+0x92>
    3cd4:	0044      	lsls	r4, r0, #1
    3cd6:	1824      	adds	r4, r4, r0
    3cd8:	00a4      	lsls	r4, r4, #2
    3cda:	4d22      	ldr	r5, [pc, #136]	; (3d64 <recvfrom+0xa0>)
    3cdc:	192c      	adds	r4, r5, r4
    3cde:	79a4      	ldrb	r4, [r4, #6]
    3ce0:	2c01      	cmp	r4, #1
    3ce2:	d13a      	bne.n	3d5a <recvfrom+0x96>
	{
		if(gastrSockets[sock].bIsUsed)
    3ce4:	0044      	lsls	r4, r0, #1
    3ce6:	1824      	adds	r4, r4, r0
    3ce8:	00a4      	lsls	r4, r4, #2
    3cea:	192c      	adds	r4, r5, r4
    3cec:	79a5      	ldrb	r5, [r4, #6]
Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
    3cee:	2400      	movs	r4, #0
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		if(gastrSockets[sock].bIsUsed)
    3cf0:	2d00      	cmp	r5, #0
    3cf2:	d033      	beq.n	3d5c <recvfrom+0x98>
		{
			s16Ret = SOCK_ERR_NO_ERROR;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
    3cf4:	4c1b      	ldr	r4, [pc, #108]	; (3d64 <recvfrom+0xa0>)
    3cf6:	0045      	lsls	r5, r0, #1
    3cf8:	182e      	adds	r6, r5, r0
    3cfa:	00b6      	lsls	r6, r6, #2
    3cfc:	5131      	str	r1, [r6, r4]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
    3cfe:	19a1      	adds	r1, r4, r6
    3d00:	808a      	strh	r2, [r1, #4]

			if(!gastrSockets[sock].bIsRecvPending)
    3d02:	7a0a      	ldrb	r2, [r1, #8]
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		if(gastrSockets[sock].bIsUsed)
		{
			s16Ret = SOCK_ERR_NO_ERROR;
    3d04:	2400      	movs	r4, #0
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
			gastrSockets[sock].u16UserBufferSize = u16BufLen;

			if(!gastrSockets[sock].bIsRecvPending)
    3d06:	2a00      	cmp	r2, #0
    3d08:	d128      	bne.n	3d5c <recvfrom+0x98>
			{
				tstrRecvCmd	strRecv;

				gastrSockets[sock].bIsRecvPending = 1;
    3d0a:	4916      	ldr	r1, [pc, #88]	; (3d64 <recvfrom+0xa0>)
    3d0c:	198a      	adds	r2, r1, r6
    3d0e:	2101      	movs	r1, #1
    3d10:	7211      	strb	r1, [r2, #8]

				/* Check the timeout value. */
				if(u32Timeoutmsec == 0)
    3d12:	2b00      	cmp	r3, #0
    3d14:	d103      	bne.n	3d1e <recvfrom+0x5a>
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3d16:	2301      	movs	r3, #1
    3d18:	425b      	negs	r3, r3
    3d1a:	9304      	str	r3, [sp, #16]
    3d1c:	e000      	b.n	3d20 <recvfrom+0x5c>
				else
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3d1e:	9304      	str	r3, [sp, #16]
				strRecv.sock = sock;
    3d20:	aa04      	add	r2, sp, #16
    3d22:	7110      	strb	r0, [r2, #4]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3d24:	0043      	lsls	r3, r0, #1
    3d26:	1818      	adds	r0, r3, r0
    3d28:	0080      	lsls	r0, r0, #2
    3d2a:	4b0e      	ldr	r3, [pc, #56]	; (3d64 <recvfrom+0xa0>)
    3d2c:	1818      	adds	r0, r3, r0
    3d2e:	8943      	ldrh	r3, [r0, #10]
    3d30:	80d3      	strh	r3, [r2, #6]
				
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3d32:	2300      	movs	r3, #0
    3d34:	9300      	str	r3, [sp, #0]
    3d36:	9301      	str	r3, [sp, #4]
    3d38:	9302      	str	r3, [sp, #8]
    3d3a:	2002      	movs	r0, #2
    3d3c:	2148      	movs	r1, #72	; 0x48
    3d3e:	2308      	movs	r3, #8
    3d40:	4c09      	ldr	r4, [pc, #36]	; (3d68 <recvfrom+0xa4>)
    3d42:	47a0      	blx	r4
    3d44:	2400      	movs	r4, #0
				if(s16Ret != SOCK_ERR_NO_ERROR)
    3d46:	2800      	cmp	r0, #0
    3d48:	d008      	beq.n	3d5c <recvfrom+0x98>
				{
					s16Ret = SOCK_ERR_BUFFER_FULL;
    3d4a:	4c08      	ldr	r4, [pc, #32]	; (3d6c <recvfrom+0xa8>)
    3d4c:	e006      	b.n	3d5c <recvfrom+0x98>
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
    3d4e:	4c08      	ldr	r4, [pc, #32]	; (3d70 <recvfrom+0xac>)
    3d50:	e004      	b.n	3d5c <recvfrom+0x98>
    3d52:	4c07      	ldr	r4, [pc, #28]	; (3d70 <recvfrom+0xac>)
    3d54:	e002      	b.n	3d5c <recvfrom+0x98>
    3d56:	4c06      	ldr	r4, [pc, #24]	; (3d70 <recvfrom+0xac>)
    3d58:	e000      	b.n	3d5c <recvfrom+0x98>
    3d5a:	4c05      	ldr	r4, [pc, #20]	; (3d70 <recvfrom+0xac>)
	}
	return s16Ret;
    3d5c:	b220      	sxth	r0, r4
}
    3d5e:	b006      	add	sp, #24
    3d60:	bd70      	pop	{r4, r5, r6, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	20000aec 	.word	0x20000aec
    3d68:	000013fd 	.word	0x000013fd
    3d6c:	0000fff2 	.word	0x0000fff2
    3d70:	0000fffa 	.word	0x0000fffa

00003d74 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d76:	b083      	sub	sp, #12
	uint8	tmp;
	uint32	u32IP = 0;
    3d78:	2300      	movs	r3, #0
    3d7a:	9301      	str	r3, [sp, #4]
    3d7c:	2400      	movs	r4, #0
	for(i = 0; i < 4; ++i) 
	{
		j = 0;
		do 
		{
			c = *pcIpAddr;
    3d7e:	2604      	movs	r6, #4
    3d80:	2500      	movs	r5, #0
    3d82:	7803      	ldrb	r3, [r0, #0]
    3d84:	3001      	adds	r0, #1
    3d86:	1c31      	adds	r1, r6, #0
    3d88:	1c2a      	adds	r2, r5, #0
			++j;
			if(j > 4) 
			{
				return 0;
			}
			if(c == '.' || c == 0) 
    3d8a:	2b2e      	cmp	r3, #46	; 0x2e
    3d8c:	d01f      	beq.n	3dce <nmi_inet_addr+0x5a>
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d020      	beq.n	3dd4 <nmi_inet_addr+0x60>
			{
				au8IP[i] = tmp;
				tmp = 0;
			} 
			else if(c >= '0' && c <= '9') 
    3d92:	3b30      	subs	r3, #48	; 0x30
    3d94:	b2db      	uxtb	r3, r3
    3d96:	2b09      	cmp	r3, #9
    3d98:	d815      	bhi.n	3dc6 <nmi_inet_addr+0x52>
			{
				tmp = (tmp * 10) + (c - '0');
    3d9a:	0097      	lsls	r7, r2, #2
    3d9c:	19d2      	adds	r2, r2, r7
    3d9e:	0052      	lsls	r2, r2, #1
    3da0:	18d2      	adds	r2, r2, r3
    3da2:	b2d2      	uxtb	r2, r2
	for(i = 0; i < 4; ++i) 
	{
		j = 0;
		do 
		{
			c = *pcIpAddr;
    3da4:	7803      	ldrb	r3, [r0, #0]
    3da6:	3901      	subs	r1, #1
    3da8:	b2c9      	uxtb	r1, r1
    3daa:	3001      	adds	r0, #1
			++j;
			if(j > 4) 
    3dac:	2900      	cmp	r1, #0
    3dae:	d1ec      	bne.n	3d8a <nmi_inet_addr+0x16>
    3db0:	e00b      	b.n	3dca <nmi_inet_addr+0x56>
    3db2:	3401      	adds	r4, #1
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i) 
    3db4:	2c04      	cmp	r4, #4
    3db6:	d1e4      	bne.n	3d82 <nmi_inet_addr+0xe>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3db8:	a801      	add	r0, sp, #4
    3dba:	4669      	mov	r1, sp
    3dbc:	2204      	movs	r2, #4
    3dbe:	4b08      	ldr	r3, [pc, #32]	; (3de0 <nmi_inet_addr+0x6c>)
    3dc0:	4798      	blx	r3
	return u32IP;
    3dc2:	9801      	ldr	r0, [sp, #4]
    3dc4:	e009      	b.n	3dda <nmi_inet_addr+0x66>
			{
				tmp = (tmp * 10) + (c - '0');
			} 
			else 
			{
				return 0;
    3dc6:	2000      	movs	r0, #0
    3dc8:	e007      	b.n	3dda <nmi_inet_addr+0x66>
		{
			c = *pcIpAddr;
			++j;
			if(j > 4) 
			{
				return 0;
    3dca:	2000      	movs	r0, #0
    3dcc:	e005      	b.n	3dda <nmi_inet_addr+0x66>
			}
			if(c == '.' || c == 0) 
			{
				au8IP[i] = tmp;
    3dce:	466b      	mov	r3, sp
    3dd0:	54e2      	strb	r2, [r4, r3]
    3dd2:	e7ee      	b.n	3db2 <nmi_inet_addr+0x3e>
    3dd4:	466b      	mov	r3, sp
    3dd6:	54e2      	strb	r2, [r4, r3]
    3dd8:	e7eb      	b.n	3db2 <nmi_inet_addr+0x3e>
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3dda:	b003      	add	sp, #12
    3ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	00001239 	.word	0x00001239

00003de4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3de4:	b510      	push	{r4, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	1c04      	adds	r4, r0, #0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3dea:	4b0d      	ldr	r3, [pc, #52]	; (3e20 <gethostbyname+0x3c>)
    3dec:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3dee:	b2c3      	uxtb	r3, r0
    3df0:	2b40      	cmp	r3, #64	; 0x40
    3df2:	d80e      	bhi.n	3e12 <gethostbyname+0x2e>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3df4:	23ff      	movs	r3, #255	; 0xff
    3df6:	4018      	ands	r0, r3
    3df8:	1c43      	adds	r3, r0, #1
    3dfa:	2100      	movs	r1, #0
    3dfc:	9100      	str	r1, [sp, #0]
    3dfe:	9101      	str	r1, [sp, #4]
    3e00:	9102      	str	r1, [sp, #8]
    3e02:	2002      	movs	r0, #2
    3e04:	21ca      	movs	r1, #202	; 0xca
    3e06:	1c22      	adds	r2, r4, #0
    3e08:	4c06      	ldr	r4, [pc, #24]	; (3e24 <gethostbyname+0x40>)
    3e0a:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d003      	beq.n	3e18 <gethostbyname+0x34>
    3e10:	e001      	b.n	3e16 <gethostbyname+0x32>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3e12:	20fa      	movs	r0, #250	; 0xfa
    3e14:	e000      	b.n	3e18 <gethostbyname+0x34>
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
		if(s8Err != SOCK_ERR_NO_ERROR)
		{
			s8Err = SOCK_ERR_INVALID;
    3e16:	20f7      	movs	r0, #247	; 0xf7
		}
	}
	return s8Err;
    3e18:	b240      	sxtb	r0, r0
}
    3e1a:	b004      	add	sp, #16
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	0000125d 	.word	0x0000125d
    3e24:	000013fd 	.word	0x000013fd

00003e28 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3e28:	4b0c      	ldr	r3, [pc, #48]	; (3e5c <cpu_irq_enter_critical+0x34>)
    3e2a:	681b      	ldr	r3, [r3, #0]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d110      	bne.n	3e52 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e30:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3e34:	2b00      	cmp	r3, #0
    3e36:	d109      	bne.n	3e4c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3e38:	b672      	cpsid	i
    3e3a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e3e:	2200      	movs	r2, #0
    3e40:	4b07      	ldr	r3, [pc, #28]	; (3e60 <cpu_irq_enter_critical+0x38>)
    3e42:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3e44:	2201      	movs	r2, #1
    3e46:	4b07      	ldr	r3, [pc, #28]	; (3e64 <cpu_irq_enter_critical+0x3c>)
    3e48:	701a      	strb	r2, [r3, #0]
    3e4a:	e002      	b.n	3e52 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3e4c:	2200      	movs	r2, #0
    3e4e:	4b05      	ldr	r3, [pc, #20]	; (3e64 <cpu_irq_enter_critical+0x3c>)
    3e50:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3e52:	4b02      	ldr	r3, [pc, #8]	; (3e5c <cpu_irq_enter_critical+0x34>)
    3e54:	681a      	ldr	r2, [r3, #0]
    3e56:	3201      	adds	r2, #1
    3e58:	601a      	str	r2, [r3, #0]
}
    3e5a:	4770      	bx	lr
    3e5c:	20000874 	.word	0x20000874
    3e60:	20000014 	.word	0x20000014
    3e64:	20000878 	.word	0x20000878

00003e68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3e68:	4b08      	ldr	r3, [pc, #32]	; (3e8c <cpu_irq_leave_critical+0x24>)
    3e6a:	681a      	ldr	r2, [r3, #0]
    3e6c:	3a01      	subs	r2, #1
    3e6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	2b00      	cmp	r3, #0
    3e74:	d109      	bne.n	3e8a <cpu_irq_leave_critical+0x22>
    3e76:	4b06      	ldr	r3, [pc, #24]	; (3e90 <cpu_irq_leave_critical+0x28>)
    3e78:	781b      	ldrb	r3, [r3, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d005      	beq.n	3e8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3e7e:	2201      	movs	r2, #1
    3e80:	4b04      	ldr	r3, [pc, #16]	; (3e94 <cpu_irq_leave_critical+0x2c>)
    3e82:	701a      	strb	r2, [r3, #0]
    3e84:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3e88:	b662      	cpsie	i
	}
}
    3e8a:	4770      	bx	lr
    3e8c:	20000874 	.word	0x20000874
    3e90:	20000878 	.word	0x20000878
    3e94:	20000014 	.word	0x20000014

00003e98 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3e9c:	ac01      	add	r4, sp, #4
    3e9e:	2501      	movs	r5, #1
    3ea0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3ea2:	2700      	movs	r7, #0
    3ea4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3ea6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3ea8:	2017      	movs	r0, #23
    3eaa:	1c21      	adds	r1, r4, #0
    3eac:	4e06      	ldr	r6, [pc, #24]	; (3ec8 <system_board_init+0x30>)
    3eae:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3eb0:	2280      	movs	r2, #128	; 0x80
    3eb2:	0412      	lsls	r2, r2, #16
    3eb4:	4b05      	ldr	r3, [pc, #20]	; (3ecc <system_board_init+0x34>)
    3eb6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3eb8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3eba:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3ebc:	2037      	movs	r0, #55	; 0x37
    3ebe:	1c21      	adds	r1, r4, #0
    3ec0:	47b0      	blx	r6
}
    3ec2:	b003      	add	sp, #12
    3ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	0000411d 	.word	0x0000411d
    3ecc:	41004400 	.word	0x41004400

00003ed0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    3ed0:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    3ed2:	0080      	lsls	r0, r0, #2
    3ed4:	4b10      	ldr	r3, [pc, #64]	; (3f18 <_ac_interrupt_handler+0x48>)
    3ed6:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    3ed8:	6822      	ldr	r2, [r4, #0]
    3eda:	7995      	ldrb	r5, [r2, #6]
	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
    3edc:	7e23      	ldrb	r3, [r4, #24]
    3ede:	401d      	ands	r5, r3
    3ee0:	7e63      	ldrb	r3, [r4, #25]
    3ee2:	401d      	ands	r5, r3
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    3ee4:	07eb      	lsls	r3, r5, #31
    3ee6:	d505      	bpl.n	3ef4 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    3ee8:	1c20      	adds	r0, r4, #0
    3eea:	6862      	ldr	r2, [r4, #4]
    3eec:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    3eee:	2301      	movs	r3, #1
    3ef0:	6822      	ldr	r2, [r4, #0]
    3ef2:	7193      	strb	r3, [r2, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    3ef4:	07ab      	lsls	r3, r5, #30
    3ef6:	d505      	bpl.n	3f04 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    3ef8:	1c20      	adds	r0, r4, #0
    3efa:	68a2      	ldr	r2, [r4, #8]
    3efc:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    3efe:	2302      	movs	r3, #2
    3f00:	6822      	ldr	r2, [r4, #0]
    3f02:	7193      	strb	r3, [r2, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    3f04:	06eb      	lsls	r3, r5, #27
    3f06:	d505      	bpl.n	3f14 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    3f08:	1c20      	adds	r0, r4, #0
    3f0a:	6962      	ldr	r2, [r4, #20]
    3f0c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    3f0e:	6823      	ldr	r3, [r4, #0]
    3f10:	2210      	movs	r2, #16
    3f12:	719a      	strb	r2, [r3, #6]
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#endif /* (AC_NUM_CMP > 2) */
}
    3f14:	bd38      	pop	{r3, r4, r5, pc}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	20000b78 	.word	0x20000b78

00003f1c <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
    3f1c:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
    3f1e:	2000      	movs	r0, #0
    3f20:	4b01      	ldr	r3, [pc, #4]	; (3f28 <AC_Handler+0xc>)
    3f22:	4798      	blx	r3
}
    3f24:	bd08      	pop	{r3, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	00003ed1 	.word	0x00003ed1

00003f2c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f2c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3f2e:	2a00      	cmp	r2, #0
    3f30:	d10f      	bne.n	3f52 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    3f32:	008b      	lsls	r3, r1, #2
    3f34:	4a08      	ldr	r2, [pc, #32]	; (3f58 <extint_register_callback+0x2c>)
    3f36:	589a      	ldr	r2, [r3, r2]
    3f38:	2a00      	cmp	r2, #0
    3f3a:	d104      	bne.n	3f46 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    3f3c:	1c19      	adds	r1, r3, #0
    3f3e:	4b06      	ldr	r3, [pc, #24]	; (3f58 <extint_register_callback+0x2c>)
    3f40:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    3f42:	2300      	movs	r3, #0
    3f44:	e005      	b.n	3f52 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3f46:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    3f48:	1a12      	subs	r2, r2, r0
    3f4a:	1e50      	subs	r0, r2, #1
    3f4c:	4182      	sbcs	r2, r0
    3f4e:	4252      	negs	r2, r2
    3f50:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3f52:	1c18      	adds	r0, r3, #0
    3f54:	4770      	bx	lr
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	20000b80 	.word	0x20000b80

00003f5c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f5c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f5e:	2900      	cmp	r1, #0
    3f60:	d107      	bne.n	3f72 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3f62:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3f64:	281f      	cmp	r0, #31
    3f66:	d800      	bhi.n	3f6a <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3f68:	4b03      	ldr	r3, [pc, #12]	; (3f78 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    3f6a:	2201      	movs	r2, #1
    3f6c:	4082      	lsls	r2, r0
    3f6e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f70:	2300      	movs	r3, #0
}
    3f72:	1c18      	adds	r0, r3, #0
    3f74:	4770      	bx	lr
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	40001800 	.word	0x40001800

00003f7c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f7c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f7e:	2900      	cmp	r1, #0
    3f80:	d107      	bne.n	3f92 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    3f82:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3f84:	281f      	cmp	r0, #31
    3f86:	d800      	bhi.n	3f8a <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3f88:	4b03      	ldr	r3, [pc, #12]	; (3f98 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    3f8a:	2201      	movs	r2, #1
    3f8c:	4082      	lsls	r2, r0
    3f8e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f90:	2300      	movs	r3, #0
}
    3f92:	1c18      	adds	r0, r3, #0
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	40001800 	.word	0x40001800

00003f9c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3f9c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f9e:	2200      	movs	r2, #0
    3fa0:	4b16      	ldr	r3, [pc, #88]	; (3ffc <EIC_Handler+0x60>)
    3fa2:	701a      	strb	r2, [r3, #0]
    3fa4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fa6:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3fa8:	4d15      	ldr	r5, [pc, #84]	; (4000 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3faa:	4c14      	ldr	r4, [pc, #80]	; (3ffc <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3fac:	2b1f      	cmp	r3, #31
    3fae:	d910      	bls.n	3fd2 <EIC_Handler+0x36>
    3fb0:	e019      	b.n	3fe6 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3fb2:	4914      	ldr	r1, [pc, #80]	; (4004 <EIC_Handler+0x68>)
    3fb4:	e000      	b.n	3fb8 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    3fb6:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3fb8:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3fba:	009b      	lsls	r3, r3, #2
    3fbc:	595b      	ldr	r3, [r3, r5]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d000      	beq.n	3fc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3fc2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3fc4:	7823      	ldrb	r3, [r4, #0]
    3fc6:	3301      	adds	r3, #1
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	7023      	strb	r3, [r4, #0]
    3fcc:	2b0f      	cmp	r3, #15
    3fce:	d814      	bhi.n	3ffa <EIC_Handler+0x5e>
    3fd0:	e7ec      	b.n	3fac <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fd2:	1c32      	adds	r2, r6, #0
    3fd4:	401a      	ands	r2, r3
    3fd6:	2101      	movs	r1, #1
    3fd8:	4091      	lsls	r1, r2
    3fda:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    3fdc:	4909      	ldr	r1, [pc, #36]	; (4004 <EIC_Handler+0x68>)
    3fde:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3fe0:	4211      	tst	r1, r2
    3fe2:	d1e6      	bne.n	3fb2 <EIC_Handler+0x16>
    3fe4:	e7ee      	b.n	3fc4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fe6:	1c32      	adds	r2, r6, #0
    3fe8:	401a      	ands	r2, r3
    3fea:	2101      	movs	r1, #1
    3fec:	4091      	lsls	r1, r2
    3fee:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    3ff0:	2100      	movs	r1, #0
    3ff2:	6909      	ldr	r1, [r1, #16]
    3ff4:	4211      	tst	r1, r2
    3ff6:	d1de      	bne.n	3fb6 <EIC_Handler+0x1a>
    3ff8:	e7e4      	b.n	3fc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	20000b7c 	.word	0x20000b7c
    4000:	20000b80 	.word	0x20000b80
    4004:	40001800 	.word	0x40001800

00004008 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4008:	4b05      	ldr	r3, [pc, #20]	; (4020 <_extint_enable+0x18>)
    400a:	7819      	ldrb	r1, [r3, #0]
    400c:	2202      	movs	r2, #2
    400e:	430a      	orrs	r2, r1
    4010:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4012:	1c1a      	adds	r2, r3, #0
    4014:	7853      	ldrb	r3, [r2, #1]
    4016:	b25b      	sxtb	r3, r3
    4018:	2b00      	cmp	r3, #0
    401a:	dbfb      	blt.n	4014 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    401c:	4770      	bx	lr
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	40001800 	.word	0x40001800

00004024 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4024:	b500      	push	{lr}
    4026:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4028:	4b12      	ldr	r3, [pc, #72]	; (4074 <_system_extint_init+0x50>)
    402a:	6999      	ldr	r1, [r3, #24]
    402c:	2240      	movs	r2, #64	; 0x40
    402e:	430a      	orrs	r2, r1
    4030:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4032:	a901      	add	r1, sp, #4
    4034:	2300      	movs	r3, #0
    4036:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4038:	2005      	movs	r0, #5
    403a:	4b0f      	ldr	r3, [pc, #60]	; (4078 <_system_extint_init+0x54>)
    403c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    403e:	2005      	movs	r0, #5
    4040:	4b0e      	ldr	r3, [pc, #56]	; (407c <_system_extint_init+0x58>)
    4042:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4044:	4b0e      	ldr	r3, [pc, #56]	; (4080 <_system_extint_init+0x5c>)
    4046:	7819      	ldrb	r1, [r3, #0]
    4048:	2201      	movs	r2, #1
    404a:	430a      	orrs	r2, r1
    404c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    404e:	1c1a      	adds	r2, r3, #0
    4050:	7853      	ldrb	r3, [r2, #1]
    4052:	b25b      	sxtb	r3, r3
    4054:	2b00      	cmp	r3, #0
    4056:	dbfb      	blt.n	4050 <_system_extint_init+0x2c>
    4058:	4b0a      	ldr	r3, [pc, #40]	; (4084 <_system_extint_init+0x60>)
    405a:	1c19      	adds	r1, r3, #0
    405c:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    405e:	2200      	movs	r2, #0
    4060:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4062:	428b      	cmp	r3, r1
    4064:	d1fc      	bne.n	4060 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4066:	2210      	movs	r2, #16
    4068:	4b07      	ldr	r3, [pc, #28]	; (4088 <_system_extint_init+0x64>)
    406a:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    406c:	4b07      	ldr	r3, [pc, #28]	; (408c <_system_extint_init+0x68>)
    406e:	4798      	blx	r3
}
    4070:	b003      	add	sp, #12
    4072:	bd00      	pop	{pc}
    4074:	40000400 	.word	0x40000400
    4078:	00005a89 	.word	0x00005a89
    407c:	000059fd 	.word	0x000059fd
    4080:	40001800 	.word	0x40001800
    4084:	20000b80 	.word	0x20000b80
    4088:	e000e100 	.word	0xe000e100
    408c:	00004009 	.word	0x00004009

00004090 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4090:	2300      	movs	r3, #0
    4092:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4094:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4096:	2201      	movs	r2, #1
    4098:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    409a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    409c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    409e:	2302      	movs	r3, #2
    40a0:	72c3      	strb	r3, [r0, #11]
}
    40a2:	4770      	bx	lr

000040a4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    40a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40a6:	b083      	sub	sp, #12
    40a8:	1c05      	adds	r5, r0, #0
    40aa:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40ac:	a901      	add	r1, sp, #4
    40ae:	2300      	movs	r3, #0
    40b0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    40b2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    40b4:	6863      	ldr	r3, [r4, #4]
    40b6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    40b8:	7a23      	ldrb	r3, [r4, #8]
    40ba:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    40bc:	7820      	ldrb	r0, [r4, #0]
    40be:	4b15      	ldr	r3, [pc, #84]	; (4114 <extint_chan_set_config+0x70>)
    40c0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    40c2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    40c4:	2d1f      	cmp	r5, #31
    40c6:	d800      	bhi.n	40ca <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    40c8:	4b13      	ldr	r3, [pc, #76]	; (4118 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    40ca:	2107      	movs	r1, #7
    40cc:	4029      	ands	r1, r5
    40ce:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    40d0:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    40d2:	7aa2      	ldrb	r2, [r4, #10]
    40d4:	2a00      	cmp	r2, #0
    40d6:	d001      	beq.n	40dc <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    40d8:	2208      	movs	r2, #8
    40da:	4310      	orrs	r0, r2
    40dc:	08ea      	lsrs	r2, r5, #3
    40de:	0092      	lsls	r2, r2, #2
    40e0:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40e2:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    40e4:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    40e6:	270f      	movs	r7, #15
    40e8:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40ea:	43be      	bics	r6, r7
    40ec:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    40ee:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40f0:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    40f2:	7a62      	ldrb	r2, [r4, #9]
    40f4:	2a00      	cmp	r2, #0
    40f6:	d006      	beq.n	4106 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    40f8:	695a      	ldr	r2, [r3, #20]
    40fa:	2101      	movs	r1, #1
    40fc:	40a9      	lsls	r1, r5
    40fe:	1c0d      	adds	r5, r1, #0
    4100:	4315      	orrs	r5, r2
    4102:	615d      	str	r5, [r3, #20]
    4104:	e004      	b.n	4110 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4106:	695a      	ldr	r2, [r3, #20]
    4108:	2101      	movs	r1, #1
    410a:	40a9      	lsls	r1, r5
    410c:	438a      	bics	r2, r1
    410e:	615a      	str	r2, [r3, #20]
	}
}
    4110:	b003      	add	sp, #12
    4112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4114:	00005b65 	.word	0x00005b65
    4118:	40001800 	.word	0x40001800

0000411c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    411c:	b500      	push	{lr}
    411e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4120:	ab01      	add	r3, sp, #4
    4122:	2280      	movs	r2, #128	; 0x80
    4124:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4126:	780a      	ldrb	r2, [r1, #0]
    4128:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    412a:	784a      	ldrb	r2, [r1, #1]
    412c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    412e:	788a      	ldrb	r2, [r1, #2]
    4130:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4132:	1c19      	adds	r1, r3, #0
    4134:	4b01      	ldr	r3, [pc, #4]	; (413c <port_pin_set_config+0x20>)
    4136:	4798      	blx	r3
}
    4138:	b003      	add	sp, #12
    413a:	bd00      	pop	{pc}
    413c:	00005b65 	.word	0x00005b65

00004140 <_rtc_calendar_time_to_register_value>:
 * \internal Convert time structure to register_value.
 */
static uint32_t _rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4140:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    4142:	88ca      	ldrh	r2, [r1, #6]
    4144:	88c3      	ldrh	r3, [r0, #6]
    4146:	1ad2      	subs	r2, r2, r3
    4148:	0692      	lsls	r2, r2, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    414a:	790c      	ldrb	r4, [r1, #4]
    414c:	0464      	lsls	r4, r4, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    414e:	794b      	ldrb	r3, [r1, #5]
    4150:	059b      	lsls	r3, r3, #22
    4152:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    4154:	788c      	ldrb	r4, [r1, #2]
    4156:	0324      	lsls	r4, r4, #12

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    4158:	4323      	orrs	r3, r4

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    415a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    415c:	7902      	ldrb	r2, [r0, #4]
    415e:	2a00      	cmp	r2, #0
    4160:	d105      	bne.n	416e <_rtc_calendar_time_to_register_value+0x2e>
    4162:	78ca      	ldrb	r2, [r1, #3]
    4164:	2a00      	cmp	r2, #0
    4166:	d002      	beq.n	416e <_rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    4168:	2280      	movs	r2, #128	; 0x80
    416a:	0252      	lsls	r2, r2, #9
    416c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    416e:	7848      	ldrb	r0, [r1, #1]
    4170:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    4172:	780a      	ldrb	r2, [r1, #0]
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    4174:	4310      	orrs	r0, r2

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    4176:	4318      	orrs	r0, r3

	return register_value;
}
    4178:	bd10      	pop	{r4, pc}
    417a:	46c0      	nop			; (mov r8, r8)

0000417c <_rtc_calendar_register_value_to_time>:
 */
static void _rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    417c:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    417e:	0e8c      	lsrs	r4, r1, #26
    4180:	88c3      	ldrh	r3, [r0, #6]
    4182:	18e3      	adds	r3, r4, r3
    4184:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    4186:	018b      	lsls	r3, r1, #6
    4188:	0f1b      	lsrs	r3, r3, #28
    418a:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    418c:	028b      	lsls	r3, r1, #10
    418e:	0edb      	lsrs	r3, r3, #27
    4190:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    4192:	7903      	ldrb	r3, [r0, #4]
    4194:	2b00      	cmp	r3, #0
    4196:	d003      	beq.n	41a0 <_rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    4198:	03cb      	lsls	r3, r1, #15
    419a:	0edb      	lsrs	r3, r3, #27
    419c:	7093      	strb	r3, [r2, #2]
    419e:	e005      	b.n	41ac <_rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    41a0:	040b      	lsls	r3, r1, #16
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    41a2:	0f1b      	lsrs	r3, r3, #28
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    41a4:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    41a6:	03cb      	lsls	r3, r1, #15
    41a8:	0fdb      	lsrs	r3, r3, #31
    41aa:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    41ac:	050b      	lsls	r3, r1, #20
    41ae:	0e9b      	lsrs	r3, r3, #26
    41b0:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    41b2:	233f      	movs	r3, #63	; 0x3f
    41b4:	4019      	ands	r1, r3
    41b6:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    41b8:	bd10      	pop	{r4, pc}
    41ba:	46c0      	nop			; (mov r8, r8)

000041bc <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    41bc:	6801      	ldr	r1, [r0, #0]
    41be:	2208      	movs	r2, #8
    41c0:	4b05      	ldr	r3, [pc, #20]	; (41d8 <rtc_calendar_enable+0x1c>)
    41c2:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    41c4:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    41c6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    41c8:	b25b      	sxtb	r3, r3
    41ca:	2b00      	cmp	r3, #0
    41cc:	dbfb      	blt.n	41c6 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    41ce:	880a      	ldrh	r2, [r1, #0]
    41d0:	2302      	movs	r3, #2
    41d2:	4313      	orrs	r3, r2
    41d4:	800b      	strh	r3, [r1, #0]
}
    41d6:	4770      	bx	lr
    41d8:	e000e100 	.word	0xe000e100

000041dc <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    41dc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    41de:	6801      	ldr	r1, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    41e0:	2408      	movs	r4, #8
    41e2:	2380      	movs	r3, #128	; 0x80
    41e4:	4a05      	ldr	r2, [pc, #20]	; (41fc <rtc_calendar_disable+0x20>)
    41e6:	50d4      	str	r4, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    41e8:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    41ea:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    41ec:	b25b      	sxtb	r3, r3
    41ee:	2b00      	cmp	r3, #0
    41f0:	dbfb      	blt.n	41ea <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    41f2:	880b      	ldrh	r3, [r1, #0]
    41f4:	2202      	movs	r2, #2
    41f6:	4393      	bics	r3, r2
    41f8:	800b      	strh	r3, [r1, #0]
}
    41fa:	bd10      	pop	{r4, pc}
    41fc:	e000e100 	.word	0xe000e100

00004200 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    4200:	b538      	push	{r3, r4, r5, lr}
    4202:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4204:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    4206:	4b07      	ldr	r3, [pc, #28]	; (4224 <rtc_calendar_reset+0x24>)
    4208:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    420a:	2300      	movs	r3, #0
    420c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    420e:	8263      	strh	r3, [r4, #18]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4210:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4212:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    4214:	b25b      	sxtb	r3, r3
    4216:	2b00      	cmp	r3, #0
    4218:	dbfb      	blt.n	4212 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    421a:	882a      	ldrh	r2, [r5, #0]
    421c:	2301      	movs	r3, #1
    421e:	4313      	orrs	r3, r2
    4220:	802b      	strh	r3, [r5, #0]
}
    4222:	bd38      	pop	{r3, r4, r5, pc}
    4224:	000041dd 	.word	0x000041dd

00004228 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4228:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    422a:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = _rtc_calendar_time_to_register_value(module, time);
    422c:	4b03      	ldr	r3, [pc, #12]	; (423c <rtc_calendar_set_time+0x14>)
    422e:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4230:	7aa3      	ldrb	r3, [r4, #10]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = _rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
    4232:	b25b      	sxtb	r3, r3
    4234:	2b00      	cmp	r3, #0
    4236:	dbfb      	blt.n	4230 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    4238:	6120      	str	r0, [r4, #16]
}
    423a:	bd10      	pop	{r4, pc}
    423c:	00004141 	.word	0x00004141

00004240 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    4240:	b510      	push	{r4, lr}
    4242:	1c0a      	adds	r2, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4244:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    4246:	7941      	ldrb	r1, [r0, #5]
    4248:	2900      	cmp	r1, #0
    424a:	d106      	bne.n	425a <rtc_calendar_get_time+0x1a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    424c:	4905      	ldr	r1, [pc, #20]	; (4264 <rtc_calendar_get_time+0x24>)
    424e:	8059      	strh	r1, [r3, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4250:	6804      	ldr	r4, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4252:	7aa1      	ldrb	r1, [r4, #10]
	 * the configuration structure. */
	if (!(module->continuously_update)) {
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
    4254:	b249      	sxtb	r1, r1
    4256:	2900      	cmp	r1, #0
    4258:	dbfb      	blt.n	4252 <rtc_calendar_get_time+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    425a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	_rtc_calendar_register_value_to_time(module, register_value, time);
    425c:	4b02      	ldr	r3, [pc, #8]	; (4268 <rtc_calendar_get_time+0x28>)
    425e:	4798      	blx	r3
}
    4260:	bd10      	pop	{r4, pc}
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	ffff8000 	.word	0xffff8000
    4268:	0000417d 	.word	0x0000417d

0000426c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    426c:	b570      	push	{r4, r5, r6, lr}
    426e:	1c0e      	adds	r6, r1, #0
    4270:	1c14      	adds	r4, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4272:	6805      	ldr	r5, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    4274:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    4276:	2a01      	cmp	r2, #1
    4278:	d80b      	bhi.n	4292 <rtc_calendar_set_alarm+0x26>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(module, &(alarm->time));
    427a:	4b07      	ldr	r3, [pc, #28]	; (4298 <rtc_calendar_set_alarm+0x2c>)
    427c:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    427e:	7aab      	ldrb	r3, [r5, #10]
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
    4280:	b25b      	sxtb	r3, r3
    4282:	2b00      	cmp	r3, #0
    4284:	dbfb      	blt.n	427e <rtc_calendar_set_alarm+0x12>
    4286:	00e4      	lsls	r4, r4, #3
    4288:	192d      	adds	r5, r5, r4
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    428a:	61a8      	str	r0, [r5, #24]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    428c:	7a33      	ldrb	r3, [r6, #8]
    428e:	772b      	strb	r3, [r5, #28]

	return STATUS_OK;
    4290:	2300      	movs	r3, #0
}
    4292:	1c18      	adds	r0, r3, #0
    4294:	bd70      	pop	{r4, r5, r6, pc}
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	00004141 	.word	0x00004141

0000429c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    429c:	b530      	push	{r4, r5, lr}
    429e:	b083      	sub	sp, #12
    42a0:	1c04      	adds	r4, r0, #0
    42a2:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    42a4:	6001      	str	r1, [r0, #0]
    42a6:	4b1c      	ldr	r3, [pc, #112]	; (4318 <rtc_calendar_init+0x7c>)
    42a8:	6999      	ldr	r1, [r3, #24]
    42aa:	2220      	movs	r2, #32
    42ac:	430a      	orrs	r2, r1
    42ae:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    42b0:	a901      	add	r1, sp, #4
    42b2:	2302      	movs	r3, #2
    42b4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    42b6:	2004      	movs	r0, #4
    42b8:	4b18      	ldr	r3, [pc, #96]	; (431c <rtc_calendar_init+0x80>)
    42ba:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    42bc:	2004      	movs	r0, #4
    42be:	4b18      	ldr	r3, [pc, #96]	; (4320 <rtc_calendar_init+0x84>)
    42c0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    42c2:	1c20      	adds	r0, r4, #0
    42c4:	4b17      	ldr	r3, [pc, #92]	; (4324 <rtc_calendar_init+0x88>)
    42c6:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    42c8:	792b      	ldrb	r3, [r5, #4]
    42ca:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    42cc:	78eb      	ldrb	r3, [r5, #3]
    42ce:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
    42d0:	88eb      	ldrh	r3, [r5, #6]
    42d2:	80e3      	strh	r3, [r4, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    42d4:	4b14      	ldr	r3, [pc, #80]	; (4328 <rtc_calendar_init+0x8c>)
    42d6:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    42d8:	6823      	ldr	r3, [r4, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    42da:	882a      	ldrh	r2, [r5, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    42dc:	7929      	ldrb	r1, [r5, #4]
    42de:	2900      	cmp	r1, #0
    42e0:	d002      	beq.n	42e8 <rtc_calendar_init+0x4c>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    42e2:	2108      	movs	r1, #8
    42e4:	430a      	orrs	r2, r1
    42e6:	e001      	b.n	42ec <rtc_calendar_init+0x50>

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    42e8:	2148      	movs	r1, #72	; 0x48
    42ea:	430a      	orrs	r2, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    42ec:	78a9      	ldrb	r1, [r5, #2]
    42ee:	2900      	cmp	r1, #0
    42f0:	d001      	beq.n	42f6 <rtc_calendar_init+0x5a>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    42f2:	2180      	movs	r1, #128	; 0x80
    42f4:	430a      	orrs	r2, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    42f6:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    42f8:	78ea      	ldrb	r2, [r5, #3]
    42fa:	2a00      	cmp	r2, #0
    42fc:	d004      	beq.n	4308 <rtc_calendar_init+0x6c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    42fe:	8859      	ldrh	r1, [r3, #2]
    4300:	2280      	movs	r2, #128	; 0x80
    4302:	01d2      	lsls	r2, r2, #7
    4304:	430a      	orrs	r2, r1
    4306:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    4308:	1c29      	adds	r1, r5, #0
    430a:	3108      	adds	r1, #8
    430c:	1c20      	adds	r0, r4, #0
    430e:	2200      	movs	r2, #0
    4310:	4b06      	ldr	r3, [pc, #24]	; (432c <rtc_calendar_init+0x90>)
    4312:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
    4314:	b003      	add	sp, #12
    4316:	bd30      	pop	{r4, r5, pc}
    4318:	40000400 	.word	0x40000400
    431c:	00005a89 	.word	0x00005a89
    4320:	000059fd 	.word	0x000059fd
    4324:	00004201 	.word	0x00004201
    4328:	20000bc0 	.word	0x20000bc0
    432c:	0000426d 	.word	0x0000426d

00004330 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    4330:	b538      	push	{r3, r4, r5, lr}
    4332:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4334:	6801      	ldr	r1, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    4336:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    4338:	2a01      	cmp	r2, #1
    433a:	d808      	bhi.n	434e <rtc_calendar_get_alarm+0x1e>
    433c:	00d2      	lsls	r2, r2, #3
    433e:	188d      	adds	r5, r1, r2
		return STATUS_ERR_INVALID_ARG;
	}

	/* Read alarm value. */
	uint32_t register_value =
    4340:	69a9      	ldr	r1, [r5, #24]
			rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg;

	/* Convert to time structure. */
	_rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    4342:	1c22      	adds	r2, r4, #0
    4344:	4b03      	ldr	r3, [pc, #12]	; (4354 <rtc_calendar_get_alarm+0x24>)
    4346:	4798      	blx	r3

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    4348:	7f2b      	ldrb	r3, [r5, #28]
    434a:	7223      	strb	r3, [r4, #8]

	return STATUS_OK;
    434c:	2300      	movs	r3, #0
}
    434e:	1c18      	adds	r0, r3, #0
    4350:	bd38      	pop	{r3, r4, r5, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	0000417d 	.word	0x0000417d

00004358 <rtc_calendar_swap_time_mode>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
    4358:	b570      	push	{r4, r5, r6, lr}
    435a:	b086      	sub	sp, #24
    435c:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    435e:	6806      	ldr	r6, [r0, #0]
	/* Initialize time structure. */
	struct rtc_calendar_time time;
	struct rtc_calendar_alarm_time alarm;

	/* Get current time. */
	rtc_calendar_get_time(module, &time);
    4360:	a904      	add	r1, sp, #16
    4362:	4b3e      	ldr	r3, [pc, #248]	; (445c <rtc_calendar_swap_time_mode+0x104>)
    4364:	4798      	blx	r3

	/* Check current mode. */
	if (module->clock_24h) {
    4366:	7923      	ldrb	r3, [r4, #4]
    4368:	2b00      	cmp	r3, #0
    436a:	d01c      	beq.n	43a6 <rtc_calendar_swap_time_mode+0x4e>
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
    436c:	ab04      	add	r3, sp, #16
    436e:	7898      	ldrb	r0, [r3, #2]
    4370:	220b      	movs	r2, #11
    4372:	4282      	cmp	r2, r0
    4374:	4192      	sbcs	r2, r2
    4376:	4252      	negs	r2, r2
    4378:	70da      	strb	r2, [r3, #3]

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
    437a:	210c      	movs	r1, #12
    437c:	4b38      	ldr	r3, [pc, #224]	; (4460 <rtc_calendar_swap_time_mode+0x108>)
    437e:	4798      	blx	r3
    4380:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    4382:	2900      	cmp	r1, #0
    4384:	d147      	bne.n	4416 <rtc_calendar_swap_time_mode+0xbe>
			time.hour = 12;
    4386:	220c      	movs	r2, #12
    4388:	ab04      	add	r3, sp, #16
    438a:	709a      	strb	r2, [r3, #2]
    438c:	e045      	b.n	441a <rtc_calendar_swap_time_mode+0xc2>
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
    438e:	220c      	movs	r2, #12
    4390:	ab01      	add	r3, sp, #4
    4392:	709a      	strb	r2, [r3, #2]
			}
			module->clock_24h = false;
    4394:	2500      	movs	r5, #0
    4396:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    4398:	1c20      	adds	r0, r4, #0
    439a:	a901      	add	r1, sp, #4
    439c:	2200      	movs	r2, #0
    439e:	4b31      	ldr	r3, [pc, #196]	; (4464 <rtc_calendar_swap_time_mode+0x10c>)
    43a0:	4798      	blx	r3
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
    43a2:	7125      	strb	r5, [r4, #4]
    43a4:	e028      	b.n	43f8 <rtc_calendar_swap_time_mode+0xa0>
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
    43a6:	ab04      	add	r3, sp, #16
    43a8:	78db      	ldrb	r3, [r3, #3]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d006      	beq.n	43bc <rtc_calendar_swap_time_mode+0x64>
			time.hour = time.hour + 12;
    43ae:	ab04      	add	r3, sp, #16
    43b0:	789a      	ldrb	r2, [r3, #2]
    43b2:	320c      	adds	r2, #12
    43b4:	709a      	strb	r2, [r3, #2]

			time.pm = 0;
    43b6:	2200      	movs	r2, #0
    43b8:	70da      	strb	r2, [r3, #3]
    43ba:	e043      	b.n	4444 <rtc_calendar_swap_time_mode+0xec>
		} else if (time.hour == 12) {
    43bc:	ab04      	add	r3, sp, #16
    43be:	789b      	ldrb	r3, [r3, #2]
    43c0:	2b0c      	cmp	r3, #12
    43c2:	d13f      	bne.n	4444 <rtc_calendar_swap_time_mode+0xec>
			time.hour = 0;
    43c4:	2200      	movs	r2, #0
    43c6:	ab04      	add	r3, sp, #16
    43c8:	709a      	strb	r2, [r3, #2]
    43ca:	e03b      	b.n	4444 <rtc_calendar_swap_time_mode+0xec>

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			if (alarm.time.pm == 1) {
				alarm.time.hour = alarm.time.hour + 12;
    43cc:	a901      	add	r1, sp, #4
    43ce:	788b      	ldrb	r3, [r1, #2]
    43d0:	330c      	adds	r3, #12
    43d2:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    43d4:	2300      	movs	r3, #0
    43d6:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    43d8:	2301      	movs	r3, #1
    43da:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    43dc:	1c20      	adds	r0, r4, #0
    43de:	2200      	movs	r2, #0
    43e0:	4b20      	ldr	r3, [pc, #128]	; (4464 <rtc_calendar_swap_time_mode+0x10c>)
    43e2:	4798      	blx	r3
    43e4:	e006      	b.n	43f4 <rtc_calendar_swap_time_mode+0x9c>
				module->clock_24h = false;
			} else if (alarm.time.hour == 12) {
    43e6:	ab01      	add	r3, sp, #4
    43e8:	789b      	ldrb	r3, [r3, #2]
    43ea:	2b0c      	cmp	r3, #12
    43ec:	d102      	bne.n	43f4 <rtc_calendar_swap_time_mode+0x9c>
				alarm.time.hour = 0;
    43ee:	2200      	movs	r2, #0
    43f0:	ab01      	add	r3, sp, #4
    43f2:	709a      	strb	r2, [r3, #2]
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
    43f4:	2301      	movs	r3, #1
    43f6:	7123      	strb	r3, [r4, #4]
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
    43f8:	1c20      	adds	r0, r4, #0
    43fa:	4b1b      	ldr	r3, [pc, #108]	; (4468 <rtc_calendar_swap_time_mode+0x110>)
    43fc:	4798      	blx	r3

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    43fe:	8832      	ldrh	r2, [r6, #0]
    4400:	2340      	movs	r3, #64	; 0x40
    4402:	4053      	eors	r3, r2
    4404:	8033      	strh	r3, [r6, #0]

	/* Enable RTC. */
	rtc_calendar_enable(module);
    4406:	1c20      	adds	r0, r4, #0
    4408:	4b18      	ldr	r3, [pc, #96]	; (446c <rtc_calendar_swap_time_mode+0x114>)
    440a:	4798      	blx	r3

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
    440c:	1c20      	adds	r0, r4, #0
    440e:	a904      	add	r1, sp, #16
    4410:	4b17      	ldr	r3, [pc, #92]	; (4470 <rtc_calendar_swap_time_mode+0x118>)
    4412:	4798      	blx	r3
    4414:	e020      	b.n	4458 <rtc_calendar_swap_time_mode+0x100>
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
    4416:	ab04      	add	r3, sp, #16
    4418:	7099      	strb	r1, [r3, #2]
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    441a:	ad01      	add	r5, sp, #4
    441c:	1c20      	adds	r0, r4, #0
    441e:	1c29      	adds	r1, r5, #0
    4420:	2200      	movs	r2, #0
    4422:	4b14      	ldr	r3, [pc, #80]	; (4474 <rtc_calendar_swap_time_mode+0x11c>)
    4424:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    4426:	78a8      	ldrb	r0, [r5, #2]
    4428:	230b      	movs	r3, #11
    442a:	4283      	cmp	r3, r0
    442c:	419b      	sbcs	r3, r3
    442e:	425b      	negs	r3, r3
    4430:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    4432:	210c      	movs	r1, #12
    4434:	4b0a      	ldr	r3, [pc, #40]	; (4460 <rtc_calendar_swap_time_mode+0x108>)
    4436:	4798      	blx	r3
    4438:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    443a:	2900      	cmp	r1, #0
    443c:	d0a7      	beq.n	438e <rtc_calendar_swap_time_mode+0x36>

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
    443e:	ab01      	add	r3, sp, #4
    4440:	7099      	strb	r1, [r3, #2]
    4442:	e7a7      	b.n	4394 <rtc_calendar_swap_time_mode+0x3c>
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    4444:	ad01      	add	r5, sp, #4
    4446:	1c20      	adds	r0, r4, #0
    4448:	1c29      	adds	r1, r5, #0
    444a:	2200      	movs	r2, #0
    444c:	4b09      	ldr	r3, [pc, #36]	; (4474 <rtc_calendar_swap_time_mode+0x11c>)
    444e:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    4450:	78eb      	ldrb	r3, [r5, #3]
    4452:	2b00      	cmp	r3, #0
    4454:	d0c7      	beq.n	43e6 <rtc_calendar_swap_time_mode+0x8e>
    4456:	e7b9      	b.n	43cc <rtc_calendar_swap_time_mode+0x74>
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
    4458:	b006      	add	sp, #24
    445a:	bd70      	pop	{r4, r5, r6, pc}
    445c:	00004241 	.word	0x00004241
    4460:	000074a5 	.word	0x000074a5
    4464:	0000426d 	.word	0x0000426d
    4468:	000041dd 	.word	0x000041dd
    446c:	000041bd 	.word	0x000041bd
    4470:	00004229 	.word	0x00004229
    4474:	00004331 	.word	0x00004331

00004478 <rtc_calendar_register_callback>:
	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
    4478:	2a01      	cmp	r2, #1
    447a:	d901      	bls.n	4480 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
    447c:	2017      	movs	r0, #23
    447e:	e00a      	b.n	4496 <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    4480:	1c93      	adds	r3, r2, #2
    4482:	009b      	lsls	r3, r3, #2
    4484:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    4486:	8a03      	ldrh	r3, [r0, #16]
    4488:	2101      	movs	r1, #1
    448a:	4091      	lsls	r1, r2
    448c:	1c0a      	adds	r2, r1, #0
    448e:	431a      	orrs	r2, r3
    4490:	b292      	uxth	r2, r2
    4492:	8202      	strh	r2, [r0, #16]
		struct rtc_module *const module,
		rtc_calendar_callback_t callback,
		enum rtc_calendar_callback callback_type)
{

	enum status_code status = STATUS_OK;
    4494:	2000      	movs	r0, #0
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
    4496:	4770      	bx	lr

00004498 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
    4498:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    449a:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
    449c:	2901      	cmp	r1, #1
    449e:	d102      	bne.n	44a6 <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
    44a0:	2280      	movs	r2, #128	; 0x80
    44a2:	71da      	strb	r2, [r3, #7]
    44a4:	e004      	b.n	44b0 <rtc_calendar_enable_callback+0x18>
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
    44a6:	2201      	movs	r2, #1
    44a8:	408a      	lsls	r2, r1
    44aa:	2401      	movs	r4, #1
    44ac:	4022      	ands	r2, r4
    44ae:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    44b0:	8a43      	ldrh	r3, [r0, #18]
    44b2:	2201      	movs	r2, #1
    44b4:	408a      	lsls	r2, r1
    44b6:	1c11      	adds	r1, r2, #0
    44b8:	4319      	orrs	r1, r3
    44ba:	b289      	uxth	r1, r1
    44bc:	8241      	strh	r1, [r0, #18]
}
    44be:	bd10      	pop	{r4, pc}

000044c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    44c0:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    44c2:	4b0e      	ldr	r3, [pc, #56]	; (44fc <RTC_Handler+0x3c>)
    44c4:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
    44c6:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    44c8:	8a5a      	ldrh	r2, [r3, #18]
	callback_mask &= module->registered_callback;
    44ca:	8a19      	ldrh	r1, [r3, #16]
    44cc:	1c08      	adds	r0, r1, #0
    44ce:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    44d0:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    44d2:	79e1      	ldrb	r1, [r4, #7]
    44d4:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    44d6:	09d1      	lsrs	r1, r2, #7
    44d8:	d006      	beq.n	44e8 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    44da:	0781      	lsls	r1, r0, #30
    44dc:	d501      	bpl.n	44e2 <RTC_Handler+0x22>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    44de:	68db      	ldr	r3, [r3, #12]
    44e0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    44e2:	2380      	movs	r3, #128	; 0x80
    44e4:	7223      	strb	r3, [r4, #8]
    44e6:	e007      	b.n	44f8 <RTC_Handler+0x38>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    44e8:	07d1      	lsls	r1, r2, #31
    44ea:	d505      	bpl.n	44f8 <RTC_Handler+0x38>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    44ec:	07c2      	lsls	r2, r0, #31
    44ee:	d501      	bpl.n	44f4 <RTC_Handler+0x34>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    44f0:	689b      	ldr	r3, [r3, #8]
    44f2:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    44f4:	2301      	movs	r3, #1
    44f6:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    44f8:	bd10      	pop	{r4, pc}
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	20000bc0 	.word	0x20000bc0

00004500 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4500:	b510      	push	{r4, lr}
    4502:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    4504:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4506:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    4508:	4299      	cmp	r1, r3
    450a:	d30c      	bcc.n	4526 <_sercom_get_sync_baud_val+0x26>
    450c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    450e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
    4510:	1c60      	adds	r0, r4, #1
    4512:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    4514:	428b      	cmp	r3, r1
    4516:	d801      	bhi.n	451c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
    4518:	1c04      	adds	r4, r0, #0
    451a:	e7f8      	b.n	450e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    451c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    451e:	2cff      	cmp	r4, #255	; 0xff
    4520:	d801      	bhi.n	4526 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    4522:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4524:	2000      	movs	r0, #0
	}
}
    4526:	bd10      	pop	{r4, pc}

00004528 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4528:	b5f0      	push	{r4, r5, r6, r7, lr}
    452a:	465f      	mov	r7, fp
    452c:	4656      	mov	r6, sl
    452e:	464d      	mov	r5, r9
    4530:	4644      	mov	r4, r8
    4532:	b4f0      	push	{r4, r5, r6, r7}
    4534:	b087      	sub	sp, #28
    4536:	1c06      	adds	r6, r0, #0
    4538:	1c0d      	adds	r5, r1, #0
    453a:	9204      	str	r2, [sp, #16]
    453c:	aa10      	add	r2, sp, #64	; 0x40
    453e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4540:	1c32      	adds	r2, r6, #0
    4542:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4544:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4546:	428a      	cmp	r2, r1
    4548:	d900      	bls.n	454c <_sercom_get_async_baud_val+0x24>
    454a:	e0b3      	b.n	46b4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    454c:	2b00      	cmp	r3, #0
    454e:	d14b      	bne.n	45e8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4550:	2100      	movs	r1, #0
    4552:	1c32      	adds	r2, r6, #0
    4554:	4c5e      	ldr	r4, [pc, #376]	; (46d0 <_sercom_get_async_baud_val+0x1a8>)
    4556:	47a0      	blx	r4
    4558:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    455a:	1c2e      	adds	r6, r5, #0
    455c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    455e:	2000      	movs	r0, #0
    4560:	2100      	movs	r1, #0
    4562:	2200      	movs	r2, #0
    4564:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    4566:	243f      	movs	r4, #63	; 0x3f
    4568:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
    456a:	2501      	movs	r5, #1
    456c:	46a8      	mov	r8, r5
    456e:	9002      	str	r0, [sp, #8]
    4570:	9103      	str	r1, [sp, #12]
    4572:	4661      	mov	r1, ip
    4574:	3920      	subs	r1, #32
    4576:	d403      	bmi.n	4580 <_sercom_get_async_baud_val+0x58>
    4578:	4640      	mov	r0, r8
    457a:	4088      	lsls	r0, r1
    457c:	4681      	mov	r9, r0
    457e:	e005      	b.n	458c <_sercom_get_async_baud_val+0x64>
    4580:	2120      	movs	r1, #32
    4582:	4665      	mov	r5, ip
    4584:	1b4c      	subs	r4, r1, r5
    4586:	4640      	mov	r0, r8
    4588:	40e0      	lsrs	r0, r4
    458a:	4681      	mov	r9, r0
    458c:	4641      	mov	r1, r8
    458e:	4664      	mov	r4, ip
    4590:	40a1      	lsls	r1, r4
    4592:	468a      	mov	sl, r1

		r = r << 1;
    4594:	1c10      	adds	r0, r2, #0
    4596:	1c19      	adds	r1, r3, #0
    4598:	1880      	adds	r0, r0, r2
    459a:	4159      	adcs	r1, r3
    459c:	1c02      	adds	r2, r0, #0
    459e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    45a0:	465d      	mov	r5, fp
    45a2:	464c      	mov	r4, r9
    45a4:	4225      	tst	r5, r4
    45a6:	d002      	beq.n	45ae <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
    45a8:	4642      	mov	r2, r8
    45aa:	4302      	orrs	r2, r0
    45ac:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    45ae:	429f      	cmp	r7, r3
    45b0:	d80c      	bhi.n	45cc <_sercom_get_async_baud_val+0xa4>
    45b2:	d101      	bne.n	45b8 <_sercom_get_async_baud_val+0x90>
    45b4:	4296      	cmp	r6, r2
    45b6:	d809      	bhi.n	45cc <_sercom_get_async_baud_val+0xa4>
			r = r - d;
    45b8:	1b92      	subs	r2, r2, r6
    45ba:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    45bc:	4650      	mov	r0, sl
    45be:	9d02      	ldr	r5, [sp, #8]
    45c0:	4328      	orrs	r0, r5
    45c2:	4649      	mov	r1, r9
    45c4:	9c03      	ldr	r4, [sp, #12]
    45c6:	4321      	orrs	r1, r4
    45c8:	9002      	str	r0, [sp, #8]
    45ca:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    45cc:	4665      	mov	r5, ip
    45ce:	3d01      	subs	r5, #1
    45d0:	46ac      	mov	ip, r5
    45d2:	d2ce      	bcs.n	4572 <_sercom_get_async_baud_val+0x4a>
    45d4:	9802      	ldr	r0, [sp, #8]
    45d6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    45d8:	4b3c      	ldr	r3, [pc, #240]	; (46cc <_sercom_get_async_baud_val+0x1a4>)
    45da:	4a3b      	ldr	r2, [pc, #236]	; (46c8 <_sercom_get_async_baud_val+0x1a0>)
    45dc:	1a12      	subs	r2, r2, r0
    45de:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    45e0:	0c12      	lsrs	r2, r2, #16
    45e2:	041b      	lsls	r3, r3, #16
    45e4:	431a      	orrs	r2, r3
    45e6:	e062      	b.n	46ae <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    45e8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    45ea:	2b01      	cmp	r3, #1
    45ec:	d15f      	bne.n	46ae <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    45ee:	0f4f      	lsrs	r7, r1, #29
    45f0:	46b9      	mov	r9, r7
    45f2:	00cd      	lsls	r5, r1, #3
    45f4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
    45f6:	2100      	movs	r1, #0
    45f8:	1c32      	adds	r2, r6, #0
    45fa:	2300      	movs	r3, #0
    45fc:	4c34      	ldr	r4, [pc, #208]	; (46d0 <_sercom_get_async_baud_val+0x1a8>)
    45fe:	47a0      	blx	r4
    4600:	1c06      	adds	r6, r0, #0
    4602:	1c0f      	adds	r7, r1, #0
    4604:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    4606:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    4608:	9602      	str	r6, [sp, #8]
    460a:	9703      	str	r7, [sp, #12]
    460c:	469a      	mov	sl, r3
    460e:	4650      	mov	r0, sl
    4610:	b2c0      	uxtb	r0, r0
    4612:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4614:	2100      	movs	r1, #0
    4616:	4688      	mov	r8, r1
    4618:	2200      	movs	r2, #0
    461a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    461c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    461e:	1c27      	adds	r7, r4, #0
    4620:	3f20      	subs	r7, #32
    4622:	d403      	bmi.n	462c <_sercom_get_async_baud_val+0x104>
    4624:	1c2e      	adds	r6, r5, #0
    4626:	40be      	lsls	r6, r7
    4628:	9601      	str	r6, [sp, #4]
    462a:	e004      	b.n	4636 <_sercom_get_async_baud_val+0x10e>
    462c:	2020      	movs	r0, #32
    462e:	1b07      	subs	r7, r0, r4
    4630:	1c29      	adds	r1, r5, #0
    4632:	40f9      	lsrs	r1, r7
    4634:	9101      	str	r1, [sp, #4]
    4636:	1c2e      	adds	r6, r5, #0
    4638:	40a6      	lsls	r6, r4
    463a:	9600      	str	r6, [sp, #0]

		r = r << 1;
    463c:	1c10      	adds	r0, r2, #0
    463e:	1c19      	adds	r1, r3, #0
    4640:	1880      	adds	r0, r0, r2
    4642:	4159      	adcs	r1, r3
    4644:	1c02      	adds	r2, r0, #0
    4646:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    4648:	465f      	mov	r7, fp
    464a:	4037      	ands	r7, r6
    464c:	46bc      	mov	ip, r7
    464e:	9e01      	ldr	r6, [sp, #4]
    4650:	464f      	mov	r7, r9
    4652:	403e      	ands	r6, r7
    4654:	4667      	mov	r7, ip
    4656:	433e      	orrs	r6, r7
    4658:	d002      	beq.n	4660 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
    465a:	1c2a      	adds	r2, r5, #0
    465c:	4302      	orrs	r2, r0
    465e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    4660:	9803      	ldr	r0, [sp, #12]
    4662:	4298      	cmp	r0, r3
    4664:	d80b      	bhi.n	467e <_sercom_get_async_baud_val+0x156>
    4666:	d102      	bne.n	466e <_sercom_get_async_baud_val+0x146>
    4668:	9902      	ldr	r1, [sp, #8]
    466a:	4291      	cmp	r1, r2
    466c:	d807      	bhi.n	467e <_sercom_get_async_baud_val+0x156>
			r = r - d;
    466e:	9e02      	ldr	r6, [sp, #8]
    4670:	9f03      	ldr	r7, [sp, #12]
    4672:	1b92      	subs	r2, r2, r6
    4674:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    4676:	4647      	mov	r7, r8
    4678:	9800      	ldr	r0, [sp, #0]
    467a:	4307      	orrs	r7, r0
    467c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    467e:	3c01      	subs	r4, #1
    4680:	d2cd      	bcs.n	461e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    4682:	4641      	mov	r1, r8
    4684:	4652      	mov	r2, sl
    4686:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    4688:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    468a:	4c12      	ldr	r4, [pc, #72]	; (46d4 <_sercom_get_async_baud_val+0x1ac>)
    468c:	42a3      	cmp	r3, r4
    468e:	d908      	bls.n	46a2 <_sercom_get_async_baud_val+0x17a>
    4690:	9a05      	ldr	r2, [sp, #20]
    4692:	3201      	adds	r2, #1
    4694:	b2d2      	uxtb	r2, r2
    4696:	9205      	str	r2, [sp, #20]
    4698:	2601      	movs	r6, #1
    469a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    469c:	4657      	mov	r7, sl
    469e:	2f08      	cmp	r7, #8
    46a0:	d1b5      	bne.n	460e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46a2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    46a4:	9805      	ldr	r0, [sp, #20]
    46a6:	2808      	cmp	r0, #8
    46a8:	d004      	beq.n	46b4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    46aa:	0342      	lsls	r2, r0, #13
    46ac:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    46ae:	9c04      	ldr	r4, [sp, #16]
    46b0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
    46b2:	2400      	movs	r4, #0
}
    46b4:	1c20      	adds	r0, r4, #0
    46b6:	b007      	add	sp, #28
    46b8:	bc3c      	pop	{r2, r3, r4, r5}
    46ba:	4690      	mov	r8, r2
    46bc:	4699      	mov	r9, r3
    46be:	46a2      	mov	sl, r4
    46c0:	46ab      	mov	fp, r5
    46c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c4:	46c0      	nop			; (mov r8, r8)
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00000000 	.word	0x00000000
    46cc:	00000001 	.word	0x00000001
    46d0:	0000757d 	.word	0x0000757d
    46d4:	00001fff 	.word	0x00001fff

000046d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    46d8:	b510      	push	{r4, lr}
    46da:	b082      	sub	sp, #8
    46dc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    46de:	4b0f      	ldr	r3, [pc, #60]	; (471c <sercom_set_gclk_generator+0x44>)
    46e0:	781b      	ldrb	r3, [r3, #0]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d001      	beq.n	46ea <sercom_set_gclk_generator+0x12>
    46e6:	2900      	cmp	r1, #0
    46e8:	d00d      	beq.n	4706 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    46ea:	a901      	add	r1, sp, #4
    46ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    46ee:	2013      	movs	r0, #19
    46f0:	4b0b      	ldr	r3, [pc, #44]	; (4720 <sercom_set_gclk_generator+0x48>)
    46f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    46f4:	2013      	movs	r0, #19
    46f6:	4b0b      	ldr	r3, [pc, #44]	; (4724 <sercom_set_gclk_generator+0x4c>)
    46f8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    46fa:	4b08      	ldr	r3, [pc, #32]	; (471c <sercom_set_gclk_generator+0x44>)
    46fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    46fe:	2201      	movs	r2, #1
    4700:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4702:	2000      	movs	r0, #0
    4704:	e007      	b.n	4716 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
    4706:	4b05      	ldr	r3, [pc, #20]	; (471c <sercom_set_gclk_generator+0x44>)
    4708:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    470a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
    470c:	1b14      	subs	r4, r2, r4
    470e:	1e62      	subs	r2, r4, #1
    4710:	4194      	sbcs	r4, r2
    4712:	4264      	negs	r4, r4
    4714:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4716:	b002      	add	sp, #8
    4718:	bd10      	pop	{r4, pc}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	2000087c 	.word	0x2000087c
    4720:	00005a89 	.word	0x00005a89
    4724:	000059fd 	.word	0x000059fd

00004728 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4728:	4b44      	ldr	r3, [pc, #272]	; (483c <_sercom_get_default_pad+0x114>)
    472a:	4298      	cmp	r0, r3
    472c:	d033      	beq.n	4796 <_sercom_get_default_pad+0x6e>
    472e:	d806      	bhi.n	473e <_sercom_get_default_pad+0x16>
    4730:	4b43      	ldr	r3, [pc, #268]	; (4840 <_sercom_get_default_pad+0x118>)
    4732:	4298      	cmp	r0, r3
    4734:	d00d      	beq.n	4752 <_sercom_get_default_pad+0x2a>
    4736:	4b43      	ldr	r3, [pc, #268]	; (4844 <_sercom_get_default_pad+0x11c>)
    4738:	4298      	cmp	r0, r3
    473a:	d01b      	beq.n	4774 <_sercom_get_default_pad+0x4c>
    473c:	e06f      	b.n	481e <_sercom_get_default_pad+0xf6>
    473e:	4b42      	ldr	r3, [pc, #264]	; (4848 <_sercom_get_default_pad+0x120>)
    4740:	4298      	cmp	r0, r3
    4742:	d04a      	beq.n	47da <_sercom_get_default_pad+0xb2>
    4744:	4b41      	ldr	r3, [pc, #260]	; (484c <_sercom_get_default_pad+0x124>)
    4746:	4298      	cmp	r0, r3
    4748:	d058      	beq.n	47fc <_sercom_get_default_pad+0xd4>
    474a:	4b41      	ldr	r3, [pc, #260]	; (4850 <_sercom_get_default_pad+0x128>)
    474c:	4298      	cmp	r0, r3
    474e:	d166      	bne.n	481e <_sercom_get_default_pad+0xf6>
    4750:	e032      	b.n	47b8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4752:	2901      	cmp	r1, #1
    4754:	d065      	beq.n	4822 <_sercom_get_default_pad+0xfa>
    4756:	2900      	cmp	r1, #0
    4758:	d004      	beq.n	4764 <_sercom_get_default_pad+0x3c>
    475a:	2902      	cmp	r1, #2
    475c:	d006      	beq.n	476c <_sercom_get_default_pad+0x44>
    475e:	2903      	cmp	r1, #3
    4760:	d006      	beq.n	4770 <_sercom_get_default_pad+0x48>
    4762:	e001      	b.n	4768 <_sercom_get_default_pad+0x40>
    4764:	483b      	ldr	r0, [pc, #236]	; (4854 <_sercom_get_default_pad+0x12c>)
    4766:	e067      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4768:	2000      	movs	r0, #0
    476a:	e065      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    476c:	483a      	ldr	r0, [pc, #232]	; (4858 <_sercom_get_default_pad+0x130>)
    476e:	e063      	b.n	4838 <_sercom_get_default_pad+0x110>
    4770:	483a      	ldr	r0, [pc, #232]	; (485c <_sercom_get_default_pad+0x134>)
    4772:	e061      	b.n	4838 <_sercom_get_default_pad+0x110>
    4774:	2901      	cmp	r1, #1
    4776:	d056      	beq.n	4826 <_sercom_get_default_pad+0xfe>
    4778:	2900      	cmp	r1, #0
    477a:	d004      	beq.n	4786 <_sercom_get_default_pad+0x5e>
    477c:	2902      	cmp	r1, #2
    477e:	d006      	beq.n	478e <_sercom_get_default_pad+0x66>
    4780:	2903      	cmp	r1, #3
    4782:	d006      	beq.n	4792 <_sercom_get_default_pad+0x6a>
    4784:	e001      	b.n	478a <_sercom_get_default_pad+0x62>
    4786:	2003      	movs	r0, #3
    4788:	e056      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    478a:	2000      	movs	r0, #0
    478c:	e054      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    478e:	4834      	ldr	r0, [pc, #208]	; (4860 <_sercom_get_default_pad+0x138>)
    4790:	e052      	b.n	4838 <_sercom_get_default_pad+0x110>
    4792:	4834      	ldr	r0, [pc, #208]	; (4864 <_sercom_get_default_pad+0x13c>)
    4794:	e050      	b.n	4838 <_sercom_get_default_pad+0x110>
    4796:	2901      	cmp	r1, #1
    4798:	d047      	beq.n	482a <_sercom_get_default_pad+0x102>
    479a:	2900      	cmp	r1, #0
    479c:	d004      	beq.n	47a8 <_sercom_get_default_pad+0x80>
    479e:	2902      	cmp	r1, #2
    47a0:	d006      	beq.n	47b0 <_sercom_get_default_pad+0x88>
    47a2:	2903      	cmp	r1, #3
    47a4:	d006      	beq.n	47b4 <_sercom_get_default_pad+0x8c>
    47a6:	e001      	b.n	47ac <_sercom_get_default_pad+0x84>
    47a8:	482f      	ldr	r0, [pc, #188]	; (4868 <_sercom_get_default_pad+0x140>)
    47aa:	e045      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    47ac:	2000      	movs	r0, #0
    47ae:	e043      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47b0:	482e      	ldr	r0, [pc, #184]	; (486c <_sercom_get_default_pad+0x144>)
    47b2:	e041      	b.n	4838 <_sercom_get_default_pad+0x110>
    47b4:	482e      	ldr	r0, [pc, #184]	; (4870 <_sercom_get_default_pad+0x148>)
    47b6:	e03f      	b.n	4838 <_sercom_get_default_pad+0x110>
    47b8:	2901      	cmp	r1, #1
    47ba:	d038      	beq.n	482e <_sercom_get_default_pad+0x106>
    47bc:	2900      	cmp	r1, #0
    47be:	d004      	beq.n	47ca <_sercom_get_default_pad+0xa2>
    47c0:	2902      	cmp	r1, #2
    47c2:	d006      	beq.n	47d2 <_sercom_get_default_pad+0xaa>
    47c4:	2903      	cmp	r1, #3
    47c6:	d006      	beq.n	47d6 <_sercom_get_default_pad+0xae>
    47c8:	e001      	b.n	47ce <_sercom_get_default_pad+0xa6>
    47ca:	482a      	ldr	r0, [pc, #168]	; (4874 <_sercom_get_default_pad+0x14c>)
    47cc:	e034      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    47ce:	2000      	movs	r0, #0
    47d0:	e032      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47d2:	4829      	ldr	r0, [pc, #164]	; (4878 <_sercom_get_default_pad+0x150>)
    47d4:	e030      	b.n	4838 <_sercom_get_default_pad+0x110>
    47d6:	4829      	ldr	r0, [pc, #164]	; (487c <_sercom_get_default_pad+0x154>)
    47d8:	e02e      	b.n	4838 <_sercom_get_default_pad+0x110>
    47da:	2901      	cmp	r1, #1
    47dc:	d029      	beq.n	4832 <_sercom_get_default_pad+0x10a>
    47de:	2900      	cmp	r1, #0
    47e0:	d004      	beq.n	47ec <_sercom_get_default_pad+0xc4>
    47e2:	2902      	cmp	r1, #2
    47e4:	d006      	beq.n	47f4 <_sercom_get_default_pad+0xcc>
    47e6:	2903      	cmp	r1, #3
    47e8:	d006      	beq.n	47f8 <_sercom_get_default_pad+0xd0>
    47ea:	e001      	b.n	47f0 <_sercom_get_default_pad+0xc8>
    47ec:	4824      	ldr	r0, [pc, #144]	; (4880 <_sercom_get_default_pad+0x158>)
    47ee:	e023      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    47f0:	2000      	movs	r0, #0
    47f2:	e021      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47f4:	4823      	ldr	r0, [pc, #140]	; (4884 <_sercom_get_default_pad+0x15c>)
    47f6:	e01f      	b.n	4838 <_sercom_get_default_pad+0x110>
    47f8:	4823      	ldr	r0, [pc, #140]	; (4888 <_sercom_get_default_pad+0x160>)
    47fa:	e01d      	b.n	4838 <_sercom_get_default_pad+0x110>
    47fc:	2901      	cmp	r1, #1
    47fe:	d01a      	beq.n	4836 <_sercom_get_default_pad+0x10e>
    4800:	2900      	cmp	r1, #0
    4802:	d004      	beq.n	480e <_sercom_get_default_pad+0xe6>
    4804:	2902      	cmp	r1, #2
    4806:	d006      	beq.n	4816 <_sercom_get_default_pad+0xee>
    4808:	2903      	cmp	r1, #3
    480a:	d006      	beq.n	481a <_sercom_get_default_pad+0xf2>
    480c:	e001      	b.n	4812 <_sercom_get_default_pad+0xea>
    480e:	481f      	ldr	r0, [pc, #124]	; (488c <_sercom_get_default_pad+0x164>)
    4810:	e012      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4812:	2000      	movs	r0, #0
    4814:	e010      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4816:	481e      	ldr	r0, [pc, #120]	; (4890 <_sercom_get_default_pad+0x168>)
    4818:	e00e      	b.n	4838 <_sercom_get_default_pad+0x110>
    481a:	481e      	ldr	r0, [pc, #120]	; (4894 <_sercom_get_default_pad+0x16c>)
    481c:	e00c      	b.n	4838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    481e:	2000      	movs	r0, #0
    4820:	e00a      	b.n	4838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4822:	481d      	ldr	r0, [pc, #116]	; (4898 <_sercom_get_default_pad+0x170>)
    4824:	e008      	b.n	4838 <_sercom_get_default_pad+0x110>
    4826:	481d      	ldr	r0, [pc, #116]	; (489c <_sercom_get_default_pad+0x174>)
    4828:	e006      	b.n	4838 <_sercom_get_default_pad+0x110>
    482a:	481d      	ldr	r0, [pc, #116]	; (48a0 <_sercom_get_default_pad+0x178>)
    482c:	e004      	b.n	4838 <_sercom_get_default_pad+0x110>
    482e:	481d      	ldr	r0, [pc, #116]	; (48a4 <_sercom_get_default_pad+0x17c>)
    4830:	e002      	b.n	4838 <_sercom_get_default_pad+0x110>
    4832:	481d      	ldr	r0, [pc, #116]	; (48a8 <_sercom_get_default_pad+0x180>)
    4834:	e000      	b.n	4838 <_sercom_get_default_pad+0x110>
    4836:	481d      	ldr	r0, [pc, #116]	; (48ac <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    4838:	4770      	bx	lr
    483a:	46c0      	nop			; (mov r8, r8)
    483c:	42001000 	.word	0x42001000
    4840:	42000800 	.word	0x42000800
    4844:	42000c00 	.word	0x42000c00
    4848:	42001800 	.word	0x42001800
    484c:	42001c00 	.word	0x42001c00
    4850:	42001400 	.word	0x42001400
    4854:	00040003 	.word	0x00040003
    4858:	00060003 	.word	0x00060003
    485c:	00070003 	.word	0x00070003
    4860:	001e0003 	.word	0x001e0003
    4864:	001f0003 	.word	0x001f0003
    4868:	00080003 	.word	0x00080003
    486c:	000a0003 	.word	0x000a0003
    4870:	000b0003 	.word	0x000b0003
    4874:	00100003 	.word	0x00100003
    4878:	00120003 	.word	0x00120003
    487c:	00130003 	.word	0x00130003
    4880:	000c0003 	.word	0x000c0003
    4884:	000e0003 	.word	0x000e0003
    4888:	000f0003 	.word	0x000f0003
    488c:	00160003 	.word	0x00160003
    4890:	00180003 	.word	0x00180003
    4894:	00190003 	.word	0x00190003
    4898:	00050003 	.word	0x00050003
    489c:	00010003 	.word	0x00010003
    48a0:	00090003 	.word	0x00090003
    48a4:	00110003 	.word	0x00110003
    48a8:	000d0003 	.word	0x000d0003
    48ac:	00170003 	.word	0x00170003

000048b0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    48b0:	b570      	push	{r4, r5, r6, lr}
    48b2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    48b4:	4a0c      	ldr	r2, [pc, #48]	; (48e8 <_sercom_get_sercom_inst_index+0x38>)
    48b6:	466b      	mov	r3, sp
    48b8:	ca70      	ldmia	r2!, {r4, r5, r6}
    48ba:	c370      	stmia	r3!, {r4, r5, r6}
    48bc:	ca32      	ldmia	r2!, {r1, r4, r5}
    48be:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    48c0:	9e00      	ldr	r6, [sp, #0]
    48c2:	4286      	cmp	r6, r0
    48c4:	d006      	beq.n	48d4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48c6:	2301      	movs	r3, #1
    48c8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    48ca:	4669      	mov	r1, sp
    48cc:	5852      	ldr	r2, [r2, r1]
    48ce:	4282      	cmp	r2, r0
    48d0:	d103      	bne.n	48da <_sercom_get_sercom_inst_index+0x2a>
    48d2:	e000      	b.n	48d6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48d4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    48d6:	b2d8      	uxtb	r0, r3
    48d8:	e003      	b.n	48e2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48da:	3301      	adds	r3, #1
    48dc:	2b06      	cmp	r3, #6
    48de:	d1f3      	bne.n	48c8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    48e0:	2000      	movs	r0, #0
}
    48e2:	b006      	add	sp, #24
    48e4:	bd70      	pop	{r4, r5, r6, pc}
    48e6:	46c0      	nop			; (mov r8, r8)
    48e8:	0000a44c 	.word	0x0000a44c

000048ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    48ec:	4770      	bx	lr
    48ee:	46c0      	nop			; (mov r8, r8)

000048f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    48f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    48f2:	4b0a      	ldr	r3, [pc, #40]	; (491c <_sercom_set_handler+0x2c>)
    48f4:	781b      	ldrb	r3, [r3, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d10c      	bne.n	4914 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48fa:	4f09      	ldr	r7, [pc, #36]	; (4920 <_sercom_set_handler+0x30>)
    48fc:	4e09      	ldr	r6, [pc, #36]	; (4924 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    48fe:	4d0a      	ldr	r5, [pc, #40]	; (4928 <_sercom_set_handler+0x38>)
    4900:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4902:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4904:	195a      	adds	r2, r3, r5
    4906:	6014      	str	r4, [r2, #0]
    4908:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    490a:	2b18      	cmp	r3, #24
    490c:	d1f9      	bne.n	4902 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    490e:	2201      	movs	r2, #1
    4910:	4b02      	ldr	r3, [pc, #8]	; (491c <_sercom_set_handler+0x2c>)
    4912:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4914:	0080      	lsls	r0, r0, #2
    4916:	4b02      	ldr	r3, [pc, #8]	; (4920 <_sercom_set_handler+0x30>)
    4918:	50c1      	str	r1, [r0, r3]
}
    491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    491c:	20000880 	.word	0x20000880
    4920:	20000884 	.word	0x20000884
    4924:	000048ed 	.word	0x000048ed
    4928:	20000bc4 	.word	0x20000bc4

0000492c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    492c:	b510      	push	{r4, lr}
    492e:	b082      	sub	sp, #8
    4930:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4932:	4668      	mov	r0, sp
    4934:	4905      	ldr	r1, [pc, #20]	; (494c <_sercom_get_interrupt_vector+0x20>)
    4936:	2206      	movs	r2, #6
    4938:	4b05      	ldr	r3, [pc, #20]	; (4950 <_sercom_get_interrupt_vector+0x24>)
    493a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    493c:	1c20      	adds	r0, r4, #0
    493e:	4b05      	ldr	r3, [pc, #20]	; (4954 <_sercom_get_interrupt_vector+0x28>)
    4940:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4942:	466b      	mov	r3, sp
    4944:	5618      	ldrsb	r0, [r3, r0]
}
    4946:	b002      	add	sp, #8
    4948:	bd10      	pop	{r4, pc}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	0000a464 	.word	0x0000a464
    4950:	0000768d 	.word	0x0000768d
    4954:	000048b1 	.word	0x000048b1

00004958 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4958:	b508      	push	{r3, lr}
    495a:	4b02      	ldr	r3, [pc, #8]	; (4964 <SERCOM0_Handler+0xc>)
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	2000      	movs	r0, #0
    4960:	4798      	blx	r3
    4962:	bd08      	pop	{r3, pc}
    4964:	20000884 	.word	0x20000884

00004968 <SERCOM1_Handler>:
    4968:	b508      	push	{r3, lr}
    496a:	4b02      	ldr	r3, [pc, #8]	; (4974 <SERCOM1_Handler+0xc>)
    496c:	685b      	ldr	r3, [r3, #4]
    496e:	2001      	movs	r0, #1
    4970:	4798      	blx	r3
    4972:	bd08      	pop	{r3, pc}
    4974:	20000884 	.word	0x20000884

00004978 <SERCOM2_Handler>:
    4978:	b508      	push	{r3, lr}
    497a:	4b02      	ldr	r3, [pc, #8]	; (4984 <SERCOM2_Handler+0xc>)
    497c:	689b      	ldr	r3, [r3, #8]
    497e:	2002      	movs	r0, #2
    4980:	4798      	blx	r3
    4982:	bd08      	pop	{r3, pc}
    4984:	20000884 	.word	0x20000884

00004988 <SERCOM3_Handler>:
    4988:	b508      	push	{r3, lr}
    498a:	4b02      	ldr	r3, [pc, #8]	; (4994 <SERCOM3_Handler+0xc>)
    498c:	68db      	ldr	r3, [r3, #12]
    498e:	2003      	movs	r0, #3
    4990:	4798      	blx	r3
    4992:	bd08      	pop	{r3, pc}
    4994:	20000884 	.word	0x20000884

00004998 <SERCOM4_Handler>:
    4998:	b508      	push	{r3, lr}
    499a:	4b02      	ldr	r3, [pc, #8]	; (49a4 <SERCOM4_Handler+0xc>)
    499c:	691b      	ldr	r3, [r3, #16]
    499e:	2004      	movs	r0, #4
    49a0:	4798      	blx	r3
    49a2:	bd08      	pop	{r3, pc}
    49a4:	20000884 	.word	0x20000884

000049a8 <SERCOM5_Handler>:
    49a8:	b508      	push	{r3, lr}
    49aa:	4b02      	ldr	r3, [pc, #8]	; (49b4 <SERCOM5_Handler+0xc>)
    49ac:	695b      	ldr	r3, [r3, #20]
    49ae:	2005      	movs	r0, #5
    49b0:	4798      	blx	r3
    49b2:	bd08      	pop	{r3, pc}
    49b4:	20000884 	.word	0x20000884

000049b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	4647      	mov	r7, r8
    49bc:	b480      	push	{r7}
    49be:	b088      	sub	sp, #32
    49c0:	1c05      	adds	r5, r0, #0
    49c2:	1c0c      	adds	r4, r1, #0
    49c4:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    49c6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49c8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    49ca:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49cc:	079a      	lsls	r2, r3, #30
    49ce:	d500      	bpl.n	49d2 <spi_init+0x1a>
    49d0:	e0c1      	b.n	4b56 <spi_init+0x19e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49d2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    49d4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49d6:	07da      	lsls	r2, r3, #31
    49d8:	d500      	bpl.n	49dc <spi_init+0x24>
    49da:	e0bc      	b.n	4b56 <spi_init+0x19e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49dc:	1c08      	adds	r0, r1, #0
    49de:	4b60      	ldr	r3, [pc, #384]	; (4b60 <spi_init+0x1a8>)
    49e0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    49e2:	4b60      	ldr	r3, [pc, #384]	; (4b64 <spi_init+0x1ac>)
    49e4:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    49e6:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    49e8:	2701      	movs	r7, #1
    49ea:	4097      	lsls	r7, r2
    49ec:	1c3a      	adds	r2, r7, #0
    49ee:	430a      	orrs	r2, r1
    49f0:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    49f2:	a907      	add	r1, sp, #28
    49f4:	2724      	movs	r7, #36	; 0x24
    49f6:	5df3      	ldrb	r3, [r6, r7]
    49f8:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49fa:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49fc:	b2c0      	uxtb	r0, r0
    49fe:	4680      	mov	r8, r0
    4a00:	4b59      	ldr	r3, [pc, #356]	; (4b68 <spi_init+0x1b0>)
    4a02:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4a04:	4640      	mov	r0, r8
    4a06:	4b59      	ldr	r3, [pc, #356]	; (4b6c <spi_init+0x1b4>)
    4a08:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4a0a:	5df0      	ldrb	r0, [r6, r7]
    4a0c:	2100      	movs	r1, #0
    4a0e:	4b58      	ldr	r3, [pc, #352]	; (4b70 <spi_init+0x1b8>)
    4a10:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4a12:	7833      	ldrb	r3, [r6, #0]
    4a14:	2b01      	cmp	r3, #1
    4a16:	d000      	beq.n	4a1a <spi_init+0x62>
    4a18:	e09a      	b.n	4b50 <spi_init+0x198>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4a1a:	6822      	ldr	r2, [r4, #0]
    4a1c:	230c      	movs	r3, #12
    4a1e:	4313      	orrs	r3, r2
    4a20:	6023      	str	r3, [r4, #0]
    4a22:	e095      	b.n	4b50 <spi_init+0x198>
    4a24:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    4a26:	60d1      	str	r1, [r2, #12]
    4a28:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4a2a:	2b1c      	cmp	r3, #28
    4a2c:	d1fa      	bne.n	4a24 <spi_init+0x6c>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    4a2e:	2300      	movs	r3, #0
    4a30:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4a32:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4a34:	2400      	movs	r4, #0
    4a36:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4a38:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4a3a:	2336      	movs	r3, #54	; 0x36
    4a3c:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4a3e:	2337      	movs	r3, #55	; 0x37
    4a40:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4a42:	2338      	movs	r3, #56	; 0x38
    4a44:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4a46:	2303      	movs	r3, #3
    4a48:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4a4a:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a4c:	6828      	ldr	r0, [r5, #0]
    4a4e:	4b44      	ldr	r3, [pc, #272]	; (4b60 <spi_init+0x1a8>)
    4a50:	4798      	blx	r3
    4a52:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4a54:	4947      	ldr	r1, [pc, #284]	; (4b74 <spi_init+0x1bc>)
    4a56:	4b48      	ldr	r3, [pc, #288]	; (4b78 <spi_init+0x1c0>)
    4a58:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a5a:	00bf      	lsls	r7, r7, #2
    4a5c:	4b47      	ldr	r3, [pc, #284]	; (4b7c <spi_init+0x1c4>)
    4a5e:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a60:	682f      	ldr	r7, [r5, #0]
    4a62:	ab02      	add	r3, sp, #8
    4a64:	2280      	movs	r2, #128	; 0x80
    4a66:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a68:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a6a:	2201      	movs	r2, #1
    4a6c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4a6e:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    4a70:	7833      	ldrb	r3, [r6, #0]
    4a72:	2b00      	cmp	r3, #0
    4a74:	d102      	bne.n	4a7c <spi_init+0xc4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4a76:	2200      	movs	r2, #0
    4a78:	ab02      	add	r3, sp, #8
    4a7a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    4a7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4a7e:	9303      	str	r3, [sp, #12]
    4a80:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    4a82:	9004      	str	r0, [sp, #16]
    4a84:	6b32      	ldr	r2, [r6, #48]	; 0x30
    4a86:	9205      	str	r2, [sp, #20]
    4a88:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4a8a:	9306      	str	r3, [sp, #24]
    4a8c:	2400      	movs	r4, #0
    4a8e:	b2e1      	uxtb	r1, r4
    4a90:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4a92:	aa03      	add	r2, sp, #12
    4a94:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    4a96:	2800      	cmp	r0, #0
    4a98:	d102      	bne.n	4aa0 <spi_init+0xe8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4a9a:	1c38      	adds	r0, r7, #0
    4a9c:	4a38      	ldr	r2, [pc, #224]	; (4b80 <spi_init+0x1c8>)
    4a9e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4aa0:	1c43      	adds	r3, r0, #1
    4aa2:	d006      	beq.n	4ab2 <spi_init+0xfa>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4aa4:	466a      	mov	r2, sp
    4aa6:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4aa8:	0c00      	lsrs	r0, r0, #16
    4aaa:	b2c0      	uxtb	r0, r0
    4aac:	a902      	add	r1, sp, #8
    4aae:	4b35      	ldr	r3, [pc, #212]	; (4b84 <spi_init+0x1cc>)
    4ab0:	4798      	blx	r3
    4ab2:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4ab4:	2c04      	cmp	r4, #4
    4ab6:	d1ea      	bne.n	4a8e <spi_init+0xd6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    4ab8:	7833      	ldrb	r3, [r6, #0]
    4aba:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4abc:	7c33      	ldrb	r3, [r6, #16]
    4abe:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4ac0:	7cb3      	ldrb	r3, [r6, #18]
    4ac2:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4ac4:	7d33      	ldrb	r3, [r6, #20]
    4ac6:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4ac8:	2200      	movs	r2, #0
    4aca:	466b      	mov	r3, sp
    4acc:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    4ace:	7833      	ldrb	r3, [r6, #0]
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d114      	bne.n	4afe <spi_init+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ad4:	6828      	ldr	r0, [r5, #0]
    4ad6:	4b22      	ldr	r3, [pc, #136]	; (4b60 <spi_init+0x1a8>)
    4ad8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4ada:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4adc:	b2c0      	uxtb	r0, r0
    4ade:	4b2a      	ldr	r3, [pc, #168]	; (4b88 <spi_init+0x1d0>)
    4ae0:	4798      	blx	r3
    4ae2:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4ae4:	69b0      	ldr	r0, [r6, #24]
    4ae6:	466a      	mov	r2, sp
    4ae8:	3206      	adds	r2, #6
    4aea:	4b28      	ldr	r3, [pc, #160]	; (4b8c <spi_init+0x1d4>)
    4aec:	4798      	blx	r3
    4aee:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4af0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4af2:	2b00      	cmp	r3, #0
    4af4:	d12f      	bne.n	4b56 <spi_init+0x19e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4af6:	466b      	mov	r3, sp
    4af8:	3306      	adds	r3, #6
    4afa:	781b      	ldrb	r3, [r3, #0]
    4afc:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4afe:	68b2      	ldr	r2, [r6, #8]
    4b00:	6870      	ldr	r0, [r6, #4]
    4b02:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4b04:	68f3      	ldr	r3, [r6, #12]
    4b06:	431a      	orrs	r2, r3

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4b08:	7c33      	ldrb	r3, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4b0a:	7c71      	ldrb	r1, [r6, #17]
    4b0c:	2900      	cmp	r1, #0
    4b0e:	d103      	bne.n	4b18 <spi_init+0x160>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4b10:	491f      	ldr	r1, [pc, #124]	; (4b90 <spi_init+0x1d8>)
    4b12:	7889      	ldrb	r1, [r1, #2]
    4b14:	0788      	lsls	r0, r1, #30
    4b16:	d501      	bpl.n	4b1c <spi_init+0x164>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4b18:	2180      	movs	r1, #128	; 0x80
    4b1a:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    4b1c:	7cb1      	ldrb	r1, [r6, #18]
    4b1e:	2900      	cmp	r1, #0
    4b20:	d002      	beq.n	4b28 <spi_init+0x170>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4b22:	2180      	movs	r1, #128	; 0x80
    4b24:	0289      	lsls	r1, r1, #10
    4b26:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4b28:	7cf1      	ldrb	r1, [r6, #19]
    4b2a:	2900      	cmp	r1, #0
    4b2c:	d002      	beq.n	4b34 <spi_init+0x17c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4b2e:	2180      	movs	r1, #128	; 0x80
    4b30:	0089      	lsls	r1, r1, #2
    4b32:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4b34:	7d31      	ldrb	r1, [r6, #20]
    4b36:	2900      	cmp	r1, #0
    4b38:	d002      	beq.n	4b40 <spi_init+0x188>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4b3a:	2180      	movs	r1, #128	; 0x80
    4b3c:	0189      	lsls	r1, r1, #6
    4b3e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4b40:	6839      	ldr	r1, [r7, #0]
    4b42:	430a      	orrs	r2, r1
    4b44:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4b46:	687a      	ldr	r2, [r7, #4]
    4b48:	4313      	orrs	r3, r2
    4b4a:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    4b4c:	2000      	movs	r0, #0
    4b4e:	e002      	b.n	4b56 <spi_init+0x19e>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4b50:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    4b52:	2100      	movs	r1, #0
    4b54:	e766      	b.n	4a24 <spi_init+0x6c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4b56:	b008      	add	sp, #32
    4b58:	bc04      	pop	{r2}
    4b5a:	4690      	mov	r8, r2
    4b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	000048b1 	.word	0x000048b1
    4b64:	40000400 	.word	0x40000400
    4b68:	00005a89 	.word	0x00005a89
    4b6c:	000059fd 	.word	0x000059fd
    4b70:	000046d9 	.word	0x000046d9
    4b74:	00004c81 	.word	0x00004c81
    4b78:	000048f1 	.word	0x000048f1
    4b7c:	20000bc4 	.word	0x20000bc4
    4b80:	00004729 	.word	0x00004729
    4b84:	00005b65 	.word	0x00005b65
    4b88:	00005aa5 	.word	0x00005aa5
    4b8c:	00004501 	.word	0x00004501
    4b90:	41002000 	.word	0x41002000

00004b94 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4b94:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b96:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b98:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b9a:	2c01      	cmp	r4, #1
    4b9c:	d16c      	bne.n	4c78 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4b9e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4ba0:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4ba2:	2c00      	cmp	r4, #0
    4ba4:	d168      	bne.n	4c78 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    4ba6:	2a00      	cmp	r2, #0
    4ba8:	d057      	beq.n	4c5a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4baa:	784b      	ldrb	r3, [r1, #1]
    4bac:	2b00      	cmp	r3, #0
    4bae:	d044      	beq.n	4c3a <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4bb0:	6802      	ldr	r2, [r0, #0]
    4bb2:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4bb4:	07dc      	lsls	r4, r3, #31
    4bb6:	d40f      	bmi.n	4bd8 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4bb8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bba:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4bbc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bbe:	2900      	cmp	r1, #0
    4bc0:	d103      	bne.n	4bca <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    4bc2:	095a      	lsrs	r2, r3, #5
    4bc4:	01d2      	lsls	r2, r2, #7
    4bc6:	492d      	ldr	r1, [pc, #180]	; (4c7c <spi_select_slave+0xe8>)
    4bc8:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bca:	211f      	movs	r1, #31
    4bcc:	400b      	ands	r3, r1
    4bce:	2101      	movs	r1, #1
    4bd0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4bd2:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    4bd4:	2305      	movs	r3, #5
    4bd6:	e04f      	b.n	4c78 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4bd8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bda:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4bdc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bde:	2c00      	cmp	r4, #0
    4be0:	d103      	bne.n	4bea <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    4be2:	095a      	lsrs	r2, r3, #5
    4be4:	01d2      	lsls	r2, r2, #7
    4be6:	4c25      	ldr	r4, [pc, #148]	; (4c7c <spi_select_slave+0xe8>)
    4be8:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bea:	241f      	movs	r4, #31
    4bec:	4023      	ands	r3, r4
    4bee:	2401      	movs	r4, #1
    4bf0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4bf2:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    4bf4:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4bf6:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4bf8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4bfa:	07d4      	lsls	r4, r2, #31
    4bfc:	d500      	bpl.n	4c00 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4bfe:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    4c00:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4c02:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    4c04:	2a00      	cmp	r2, #0
    4c06:	d137      	bne.n	4c78 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c08:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c0a:	2104      	movs	r1, #4
    4c0c:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4c0e:	420b      	tst	r3, r1
    4c10:	d0fc      	beq.n	4c0c <spi_select_slave+0x78>
    4c12:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4c14:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4c16:	074c      	lsls	r4, r1, #29
    4c18:	d52e      	bpl.n	4c78 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c1a:	8b53      	ldrh	r3, [r2, #26]
    4c1c:	0759      	lsls	r1, r3, #29
    4c1e:	d503      	bpl.n	4c28 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4c20:	8b51      	ldrh	r1, [r2, #26]
    4c22:	2304      	movs	r3, #4
    4c24:	430b      	orrs	r3, r1
    4c26:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c28:	7983      	ldrb	r3, [r0, #6]
    4c2a:	2b01      	cmp	r3, #1
    4c2c:	d102      	bne.n	4c34 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c30:	2300      	movs	r3, #0
    4c32:	e021      	b.n	4c78 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c34:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c36:	2300      	movs	r3, #0
    4c38:	e01e      	b.n	4c78 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4c3a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4c3c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4c3e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4c40:	2900      	cmp	r1, #0
    4c42:	d103      	bne.n	4c4c <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    4c44:	095a      	lsrs	r2, r3, #5
    4c46:	01d2      	lsls	r2, r2, #7
    4c48:	4c0c      	ldr	r4, [pc, #48]	; (4c7c <spi_select_slave+0xe8>)
    4c4a:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c4c:	211f      	movs	r1, #31
    4c4e:	400b      	ands	r3, r1
    4c50:	2101      	movs	r1, #1
    4c52:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4c54:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4c56:	2300      	movs	r3, #0
    4c58:	e00e      	b.n	4c78 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4c5a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4c5c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4c5e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4c60:	2900      	cmp	r1, #0
    4c62:	d103      	bne.n	4c6c <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    4c64:	095a      	lsrs	r2, r3, #5
    4c66:	01d2      	lsls	r2, r2, #7
    4c68:	4904      	ldr	r1, [pc, #16]	; (4c7c <spi_select_slave+0xe8>)
    4c6a:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c6c:	211f      	movs	r1, #31
    4c6e:	400b      	ands	r3, r1
    4c70:	2101      	movs	r1, #1
    4c72:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4c74:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    4c76:	2300      	movs	r3, #0
}
    4c78:	1c18      	adds	r0, r3, #0
    4c7a:	bd10      	pop	{r4, pc}
    4c7c:	41004400 	.word	0x41004400

00004c80 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4c82:	0080      	lsls	r0, r0, #2
    4c84:	4b67      	ldr	r3, [pc, #412]	; (4e24 <_spi_interrupt_handler+0x1a4>)
    4c86:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c88:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c8a:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    4c8c:	5ce3      	ldrb	r3, [r4, r3]
    4c8e:	2237      	movs	r2, #55	; 0x37
    4c90:	5ca2      	ldrb	r2, [r4, r2]
    4c92:	1c17      	adds	r7, r2, #0
    4c94:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c96:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c98:	7dae      	ldrb	r6, [r5, #22]
    4c9a:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c9c:	07f1      	lsls	r1, r6, #31
    4c9e:	d53b      	bpl.n	4d18 <_spi_interrupt_handler+0x98>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ca0:	7963      	ldrb	r3, [r4, #5]
    4ca2:	2b01      	cmp	r3, #1
    4ca4:	d138      	bne.n	4d18 <_spi_interrupt_handler+0x98>
			(module->dir == SPI_DIRECTION_READ)) {
    4ca6:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d10f      	bne.n	4ccc <_spi_interrupt_handler+0x4c>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4cac:	4b5e      	ldr	r3, [pc, #376]	; (4e28 <_spi_interrupt_handler+0x1a8>)
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4cb2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4cb4:	3b01      	subs	r3, #1
    4cb6:	b29b      	uxth	r3, r3
    4cb8:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    4cba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4cbc:	b29b      	uxth	r3, r3
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d101      	bne.n	4cc6 <_spi_interrupt_handler+0x46>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4cc2:	2301      	movs	r3, #1
    4cc4:	752b      	strb	r3, [r5, #20]
			}
		}
#  endif

		if (0
    4cc6:	7963      	ldrb	r3, [r4, #5]
    4cc8:	2b01      	cmp	r3, #1
    4cca:	d125      	bne.n	4d18 <_spi_interrupt_handler+0x98>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    4ccc:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d022      	beq.n	4d18 <_spi_interrupt_handler+0x98>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4cd2:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4cd6:	7819      	ldrb	r1, [r3, #0]
    4cd8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4cda:	1c58      	adds	r0, r3, #1
    4cdc:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4cde:	79a0      	ldrb	r0, [r4, #6]
    4ce0:	2801      	cmp	r0, #1
    4ce2:	d104      	bne.n	4cee <_spi_interrupt_handler+0x6e>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4ce4:	7858      	ldrb	r0, [r3, #1]
    4ce6:	0200      	lsls	r0, r0, #8
    4ce8:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4cea:	3302      	adds	r3, #2
    4cec:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4cee:	05cb      	lsls	r3, r1, #23
    4cf0:	0ddb      	lsrs	r3, r3, #23
    4cf2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4cf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cf6:	3b01      	subs	r3, #1
    4cf8:	b29b      	uxth	r3, r3
    4cfa:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    4cfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cfe:	b29b      	uxth	r3, r3
    4d00:	2b00      	cmp	r3, #0
    4d02:	d109      	bne.n	4d18 <_spi_interrupt_handler+0x98>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d04:	2301      	movs	r3, #1
    4d06:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4d08:	7a63      	ldrb	r3, [r4, #9]
    4d0a:	2b01      	cmp	r3, #1
    4d0c:	d104      	bne.n	4d18 <_spi_interrupt_handler+0x98>
    4d0e:	79e3      	ldrb	r3, [r4, #7]
    4d10:	2b00      	cmp	r3, #0
    4d12:	d101      	bne.n	4d18 <_spi_interrupt_handler+0x98>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4d14:	2302      	movs	r3, #2
    4d16:	75ab      	strb	r3, [r5, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4d18:	0772      	lsls	r2, r6, #29
    4d1a:	d561      	bpl.n	4de0 <_spi_interrupt_handler+0x160>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4d1c:	8b6b      	ldrh	r3, [r5, #26]
    4d1e:	0759      	lsls	r1, r3, #29
    4d20:	d514      	bpl.n	4d4c <_spi_interrupt_handler+0xcc>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4d22:	7a63      	ldrb	r3, [r4, #9]
    4d24:	2b01      	cmp	r3, #1
    4d26:	d00b      	beq.n	4d40 <_spi_interrupt_handler+0xc0>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4d28:	221e      	movs	r2, #30
    4d2a:	2338      	movs	r3, #56	; 0x38
    4d2c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4d2e:	2303      	movs	r3, #3
    4d30:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4d32:	2305      	movs	r3, #5
    4d34:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4d36:	073a      	lsls	r2, r7, #28
    4d38:	d502      	bpl.n	4d40 <_spi_interrupt_handler+0xc0>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d3a:	1c20      	adds	r0, r4, #0
    4d3c:	69a3      	ldr	r3, [r4, #24]
    4d3e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4d40:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4d42:	8b6a      	ldrh	r2, [r5, #26]
    4d44:	2304      	movs	r3, #4
    4d46:	4313      	orrs	r3, r2
    4d48:	836b      	strh	r3, [r5, #26]
    4d4a:	e049      	b.n	4de0 <_spi_interrupt_handler+0x160>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d4c:	7a63      	ldrb	r3, [r4, #9]
    4d4e:	2b01      	cmp	r3, #1
    4d50:	d116      	bne.n	4d80 <_spi_interrupt_handler+0x100>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d52:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4d56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d58:	3b01      	subs	r3, #1
    4d5a:	b29b      	uxth	r3, r3
    4d5c:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    4d5e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d60:	b29b      	uxth	r3, r3
    4d62:	2b00      	cmp	r3, #0
    4d64:	d13c      	bne.n	4de0 <_spi_interrupt_handler+0x160>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d66:	2304      	movs	r3, #4
    4d68:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
    4d6a:	2200      	movs	r2, #0
    4d6c:	2338      	movs	r3, #56	; 0x38
    4d6e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4d70:	2303      	movs	r3, #3
    4d72:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4d74:	07f9      	lsls	r1, r7, #31
    4d76:	d533      	bpl.n	4de0 <_spi_interrupt_handler+0x160>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4d78:	1c20      	adds	r0, r4, #0
    4d7a:	68e2      	ldr	r2, [r4, #12]
    4d7c:	4790      	blx	r2
    4d7e:	e02f      	b.n	4de0 <_spi_interrupt_handler+0x160>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d80:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d84:	05d2      	lsls	r2, r2, #23
    4d86:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4d88:	b2d3      	uxtb	r3, r2
    4d8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d8c:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4d90:	1c59      	adds	r1, r3, #1
    4d92:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d94:	79a1      	ldrb	r1, [r4, #6]
    4d96:	2901      	cmp	r1, #1
    4d98:	d104      	bne.n	4da4 <_spi_interrupt_handler+0x124>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4d9a:	0a12      	lsrs	r2, r2, #8
    4d9c:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4da0:	3301      	adds	r3, #1
    4da2:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4da4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4da6:	3b01      	subs	r3, #1
    4da8:	b29b      	uxth	r3, r3
    4daa:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4dac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4dae:	b29b      	uxth	r3, r3
    4db0:	2b00      	cmp	r3, #0
    4db2:	d115      	bne.n	4de0 <_spi_interrupt_handler+0x160>
					module->status = STATUS_OK;
    4db4:	2200      	movs	r2, #0
    4db6:	2338      	movs	r3, #56	; 0x38
    4db8:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4dba:	2304      	movs	r3, #4
    4dbc:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4dbe:	7a63      	ldrb	r3, [r4, #9]
    4dc0:	2b02      	cmp	r3, #2
    4dc2:	d105      	bne.n	4dd0 <_spi_interrupt_handler+0x150>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4dc4:	077a      	lsls	r2, r7, #29
    4dc6:	d50b      	bpl.n	4de0 <_spi_interrupt_handler+0x160>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4dc8:	1c20      	adds	r0, r4, #0
    4dca:	6963      	ldr	r3, [r4, #20]
    4dcc:	4798      	blx	r3
    4dce:	e007      	b.n	4de0 <_spi_interrupt_handler+0x160>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4dd0:	7a63      	ldrb	r3, [r4, #9]
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d104      	bne.n	4de0 <_spi_interrupt_handler+0x160>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4dd6:	07b9      	lsls	r1, r7, #30
    4dd8:	d502      	bpl.n	4de0 <_spi_interrupt_handler+0x160>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4dda:	1c20      	adds	r0, r4, #0
    4ddc:	6922      	ldr	r2, [r4, #16]
    4dde:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4de0:	07b3      	lsls	r3, r6, #30
    4de2:	d514      	bpl.n	4e0e <_spi_interrupt_handler+0x18e>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4de4:	7963      	ldrb	r3, [r4, #5]
    4de6:	2b01      	cmp	r3, #1
    4de8:	d111      	bne.n	4e0e <_spi_interrupt_handler+0x18e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4dea:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4dec:	2b01      	cmp	r3, #1
    4dee:	d10e      	bne.n	4e0e <_spi_interrupt_handler+0x18e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4df0:	79e3      	ldrb	r3, [r4, #7]
    4df2:	2b00      	cmp	r3, #0
    4df4:	d10b      	bne.n	4e0e <_spi_interrupt_handler+0x18e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4df6:	2302      	movs	r3, #2
    4df8:	752b      	strb	r3, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4dfa:	2303      	movs	r3, #3
    4dfc:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4dfe:	2200      	movs	r2, #0
    4e00:	2338      	movs	r3, #56	; 0x38
    4e02:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4e04:	07f9      	lsls	r1, r7, #31
    4e06:	d502      	bpl.n	4e0e <_spi_interrupt_handler+0x18e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
						(module);
    4e08:	1c20      	adds	r0, r4, #0
    4e0a:	68e2      	ldr	r2, [r4, #12]
    4e0c:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4e0e:	09f6      	lsrs	r6, r6, #7
    4e10:	d007      	beq.n	4e22 <_spi_interrupt_handler+0x1a2>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e12:	2380      	movs	r3, #128	; 0x80
    4e14:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e16:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4e18:	067b      	lsls	r3, r7, #25
    4e1a:	d502      	bpl.n	4e22 <_spi_interrupt_handler+0x1a2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e1e:	1c20      	adds	r0, r4, #0
    4e20:	4798      	blx	r3
		}
	}
#  endif
}
    4e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e24:	20000bc4 	.word	0x20000bc4
    4e28:	20000bdc 	.word	0x20000bdc

00004e2c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e2e:	465f      	mov	r7, fp
    4e30:	4656      	mov	r6, sl
    4e32:	464d      	mov	r5, r9
    4e34:	4644      	mov	r4, r8
    4e36:	b4f0      	push	{r4, r5, r6, r7}
    4e38:	b091      	sub	sp, #68	; 0x44
    4e3a:	1c05      	adds	r5, r0, #0
    4e3c:	1c0c      	adds	r4, r1, #0
    4e3e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4e40:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e42:	1c08      	adds	r0, r1, #0
    4e44:	4bad      	ldr	r3, [pc, #692]	; (50fc <usart_init+0x2d0>)
    4e46:	4798      	blx	r3
    4e48:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e4a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4e4c:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e4e:	07d9      	lsls	r1, r3, #31
    4e50:	d500      	bpl.n	4e54 <usart_init+0x28>
    4e52:	e14b      	b.n	50ec <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e54:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4e56:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e58:	079f      	lsls	r7, r3, #30
    4e5a:	d500      	bpl.n	4e5e <usart_init+0x32>
    4e5c:	e146      	b.n	50ec <usart_init+0x2c0>
    4e5e:	4ba8      	ldr	r3, [pc, #672]	; (5100 <usart_init+0x2d4>)
    4e60:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e62:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e64:	2701      	movs	r7, #1
    4e66:	408f      	lsls	r7, r1
    4e68:	1c39      	adds	r1, r7, #0
    4e6a:	4301      	orrs	r1, r0
    4e6c:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4e6e:	a90f      	add	r1, sp, #60	; 0x3c
    4e70:	272d      	movs	r7, #45	; 0x2d
    4e72:	5df3      	ldrb	r3, [r6, r7]
    4e74:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e76:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e78:	b2d2      	uxtb	r2, r2
    4e7a:	4690      	mov	r8, r2
    4e7c:	1c10      	adds	r0, r2, #0
    4e7e:	4ba1      	ldr	r3, [pc, #644]	; (5104 <usart_init+0x2d8>)
    4e80:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e82:	4640      	mov	r0, r8
    4e84:	4ba0      	ldr	r3, [pc, #640]	; (5108 <usart_init+0x2dc>)
    4e86:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e88:	5df0      	ldrb	r0, [r6, r7]
    4e8a:	2100      	movs	r1, #0
    4e8c:	4b9f      	ldr	r3, [pc, #636]	; (510c <usart_init+0x2e0>)
    4e8e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4e90:	7af3      	ldrb	r3, [r6, #11]
    4e92:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4e94:	2324      	movs	r3, #36	; 0x24
    4e96:	5cf3      	ldrb	r3, [r6, r3]
    4e98:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4e9a:	2325      	movs	r3, #37	; 0x25
    4e9c:	5cf3      	ldrb	r3, [r6, r3]
    4e9e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4ea0:	7ef3      	ldrb	r3, [r6, #27]
    4ea2:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4ea4:	7f33      	ldrb	r3, [r6, #28]
    4ea6:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ea8:	6829      	ldr	r1, [r5, #0]
    4eaa:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4eac:	1c08      	adds	r0, r1, #0
    4eae:	4b93      	ldr	r3, [pc, #588]	; (50fc <usart_init+0x2d0>)
    4eb0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4eb2:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    4eb4:	2200      	movs	r2, #0
    4eb6:	466b      	mov	r3, sp
    4eb8:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4eba:	8a32      	ldrh	r2, [r6, #16]
    4ebc:	9202      	str	r2, [sp, #8]
    4ebe:	2380      	movs	r3, #128	; 0x80
    4ec0:	01db      	lsls	r3, r3, #7
    4ec2:	429a      	cmp	r2, r3
    4ec4:	d021      	beq.n	4f0a <usart_init+0xde>
    4ec6:	2380      	movs	r3, #128	; 0x80
    4ec8:	01db      	lsls	r3, r3, #7
    4eca:	429a      	cmp	r2, r3
    4ecc:	d804      	bhi.n	4ed8 <usart_init+0xac>
    4ece:	2380      	movs	r3, #128	; 0x80
    4ed0:	019b      	lsls	r3, r3, #6
    4ed2:	429a      	cmp	r2, r3
    4ed4:	d011      	beq.n	4efa <usart_init+0xce>
    4ed6:	e008      	b.n	4eea <usart_init+0xbe>
    4ed8:	23c0      	movs	r3, #192	; 0xc0
    4eda:	01db      	lsls	r3, r3, #7
    4edc:	9f02      	ldr	r7, [sp, #8]
    4ede:	429f      	cmp	r7, r3
    4ee0:	d00f      	beq.n	4f02 <usart_init+0xd6>
    4ee2:	2380      	movs	r3, #128	; 0x80
    4ee4:	021b      	lsls	r3, r3, #8
    4ee6:	429f      	cmp	r7, r3
    4ee8:	d003      	beq.n	4ef2 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4eea:	2710      	movs	r7, #16
    4eec:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4eee:	2700      	movs	r7, #0
    4ef0:	e00e      	b.n	4f10 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4ef2:	2703      	movs	r7, #3
    4ef4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4ef6:	2700      	movs	r7, #0
    4ef8:	e00a      	b.n	4f10 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4efa:	2710      	movs	r7, #16
    4efc:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4efe:	2701      	movs	r7, #1
    4f00:	e006      	b.n	4f10 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4f02:	2708      	movs	r7, #8
    4f04:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4f06:	2701      	movs	r7, #1
    4f08:	e002      	b.n	4f10 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4f0a:	2708      	movs	r7, #8
    4f0c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4f0e:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4f10:	6831      	ldr	r1, [r6, #0]
    4f12:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    4f14:	68f2      	ldr	r2, [r6, #12]
    4f16:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4f18:	6973      	ldr	r3, [r6, #20]
    4f1a:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f1c:	7e31      	ldrb	r1, [r6, #24]
    4f1e:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f20:	2326      	movs	r3, #38	; 0x26
    4f22:	5cf3      	ldrb	r3, [r6, r3]
    4f24:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    4f26:	6873      	ldr	r3, [r6, #4]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d013      	beq.n	4f54 <usart_init+0x128>
    4f2c:	2280      	movs	r2, #128	; 0x80
    4f2e:	0552      	lsls	r2, r2, #21
    4f30:	4293      	cmp	r3, r2
    4f32:	d12e      	bne.n	4f92 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4f34:	2327      	movs	r3, #39	; 0x27
    4f36:	5cf3      	ldrb	r3, [r6, r3]
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d12e      	bne.n	4f9a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4f3c:	6a37      	ldr	r7, [r6, #32]
    4f3e:	b2c0      	uxtb	r0, r0
    4f40:	4b73      	ldr	r3, [pc, #460]	; (5110 <usart_init+0x2e4>)
    4f42:	4798      	blx	r3
    4f44:	1c01      	adds	r1, r0, #0
    4f46:	1c38      	adds	r0, r7, #0
    4f48:	466a      	mov	r2, sp
    4f4a:	3226      	adds	r2, #38	; 0x26
    4f4c:	4b71      	ldr	r3, [pc, #452]	; (5114 <usart_init+0x2e8>)
    4f4e:	4798      	blx	r3
    4f50:	1c03      	adds	r3, r0, #0
    4f52:	e01f      	b.n	4f94 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4f54:	2327      	movs	r3, #39	; 0x27
    4f56:	5cf3      	ldrb	r3, [r6, r3]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d00a      	beq.n	4f72 <usart_init+0x146>
				status_code =
    4f5c:	9a06      	ldr	r2, [sp, #24]
    4f5e:	9200      	str	r2, [sp, #0]
    4f60:	6a30      	ldr	r0, [r6, #32]
    4f62:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4f64:	466a      	mov	r2, sp
    4f66:	3226      	adds	r2, #38	; 0x26
    4f68:	1c3b      	adds	r3, r7, #0
    4f6a:	4f6b      	ldr	r7, [pc, #428]	; (5118 <usart_init+0x2ec>)
    4f6c:	47b8      	blx	r7
    4f6e:	1c03      	adds	r3, r0, #0
    4f70:	e010      	b.n	4f94 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4f72:	6a31      	ldr	r1, [r6, #32]
    4f74:	9107      	str	r1, [sp, #28]
    4f76:	b2c0      	uxtb	r0, r0
    4f78:	4b65      	ldr	r3, [pc, #404]	; (5110 <usart_init+0x2e4>)
    4f7a:	4798      	blx	r3
    4f7c:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4f7e:	9a06      	ldr	r2, [sp, #24]
    4f80:	9200      	str	r2, [sp, #0]
    4f82:	9807      	ldr	r0, [sp, #28]
    4f84:	466a      	mov	r2, sp
    4f86:	3226      	adds	r2, #38	; 0x26
    4f88:	1c3b      	adds	r3, r7, #0
    4f8a:	4f63      	ldr	r7, [pc, #396]	; (5118 <usart_init+0x2ec>)
    4f8c:	47b8      	blx	r7
    4f8e:	1c03      	adds	r3, r0, #0
    4f90:	e000      	b.n	4f94 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    4f92:	2300      	movs	r3, #0
    4f94:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4f96:	d000      	beq.n	4f9a <usart_init+0x16e>
    4f98:	e0a8      	b.n	50ec <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4f9a:	7e73      	ldrb	r3, [r6, #25]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d002      	beq.n	4fa6 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4fa0:	7eb3      	ldrb	r3, [r6, #26]
    4fa2:	4641      	mov	r1, r8
    4fa4:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4fa6:	682a      	ldr	r2, [r5, #0]
    4fa8:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4faa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4fac:	2b00      	cmp	r3, #0
    4fae:	d1fc      	bne.n	4faa <usart_init+0x17e>
    4fb0:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4fb2:	466b      	mov	r3, sp
    4fb4:	3326      	adds	r3, #38	; 0x26
    4fb6:	881b      	ldrh	r3, [r3, #0]
    4fb8:	4642      	mov	r2, r8
    4fba:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4fbc:	464b      	mov	r3, r9
    4fbe:	9f03      	ldr	r7, [sp, #12]
    4fc0:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    4fc2:	9f04      	ldr	r7, [sp, #16]
    4fc4:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4fc6:	6871      	ldr	r1, [r6, #4]
    4fc8:	430b      	orrs	r3, r1
		config->sample_rate |
    4fca:	9f02      	ldr	r7, [sp, #8]
    4fcc:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4fce:	4652      	mov	r2, sl
    4fd0:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4fd2:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4fd4:	4659      	mov	r1, fp
    4fd6:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    4fd8:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    4fda:	2327      	movs	r3, #39	; 0x27
    4fdc:	5cf3      	ldrb	r3, [r6, r3]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d101      	bne.n	4fe6 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4fe2:	2304      	movs	r3, #4
    4fe4:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4fe6:	7e71      	ldrb	r1, [r6, #25]
    4fe8:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4fea:	7f33      	ldrb	r3, [r6, #28]
    4fec:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4fee:	4319      	orrs	r1, r3
    4ff0:	7af2      	ldrb	r2, [r6, #11]
    4ff2:	7ab3      	ldrb	r3, [r6, #10]
    4ff4:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4ff6:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4ff8:	7f73      	ldrb	r3, [r6, #29]
    4ffa:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4ffc:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4ffe:	2324      	movs	r3, #36	; 0x24
    5000:	5cf3      	ldrb	r3, [r6, r3]
    5002:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5004:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5006:	2325      	movs	r3, #37	; 0x25
    5008:	5cf3      	ldrb	r3, [r6, r3]
    500a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    500c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    500e:	8933      	ldrh	r3, [r6, #8]
    5010:	2bff      	cmp	r3, #255	; 0xff
    5012:	d00b      	beq.n	502c <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5014:	7ef2      	ldrb	r2, [r6, #27]
    5016:	2a00      	cmp	r2, #0
    5018:	d003      	beq.n	5022 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    501a:	22a0      	movs	r2, #160	; 0xa0
    501c:	04d2      	lsls	r2, r2, #19
    501e:	4317      	orrs	r7, r2
    5020:	e002      	b.n	5028 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5022:	2280      	movs	r2, #128	; 0x80
    5024:	0452      	lsls	r2, r2, #17
    5026:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    5028:	4319      	orrs	r1, r3
    502a:	e005      	b.n	5038 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    502c:	7ef3      	ldrb	r3, [r6, #27]
    502e:	2b00      	cmp	r3, #0
    5030:	d002      	beq.n	5038 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5032:	2380      	movs	r3, #128	; 0x80
    5034:	04db      	lsls	r3, r3, #19
    5036:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5038:	232c      	movs	r3, #44	; 0x2c
    503a:	5cf3      	ldrb	r3, [r6, r3]
    503c:	2b00      	cmp	r3, #0
    503e:	d103      	bne.n	5048 <usart_init+0x21c>
    5040:	4b36      	ldr	r3, [pc, #216]	; (511c <usart_init+0x2f0>)
    5042:	789b      	ldrb	r3, [r3, #2]
    5044:	079a      	lsls	r2, r3, #30
    5046:	d501      	bpl.n	504c <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5048:	2380      	movs	r3, #128	; 0x80
    504a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    504c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    504e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5050:	2b00      	cmp	r3, #0
    5052:	d1fc      	bne.n	504e <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5054:	4643      	mov	r3, r8
    5056:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5058:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    505a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    505c:	2b00      	cmp	r3, #0
    505e:	d1fc      	bne.n	505a <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5060:	4641      	mov	r1, r8
    5062:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5064:	ab0e      	add	r3, sp, #56	; 0x38
    5066:	2280      	movs	r2, #128	; 0x80
    5068:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    506a:	2200      	movs	r2, #0
    506c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    506e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5070:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    5072:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5074:	920a      	str	r2, [sp, #40]	; 0x28
    5076:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5078:	930b      	str	r3, [sp, #44]	; 0x2c
    507a:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    507c:	970c      	str	r7, [sp, #48]	; 0x30
    507e:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    5080:	960d      	str	r6, [sp, #52]	; 0x34
    5082:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5084:	ae0e      	add	r6, sp, #56	; 0x38
    5086:	b2f9      	uxtb	r1, r7
    5088:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    508a:	aa0a      	add	r2, sp, #40	; 0x28
    508c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    508e:	2800      	cmp	r0, #0
    5090:	d102      	bne.n	5098 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5092:	1c20      	adds	r0, r4, #0
    5094:	4a22      	ldr	r2, [pc, #136]	; (5120 <usart_init+0x2f4>)
    5096:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5098:	1c43      	adds	r3, r0, #1
    509a:	d005      	beq.n	50a8 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    509c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    509e:	0c00      	lsrs	r0, r0, #16
    50a0:	b2c0      	uxtb	r0, r0
    50a2:	1c31      	adds	r1, r6, #0
    50a4:	4a1f      	ldr	r2, [pc, #124]	; (5124 <usart_init+0x2f8>)
    50a6:	4790      	blx	r2
    50a8:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    50aa:	2f04      	cmp	r7, #4
    50ac:	d1eb      	bne.n	5086 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    50ae:	2300      	movs	r3, #0
    50b0:	60eb      	str	r3, [r5, #12]
    50b2:	612b      	str	r3, [r5, #16]
    50b4:	616b      	str	r3, [r5, #20]
    50b6:	61ab      	str	r3, [r5, #24]
    50b8:	61eb      	str	r3, [r5, #28]
    50ba:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    50bc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    50be:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    50c0:	2200      	movs	r2, #0
    50c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    50c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    50c6:	2330      	movs	r3, #48	; 0x30
    50c8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    50ca:	2331      	movs	r3, #49	; 0x31
    50cc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    50ce:	2332      	movs	r3, #50	; 0x32
    50d0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    50d2:	2333      	movs	r3, #51	; 0x33
    50d4:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    50d6:	6828      	ldr	r0, [r5, #0]
    50d8:	4b08      	ldr	r3, [pc, #32]	; (50fc <usart_init+0x2d0>)
    50da:	4798      	blx	r3
    50dc:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    50de:	4912      	ldr	r1, [pc, #72]	; (5128 <usart_init+0x2fc>)
    50e0:	4b12      	ldr	r3, [pc, #72]	; (512c <usart_init+0x300>)
    50e2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    50e4:	00a4      	lsls	r4, r4, #2
    50e6:	4b12      	ldr	r3, [pc, #72]	; (5130 <usart_init+0x304>)
    50e8:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    50ea:	2000      	movs	r0, #0
}
    50ec:	b011      	add	sp, #68	; 0x44
    50ee:	bc3c      	pop	{r2, r3, r4, r5}
    50f0:	4690      	mov	r8, r2
    50f2:	4699      	mov	r9, r3
    50f4:	46a2      	mov	sl, r4
    50f6:	46ab      	mov	fp, r5
    50f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50fa:	46c0      	nop			; (mov r8, r8)
    50fc:	000048b1 	.word	0x000048b1
    5100:	40000400 	.word	0x40000400
    5104:	00005a89 	.word	0x00005a89
    5108:	000059fd 	.word	0x000059fd
    510c:	000046d9 	.word	0x000046d9
    5110:	00005aa5 	.word	0x00005aa5
    5114:	00004501 	.word	0x00004501
    5118:	00004529 	.word	0x00004529
    511c:	41002000 	.word	0x41002000
    5120:	00004729 	.word	0x00004729
    5124:	00005b65 	.word	0x00005b65
    5128:	000051f1 	.word	0x000051f1
    512c:	000048f1 	.word	0x000048f1
    5130:	20000bc4 	.word	0x20000bc4

00005134 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5134:	b510      	push	{r4, lr}
    5136:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5138:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    513a:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    513c:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    513e:	2c00      	cmp	r4, #0
    5140:	d00d      	beq.n	515e <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5142:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    5144:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5146:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5148:	2a00      	cmp	r2, #0
    514a:	d108      	bne.n	515e <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    514c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    514e:	2a00      	cmp	r2, #0
    5150:	d1fc      	bne.n	514c <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5152:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5154:	2102      	movs	r1, #2
    5156:	7e1a      	ldrb	r2, [r3, #24]
    5158:	420a      	tst	r2, r1
    515a:	d0fc      	beq.n	5156 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    515c:	2000      	movs	r0, #0
}
    515e:	bd10      	pop	{r4, pc}

00005160 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5160:	b510      	push	{r4, lr}
    5162:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5164:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5166:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5168:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    516a:	2a00      	cmp	r2, #0
    516c:	d033      	beq.n	51d6 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    516e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5170:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    5172:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5174:	2b00      	cmp	r3, #0
    5176:	d12e      	bne.n	51d6 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5178:	7e23      	ldrb	r3, [r4, #24]
    517a:	075a      	lsls	r2, r3, #29
    517c:	d52b      	bpl.n	51d6 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    517e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5180:	2b00      	cmp	r3, #0
    5182:	d1fc      	bne.n	517e <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5184:	8b63      	ldrh	r3, [r4, #26]
    5186:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5188:	069a      	lsls	r2, r3, #26
    518a:	d021      	beq.n	51d0 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    518c:	079a      	lsls	r2, r3, #30
    518e:	d503      	bpl.n	5198 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5190:	2302      	movs	r3, #2
    5192:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    5194:	201a      	movs	r0, #26
    5196:	e01e      	b.n	51d6 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5198:	075a      	lsls	r2, r3, #29
    519a:	d503      	bpl.n	51a4 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    519c:	2304      	movs	r3, #4
    519e:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    51a0:	201e      	movs	r0, #30
    51a2:	e018      	b.n	51d6 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    51a4:	07da      	lsls	r2, r3, #31
    51a6:	d503      	bpl.n	51b0 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    51a8:	2301      	movs	r3, #1
    51aa:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    51ac:	2013      	movs	r0, #19
    51ae:	e012      	b.n	51d6 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    51b0:	06da      	lsls	r2, r3, #27
    51b2:	d505      	bpl.n	51c0 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    51b4:	8b62      	ldrh	r2, [r4, #26]
    51b6:	2310      	movs	r3, #16
    51b8:	4313      	orrs	r3, r2
    51ba:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    51bc:	2042      	movs	r0, #66	; 0x42
    51be:	e00a      	b.n	51d6 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    51c0:	069a      	lsls	r2, r3, #26
    51c2:	d505      	bpl.n	51d0 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    51c4:	8b62      	ldrh	r2, [r4, #26]
    51c6:	2320      	movs	r3, #32
    51c8:	4313      	orrs	r3, r2
    51ca:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    51cc:	2041      	movs	r0, #65	; 0x41
    51ce:	e002      	b.n	51d6 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    51d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    51d2:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    51d4:	2000      	movs	r0, #0
}
    51d6:	bd10      	pop	{r4, pc}

000051d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    51d8:	1c93      	adds	r3, r2, #2
    51da:	009b      	lsls	r3, r3, #2
    51dc:	18c3      	adds	r3, r0, r3
    51de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    51e0:	2301      	movs	r3, #1
    51e2:	4093      	lsls	r3, r2
    51e4:	1c1a      	adds	r2, r3, #0
    51e6:	2330      	movs	r3, #48	; 0x30
    51e8:	5cc1      	ldrb	r1, [r0, r3]
    51ea:	430a      	orrs	r2, r1
    51ec:	54c2      	strb	r2, [r0, r3]
}
    51ee:	4770      	bx	lr

000051f0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    51f2:	0080      	lsls	r0, r0, #2
    51f4:	4b64      	ldr	r3, [pc, #400]	; (5388 <_usart_interrupt_handler+0x198>)
    51f6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    51f8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    51fa:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    51fc:	2b00      	cmp	r3, #0
    51fe:	d1fc      	bne.n	51fa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5200:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    5202:	7da6      	ldrb	r6, [r4, #22]
    5204:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    5206:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    5208:	5ceb      	ldrb	r3, [r5, r3]
    520a:	2230      	movs	r2, #48	; 0x30
    520c:	5caf      	ldrb	r7, [r5, r2]
    520e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5210:	07f1      	lsls	r1, r6, #31
    5212:	d520      	bpl.n	5256 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    5214:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5216:	b29b      	uxth	r3, r3
    5218:	2b00      	cmp	r3, #0
    521a:	d01a      	beq.n	5252 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    521c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    521e:	781a      	ldrb	r2, [r3, #0]
    5220:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5222:	1c59      	adds	r1, r3, #1
    5224:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5226:	7969      	ldrb	r1, [r5, #5]
    5228:	2901      	cmp	r1, #1
    522a:	d104      	bne.n	5236 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    522c:	7859      	ldrb	r1, [r3, #1]
    522e:	0209      	lsls	r1, r1, #8
    5230:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5232:	3302      	adds	r3, #2
    5234:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5236:	05d3      	lsls	r3, r2, #23
    5238:	0ddb      	lsrs	r3, r3, #23
    523a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    523c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    523e:	3b01      	subs	r3, #1
    5240:	b29b      	uxth	r3, r3
    5242:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5244:	2b00      	cmp	r3, #0
    5246:	d106      	bne.n	5256 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5248:	2301      	movs	r3, #1
    524a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    524c:	2302      	movs	r3, #2
    524e:	75a3      	strb	r3, [r4, #22]
    5250:	e001      	b.n	5256 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5252:	2301      	movs	r3, #1
    5254:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5256:	07b2      	lsls	r2, r6, #30
    5258:	d509      	bpl.n	526e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    525a:	2302      	movs	r3, #2
    525c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    525e:	2200      	movs	r2, #0
    5260:	2333      	movs	r3, #51	; 0x33
    5262:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5264:	07fb      	lsls	r3, r7, #31
    5266:	d502      	bpl.n	526e <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5268:	1c28      	adds	r0, r5, #0
    526a:	68e9      	ldr	r1, [r5, #12]
    526c:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    526e:	0772      	lsls	r2, r6, #29
    5270:	d56a      	bpl.n	5348 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    5272:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5274:	b29b      	uxth	r3, r3
    5276:	2b00      	cmp	r3, #0
    5278:	d064      	beq.n	5344 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    527a:	8b63      	ldrh	r3, [r4, #26]
    527c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    527e:	0719      	lsls	r1, r3, #28
    5280:	d402      	bmi.n	5288 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5282:	223f      	movs	r2, #63	; 0x3f
    5284:	4013      	ands	r3, r2
    5286:	e001      	b.n	528c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5288:	2237      	movs	r2, #55	; 0x37
    528a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    528c:	2b00      	cmp	r3, #0
    528e:	d037      	beq.n	5300 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5290:	079a      	lsls	r2, r3, #30
    5292:	d507      	bpl.n	52a4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5294:	221a      	movs	r2, #26
    5296:	2332      	movs	r3, #50	; 0x32
    5298:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    529a:	8b62      	ldrh	r2, [r4, #26]
    529c:	2302      	movs	r3, #2
    529e:	4313      	orrs	r3, r2
    52a0:	8363      	strh	r3, [r4, #26]
    52a2:	e027      	b.n	52f4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    52a4:	0759      	lsls	r1, r3, #29
    52a6:	d507      	bpl.n	52b8 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    52a8:	221e      	movs	r2, #30
    52aa:	2332      	movs	r3, #50	; 0x32
    52ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    52ae:	8b62      	ldrh	r2, [r4, #26]
    52b0:	2304      	movs	r3, #4
    52b2:	4313      	orrs	r3, r2
    52b4:	8363      	strh	r3, [r4, #26]
    52b6:	e01d      	b.n	52f4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    52b8:	07da      	lsls	r2, r3, #31
    52ba:	d507      	bpl.n	52cc <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    52bc:	2213      	movs	r2, #19
    52be:	2332      	movs	r3, #50	; 0x32
    52c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    52c2:	8b62      	ldrh	r2, [r4, #26]
    52c4:	2301      	movs	r3, #1
    52c6:	4313      	orrs	r3, r2
    52c8:	8363      	strh	r3, [r4, #26]
    52ca:	e013      	b.n	52f4 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    52cc:	06d9      	lsls	r1, r3, #27
    52ce:	d507      	bpl.n	52e0 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    52d0:	2242      	movs	r2, #66	; 0x42
    52d2:	2332      	movs	r3, #50	; 0x32
    52d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    52d6:	8b62      	ldrh	r2, [r4, #26]
    52d8:	2310      	movs	r3, #16
    52da:	4313      	orrs	r3, r2
    52dc:	8363      	strh	r3, [r4, #26]
    52de:	e009      	b.n	52f4 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    52e0:	2220      	movs	r2, #32
    52e2:	421a      	tst	r2, r3
    52e4:	d006      	beq.n	52f4 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    52e6:	2241      	movs	r2, #65	; 0x41
    52e8:	2332      	movs	r3, #50	; 0x32
    52ea:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    52ec:	8b62      	ldrh	r2, [r4, #26]
    52ee:	2320      	movs	r3, #32
    52f0:	4313      	orrs	r3, r2
    52f2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    52f4:	077a      	lsls	r2, r7, #29
    52f6:	d527      	bpl.n	5348 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    52f8:	1c28      	adds	r0, r5, #0
    52fa:	696b      	ldr	r3, [r5, #20]
    52fc:	4798      	blx	r3
    52fe:	e023      	b.n	5348 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5300:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    5302:	05d2      	lsls	r2, r2, #23
    5304:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5306:	b2d3      	uxtb	r3, r2
    5308:	6a69      	ldr	r1, [r5, #36]	; 0x24
    530a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    530c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    530e:	1c59      	adds	r1, r3, #1
    5310:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5312:	7969      	ldrb	r1, [r5, #5]
    5314:	2901      	cmp	r1, #1
    5316:	d104      	bne.n	5322 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5318:	0a12      	lsrs	r2, r2, #8
    531a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    531c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    531e:	3301      	adds	r3, #1
    5320:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5322:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5324:	3b01      	subs	r3, #1
    5326:	b29b      	uxth	r3, r3
    5328:	85ab      	strh	r3, [r5, #44]	; 0x2c
    532a:	2b00      	cmp	r3, #0
    532c:	d10c      	bne.n	5348 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    532e:	2304      	movs	r3, #4
    5330:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5332:	2200      	movs	r2, #0
    5334:	2332      	movs	r3, #50	; 0x32
    5336:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5338:	07ba      	lsls	r2, r7, #30
    533a:	d505      	bpl.n	5348 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    533c:	1c28      	adds	r0, r5, #0
    533e:	692b      	ldr	r3, [r5, #16]
    5340:	4798      	blx	r3
    5342:	e001      	b.n	5348 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5344:	2304      	movs	r3, #4
    5346:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5348:	06f1      	lsls	r1, r6, #27
    534a:	d507      	bpl.n	535c <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    534c:	2310      	movs	r3, #16
    534e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5350:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5352:	06fa      	lsls	r2, r7, #27
    5354:	d502      	bpl.n	535c <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5356:	1c28      	adds	r0, r5, #0
    5358:	69eb      	ldr	r3, [r5, #28]
    535a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    535c:	06b1      	lsls	r1, r6, #26
    535e:	d507      	bpl.n	5370 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5360:	2320      	movs	r3, #32
    5362:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5364:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5366:	073a      	lsls	r2, r7, #28
    5368:	d502      	bpl.n	5370 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    536a:	1c28      	adds	r0, r5, #0
    536c:	69ab      	ldr	r3, [r5, #24]
    536e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5370:	0731      	lsls	r1, r6, #28
    5372:	d507      	bpl.n	5384 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5374:	2308      	movs	r3, #8
    5376:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5378:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    537a:	06ba      	lsls	r2, r7, #26
    537c:	d502      	bpl.n	5384 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    537e:	6a2b      	ldr	r3, [r5, #32]
    5380:	1c28      	adds	r0, r5, #0
    5382:	4798      	blx	r3
		}
	}
#endif
}
    5384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	20000bc4 	.word	0x20000bc4

0000538c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    538c:	b508      	push	{r3, lr}
	switch (clock_source) {
    538e:	2808      	cmp	r0, #8
    5390:	d834      	bhi.n	53fc <system_clock_source_get_hz+0x70>
    5392:	0080      	lsls	r0, r0, #2
    5394:	4b1b      	ldr	r3, [pc, #108]	; (5404 <system_clock_source_get_hz+0x78>)
    5396:	581b      	ldr	r3, [r3, r0]
    5398:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    539a:	2080      	movs	r0, #128	; 0x80
    539c:	0200      	lsls	r0, r0, #8
    539e:	e030      	b.n	5402 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    53a0:	4b19      	ldr	r3, [pc, #100]	; (5408 <system_clock_source_get_hz+0x7c>)
    53a2:	6918      	ldr	r0, [r3, #16]
    53a4:	e02d      	b.n	5402 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    53a6:	4b19      	ldr	r3, [pc, #100]	; (540c <system_clock_source_get_hz+0x80>)
    53a8:	6a18      	ldr	r0, [r3, #32]
    53aa:	0580      	lsls	r0, r0, #22
    53ac:	0f80      	lsrs	r0, r0, #30
    53ae:	4b18      	ldr	r3, [pc, #96]	; (5410 <system_clock_source_get_hz+0x84>)
    53b0:	40c3      	lsrs	r3, r0
    53b2:	1c18      	adds	r0, r3, #0
    53b4:	e025      	b.n	5402 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    53b6:	4b14      	ldr	r3, [pc, #80]	; (5408 <system_clock_source_get_hz+0x7c>)
    53b8:	6958      	ldr	r0, [r3, #20]
    53ba:	e022      	b.n	5402 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    53bc:	4b12      	ldr	r3, [pc, #72]	; (5408 <system_clock_source_get_hz+0x7c>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	2002      	movs	r0, #2
    53c2:	4018      	ands	r0, r3
    53c4:	d01d      	beq.n	5402 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    53c6:	4911      	ldr	r1, [pc, #68]	; (540c <system_clock_source_get_hz+0x80>)
    53c8:	2210      	movs	r2, #16
    53ca:	68cb      	ldr	r3, [r1, #12]
    53cc:	421a      	tst	r2, r3
    53ce:	d0fc      	beq.n	53ca <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    53d0:	4b0d      	ldr	r3, [pc, #52]	; (5408 <system_clock_source_get_hz+0x7c>)
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	075a      	lsls	r2, r3, #29
    53d6:	d513      	bpl.n	5400 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    53d8:	2000      	movs	r0, #0
    53da:	4b0e      	ldr	r3, [pc, #56]	; (5414 <system_clock_source_get_hz+0x88>)
    53dc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    53de:	4b0a      	ldr	r3, [pc, #40]	; (5408 <system_clock_source_get_hz+0x7c>)
    53e0:	689b      	ldr	r3, [r3, #8]
    53e2:	041b      	lsls	r3, r3, #16
    53e4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    53e6:	4358      	muls	r0, r3
    53e8:	e00b      	b.n	5402 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    53ea:	2350      	movs	r3, #80	; 0x50
    53ec:	4a07      	ldr	r2, [pc, #28]	; (540c <system_clock_source_get_hz+0x80>)
    53ee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    53f0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    53f2:	075a      	lsls	r2, r3, #29
    53f4:	d505      	bpl.n	5402 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    53f6:	4b04      	ldr	r3, [pc, #16]	; (5408 <system_clock_source_get_hz+0x7c>)
    53f8:	68d8      	ldr	r0, [r3, #12]
    53fa:	e002      	b.n	5402 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    53fc:	2000      	movs	r0, #0
    53fe:	e000      	b.n	5402 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5400:	4805      	ldr	r0, [pc, #20]	; (5418 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    5402:	bd08      	pop	{r3, pc}
    5404:	0000a46c 	.word	0x0000a46c
    5408:	2000089c 	.word	0x2000089c
    540c:	40000800 	.word	0x40000800
    5410:	007a1200 	.word	0x007a1200
    5414:	00005aa5 	.word	0x00005aa5
    5418:	02dc6c00 	.word	0x02dc6c00

0000541c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    541c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    541e:	4b0c      	ldr	r3, [pc, #48]	; (5450 <system_clock_source_osc8m_set_config+0x34>)
    5420:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5422:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5424:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5426:	7840      	ldrb	r0, [r0, #1]
    5428:	2201      	movs	r2, #1
    542a:	4010      	ands	r0, r2
    542c:	0180      	lsls	r0, r0, #6
    542e:	2640      	movs	r6, #64	; 0x40
    5430:	43b4      	bics	r4, r6
    5432:	4304      	orrs	r4, r0
    5434:	402a      	ands	r2, r5
    5436:	01d0      	lsls	r0, r2, #7
    5438:	2280      	movs	r2, #128	; 0x80
    543a:	4394      	bics	r4, r2
    543c:	1c22      	adds	r2, r4, #0
    543e:	4302      	orrs	r2, r0
    5440:	2003      	movs	r0, #3
    5442:	4001      	ands	r1, r0
    5444:	0209      	lsls	r1, r1, #8
    5446:	4803      	ldr	r0, [pc, #12]	; (5454 <system_clock_source_osc8m_set_config+0x38>)
    5448:	4002      	ands	r2, r0
    544a:	430a      	orrs	r2, r1
    544c:	621a      	str	r2, [r3, #32]
}
    544e:	bd70      	pop	{r4, r5, r6, pc}
    5450:	40000800 	.word	0x40000800
    5454:	fffffcff 	.word	0xfffffcff

00005458 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    5458:	b5f0      	push	{r4, r5, r6, r7, lr}
    545a:	464f      	mov	r7, r9
    545c:	4646      	mov	r6, r8
    545e:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    5460:	4a19      	ldr	r2, [pc, #100]	; (54c8 <system_clock_source_osc32k_set_config+0x70>)
    5462:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    5464:	7841      	ldrb	r1, [r0, #1]
    5466:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    5468:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    546a:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    546c:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    546e:	7943      	ldrb	r3, [r0, #5]
    5470:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    5472:	7880      	ldrb	r0, [r0, #2]
    5474:	2301      	movs	r3, #1
    5476:	4018      	ands	r0, r3
    5478:	0080      	lsls	r0, r0, #2
    547a:	2104      	movs	r1, #4
    547c:	438c      	bics	r4, r1
    547e:	4304      	orrs	r4, r0
    5480:	4660      	mov	r0, ip
    5482:	4018      	ands	r0, r3
    5484:	00c0      	lsls	r0, r0, #3
    5486:	2108      	movs	r1, #8
    5488:	438c      	bics	r4, r1
    548a:	4304      	orrs	r4, r0
    548c:	1c18      	adds	r0, r3, #0
    548e:	4038      	ands	r0, r7
    5490:	0180      	lsls	r0, r0, #6
    5492:	2740      	movs	r7, #64	; 0x40
    5494:	43bc      	bics	r4, r7
    5496:	4304      	orrs	r4, r0
    5498:	1c18      	adds	r0, r3, #0
    549a:	4030      	ands	r0, r6
    549c:	01c0      	lsls	r0, r0, #7
    549e:	2680      	movs	r6, #128	; 0x80
    54a0:	43b4      	bics	r4, r6
    54a2:	4304      	orrs	r4, r0
    54a4:	2007      	movs	r0, #7
    54a6:	4028      	ands	r0, r5
    54a8:	0200      	lsls	r0, r0, #8
    54aa:	4d08      	ldr	r5, [pc, #32]	; (54cc <system_clock_source_osc32k_set_config+0x74>)
    54ac:	402c      	ands	r4, r5
    54ae:	4304      	orrs	r4, r0
    54b0:	4649      	mov	r1, r9
    54b2:	400b      	ands	r3, r1
    54b4:	0319      	lsls	r1, r3, #12
    54b6:	4806      	ldr	r0, [pc, #24]	; (54d0 <system_clock_source_osc32k_set_config+0x78>)
    54b8:	1c23      	adds	r3, r4, #0
    54ba:	4003      	ands	r3, r0
    54bc:	430b      	orrs	r3, r1
    54be:	6193      	str	r3, [r2, #24]
}
    54c0:	bc0c      	pop	{r2, r3}
    54c2:	4690      	mov	r8, r2
    54c4:	4699      	mov	r9, r3
    54c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54c8:	40000800 	.word	0x40000800
    54cc:	fffff8ff 	.word	0xfffff8ff
    54d0:	ffffefff 	.word	0xffffefff

000054d4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    54d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54d6:	465f      	mov	r7, fp
    54d8:	4656      	mov	r6, sl
    54da:	464d      	mov	r5, r9
    54dc:	4644      	mov	r4, r8
    54de:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    54e0:	4a25      	ldr	r2, [pc, #148]	; (5578 <system_clock_source_xosc32k_set_config+0xa4>)
    54e2:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    54e4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    54e6:	7803      	ldrb	r3, [r0, #0]
    54e8:	4259      	negs	r1, r3
    54ea:	4159      	adcs	r1, r3
    54ec:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    54ee:	7883      	ldrb	r3, [r0, #2]
    54f0:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    54f2:	78c1      	ldrb	r1, [r0, #3]
    54f4:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    54f6:	7903      	ldrb	r3, [r0, #4]
    54f8:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    54fa:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    54fc:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    54fe:	7b81      	ldrb	r1, [r0, #14]
    5500:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5502:	6880      	ldr	r0, [r0, #8]
    5504:	4b1d      	ldr	r3, [pc, #116]	; (557c <system_clock_source_xosc32k_set_config+0xa8>)
    5506:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5508:	2301      	movs	r3, #1
    550a:	4651      	mov	r1, sl
    550c:	0088      	lsls	r0, r1, #2
    550e:	2104      	movs	r1, #4
    5510:	438c      	bics	r4, r1
    5512:	4304      	orrs	r4, r0
    5514:	4648      	mov	r0, r9
    5516:	4018      	ands	r0, r3
    5518:	00c0      	lsls	r0, r0, #3
    551a:	2108      	movs	r1, #8
    551c:	438c      	bics	r4, r1
    551e:	4304      	orrs	r4, r0
    5520:	4640      	mov	r0, r8
    5522:	4018      	ands	r0, r3
    5524:	0100      	lsls	r0, r0, #4
    5526:	2110      	movs	r1, #16
    5528:	438c      	bics	r4, r1
    552a:	4304      	orrs	r4, r0
    552c:	4660      	mov	r0, ip
    552e:	4018      	ands	r0, r3
    5530:	0140      	lsls	r0, r0, #5
    5532:	2120      	movs	r1, #32
    5534:	438c      	bics	r4, r1
    5536:	4304      	orrs	r4, r0
    5538:	1c18      	adds	r0, r3, #0
    553a:	4038      	ands	r0, r7
    553c:	0180      	lsls	r0, r0, #6
    553e:	2740      	movs	r7, #64	; 0x40
    5540:	43bc      	bics	r4, r7
    5542:	4304      	orrs	r4, r0
    5544:	1c18      	adds	r0, r3, #0
    5546:	4030      	ands	r0, r6
    5548:	01c0      	lsls	r0, r0, #7
    554a:	2680      	movs	r6, #128	; 0x80
    554c:	43b4      	bics	r4, r6
    554e:	4304      	orrs	r4, r0
    5550:	2007      	movs	r0, #7
    5552:	4028      	ands	r0, r5
    5554:	0200      	lsls	r0, r0, #8
    5556:	4d0a      	ldr	r5, [pc, #40]	; (5580 <system_clock_source_xosc32k_set_config+0xac>)
    5558:	402c      	ands	r4, r5
    555a:	4304      	orrs	r4, r0
    555c:	4659      	mov	r1, fp
    555e:	400b      	ands	r3, r1
    5560:	0319      	lsls	r1, r3, #12
    5562:	4808      	ldr	r0, [pc, #32]	; (5584 <system_clock_source_xosc32k_set_config+0xb0>)
    5564:	1c23      	adds	r3, r4, #0
    5566:	4003      	ands	r3, r0
    5568:	430b      	orrs	r3, r1
    556a:	8293      	strh	r3, [r2, #20]
}
    556c:	bc3c      	pop	{r2, r3, r4, r5}
    556e:	4690      	mov	r8, r2
    5570:	4699      	mov	r9, r3
    5572:	46a2      	mov	sl, r4
    5574:	46ab      	mov	fp, r5
    5576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5578:	40000800 	.word	0x40000800
    557c:	2000089c 	.word	0x2000089c
    5580:	fffff8ff 	.word	0xfffff8ff
    5584:	ffffefff 	.word	0xffffefff

00005588 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5588:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    558a:	7a02      	ldrb	r2, [r0, #8]
    558c:	0692      	lsls	r2, r2, #26
    558e:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5590:	8943      	ldrh	r3, [r0, #10]
    5592:	059b      	lsls	r3, r3, #22
    5594:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5596:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5598:	4b15      	ldr	r3, [pc, #84]	; (55f0 <system_clock_source_dfll_set_config+0x68>)
    559a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    559c:	8881      	ldrh	r1, [r0, #4]
    559e:	8842      	ldrh	r2, [r0, #2]
    55a0:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    55a2:	79c4      	ldrb	r4, [r0, #7]
    55a4:	7982      	ldrb	r2, [r0, #6]
    55a6:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    55a8:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    55aa:	7841      	ldrb	r1, [r0, #1]
    55ac:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    55ae:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    55b0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    55b2:	7803      	ldrb	r3, [r0, #0]
    55b4:	2b04      	cmp	r3, #4
    55b6:	d10f      	bne.n	55d8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55b8:	7b02      	ldrb	r2, [r0, #12]
    55ba:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    55bc:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55be:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55c0:	89c3      	ldrh	r3, [r0, #14]
    55c2:	041b      	lsls	r3, r3, #16
    55c4:	490b      	ldr	r1, [pc, #44]	; (55f4 <system_clock_source_dfll_set_config+0x6c>)
    55c6:	400b      	ands	r3, r1
    55c8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    55ca:	4b09      	ldr	r3, [pc, #36]	; (55f0 <system_clock_source_dfll_set_config+0x68>)
    55cc:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    55ce:	6819      	ldr	r1, [r3, #0]
    55d0:	2204      	movs	r2, #4
    55d2:	430a      	orrs	r2, r1
    55d4:	601a      	str	r2, [r3, #0]
    55d6:	e009      	b.n	55ec <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    55d8:	2b20      	cmp	r3, #32
    55da:	d107      	bne.n	55ec <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    55dc:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    55de:	4b04      	ldr	r3, [pc, #16]	; (55f0 <system_clock_source_dfll_set_config+0x68>)
    55e0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    55e2:	6819      	ldr	r1, [r3, #0]
    55e4:	2284      	movs	r2, #132	; 0x84
    55e6:	00d2      	lsls	r2, r2, #3
    55e8:	430a      	orrs	r2, r1
    55ea:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    55ec:	bd10      	pop	{r4, pc}
    55ee:	46c0      	nop			; (mov r8, r8)
    55f0:	2000089c 	.word	0x2000089c
    55f4:	03ff0000 	.word	0x03ff0000

000055f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    55f8:	2808      	cmp	r0, #8
    55fa:	d843      	bhi.n	5684 <system_clock_source_enable+0x8c>
    55fc:	0080      	lsls	r0, r0, #2
    55fe:	4b22      	ldr	r3, [pc, #136]	; (5688 <system_clock_source_enable+0x90>)
    5600:	581b      	ldr	r3, [r3, r0]
    5602:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5604:	2000      	movs	r0, #0
    5606:	e03e      	b.n	5686 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5608:	4b20      	ldr	r3, [pc, #128]	; (568c <system_clock_source_enable+0x94>)
    560a:	6a19      	ldr	r1, [r3, #32]
    560c:	2202      	movs	r2, #2
    560e:	430a      	orrs	r2, r1
    5610:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5612:	2000      	movs	r0, #0
    5614:	e037      	b.n	5686 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5616:	4b1d      	ldr	r3, [pc, #116]	; (568c <system_clock_source_enable+0x94>)
    5618:	6999      	ldr	r1, [r3, #24]
    561a:	2202      	movs	r2, #2
    561c:	430a      	orrs	r2, r1
    561e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5620:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    5622:	e030      	b.n	5686 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5624:	4b19      	ldr	r3, [pc, #100]	; (568c <system_clock_source_enable+0x94>)
    5626:	8a19      	ldrh	r1, [r3, #16]
    5628:	2202      	movs	r2, #2
    562a:	430a      	orrs	r2, r1
    562c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    562e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    5630:	e029      	b.n	5686 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5632:	4b16      	ldr	r3, [pc, #88]	; (568c <system_clock_source_enable+0x94>)
    5634:	8a99      	ldrh	r1, [r3, #20]
    5636:	2202      	movs	r2, #2
    5638:	430a      	orrs	r2, r1
    563a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    563c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    563e:	e022      	b.n	5686 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5640:	4b13      	ldr	r3, [pc, #76]	; (5690 <system_clock_source_enable+0x98>)
    5642:	6819      	ldr	r1, [r3, #0]
    5644:	2202      	movs	r2, #2
    5646:	430a      	orrs	r2, r1
    5648:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    564a:	681a      	ldr	r2, [r3, #0]
    564c:	4b11      	ldr	r3, [pc, #68]	; (5694 <system_clock_source_enable+0x9c>)
    564e:	401a      	ands	r2, r3
    5650:	4b0e      	ldr	r3, [pc, #56]	; (568c <system_clock_source_enable+0x94>)
    5652:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5654:	1c19      	adds	r1, r3, #0
    5656:	2210      	movs	r2, #16
    5658:	68cb      	ldr	r3, [r1, #12]
    565a:	421a      	tst	r2, r3
    565c:	d0fc      	beq.n	5658 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    565e:	4a0c      	ldr	r2, [pc, #48]	; (5690 <system_clock_source_enable+0x98>)
    5660:	6891      	ldr	r1, [r2, #8]
    5662:	4b0a      	ldr	r3, [pc, #40]	; (568c <system_clock_source_enable+0x94>)
    5664:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5666:	6851      	ldr	r1, [r2, #4]
    5668:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    566a:	6812      	ldr	r2, [r2, #0]
    566c:	b292      	uxth	r2, r2
    566e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5670:	2000      	movs	r0, #0
    5672:	e008      	b.n	5686 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5674:	4a05      	ldr	r2, [pc, #20]	; (568c <system_clock_source_enable+0x94>)
    5676:	2344      	movs	r3, #68	; 0x44
    5678:	5cd0      	ldrb	r0, [r2, r3]
    567a:	2102      	movs	r1, #2
    567c:	4301      	orrs	r1, r0
    567e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5680:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    5682:	e000      	b.n	5686 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5684:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    5686:	4770      	bx	lr
    5688:	0000a490 	.word	0x0000a490
    568c:	40000800 	.word	0x40000800
    5690:	2000089c 	.word	0x2000089c
    5694:	0000ff7f 	.word	0x0000ff7f

00005698 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5698:	b5f0      	push	{r4, r5, r6, r7, lr}
    569a:	464f      	mov	r7, r9
    569c:	4646      	mov	r6, r8
    569e:	b4c0      	push	{r6, r7}
    56a0:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    56a2:	22c2      	movs	r2, #194	; 0xc2
    56a4:	00d2      	lsls	r2, r2, #3
    56a6:	4b5b      	ldr	r3, [pc, #364]	; (5814 <system_clock_init+0x17c>)
    56a8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    56aa:	4b5b      	ldr	r3, [pc, #364]	; (5818 <system_clock_init+0x180>)
    56ac:	685a      	ldr	r2, [r3, #4]
    56ae:	211e      	movs	r1, #30
    56b0:	438a      	bics	r2, r1
    56b2:	2104      	movs	r1, #4
    56b4:	430a      	orrs	r2, r1
    56b6:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    56b8:	2203      	movs	r2, #3
    56ba:	ab01      	add	r3, sp, #4
    56bc:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    56be:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    56c0:	4d56      	ldr	r5, [pc, #344]	; (581c <system_clock_init+0x184>)
    56c2:	b2e0      	uxtb	r0, r4
    56c4:	a901      	add	r1, sp, #4
    56c6:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    56c8:	3401      	adds	r4, #1
    56ca:	2c25      	cmp	r4, #37	; 0x25
    56cc:	d1f9      	bne.n	56c2 <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    56ce:	a80c      	add	r0, sp, #48	; 0x30
    56d0:	2300      	movs	r3, #0
    56d2:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    56d4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    56d6:	2280      	movs	r2, #128	; 0x80
    56d8:	0212      	lsls	r2, r2, #8
    56da:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    56dc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    56de:	2201      	movs	r2, #1
    56e0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    56e2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    56e4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    56e6:	2203      	movs	r2, #3
    56e8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    56ea:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    56ec:	4b4c      	ldr	r3, [pc, #304]	; (5820 <system_clock_init+0x188>)
    56ee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    56f0:	2005      	movs	r0, #5
    56f2:	4b4c      	ldr	r3, [pc, #304]	; (5824 <system_clock_init+0x18c>)
    56f4:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    56f6:	4947      	ldr	r1, [pc, #284]	; (5814 <system_clock_init+0x17c>)
    56f8:	2202      	movs	r2, #2
    56fa:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    56fc:	421a      	tst	r2, r3
    56fe:	d0fc      	beq.n	56fa <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5700:	4b44      	ldr	r3, [pc, #272]	; (5814 <system_clock_init+0x17c>)
    5702:	8a99      	ldrh	r1, [r3, #20]
    5704:	2280      	movs	r2, #128	; 0x80
    5706:	430a      	orrs	r2, r1
    5708:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    570a:	4d47      	ldr	r5, [pc, #284]	; (5828 <system_clock_init+0x190>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    570c:	682a      	ldr	r2, [r5, #0]
    570e:	04d1      	lsls	r1, r2, #19
    5710:	0e49      	lsrs	r1, r1, #25
    5712:	0409      	lsls	r1, r1, #16
    5714:	6998      	ldr	r0, [r3, #24]
    5716:	4a45      	ldr	r2, [pc, #276]	; (582c <system_clock_init+0x194>)
    5718:	4002      	ands	r2, r0
    571a:	430a      	orrs	r2, r1
    571c:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    571e:	a80a      	add	r0, sp, #40	; 0x28
    5720:	2301      	movs	r3, #1
    5722:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    5724:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    5726:	2400      	movs	r4, #0
    5728:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    572a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    572c:	2307      	movs	r3, #7
    572e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    5730:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    5732:	4b3f      	ldr	r3, [pc, #252]	; (5830 <system_clock_init+0x198>)
    5734:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    5736:	2004      	movs	r0, #4
    5738:	4b3a      	ldr	r3, [pc, #232]	; (5824 <system_clock_init+0x18c>)
    573a:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    573c:	ab05      	add	r3, sp, #20
    573e:	2200      	movs	r2, #0
    5740:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5742:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5744:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5746:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    5748:	213f      	movs	r1, #63	; 0x3f
    574a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    574c:	2104      	movs	r1, #4
    574e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5750:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5752:	682b      	ldr	r3, [r5, #0]
    5754:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5756:	2b3f      	cmp	r3, #63	; 0x3f
    5758:	d100      	bne.n	575c <system_clock_init+0xc4>
		coarse = 0x1f;
    575a:	231f      	movs	r3, #31
	}
	dfll_conf.coarse_value = coarse;
    575c:	a805      	add	r0, sp, #20
    575e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5760:	4b34      	ldr	r3, [pc, #208]	; (5834 <system_clock_init+0x19c>)
    5762:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5764:	2307      	movs	r3, #7
    5766:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5768:	233f      	movs	r3, #63	; 0x3f
    576a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    576c:	4b32      	ldr	r3, [pc, #200]	; (5838 <system_clock_init+0x1a0>)
    576e:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    5770:	a804      	add	r0, sp, #16
    5772:	2500      	movs	r5, #0
    5774:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5776:	2601      	movs	r6, #1
    5778:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    577a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    577c:	4b2f      	ldr	r3, [pc, #188]	; (583c <system_clock_init+0x1a4>)
    577e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5780:	2006      	movs	r0, #6
    5782:	4f28      	ldr	r7, [pc, #160]	; (5824 <system_clock_init+0x18c>)
    5784:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5786:	4b2e      	ldr	r3, [pc, #184]	; (5840 <system_clock_init+0x1a8>)
    5788:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    578a:	ac01      	add	r4, sp, #4
    578c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    578e:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5790:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5792:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5794:	2305      	movs	r3, #5
    5796:	7023      	strb	r3, [r4, #0]
    5798:	2001      	movs	r0, #1
    579a:	1c21      	adds	r1, r4, #0
    579c:	4b29      	ldr	r3, [pc, #164]	; (5844 <system_clock_init+0x1ac>)
    579e:	4699      	mov	r9, r3
    57a0:	4798      	blx	r3
    57a2:	2001      	movs	r0, #1
    57a4:	4a28      	ldr	r2, [pc, #160]	; (5848 <system_clock_init+0x1b0>)
    57a6:	4690      	mov	r8, r2
    57a8:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    57aa:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    57ac:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    57ae:	7265      	strb	r5, [r4, #9]
    57b0:	2304      	movs	r3, #4
    57b2:	7023      	strb	r3, [r4, #0]
    57b4:	2320      	movs	r3, #32
    57b6:	6063      	str	r3, [r4, #4]
    57b8:	2002      	movs	r0, #2
    57ba:	1c21      	adds	r1, r4, #0
    57bc:	47c8      	blx	r9
    57be:	2002      	movs	r0, #2
    57c0:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    57c2:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    57c4:	2000      	movs	r0, #0
    57c6:	1c21      	adds	r1, r4, #0
    57c8:	4b14      	ldr	r3, [pc, #80]	; (581c <system_clock_init+0x184>)
    57ca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    57cc:	2000      	movs	r0, #0
    57ce:	4b1f      	ldr	r3, [pc, #124]	; (584c <system_clock_init+0x1b4>)
    57d0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    57d2:	2007      	movs	r0, #7
    57d4:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    57d6:	490f      	ldr	r1, [pc, #60]	; (5814 <system_clock_init+0x17c>)
    57d8:	22d0      	movs	r2, #208	; 0xd0
    57da:	68cb      	ldr	r3, [r1, #12]
    57dc:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    57de:	2bd0      	cmp	r3, #208	; 0xd0
    57e0:	d1fb      	bne.n	57da <system_clock_init+0x142>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    57e2:	4a1b      	ldr	r2, [pc, #108]	; (5850 <system_clock_init+0x1b8>)
    57e4:	2300      	movs	r3, #0
    57e6:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    57e8:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    57ea:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    57ec:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    57ee:	a901      	add	r1, sp, #4
    57f0:	2201      	movs	r2, #1
    57f2:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    57f4:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    57f6:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    57f8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    57fa:	2307      	movs	r3, #7
    57fc:	700b      	strb	r3, [r1, #0]
    57fe:	2000      	movs	r0, #0
    5800:	4b10      	ldr	r3, [pc, #64]	; (5844 <system_clock_init+0x1ac>)
    5802:	4798      	blx	r3
    5804:	2000      	movs	r0, #0
    5806:	4b10      	ldr	r3, [pc, #64]	; (5848 <system_clock_init+0x1b0>)
    5808:	4798      	blx	r3
#endif
}
    580a:	b011      	add	sp, #68	; 0x44
    580c:	bc0c      	pop	{r2, r3}
    580e:	4690      	mov	r8, r2
    5810:	4699      	mov	r9, r3
    5812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5814:	40000800 	.word	0x40000800
    5818:	41004000 	.word	0x41004000
    581c:	00005a89 	.word	0x00005a89
    5820:	000054d5 	.word	0x000054d5
    5824:	000055f9 	.word	0x000055f9
    5828:	00806024 	.word	0x00806024
    582c:	ff80ffff 	.word	0xff80ffff
    5830:	00005459 	.word	0x00005459
    5834:	000005b9 	.word	0x000005b9
    5838:	00005589 	.word	0x00005589
    583c:	0000541d 	.word	0x0000541d
    5840:	00005855 	.word	0x00005855
    5844:	00005879 	.word	0x00005879
    5848:	0000592d 	.word	0x0000592d
    584c:	000059fd 	.word	0x000059fd
    5850:	40000400 	.word	0x40000400

00005854 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5854:	4b06      	ldr	r3, [pc, #24]	; (5870 <system_gclk_init+0x1c>)
    5856:	6999      	ldr	r1, [r3, #24]
    5858:	2208      	movs	r2, #8
    585a:	430a      	orrs	r2, r1
    585c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    585e:	2201      	movs	r2, #1
    5860:	4b04      	ldr	r3, [pc, #16]	; (5874 <system_gclk_init+0x20>)
    5862:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5864:	1c19      	adds	r1, r3, #0
    5866:	780b      	ldrb	r3, [r1, #0]
    5868:	4213      	tst	r3, r2
    586a:	d1fc      	bne.n	5866 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    586c:	4770      	bx	lr
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	40000400 	.word	0x40000400
    5874:	40000c00 	.word	0x40000c00

00005878 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    587a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    587c:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    587e:	780d      	ldrb	r5, [r1, #0]
    5880:	022d      	lsls	r5, r5, #8
    5882:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5884:	784b      	ldrb	r3, [r1, #1]
    5886:	2b00      	cmp	r3, #0
    5888:	d002      	beq.n	5890 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    588a:	2380      	movs	r3, #128	; 0x80
    588c:	02db      	lsls	r3, r3, #11
    588e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5890:	7a4b      	ldrb	r3, [r1, #9]
    5892:	2b00      	cmp	r3, #0
    5894:	d002      	beq.n	589c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5896:	2380      	movs	r3, #128	; 0x80
    5898:	031b      	lsls	r3, r3, #12
    589a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    589c:	684c      	ldr	r4, [r1, #4]
    589e:	2c01      	cmp	r4, #1
    58a0:	d917      	bls.n	58d2 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    58a2:	1e63      	subs	r3, r4, #1
    58a4:	421c      	tst	r4, r3
    58a6:	d10f      	bne.n	58c8 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    58a8:	2c02      	cmp	r4, #2
    58aa:	d906      	bls.n	58ba <system_gclk_gen_set_config+0x42>
    58ac:	2302      	movs	r3, #2
    58ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    58b0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    58b2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    58b4:	429c      	cmp	r4, r3
    58b6:	d8fb      	bhi.n	58b0 <system_gclk_gen_set_config+0x38>
    58b8:	e000      	b.n	58bc <system_gclk_gen_set_config+0x44>
    58ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    58bc:	0217      	lsls	r7, r2, #8
    58be:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    58c0:	2380      	movs	r3, #128	; 0x80
    58c2:	035b      	lsls	r3, r3, #13
    58c4:	431d      	orrs	r5, r3
    58c6:	e004      	b.n	58d2 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    58c8:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    58ca:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    58cc:	2380      	movs	r3, #128	; 0x80
    58ce:	029b      	lsls	r3, r3, #10
    58d0:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    58d2:	7a0b      	ldrb	r3, [r1, #8]
    58d4:	2b00      	cmp	r3, #0
    58d6:	d002      	beq.n	58de <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    58d8:	2380      	movs	r3, #128	; 0x80
    58da:	039b      	lsls	r3, r3, #14
    58dc:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58de:	4a0f      	ldr	r2, [pc, #60]	; (591c <system_gclk_gen_set_config+0xa4>)
    58e0:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    58e2:	b25b      	sxtb	r3, r3
    58e4:	2b00      	cmp	r3, #0
    58e6:	dbfb      	blt.n	58e0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    58e8:	4b0d      	ldr	r3, [pc, #52]	; (5920 <system_gclk_gen_set_config+0xa8>)
    58ea:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    58ec:	4b0d      	ldr	r3, [pc, #52]	; (5924 <system_gclk_gen_set_config+0xac>)
    58ee:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58f0:	4a0a      	ldr	r2, [pc, #40]	; (591c <system_gclk_gen_set_config+0xa4>)
    58f2:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    58f4:	b25b      	sxtb	r3, r3
    58f6:	2b00      	cmp	r3, #0
    58f8:	dbfb      	blt.n	58f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    58fa:	4b08      	ldr	r3, [pc, #32]	; (591c <system_gclk_gen_set_config+0xa4>)
    58fc:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58fe:	1c1a      	adds	r2, r3, #0
    5900:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    5902:	b25b      	sxtb	r3, r3
    5904:	2b00      	cmp	r3, #0
    5906:	dbfb      	blt.n	5900 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5908:	4b04      	ldr	r3, [pc, #16]	; (591c <system_gclk_gen_set_config+0xa4>)
    590a:	6859      	ldr	r1, [r3, #4]
    590c:	2280      	movs	r2, #128	; 0x80
    590e:	0252      	lsls	r2, r2, #9
    5910:	400a      	ands	r2, r1
    5912:	4315      	orrs	r5, r2
    5914:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5916:	4b04      	ldr	r3, [pc, #16]	; (5928 <system_gclk_gen_set_config+0xb0>)
    5918:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    591c:	40000c00 	.word	0x40000c00
    5920:	00003e29 	.word	0x00003e29
    5924:	40000c08 	.word	0x40000c08
    5928:	00003e69 	.word	0x00003e69

0000592c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    592c:	b510      	push	{r4, lr}
    592e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5930:	4a0b      	ldr	r2, [pc, #44]	; (5960 <system_gclk_gen_enable+0x34>)
    5932:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    5934:	b25b      	sxtb	r3, r3
    5936:	2b00      	cmp	r3, #0
    5938:	dbfb      	blt.n	5932 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    593a:	4b0a      	ldr	r3, [pc, #40]	; (5964 <system_gclk_gen_enable+0x38>)
    593c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    593e:	4b0a      	ldr	r3, [pc, #40]	; (5968 <system_gclk_gen_enable+0x3c>)
    5940:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5942:	4a07      	ldr	r2, [pc, #28]	; (5960 <system_gclk_gen_enable+0x34>)
    5944:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    5946:	b25b      	sxtb	r3, r3
    5948:	2b00      	cmp	r3, #0
    594a:	dbfb      	blt.n	5944 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    594c:	4b04      	ldr	r3, [pc, #16]	; (5960 <system_gclk_gen_enable+0x34>)
    594e:	6859      	ldr	r1, [r3, #4]
    5950:	2280      	movs	r2, #128	; 0x80
    5952:	0252      	lsls	r2, r2, #9
    5954:	430a      	orrs	r2, r1
    5956:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5958:	4b04      	ldr	r3, [pc, #16]	; (596c <system_gclk_gen_enable+0x40>)
    595a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    595c:	bd10      	pop	{r4, pc}
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	40000c00 	.word	0x40000c00
    5964:	00003e29 	.word	0x00003e29
    5968:	40000c04 	.word	0x40000c04
    596c:	00003e69 	.word	0x00003e69

00005970 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5970:	b570      	push	{r4, r5, r6, lr}
    5972:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5974:	4a1a      	ldr	r2, [pc, #104]	; (59e0 <system_gclk_gen_get_hz+0x70>)
    5976:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    5978:	b25b      	sxtb	r3, r3
    597a:	2b00      	cmp	r3, #0
    597c:	dbfb      	blt.n	5976 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    597e:	4b19      	ldr	r3, [pc, #100]	; (59e4 <system_gclk_gen_get_hz+0x74>)
    5980:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5982:	4b19      	ldr	r3, [pc, #100]	; (59e8 <system_gclk_gen_get_hz+0x78>)
    5984:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5986:	4a16      	ldr	r2, [pc, #88]	; (59e0 <system_gclk_gen_get_hz+0x70>)
    5988:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    598a:	b25b      	sxtb	r3, r3
    598c:	2b00      	cmp	r3, #0
    598e:	dbfb      	blt.n	5988 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5990:	4e13      	ldr	r6, [pc, #76]	; (59e0 <system_gclk_gen_get_hz+0x70>)
    5992:	6870      	ldr	r0, [r6, #4]
    5994:	04c0      	lsls	r0, r0, #19
    5996:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5998:	4b14      	ldr	r3, [pc, #80]	; (59ec <system_gclk_gen_get_hz+0x7c>)
    599a:	4798      	blx	r3
    599c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    599e:	4b12      	ldr	r3, [pc, #72]	; (59e8 <system_gclk_gen_get_hz+0x78>)
    59a0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    59a2:	6876      	ldr	r6, [r6, #4]
    59a4:	02f6      	lsls	r6, r6, #11
    59a6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    59a8:	4b11      	ldr	r3, [pc, #68]	; (59f0 <system_gclk_gen_get_hz+0x80>)
    59aa:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    59ac:	4a0c      	ldr	r2, [pc, #48]	; (59e0 <system_gclk_gen_get_hz+0x70>)
    59ae:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    59b0:	b25b      	sxtb	r3, r3
    59b2:	2b00      	cmp	r3, #0
    59b4:	dbfb      	blt.n	59ae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    59b6:	4b0a      	ldr	r3, [pc, #40]	; (59e0 <system_gclk_gen_get_hz+0x70>)
    59b8:	689c      	ldr	r4, [r3, #8]
    59ba:	0a24      	lsrs	r4, r4, #8
    59bc:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    59be:	4b0d      	ldr	r3, [pc, #52]	; (59f4 <system_gclk_gen_get_hz+0x84>)
    59c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    59c2:	2e00      	cmp	r6, #0
    59c4:	d107      	bne.n	59d6 <system_gclk_gen_get_hz+0x66>
    59c6:	2c01      	cmp	r4, #1
    59c8:	d907      	bls.n	59da <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    59ca:	1c28      	adds	r0, r5, #0
    59cc:	1c21      	adds	r1, r4, #0
    59ce:	4b0a      	ldr	r3, [pc, #40]	; (59f8 <system_gclk_gen_get_hz+0x88>)
    59d0:	4798      	blx	r3
    59d2:	1c05      	adds	r5, r0, #0
    59d4:	e001      	b.n	59da <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    59d6:	3401      	adds	r4, #1
    59d8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    59da:	1c28      	adds	r0, r5, #0
    59dc:	bd70      	pop	{r4, r5, r6, pc}
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	40000c00 	.word	0x40000c00
    59e4:	00003e29 	.word	0x00003e29
    59e8:	40000c04 	.word	0x40000c04
    59ec:	0000538d 	.word	0x0000538d
    59f0:	40000c08 	.word	0x40000c08
    59f4:	00003e69 	.word	0x00003e69
    59f8:	0000741d 	.word	0x0000741d

000059fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    59fc:	b510      	push	{r4, lr}
    59fe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5a00:	4b06      	ldr	r3, [pc, #24]	; (5a1c <system_gclk_chan_enable+0x20>)
    5a02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a04:	4b06      	ldr	r3, [pc, #24]	; (5a20 <system_gclk_chan_enable+0x24>)
    5a06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5a08:	4b06      	ldr	r3, [pc, #24]	; (5a24 <system_gclk_chan_enable+0x28>)
    5a0a:	8859      	ldrh	r1, [r3, #2]
    5a0c:	2280      	movs	r2, #128	; 0x80
    5a0e:	01d2      	lsls	r2, r2, #7
    5a10:	430a      	orrs	r2, r1
    5a12:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5a14:	4b04      	ldr	r3, [pc, #16]	; (5a28 <system_gclk_chan_enable+0x2c>)
    5a16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5a18:	bd10      	pop	{r4, pc}
    5a1a:	46c0      	nop			; (mov r8, r8)
    5a1c:	00003e29 	.word	0x00003e29
    5a20:	40000c02 	.word	0x40000c02
    5a24:	40000c00 	.word	0x40000c00
    5a28:	00003e69 	.word	0x00003e69

00005a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5a2c:	b510      	push	{r4, lr}
    5a2e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5a30:	4b0f      	ldr	r3, [pc, #60]	; (5a70 <system_gclk_chan_disable+0x44>)
    5a32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a34:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <system_gclk_chan_disable+0x48>)
    5a36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5a38:	4b0f      	ldr	r3, [pc, #60]	; (5a78 <system_gclk_chan_disable+0x4c>)
    5a3a:	8858      	ldrh	r0, [r3, #2]
    5a3c:	0500      	lsls	r0, r0, #20
    5a3e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5a40:	8859      	ldrh	r1, [r3, #2]
    5a42:	4a0e      	ldr	r2, [pc, #56]	; (5a7c <system_gclk_chan_disable+0x50>)
    5a44:	400a      	ands	r2, r1
    5a46:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5a48:	8859      	ldrh	r1, [r3, #2]
    5a4a:	4a0d      	ldr	r2, [pc, #52]	; (5a80 <system_gclk_chan_disable+0x54>)
    5a4c:	400a      	ands	r2, r1
    5a4e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5a50:	1c19      	adds	r1, r3, #0
    5a52:	2280      	movs	r2, #128	; 0x80
    5a54:	01d2      	lsls	r2, r2, #7
    5a56:	884b      	ldrh	r3, [r1, #2]
    5a58:	4213      	tst	r3, r2
    5a5a:	d1fc      	bne.n	5a56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5a5c:	4b06      	ldr	r3, [pc, #24]	; (5a78 <system_gclk_chan_disable+0x4c>)
    5a5e:	0201      	lsls	r1, r0, #8
    5a60:	8858      	ldrh	r0, [r3, #2]
    5a62:	4a06      	ldr	r2, [pc, #24]	; (5a7c <system_gclk_chan_disable+0x50>)
    5a64:	4002      	ands	r2, r0
    5a66:	430a      	orrs	r2, r1
    5a68:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5a6a:	4b06      	ldr	r3, [pc, #24]	; (5a84 <system_gclk_chan_disable+0x58>)
    5a6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5a6e:	bd10      	pop	{r4, pc}
    5a70:	00003e29 	.word	0x00003e29
    5a74:	40000c02 	.word	0x40000c02
    5a78:	40000c00 	.word	0x40000c00
    5a7c:	fffff0ff 	.word	0xfffff0ff
    5a80:	ffffbfff 	.word	0xffffbfff
    5a84:	00003e69 	.word	0x00003e69

00005a88 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5a88:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5a8a:	780c      	ldrb	r4, [r1, #0]
    5a8c:	0224      	lsls	r4, r4, #8
    5a8e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <system_gclk_chan_set_config+0x14>)
    5a92:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a94:	b2a4      	uxth	r4, r4
    5a96:	4b02      	ldr	r3, [pc, #8]	; (5aa0 <system_gclk_chan_set_config+0x18>)
    5a98:	805c      	strh	r4, [r3, #2]
}
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	00005a2d 	.word	0x00005a2d
    5aa0:	40000c00 	.word	0x40000c00

00005aa4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5aa4:	b510      	push	{r4, lr}
    5aa6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5aa8:	4b06      	ldr	r3, [pc, #24]	; (5ac4 <system_gclk_chan_get_hz+0x20>)
    5aaa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5aac:	4b06      	ldr	r3, [pc, #24]	; (5ac8 <system_gclk_chan_get_hz+0x24>)
    5aae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5ab0:	4b06      	ldr	r3, [pc, #24]	; (5acc <system_gclk_chan_get_hz+0x28>)
    5ab2:	885c      	ldrh	r4, [r3, #2]
    5ab4:	0524      	lsls	r4, r4, #20
    5ab6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5ab8:	4b05      	ldr	r3, [pc, #20]	; (5ad0 <system_gclk_chan_get_hz+0x2c>)
    5aba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5abc:	1c20      	adds	r0, r4, #0
    5abe:	4b05      	ldr	r3, [pc, #20]	; (5ad4 <system_gclk_chan_get_hz+0x30>)
    5ac0:	4798      	blx	r3
}
    5ac2:	bd10      	pop	{r4, pc}
    5ac4:	00003e29 	.word	0x00003e29
    5ac8:	40000c02 	.word	0x40000c02
    5acc:	40000c00 	.word	0x40000c00
    5ad0:	00003e69 	.word	0x00003e69
    5ad4:	00005971 	.word	0x00005971

00005ad8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5ad8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5ada:	78d3      	ldrb	r3, [r2, #3]
    5adc:	2b00      	cmp	r3, #0
    5ade:	d11e      	bne.n	5b1e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5ae0:	7813      	ldrb	r3, [r2, #0]
    5ae2:	2b80      	cmp	r3, #128	; 0x80
    5ae4:	d004      	beq.n	5af0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5ae6:	061b      	lsls	r3, r3, #24
    5ae8:	2480      	movs	r4, #128	; 0x80
    5aea:	0264      	lsls	r4, r4, #9
    5aec:	4323      	orrs	r3, r4
    5aee:	e000      	b.n	5af2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5af0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5af2:	7854      	ldrb	r4, [r2, #1]
    5af4:	2502      	movs	r5, #2
    5af6:	43ac      	bics	r4, r5
    5af8:	d10a      	bne.n	5b10 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5afa:	7894      	ldrb	r4, [r2, #2]
    5afc:	2c00      	cmp	r4, #0
    5afe:	d103      	bne.n	5b08 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5b00:	2480      	movs	r4, #128	; 0x80
    5b02:	02a4      	lsls	r4, r4, #10
    5b04:	4323      	orrs	r3, r4
    5b06:	e002      	b.n	5b0e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5b08:	24c0      	movs	r4, #192	; 0xc0
    5b0a:	02e4      	lsls	r4, r4, #11
    5b0c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5b0e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5b10:	7854      	ldrb	r4, [r2, #1]
    5b12:	3c01      	subs	r4, #1
    5b14:	2c01      	cmp	r4, #1
    5b16:	d804      	bhi.n	5b22 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5b18:	4c11      	ldr	r4, [pc, #68]	; (5b60 <_system_pinmux_config+0x88>)
    5b1a:	4023      	ands	r3, r4
    5b1c:	e001      	b.n	5b22 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5b1e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5b20:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5b22:	040d      	lsls	r5, r1, #16
    5b24:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5b26:	24a0      	movs	r4, #160	; 0xa0
    5b28:	05e4      	lsls	r4, r4, #23
    5b2a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5b2c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5b2e:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5b30:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5b32:	24d0      	movs	r4, #208	; 0xd0
    5b34:	0624      	lsls	r4, r4, #24
    5b36:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5b38:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5b3a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5b3c:	78d4      	ldrb	r4, [r2, #3]
    5b3e:	2c00      	cmp	r4, #0
    5b40:	d10c      	bne.n	5b5c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5b42:	035c      	lsls	r4, r3, #13
    5b44:	d505      	bpl.n	5b52 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5b46:	7893      	ldrb	r3, [r2, #2]
    5b48:	2b01      	cmp	r3, #1
    5b4a:	d101      	bne.n	5b50 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    5b4c:	6181      	str	r1, [r0, #24]
    5b4e:	e000      	b.n	5b52 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    5b50:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5b52:	7853      	ldrb	r3, [r2, #1]
    5b54:	3b01      	subs	r3, #1
    5b56:	2b01      	cmp	r3, #1
    5b58:	d800      	bhi.n	5b5c <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5b5a:	6081      	str	r1, [r0, #8]
		}
	}
}
    5b5c:	bd30      	pop	{r4, r5, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	fffbffff 	.word	0xfffbffff

00005b64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5b64:	b508      	push	{r3, lr}
    5b66:	1c03      	adds	r3, r0, #0
    5b68:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5b6a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5b6c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5b6e:	2900      	cmp	r1, #0
    5b70:	d103      	bne.n	5b7a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5b72:	0958      	lsrs	r0, r3, #5
    5b74:	01c0      	lsls	r0, r0, #7
    5b76:	4904      	ldr	r1, [pc, #16]	; (5b88 <system_pinmux_pin_set_config+0x24>)
    5b78:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5b7a:	211f      	movs	r1, #31
    5b7c:	400b      	ands	r3, r1
    5b7e:	2101      	movs	r1, #1
    5b80:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    5b82:	4b02      	ldr	r3, [pc, #8]	; (5b8c <system_pinmux_pin_set_config+0x28>)
    5b84:	4798      	blx	r3
}
    5b86:	bd08      	pop	{r3, pc}
    5b88:	41004400 	.word	0x41004400
    5b8c:	00005ad9 	.word	0x00005ad9

00005b90 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5b90:	4770      	bx	lr
    5b92:	46c0      	nop			; (mov r8, r8)

00005b94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5b94:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5b96:	4b04      	ldr	r3, [pc, #16]	; (5ba8 <system_init+0x14>)
    5b98:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5b9a:	4b04      	ldr	r3, [pc, #16]	; (5bac <system_init+0x18>)
    5b9c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5b9e:	4b04      	ldr	r3, [pc, #16]	; (5bb0 <system_init+0x1c>)
    5ba0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5ba2:	4b04      	ldr	r3, [pc, #16]	; (5bb4 <system_init+0x20>)
    5ba4:	4798      	blx	r3
}
    5ba6:	bd08      	pop	{r3, pc}
    5ba8:	00005699 	.word	0x00005699
    5bac:	00003e99 	.word	0x00003e99
    5bb0:	00005b91 	.word	0x00005b91
    5bb4:	00004025 	.word	0x00004025

00005bb8 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    5bb8:	1c03      	adds	r3, r0, #0
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5bba:	4a08      	ldr	r2, [pc, #32]	; (5bdc <_tcc_get_inst_index+0x24>)
    5bbc:	4290      	cmp	r0, r2
    5bbe:	d00a      	beq.n	5bd6 <_tcc_get_inst_index+0x1e>
    5bc0:	4a07      	ldr	r2, [pc, #28]	; (5be0 <_tcc_get_inst_index+0x28>)
    5bc2:	4290      	cmp	r0, r2
    5bc4:	d005      	beq.n	5bd2 <_tcc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5bc6:	2000      	movs	r0, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5bc8:	4a06      	ldr	r2, [pc, #24]	; (5be4 <_tcc_get_inst_index+0x2c>)
    5bca:	4293      	cmp	r3, r2
    5bcc:	d105      	bne.n	5bda <_tcc_get_inst_index+0x22>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5bce:	2002      	movs	r0, #2
    5bd0:	e002      	b.n	5bd8 <_tcc_get_inst_index+0x20>
    5bd2:	2001      	movs	r0, #1
    5bd4:	e000      	b.n	5bd8 <_tcc_get_inst_index+0x20>
    5bd6:	2000      	movs	r0, #0
		if (hw == tcc_modules[i]) {
			return i;
    5bd8:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    5bda:	4770      	bx	lr
    5bdc:	42002000 	.word	0x42002000
    5be0:	42002400 	.word	0x42002400
    5be4:	42002800 	.word	0x42002800

00005be8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5be8:	b510      	push	{r4, lr}
    5bea:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5bec:	1c08      	adds	r0, r1, #0
    5bee:	4b4f      	ldr	r3, [pc, #316]	; (5d2c <tcc_get_config_defaults+0x144>)
    5bf0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5bf2:	2300      	movs	r3, #0
    5bf4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5bf6:	0080      	lsls	r0, r0, #2
    5bf8:	4a4d      	ldr	r2, [pc, #308]	; (5d30 <tcc_get_config_defaults+0x148>)
    5bfa:	5880      	ldr	r0, [r0, r2]
    5bfc:	6060      	str	r0, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    5bfe:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5c00:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5c02:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5c04:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5c06:	7223      	strb	r3, [r4, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5c08:	61e3      	str	r3, [r4, #28]
    5c0a:	6223      	str	r3, [r4, #32]
    5c0c:	6263      	str	r3, [r4, #36]	; 0x24
    5c0e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5c10:	7523      	strb	r3, [r4, #20]
    5c12:	7563      	strb	r3, [r4, #21]
    5c14:	75a3      	strb	r3, [r4, #22]
    5c16:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5c18:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    5c1a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5c1c:	7423      	strb	r3, [r4, #16]
    5c1e:	7463      	strb	r3, [r4, #17]
    5c20:	74a3      	strb	r3, [r4, #18]
    5c22:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5c24:	222c      	movs	r2, #44	; 0x2c
    5c26:	54a3      	strb	r3, [r4, r2]
    5c28:	222d      	movs	r2, #45	; 0x2d
    5c2a:	54a3      	strb	r3, [r4, r2]
    5c2c:	222e      	movs	r2, #46	; 0x2e
    5c2e:	54a3      	strb	r3, [r4, r2]
    5c30:	222f      	movs	r2, #47	; 0x2f
    5c32:	54a3      	strb	r3, [r4, r2]
    5c34:	2230      	movs	r2, #48	; 0x30
    5c36:	54a3      	strb	r3, [r4, r2]
    5c38:	2231      	movs	r2, #49	; 0x31
    5c3a:	54a3      	strb	r3, [r4, r2]
    5c3c:	2232      	movs	r2, #50	; 0x32
    5c3e:	54a3      	strb	r3, [r4, r2]
    5c40:	2233      	movs	r2, #51	; 0x33
    5c42:	54a3      	strb	r3, [r4, r2]
    5c44:	2234      	movs	r2, #52	; 0x34
    5c46:	54a3      	strb	r3, [r4, r2]
    5c48:	2235      	movs	r2, #53	; 0x35
    5c4a:	54a3      	strb	r3, [r4, r2]
    5c4c:	2236      	movs	r2, #54	; 0x36
    5c4e:	54a3      	strb	r3, [r4, r2]
    5c50:	2237      	movs	r2, #55	; 0x37
    5c52:	54a3      	strb	r3, [r4, r2]
    5c54:	2238      	movs	r2, #56	; 0x38
    5c56:	54a3      	strb	r3, [r4, r2]
    5c58:	2239      	movs	r2, #57	; 0x39
    5c5a:	54a3      	strb	r3, [r4, r2]
    5c5c:	223a      	movs	r2, #58	; 0x3a
    5c5e:	54a3      	strb	r3, [r4, r2]
    5c60:	223b      	movs	r2, #59	; 0x3b
    5c62:	54a3      	strb	r3, [r4, r2]
    5c64:	223c      	movs	r2, #60	; 0x3c
    5c66:	54a3      	strb	r3, [r4, r2]
    5c68:	223d      	movs	r2, #61	; 0x3d
    5c6a:	54a3      	strb	r3, [r4, r2]
    5c6c:	223e      	movs	r2, #62	; 0x3e
    5c6e:	54a3      	strb	r3, [r4, r2]
    5c70:	223f      	movs	r2, #63	; 0x3f
    5c72:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5c74:	2240      	movs	r2, #64	; 0x40
    5c76:	54a3      	strb	r3, [r4, r2]
    5c78:	2241      	movs	r2, #65	; 0x41
    5c7a:	54a3      	strb	r3, [r4, r2]
    5c7c:	2242      	movs	r2, #66	; 0x42
    5c7e:	54a3      	strb	r3, [r4, r2]
    5c80:	2243      	movs	r2, #67	; 0x43
    5c82:	54a3      	strb	r3, [r4, r2]
    5c84:	2244      	movs	r2, #68	; 0x44
    5c86:	54a3      	strb	r3, [r4, r2]
    5c88:	2245      	movs	r2, #69	; 0x45
    5c8a:	54a3      	strb	r3, [r4, r2]
    5c8c:	2246      	movs	r2, #70	; 0x46
    5c8e:	54a3      	strb	r3, [r4, r2]
    5c90:	2247      	movs	r2, #71	; 0x47
    5c92:	54a3      	strb	r3, [r4, r2]
    5c94:	2248      	movs	r2, #72	; 0x48
    5c96:	54a3      	strb	r3, [r4, r2]
    5c98:	2249      	movs	r2, #73	; 0x49
    5c9a:	54a3      	strb	r3, [r4, r2]
    5c9c:	224a      	movs	r2, #74	; 0x4a
    5c9e:	54a3      	strb	r3, [r4, r2]
    5ca0:	224b      	movs	r2, #75	; 0x4b
    5ca2:	54a3      	strb	r3, [r4, r2]
    5ca4:	224c      	movs	r2, #76	; 0x4c
    5ca6:	54a3      	strb	r3, [r4, r2]
    5ca8:	224d      	movs	r2, #77	; 0x4d
    5caa:	54a3      	strb	r3, [r4, r2]
    5cac:	224e      	movs	r2, #78	; 0x4e
    5cae:	54a3      	strb	r3, [r4, r2]
    5cb0:	224f      	movs	r2, #79	; 0x4f
    5cb2:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5cb4:	2250      	movs	r2, #80	; 0x50
    5cb6:	54a3      	strb	r3, [r4, r2]
    5cb8:	2251      	movs	r2, #81	; 0x51
    5cba:	54a3      	strb	r3, [r4, r2]
    5cbc:	2252      	movs	r2, #82	; 0x52
    5cbe:	54a3      	strb	r3, [r4, r2]
    5cc0:	2253      	movs	r2, #83	; 0x53
    5cc2:	54a3      	strb	r3, [r4, r2]
    5cc4:	2254      	movs	r2, #84	; 0x54
    5cc6:	54a3      	strb	r3, [r4, r2]
    5cc8:	2255      	movs	r2, #85	; 0x55
    5cca:	54a3      	strb	r3, [r4, r2]
    5ccc:	2256      	movs	r2, #86	; 0x56
    5cce:	54a3      	strb	r3, [r4, r2]
    5cd0:	2257      	movs	r2, #87	; 0x57
    5cd2:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5cd4:	2298      	movs	r2, #152	; 0x98
    5cd6:	54a3      	strb	r3, [r4, r2]
    5cd8:	65a3      	str	r3, [r4, #88]	; 0x58
    5cda:	67a3      	str	r3, [r4, #120]	; 0x78
    5cdc:	2299      	movs	r2, #153	; 0x99
    5cde:	54a3      	strb	r3, [r4, r2]
    5ce0:	65e3      	str	r3, [r4, #92]	; 0x5c
    5ce2:	67e3      	str	r3, [r4, #124]	; 0x7c
    5ce4:	229a      	movs	r2, #154	; 0x9a
    5ce6:	54a3      	strb	r3, [r4, r2]
    5ce8:	6623      	str	r3, [r4, #96]	; 0x60
    5cea:	2280      	movs	r2, #128	; 0x80
    5cec:	50a3      	str	r3, [r4, r2]
    5cee:	229b      	movs	r2, #155	; 0x9b
    5cf0:	54a3      	strb	r3, [r4, r2]
    5cf2:	6663      	str	r3, [r4, #100]	; 0x64
    5cf4:	2284      	movs	r2, #132	; 0x84
    5cf6:	50a3      	str	r3, [r4, r2]
    5cf8:	229c      	movs	r2, #156	; 0x9c
    5cfa:	54a3      	strb	r3, [r4, r2]
    5cfc:	66a3      	str	r3, [r4, #104]	; 0x68
    5cfe:	2288      	movs	r2, #136	; 0x88
    5d00:	50a3      	str	r3, [r4, r2]
    5d02:	229d      	movs	r2, #157	; 0x9d
    5d04:	54a3      	strb	r3, [r4, r2]
    5d06:	66e3      	str	r3, [r4, #108]	; 0x6c
    5d08:	228c      	movs	r2, #140	; 0x8c
    5d0a:	50a3      	str	r3, [r4, r2]
    5d0c:	229e      	movs	r2, #158	; 0x9e
    5d0e:	54a3      	strb	r3, [r4, r2]
    5d10:	6723      	str	r3, [r4, #112]	; 0x70
    5d12:	2290      	movs	r2, #144	; 0x90
    5d14:	50a3      	str	r3, [r4, r2]
    5d16:	229f      	movs	r2, #159	; 0x9f
    5d18:	54a3      	strb	r3, [r4, r2]
    5d1a:	6763      	str	r3, [r4, #116]	; 0x74
    5d1c:	2294      	movs	r2, #148	; 0x94
    5d1e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5d20:	2101      	movs	r1, #1
    5d22:	22a0      	movs	r2, #160	; 0xa0
    5d24:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5d26:	22a1      	movs	r2, #161	; 0xa1
    5d28:	54a3      	strb	r3, [r4, r2]
}
    5d2a:	bd10      	pop	{r4, pc}
    5d2c:	00005bb9 	.word	0x00005bb9
    5d30:	0000a4c4 	.word	0x0000a4c4

00005d34 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d36:	465f      	mov	r7, fp
    5d38:	4656      	mov	r6, sl
    5d3a:	464d      	mov	r5, r9
    5d3c:	4644      	mov	r4, r8
    5d3e:	b4f0      	push	{r4, r5, r6, r7}
    5d40:	b08f      	sub	sp, #60	; 0x3c
    5d42:	4680      	mov	r8, r0
    5d44:	1c0c      	adds	r4, r1, #0
    5d46:	1c16      	adds	r6, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5d48:	1c08      	adds	r0, r1, #0
    5d4a:	4bdb      	ldr	r3, [pc, #876]	; (60b8 <tcc_init+0x384>)
    5d4c:	4798      	blx	r3
    5d4e:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5d50:	1c07      	adds	r7, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5d52:	4bda      	ldr	r3, [pc, #872]	; (60bc <tcc_init+0x388>)
    5d54:	6a19      	ldr	r1, [r3, #32]
    5d56:	0080      	lsls	r0, r0, #2
    5d58:	4ad9      	ldr	r2, [pc, #868]	; (60c0 <tcc_init+0x38c>)
    5d5a:	5882      	ldr	r2, [r0, r2]
    5d5c:	430a      	orrs	r2, r1
    5d5e:	621a      	str	r2, [r3, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d60:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    5d62:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d64:	0799      	lsls	r1, r3, #30
    5d66:	d500      	bpl.n	5d6a <tcc_init+0x36>
    5d68:	e1d9      	b.n	611e <tcc_init+0x3ea>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5d6a:	6823      	ldr	r3, [r4, #0]
    5d6c:	07da      	lsls	r2, r3, #31
    5d6e:	d500      	bpl.n	5d72 <tcc_init+0x3e>
    5d70:	e1d5      	b.n	611e <tcc_init+0x3ea>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    5d72:	00ab      	lsls	r3, r5, #2
    5d74:	4ad3      	ldr	r2, [pc, #844]	; (60c4 <tcc_init+0x390>)
    5d76:	589b      	ldr	r3, [r3, r2]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    5d78:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    5d7a:	6831      	ldr	r1, [r6, #0]
    5d7c:	428b      	cmp	r3, r1
    5d7e:	d200      	bcs.n	5d82 <tcc_init+0x4e>
    5d80:	e1cd      	b.n	611e <tcc_init+0x3ea>
		|| (config->counter.period > count_max)
    5d82:	6872      	ldr	r2, [r6, #4]
    5d84:	4293      	cmp	r3, r2
    5d86:	d200      	bcs.n	5d8a <tcc_init+0x56>
    5d88:	e1c9      	b.n	611e <tcc_init+0x3ea>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    5d8a:	69f0      	ldr	r0, [r6, #28]
    5d8c:	4283      	cmp	r3, r0
    5d8e:	d200      	bcs.n	5d92 <tcc_init+0x5e>
    5d90:	e1ae      	b.n	60f0 <tcc_init+0x3bc>
    5d92:	6a31      	ldr	r1, [r6, #32]
    5d94:	428b      	cmp	r3, r1
    5d96:	d200      	bcs.n	5d9a <tcc_init+0x66>
    5d98:	e1ac      	b.n	60f4 <tcc_init+0x3c0>
    5d9a:	6a72      	ldr	r2, [r6, #36]	; 0x24
    5d9c:	4293      	cmp	r3, r2
    5d9e:	d200      	bcs.n	5da2 <tcc_init+0x6e>
    5da0:	e1aa      	b.n	60f8 <tcc_init+0x3c4>
    5da2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5da4:	4283      	cmp	r3, r0
    5da6:	d200      	bcs.n	5daa <tcc_init+0x76>
    5da8:	e1a8      	b.n	60fc <tcc_init+0x3c8>
    5daa:	2300      	movs	r3, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    5dac:	49c6      	ldr	r1, [pc, #792]	; (60c8 <tcc_init+0x394>)
    5dae:	18f2      	adds	r2, r6, r3
    5db0:	3298      	adds	r2, #152	; 0x98
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    5db2:	7812      	ldrb	r2, [r2, #0]
    5db4:	2a00      	cmp	r2, #0
    5db6:	d003      	beq.n	5dc0 <tcc_init+0x8c>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    5db8:	5dca      	ldrb	r2, [r1, r7]
    5dba:	429a      	cmp	r2, r3
    5dbc:	dc00      	bgt.n	5dc0 <tcc_init+0x8c>
    5dbe:	e19f      	b.n	6100 <tcc_init+0x3cc>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5dc0:	3301      	adds	r3, #1
    5dc2:	2b08      	cmp	r3, #8
    5dc4:	d1f3      	bne.n	5dae <tcc_init+0x7a>
    5dc6:	2100      	movs	r1, #0
    5dc8:	468b      	mov	fp, r1
    5dca:	2300      	movs	r3, #0

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5dcc:	2180      	movs	r1, #128	; 0x80
    5dce:	0449      	lsls	r1, r1, #17
    5dd0:	468c      	mov	ip, r1
    5dd2:	4658      	mov	r0, fp
    5dd4:	18f2      	adds	r2, r6, r3
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    5dd6:	7c12      	ldrb	r2, [r2, #16]
    5dd8:	2a01      	cmp	r2, #1
    5dda:	d107      	bne.n	5dec <tcc_init+0xb8>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    5ddc:	49bb      	ldr	r1, [pc, #748]	; (60cc <tcc_init+0x398>)
    5dde:	5dca      	ldrb	r2, [r1, r7]
    5de0:	429a      	cmp	r2, r3
    5de2:	da00      	bge.n	5de6 <tcc_init+0xb2>
    5de4:	e18e      	b.n	6104 <tcc_init+0x3d0>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5de6:	4662      	mov	r2, ip
    5de8:	409a      	lsls	r2, r3
    5dea:	4310      	orrs	r0, r2
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5dec:	3301      	adds	r3, #1
    5dee:	2b04      	cmp	r3, #4
    5df0:	d1f0      	bne.n	5dd4 <tcc_init+0xa0>
    5df2:	4683      	mov	fp, r0
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    5df4:	23a1      	movs	r3, #161	; 0xa1
    5df6:	5cf3      	ldrb	r3, [r6, r3]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d004      	beq.n	5e06 <tcc_init+0xd2>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5dfc:	2380      	movs	r3, #128	; 0x80
    5dfe:	011b      	lsls	r3, r3, #4
    5e00:	1c02      	adds	r2, r0, #0
    5e02:	431a      	orrs	r2, r3
    5e04:	4693      	mov	fp, r2
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5e06:	7b33      	ldrb	r3, [r6, #12]
    5e08:	9307      	str	r3, [sp, #28]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5e0a:	7af0      	ldrb	r0, [r6, #11]
    5e0c:	9008      	str	r0, [sp, #32]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    5e0e:	7a33      	ldrb	r3, [r6, #8]
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;
    5e10:	1e5a      	subs	r2, r3, #1
    5e12:	4193      	sbcs	r3, r2
    5e14:	009b      	lsls	r3, r3, #2
    5e16:	9305      	str	r3, [sp, #20]

	if (config->counter.oneshot) {
		ctrlb |= TCC_CTRLBSET_ONESHOT;
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5e18:	7a73      	ldrb	r3, [r6, #9]
    5e1a:	2b01      	cmp	r3, #1
    5e1c:	d102      	bne.n	5e24 <tcc_init+0xf0>
		ctrlb |= TCC_CTRLBSET_DIR;
    5e1e:	9905      	ldr	r1, [sp, #20]
    5e20:	4319      	orrs	r1, r3
    5e22:	9105      	str	r1, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5e24:	4ba9      	ldr	r3, [pc, #676]	; (60cc <tcc_init+0x398>)
    5e26:	5d5b      	ldrb	r3, [r3, r5]
    5e28:	9304      	str	r3, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5e2a:	1c33      	adds	r3, r6, #0
    5e2c:	332c      	adds	r3, #44	; 0x2c
    5e2e:	7a5a      	ldrb	r2, [r3, #9]
    5e30:	9b04      	ldr	r3, [sp, #16]
    5e32:	4293      	cmp	r3, r2
    5e34:	d800      	bhi.n	5e38 <tcc_init+0x104>
    5e36:	e171      	b.n	611c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    5e38:	232c      	movs	r3, #44	; 0x2c
    5e3a:	5cf1      	ldrb	r1, [r6, r3]
    5e3c:	290f      	cmp	r1, #15
    5e3e:	d900      	bls.n	5e42 <tcc_init+0x10e>
    5e40:	e16c      	b.n	611c <tcc_init+0x3e8>
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
    5e42:	1c33      	adds	r3, r6, #0
    5e44:	332c      	adds	r3, #44	; 0x2c
    5e46:	1c30      	adds	r0, r6, #0
    5e48:	3036      	adds	r0, #54	; 0x36
    5e4a:	9003      	str	r0, [sp, #12]
    5e4c:	a80c      	add	r0, sp, #48	; 0x30
    5e4e:	4681      	mov	r9, r0
    5e50:	a80d      	add	r0, sp, #52	; 0x34
    5e52:	9002      	str	r0, [sp, #8]
    5e54:	4648      	mov	r0, r9
    5e56:	46bc      	mov	ip, r7
    5e58:	465f      	mov	r7, fp
    5e5a:	9709      	str	r7, [sp, #36]	; 0x24
    5e5c:	46a1      	mov	r9, r4
    5e5e:	46b2      	mov	sl, r6
    5e60:	46ab      	mov	fp, r5
    5e62:	e00d      	b.n	5e80 <tcc_init+0x14c>
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5e64:	9b03      	ldr	r3, [sp, #12]
    5e66:	7a5a      	ldrb	r2, [r3, #9]
    5e68:	9904      	ldr	r1, [sp, #16]
    5e6a:	4291      	cmp	r1, r2
    5e6c:	d800      	bhi.n	5e70 <tcc_init+0x13c>
    5e6e:	e155      	b.n	611c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    5e70:	7819      	ldrb	r1, [r3, #0]
    5e72:	1c1c      	adds	r4, r3, #0
    5e74:	340a      	adds	r4, #10
    5e76:	9403      	str	r4, [sp, #12]
    5e78:	3004      	adds	r0, #4
    5e7a:	290f      	cmp	r1, #15
    5e7c:	d900      	bls.n	5e80 <tcc_init+0x14c>
    5e7e:	e14d      	b.n	611c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e80:	060d      	lsls	r5, r1, #24
    5e82:	27f0      	movs	r7, #240	; 0xf0
    5e84:	053f      	lsls	r7, r7, #20
    5e86:	403d      	ands	r5, r7
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5e88:	785c      	ldrb	r4, [r3, #1]
    5e8a:	0424      	lsls	r4, r4, #16
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5e8c:	789f      	ldrb	r7, [r3, #2]
    5e8e:	1e79      	subs	r1, r7, #1
    5e90:	418f      	sbcs	r7, r1
    5e92:	01ff      	lsls	r7, r7, #7
    5e94:	9701      	str	r7, [sp, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5e96:	78d9      	ldrb	r1, [r3, #3]
    5e98:	1e4e      	subs	r6, r1, #1
    5e9a:	41b1      	sbcs	r1, r6
    5e9c:	00c9      	lsls	r1, r1, #3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5e9e:	791e      	ldrb	r6, [r3, #4]
    5ea0:	1e77      	subs	r7, r6, #1
    5ea2:	41be      	sbcs	r6, r7
    5ea4:	0136      	lsls	r6, r6, #4
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5ea6:	0292      	lsls	r2, r2, #10
    5ea8:	27c0      	movs	r7, #192	; 0xc0
    5eaa:	013f      	lsls	r7, r7, #4
    5eac:	403a      	ands	r2, r7
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5eae:	4315      	orrs	r5, r2
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    5eb0:	795a      	ldrb	r2, [r3, #5]
    5eb2:	2703      	movs	r7, #3
    5eb4:	403a      	ands	r2, r7
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5eb6:	4315      	orrs	r5, r2
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5eb8:	432c      	orrs	r4, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5eba:	799a      	ldrb	r2, [r3, #6]
    5ebc:	0152      	lsls	r2, r2, #5
    5ebe:	2560      	movs	r5, #96	; 0x60
    5ec0:	402a      	ands	r2, r5
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5ec2:	4314      	orrs	r4, r2
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5ec4:	79da      	ldrb	r2, [r3, #7]
    5ec6:	0212      	lsls	r2, r2, #8
    5ec8:	27c0      	movs	r7, #192	; 0xc0
    5eca:	00bf      	lsls	r7, r7, #2
    5ecc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    5ece:	4314      	orrs	r4, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5ed0:	7a1a      	ldrb	r2, [r3, #8]
    5ed2:	0312      	lsls	r2, r2, #12
    5ed4:	23e0      	movs	r3, #224	; 0xe0
    5ed6:	01db      	lsls	r3, r3, #7
    5ed8:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5eda:	4322      	orrs	r2, r4
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5edc:	9f01      	ldr	r7, [sp, #4]
    5ede:	4317      	orrs	r7, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5ee0:	4339      	orrs	r1, r7
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5ee2:	430e      	orrs	r6, r1
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    5ee4:	6006      	str	r6, [r0, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    5ee6:	9c02      	ldr	r4, [sp, #8]
    5ee8:	42a0      	cmp	r0, r4
    5eea:	d1bb      	bne.n	5e64 <tcc_init+0x130>
    5eec:	4667      	mov	r7, ip
    5eee:	464c      	mov	r4, r9
    5ef0:	4656      	mov	r6, sl
    5ef2:	465d      	mov	r5, fp
    5ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    5ef6:	4683      	mov	fp, r0
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5ef8:	4b73      	ldr	r3, [pc, #460]	; (60c8 <tcc_init+0x394>)
    5efa:	5d58      	ldrb	r0, [r3, r5]
    5efc:	4652      	mov	r2, sl
    5efe:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    5f00:	2100      	movs	r1, #0
    5f02:	4689      	mov	r9, r1

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5f04:	2300      	movs	r3, #0
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5f06:	2180      	movs	r1, #128	; 0x80
    5f08:	0249      	lsls	r1, r1, #9
    5f0a:	468c      	mov	ip, r1
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5f0c:	2101      	movs	r1, #1
    5f0e:	468a      	mov	sl, r1
    5f10:	1c21      	adds	r1, r4, #0
    5f12:	1c04      	adds	r4, r0, #0
    5f14:	4648      	mov	r0, r9
    5f16:	4689      	mov	r9, r1
    5f18:	18f1      	adds	r1, r6, r3
    5f1a:	3150      	adds	r1, #80	; 0x50
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    5f1c:	7809      	ldrb	r1, [r1, #0]
    5f1e:	2900      	cmp	r1, #0
    5f20:	d005      	beq.n	5f2e <tcc_init+0x1fa>
			if (i >= ow_num) {
    5f22:	429c      	cmp	r4, r3
    5f24:	d800      	bhi.n	5f28 <tcc_init+0x1f4>
    5f26:	e0ef      	b.n	6108 <tcc_init+0x3d4>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5f28:	4661      	mov	r1, ip
    5f2a:	4099      	lsls	r1, r3
    5f2c:	4308      	orrs	r0, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5f2e:	7811      	ldrb	r1, [r2, #0]
    5f30:	2900      	cmp	r1, #0
    5f32:	d00c      	beq.n	5f4e <tcc_init+0x21a>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5f34:	429c      	cmp	r4, r3
    5f36:	d800      	bhi.n	5f3a <tcc_init+0x206>
    5f38:	e0e8      	b.n	610c <tcc_init+0x3d8>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5f3a:	2902      	cmp	r1, #2
    5f3c:	d104      	bne.n	5f48 <tcc_init+0x214>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5f3e:	2102      	movs	r1, #2
    5f40:	31ff      	adds	r1, #255	; 0xff
    5f42:	4099      	lsls	r1, r3
    5f44:	4308      	orrs	r0, r1
    5f46:	e002      	b.n	5f4e <tcc_init+0x21a>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5f48:	4651      	mov	r1, sl
    5f4a:	4099      	lsls	r1, r3
    5f4c:	4308      	orrs	r0, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5f4e:	3301      	adds	r3, #1
    5f50:	3202      	adds	r2, #2
    5f52:	2b08      	cmp	r3, #8
    5f54:	d1e0      	bne.n	5f18 <tcc_init+0x1e4>
    5f56:	464c      	mov	r4, r9
    5f58:	4681      	mov	r9, r0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    5f5a:	4b5c      	ldr	r3, [pc, #368]	; (60cc <tcc_init+0x398>)
    5f5c:	5d5b      	ldrb	r3, [r3, r5]
    5f5e:	9304      	str	r3, [sp, #16]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f60:	7e73      	ldrb	r3, [r6, #25]
    5f62:	011b      	lsls	r3, r3, #4
    5f64:	2230      	movs	r2, #48	; 0x30
    5f66:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5f68:	7e33      	ldrb	r3, [r6, #24]
    5f6a:	2107      	movs	r1, #7
    5f6c:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f6e:	431a      	orrs	r2, r3
    5f70:	9203      	str	r2, [sp, #12]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f72:	2300      	movs	r3, #0
    5f74:	1c31      	adds	r1, r6, #0
    5f76:	3110      	adds	r1, #16
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    5f78:	2080      	movs	r0, #128	; 0x80
    5f7a:	0240      	lsls	r0, r0, #9
    5f7c:	4684      	mov	ip, r0
    5f7e:	18ca      	adds	r2, r1, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    5f80:	7912      	ldrb	r2, [r2, #4]
    5f82:	2a00      	cmp	r2, #0
    5f84:	d008      	beq.n	5f98 <tcc_init+0x264>
			if (n >= cc_num) {
    5f86:	9a04      	ldr	r2, [sp, #16]
    5f88:	429a      	cmp	r2, r3
    5f8a:	dc00      	bgt.n	5f8e <tcc_init+0x25a>
    5f8c:	e0c0      	b.n	6110 <tcc_init+0x3dc>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    5f8e:	4662      	mov	r2, ip
    5f90:	409a      	lsls	r2, r3
    5f92:	9803      	ldr	r0, [sp, #12]
    5f94:	4310      	orrs	r0, r2
    5f96:	9003      	str	r0, [sp, #12]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f98:	3301      	adds	r3, #1
    5f9a:	2b04      	cmp	r3, #4
    5f9c:	d1ef      	bne.n	5f7e <tcc_init+0x24a>
    5f9e:	2300      	movs	r3, #0

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    5fa0:	1c19      	adds	r1, r3, #0
    5fa2:	4640      	mov	r0, r8
    5fa4:	18c2      	adds	r2, r0, r3
    5fa6:	6051      	str	r1, [r2, #4]
    5fa8:	3304      	adds	r3, #4
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5faa:	2b30      	cmp	r3, #48	; 0x30
    5fac:	d1fa      	bne.n	5fa4 <tcc_init+0x270>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    5fae:	2300      	movs	r3, #0
    5fb0:	6343      	str	r3, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5fb2:	6383      	str	r3, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5fb4:	00aa      	lsls	r2, r5, #2
    5fb6:	4b46      	ldr	r3, [pc, #280]	; (60d0 <tcc_init+0x39c>)
    5fb8:	50d0      	str	r0, [r2, r3]
#endif

	module_inst->hw = hw;
    5fba:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5fbc:	23a0      	movs	r3, #160	; 0xa0
    5fbe:	5cf2      	ldrb	r2, [r6, r3]
    5fc0:	233c      	movs	r3, #60	; 0x3c
    5fc2:	54c2      	strb	r2, [r0, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    5fc4:	a90b      	add	r1, sp, #44	; 0x2c
    5fc6:	7ab3      	ldrb	r3, [r6, #10]
    5fc8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5fca:	4b42      	ldr	r3, [pc, #264]	; (60d4 <tcc_init+0x3a0>)
    5fcc:	5d5b      	ldrb	r3, [r3, r5]
    5fce:	4698      	mov	r8, r3
    5fd0:	1c18      	adds	r0, r3, #0
    5fd2:	4b41      	ldr	r3, [pc, #260]	; (60d8 <tcc_init+0x3a4>)
    5fd4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5fd6:	4640      	mov	r0, r8
    5fd8:	4b40      	ldr	r3, [pc, #256]	; (60dc <tcc_init+0x3a8>)
    5fda:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5fdc:	4b3a      	ldr	r3, [pc, #232]	; (60c8 <tcc_init+0x394>)
    5fde:	5d5b      	ldrb	r3, [r3, r5]
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	dd27      	ble.n	6034 <tcc_init+0x300>
    5fe4:	2178      	movs	r1, #120	; 0x78
    5fe6:	1989      	adds	r1, r1, r6
    5fe8:	2500      	movs	r5, #0
    5fea:	4a37      	ldr	r2, [pc, #220]	; (60c8 <tcc_init+0x394>)
    5fec:	4692      	mov	sl, r2
    5fee:	1c23      	adds	r3, r4, #0
    5ff0:	1c0c      	adds	r4, r1, #0
    5ff2:	4698      	mov	r8, r3
    5ff4:	1973      	adds	r3, r6, r5
    5ff6:	3398      	adds	r3, #152	; 0x98
		if (!config->pins.enable_wave_out_pin[i]) {
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d013      	beq.n	6026 <tcc_init+0x2f2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5ffe:	2301      	movs	r3, #1
    6000:	202a      	movs	r0, #42	; 0x2a
    6002:	4468      	add	r0, sp
    6004:	7003      	strb	r3, [r0, #0]
	config->powersave    = false;
    6006:	2200      	movs	r2, #0
    6008:	212b      	movs	r1, #43	; 0x2b
    600a:	4469      	add	r1, sp
    600c:	700a      	strb	r2, [r1, #0]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    600e:	6820      	ldr	r0, [r4, #0]
    6010:	aa0a      	add	r2, sp, #40	; 0x28
    6012:	7010      	strb	r0, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6014:	2129      	movs	r1, #41	; 0x29
    6016:	4469      	add	r1, sp
    6018:	700b      	strb	r3, [r1, #0]
    601a:	1c23      	adds	r3, r4, #0
    601c:	3b20      	subs	r3, #32
		system_pinmux_pin_set_config(
    601e:	7818      	ldrb	r0, [r3, #0]
    6020:	1c11      	adds	r1, r2, #0
    6022:	4a2f      	ldr	r2, [pc, #188]	; (60e0 <tcc_init+0x3ac>)
    6024:	4790      	blx	r2
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6026:	3501      	adds	r5, #1
    6028:	3404      	adds	r4, #4
    602a:	4650      	mov	r0, sl
    602c:	5dc3      	ldrb	r3, [r0, r7]
    602e:	42ab      	cmp	r3, r5
    6030:	dce0      	bgt.n	5ff4 <tcc_init+0x2c0>
    6032:	4644      	mov	r4, r8

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6034:	9d08      	ldr	r5, [sp, #32]
    6036:	022a      	lsls	r2, r5, #8
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6038:	9f07      	ldr	r7, [sp, #28]
    603a:	033b      	lsls	r3, r7, #12
    603c:	4313      	orrs	r3, r2
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    603e:	4658      	mov	r0, fp
    6040:	4303      	orrs	r3, r0
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    6042:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6044:	2204      	movs	r2, #4
    6046:	68a3      	ldr	r3, [r4, #8]
    6048:	421a      	tst	r2, r3
    604a:	d1fc      	bne.n	6046 <tcc_init+0x312>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    604c:	23ff      	movs	r3, #255	; 0xff
    604e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6050:	2204      	movs	r2, #4
    6052:	68a3      	ldr	r3, [r4, #8]
    6054:	421a      	tst	r2, r3
    6056:	d1fc      	bne.n	6052 <tcc_init+0x31e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    6058:	9d05      	ldr	r5, [sp, #20]
    605a:	7165      	strb	r5, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    605c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    605e:	60e7      	str	r7, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6060:	980d      	ldr	r0, [sp, #52]	; 0x34
    6062:	6120      	str	r0, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    6064:	4649      	mov	r1, r9
    6066:	61a1      	str	r1, [r4, #24]

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6068:	4a1e      	ldr	r2, [pc, #120]	; (60e4 <tcc_init+0x3b0>)
    606a:	68a3      	ldr	r3, [r4, #8]
    606c:	4213      	tst	r3, r2
    606e:	d1fc      	bne.n	606a <tcc_init+0x336>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    6070:	9d03      	ldr	r5, [sp, #12]
    6072:	63e5      	str	r5, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6074:	2210      	movs	r2, #16
    6076:	68a3      	ldr	r3, [r4, #8]
    6078:	421a      	tst	r2, r3
    607a:	d1fc      	bne.n	6076 <tcc_init+0x342>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    607c:	6837      	ldr	r7, [r6, #0]
    607e:	6367      	str	r7, [r4, #52]	; 0x34

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6080:	4a19      	ldr	r2, [pc, #100]	; (60e8 <tcc_init+0x3b4>)
    6082:	68a3      	ldr	r3, [r4, #8]
    6084:	4213      	tst	r3, r2
    6086:	d1fc      	bne.n	6082 <tcc_init+0x34e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    6088:	6870      	ldr	r0, [r6, #4]
    608a:	6420      	str	r0, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    608c:	9804      	ldr	r0, [sp, #16]
    608e:	2800      	cmp	r0, #0
    6090:	dd40      	ble.n	6114 <tcc_init+0x3e0>
    6092:	361c      	adds	r6, #28
    6094:	2100      	movs	r1, #0
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    6096:	4d15      	ldr	r5, [pc, #84]	; (60ec <tcc_init+0x3b8>)
    6098:	1c2a      	adds	r2, r5, #0
    609a:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
    609c:	68a3      	ldr	r3, [r4, #8]
    609e:	4213      	tst	r3, r2
    60a0:	d1fc      	bne.n	609c <tcc_init+0x368>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    60a2:	ce04      	ldmia	r6!, {r2}
    60a4:	1c0b      	adds	r3, r1, #0
    60a6:	3310      	adds	r3, #16
    60a8:	009b      	lsls	r3, r3, #2
    60aa:	18e3      	adds	r3, r4, r3
    60ac:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    60ae:	3101      	adds	r1, #1
    60b0:	4288      	cmp	r0, r1
    60b2:	dcf1      	bgt.n	6098 <tcc_init+0x364>
    60b4:	e030      	b.n	6118 <tcc_init+0x3e4>
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	00005bb9 	.word	0x00005bb9
    60bc:	40000400 	.word	0x40000400
    60c0:	0000a4b8 	.word	0x0000a4b8
    60c4:	0000a4c4 	.word	0x0000a4c4
    60c8:	0000a4d4 	.word	0x0000a4d4
    60cc:	0000a4d0 	.word	0x0000a4d0
    60d0:	20000be0 	.word	0x20000be0
    60d4:	0000a4b4 	.word	0x0000a4b4
    60d8:	00005a89 	.word	0x00005a89
    60dc:	000059fd 	.word	0x000059fd
    60e0:	00005b65 	.word	0x00005b65
    60e4:	00020040 	.word	0x00020040
    60e8:	00040080 	.word	0x00040080
    60ec:	00080100 	.word	0x00080100

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    60f0:	2017      	movs	r0, #23
    60f2:	e014      	b.n	611e <tcc_init+0x3ea>
    60f4:	2017      	movs	r0, #23
    60f6:	e012      	b.n	611e <tcc_init+0x3ea>
    60f8:	2017      	movs	r0, #23
    60fa:	e010      	b.n	611e <tcc_init+0x3ea>
    60fc:	2017      	movs	r0, #23
    60fe:	e00e      	b.n	611e <tcc_init+0x3ea>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    6100:	2017      	movs	r0, #23
    6102:	e00c      	b.n	611e <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    6104:	2017      	movs	r0, #23
    6106:	e00a      	b.n	611e <tcc_init+0x3ea>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    6108:	2017      	movs	r0, #23
    610a:	e008      	b.n	611e <tcc_init+0x3ea>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    610c:	2017      	movs	r0, #23
    610e:	e006      	b.n	611e <tcc_init+0x3ea>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    6110:	2017      	movs	r0, #23
    6112:	e004      	b.n	611e <tcc_init+0x3ea>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    6114:	2000      	movs	r0, #0
    6116:	e002      	b.n	611e <tcc_init+0x3ea>
    6118:	2000      	movs	r0, #0
    611a:	e000      	b.n	611e <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    611c:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    611e:	b00f      	add	sp, #60	; 0x3c
    6120:	bc3c      	pop	{r2, r3, r4, r5}
    6122:	4690      	mov	r8, r2
    6124:	4699      	mov	r9, r3
    6126:	46a2      	mov	sl, r4
    6128:	46ab      	mov	fp, r5
    612a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000612c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    612c:	0092      	lsls	r2, r2, #2
    612e:	1883      	adds	r3, r0, r2
    6130:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    6132:	4b03      	ldr	r3, [pc, #12]	; (6140 <tcc_register_callback+0x14>)
    6134:	58d3      	ldr	r3, [r2, r3]
    6136:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6138:	4313      	orrs	r3, r2
    613a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    613c:	2000      	movs	r0, #0
    613e:	4770      	bx	lr
    6140:	0000a4d8 	.word	0x0000a4d8

00006144 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6144:	b538      	push	{r3, r4, r5, lr}
    6146:	1c04      	adds	r4, r0, #0
    6148:	1c0d      	adds	r5, r1, #0
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    614a:	6800      	ldr	r0, [r0, #0]
    614c:	4b09      	ldr	r3, [pc, #36]	; (6174 <tcc_enable_callback+0x30>)
    614e:	4798      	blx	r3
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6150:	4b09      	ldr	r3, [pc, #36]	; (6178 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6152:	5c1b      	ldrb	r3, [r3, r0]
    6154:	221f      	movs	r2, #31
    6156:	401a      	ands	r2, r3
    6158:	2301      	movs	r3, #1
    615a:	4093      	lsls	r3, r2
    615c:	1c1a      	adds	r2, r3, #0
    615e:	4b07      	ldr	r3, [pc, #28]	; (617c <tcc_enable_callback+0x38>)
    6160:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6162:	00ad      	lsls	r5, r5, #2
    6164:	4b06      	ldr	r3, [pc, #24]	; (6180 <tcc_enable_callback+0x3c>)
    6166:	58eb      	ldr	r3, [r5, r3]
    6168:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    616a:	431a      	orrs	r2, r3
    616c:	63a2      	str	r2, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    616e:	6822      	ldr	r2, [r4, #0]
    6170:	6293      	str	r3, [r2, #40]	; 0x28
}
    6172:	bd38      	pop	{r3, r4, r5, pc}
    6174:	00005bb9 	.word	0x00005bb9
    6178:	0000a508 	.word	0x0000a508
    617c:	e000e100 	.word	0xe000e100
    6180:	0000a4d8 	.word	0x0000a4d8

00006184 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6184:	b5f0      	push	{r4, r5, r6, r7, lr}
    6186:	4647      	mov	r7, r8
    6188:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    618a:	0080      	lsls	r0, r0, #2
    618c:	4b0d      	ldr	r3, [pc, #52]	; (61c4 <_tcc_interrupt_handler+0x40>)
    618e:	58c6      	ldr	r6, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6190:	6833      	ldr	r3, [r6, #0]
    6192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6194:	6b72      	ldr	r2, [r6, #52]	; 0x34
    6196:	4013      	ands	r3, r2
    6198:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    619a:	401a      	ands	r2, r3
    619c:	4690      	mov	r8, r2
    619e:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    61a0:	4f09      	ldr	r7, [pc, #36]	; (61c8 <_tcc_interrupt_handler+0x44>)
    61a2:	59e5      	ldr	r5, [r4, r7]
    61a4:	4643      	mov	r3, r8
    61a6:	422b      	tst	r3, r5
    61a8:	d005      	beq.n	61b6 <_tcc_interrupt_handler+0x32>
    61aa:	1933      	adds	r3, r6, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    61ac:	685b      	ldr	r3, [r3, #4]
    61ae:	1c30      	adds	r0, r6, #0
    61b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    61b2:	6833      	ldr	r3, [r6, #0]
    61b4:	62dd      	str	r5, [r3, #44]	; 0x2c
    61b6:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    61b8:	2c30      	cmp	r4, #48	; 0x30
    61ba:	d1f2      	bne.n	61a2 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    61bc:	bc04      	pop	{r2}
    61be:	4690      	mov	r8, r2
    61c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	20000be0 	.word	0x20000be0
    61c8:	0000a4d8 	.word	0x0000a4d8

000061cc <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    61cc:	b508      	push	{r3, lr}
    61ce:	2000      	movs	r0, #0
    61d0:	4b01      	ldr	r3, [pc, #4]	; (61d8 <TCC0_Handler+0xc>)
    61d2:	4798      	blx	r3
    61d4:	bd08      	pop	{r3, pc}
    61d6:	46c0      	nop			; (mov r8, r8)
    61d8:	00006185 	.word	0x00006185

000061dc <TCC1_Handler>:
    61dc:	b508      	push	{r3, lr}
    61de:	2001      	movs	r0, #1
    61e0:	4b01      	ldr	r3, [pc, #4]	; (61e8 <TCC1_Handler+0xc>)
    61e2:	4798      	blx	r3
    61e4:	bd08      	pop	{r3, pc}
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	00006185 	.word	0x00006185

000061ec <TCC2_Handler>:
    61ec:	b508      	push	{r3, lr}
    61ee:	2002      	movs	r0, #2
    61f0:	4b01      	ldr	r3, [pc, #4]	; (61f8 <TCC2_Handler+0xc>)
    61f2:	4798      	blx	r3
    61f4:	bd08      	pop	{r3, pc}
    61f6:	46c0      	nop			; (mov r8, r8)
    61f8:	00006185 	.word	0x00006185

000061fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    61fc:	e7fe      	b.n	61fc <Dummy_Handler>
    61fe:	46c0      	nop			; (mov r8, r8)

00006200 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6200:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    6202:	4b2c      	ldr	r3, [pc, #176]	; (62b4 <Reset_Handler+0xb4>)
    6204:	4a2c      	ldr	r2, [pc, #176]	; (62b8 <Reset_Handler+0xb8>)
    6206:	429a      	cmp	r2, r3
    6208:	d003      	beq.n	6212 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    620a:	4b2c      	ldr	r3, [pc, #176]	; (62bc <Reset_Handler+0xbc>)
    620c:	4a29      	ldr	r2, [pc, #164]	; (62b4 <Reset_Handler+0xb4>)
    620e:	429a      	cmp	r2, r3
    6210:	d304      	bcc.n	621c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6212:	4b2b      	ldr	r3, [pc, #172]	; (62c0 <Reset_Handler+0xc0>)
    6214:	4a2b      	ldr	r2, [pc, #172]	; (62c4 <Reset_Handler+0xc4>)
    6216:	429a      	cmp	r2, r3
    6218:	d310      	bcc.n	623c <Reset_Handler+0x3c>
    621a:	e01b      	b.n	6254 <Reset_Handler+0x54>
    621c:	4b2a      	ldr	r3, [pc, #168]	; (62c8 <Reset_Handler+0xc8>)
    621e:	4827      	ldr	r0, [pc, #156]	; (62bc <Reset_Handler+0xbc>)
    6220:	3003      	adds	r0, #3
    6222:	1ac0      	subs	r0, r0, r3
    6224:	0880      	lsrs	r0, r0, #2
    6226:	3001      	adds	r0, #1
    6228:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    622a:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    622c:	4921      	ldr	r1, [pc, #132]	; (62b4 <Reset_Handler+0xb4>)
    622e:	4a22      	ldr	r2, [pc, #136]	; (62b8 <Reset_Handler+0xb8>)
    6230:	58d4      	ldr	r4, [r2, r3]
    6232:	50cc      	str	r4, [r1, r3]
    6234:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    6236:	4283      	cmp	r3, r0
    6238:	d1fa      	bne.n	6230 <Reset_Handler+0x30>
    623a:	e7ea      	b.n	6212 <Reset_Handler+0x12>
    623c:	4b21      	ldr	r3, [pc, #132]	; (62c4 <Reset_Handler+0xc4>)
    623e:	1d1a      	adds	r2, r3, #4
    6240:	491f      	ldr	r1, [pc, #124]	; (62c0 <Reset_Handler+0xc0>)
    6242:	3103      	adds	r1, #3
    6244:	1a89      	subs	r1, r1, r2
    6246:	0889      	lsrs	r1, r1, #2
    6248:	0089      	lsls	r1, r1, #2
    624a:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    624c:	2100      	movs	r1, #0
    624e:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6250:	4293      	cmp	r3, r2
    6252:	d1fc      	bne.n	624e <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6254:	4b1d      	ldr	r3, [pc, #116]	; (62cc <Reset_Handler+0xcc>)
    6256:	21ff      	movs	r1, #255	; 0xff
    6258:	4a1d      	ldr	r2, [pc, #116]	; (62d0 <Reset_Handler+0xd0>)
    625a:	438a      	bics	r2, r1
    625c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    625e:	2102      	movs	r1, #2
    6260:	2390      	movs	r3, #144	; 0x90
    6262:	005b      	lsls	r3, r3, #1
    6264:	4a1b      	ldr	r2, [pc, #108]	; (62d4 <Reset_Handler+0xd4>)
    6266:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6268:	4b1b      	ldr	r3, [pc, #108]	; (62d8 <Reset_Handler+0xd8>)
    626a:	78d8      	ldrb	r0, [r3, #3]
    626c:	2103      	movs	r1, #3
    626e:	4388      	bics	r0, r1
    6270:	2202      	movs	r2, #2
    6272:	4310      	orrs	r0, r2
    6274:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6276:	78dd      	ldrb	r5, [r3, #3]
    6278:	240c      	movs	r4, #12
    627a:	43a5      	bics	r5, r4
    627c:	2008      	movs	r0, #8
    627e:	4305      	orrs	r5, r0
    6280:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6282:	4b16      	ldr	r3, [pc, #88]	; (62dc <Reset_Handler+0xdc>)
    6284:	7b9e      	ldrb	r6, [r3, #14]
    6286:	2530      	movs	r5, #48	; 0x30
    6288:	43ae      	bics	r6, r5
    628a:	2520      	movs	r5, #32
    628c:	4335      	orrs	r5, r6
    628e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6290:	7b9d      	ldrb	r5, [r3, #14]
    6292:	43a5      	bics	r5, r4
    6294:	4328      	orrs	r0, r5
    6296:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6298:	7b98      	ldrb	r0, [r3, #14]
    629a:	4388      	bics	r0, r1
    629c:	4302      	orrs	r2, r0
    629e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    62a0:	4b0f      	ldr	r3, [pc, #60]	; (62e0 <Reset_Handler+0xe0>)
    62a2:	6859      	ldr	r1, [r3, #4]
    62a4:	2280      	movs	r2, #128	; 0x80
    62a6:	430a      	orrs	r2, r1
    62a8:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    62aa:	4b0e      	ldr	r3, [pc, #56]	; (62e4 <Reset_Handler+0xe4>)
    62ac:	4798      	blx	r3

        /* Branch to main function */
        main();
    62ae:	4b0e      	ldr	r3, [pc, #56]	; (62e8 <Reset_Handler+0xe8>)
    62b0:	4798      	blx	r3
    62b2:	e7fe      	b.n	62b2 <Reset_Handler+0xb2>
    62b4:	20000000 	.word	0x20000000
    62b8:	0000a69c 	.word	0x0000a69c
    62bc:	200000bc 	.word	0x200000bc
    62c0:	20000bfc 	.word	0x20000bfc
    62c4:	200000bc 	.word	0x200000bc
    62c8:	20000004 	.word	0x20000004
    62cc:	e000ed00 	.word	0xe000ed00
    62d0:	00000000 	.word	0x00000000
    62d4:	41007000 	.word	0x41007000
    62d8:	41005000 	.word	0x41005000
    62dc:	41004800 	.word	0x41004800
    62e0:	41004000 	.word	0x41004000
    62e4:	000075fd 	.word	0x000075fd
    62e8:	00000945 	.word	0x00000945

000062ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ee:	4647      	mov	r7, r8
    62f0:	b480      	push	{r7}
    62f2:	1c0c      	adds	r4, r1, #0
    62f4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    62f6:	2800      	cmp	r0, #0
    62f8:	d10c      	bne.n	6314 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    62fa:	2a00      	cmp	r2, #0
    62fc:	dd0d      	ble.n	631a <_read+0x2e>
    62fe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6300:	4e09      	ldr	r6, [pc, #36]	; (6328 <_read+0x3c>)
    6302:	4d0a      	ldr	r5, [pc, #40]	; (632c <_read+0x40>)
    6304:	6830      	ldr	r0, [r6, #0]
    6306:	1c21      	adds	r1, r4, #0
    6308:	682b      	ldr	r3, [r5, #0]
    630a:	4798      	blx	r3
		ptr++;
    630c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    630e:	42bc      	cmp	r4, r7
    6310:	d1f8      	bne.n	6304 <_read+0x18>
    6312:	e004      	b.n	631e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    6314:	2001      	movs	r0, #1
    6316:	4240      	negs	r0, r0
    6318:	e002      	b.n	6320 <_read+0x34>
	}

	for (; len > 0; --len) {
    631a:	2000      	movs	r0, #0
    631c:	e000      	b.n	6320 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    631e:	4640      	mov	r0, r8
	}
	return nChars;
}
    6320:	bc04      	pop	{r2}
    6322:	4690      	mov	r8, r2
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6326:	46c0      	nop			; (mov r8, r8)
    6328:	20000bf4 	.word	0x20000bf4
    632c:	20000bec 	.word	0x20000bec

00006330 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6330:	b5f0      	push	{r4, r5, r6, r7, lr}
    6332:	4647      	mov	r7, r8
    6334:	b480      	push	{r7}
    6336:	1c0e      	adds	r6, r1, #0
    6338:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    633a:	3801      	subs	r0, #1
    633c:	2802      	cmp	r0, #2
    633e:	d810      	bhi.n	6362 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6340:	2a00      	cmp	r2, #0
    6342:	d011      	beq.n	6368 <_write+0x38>
    6344:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6346:	4b0d      	ldr	r3, [pc, #52]	; (637c <_write+0x4c>)
    6348:	4698      	mov	r8, r3
    634a:	4f0d      	ldr	r7, [pc, #52]	; (6380 <_write+0x50>)
    634c:	4643      	mov	r3, r8
    634e:	6818      	ldr	r0, [r3, #0]
    6350:	5d31      	ldrb	r1, [r6, r4]
    6352:	683b      	ldr	r3, [r7, #0]
    6354:	4798      	blx	r3
    6356:	2800      	cmp	r0, #0
    6358:	db08      	blt.n	636c <_write+0x3c>
			return -1;
		}
		++nChars;
    635a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    635c:	42a5      	cmp	r5, r4
    635e:	d1f5      	bne.n	634c <_write+0x1c>
    6360:	e007      	b.n	6372 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    6362:	2001      	movs	r0, #1
    6364:	4240      	negs	r0, r0
    6366:	e005      	b.n	6374 <_write+0x44>
	}

	for (; len != 0; --len) {
    6368:	2000      	movs	r0, #0
    636a:	e003      	b.n	6374 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    636c:	2001      	movs	r0, #1
    636e:	4240      	negs	r0, r0
    6370:	e000      	b.n	6374 <_write+0x44>
		}
		++nChars;
    6372:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    6374:	bc04      	pop	{r2}
    6376:	4690      	mov	r8, r2
    6378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	20000bf4 	.word	0x20000bf4
    6380:	20000bf0 	.word	0x20000bf0

00006384 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6384:	4b06      	ldr	r3, [pc, #24]	; (63a0 <_sbrk+0x1c>)
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	2b00      	cmp	r3, #0
    638a:	d102      	bne.n	6392 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    638c:	4a05      	ldr	r2, [pc, #20]	; (63a4 <_sbrk+0x20>)
    638e:	4b04      	ldr	r3, [pc, #16]	; (63a0 <_sbrk+0x1c>)
    6390:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6392:	4a03      	ldr	r2, [pc, #12]	; (63a0 <_sbrk+0x1c>)
    6394:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    6396:	1818      	adds	r0, r3, r0
    6398:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    639a:	1c18      	adds	r0, r3, #0
    639c:	4770      	bx	lr
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	200008b4 	.word	0x200008b4
    63a4:	20002c00 	.word	0x20002c00

000063a8 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    63a8:	2001      	movs	r0, #1
}
    63aa:	4240      	negs	r0, r0
    63ac:	4770      	bx	lr
    63ae:	46c0      	nop			; (mov r8, r8)

000063b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    63b0:	2380      	movs	r3, #128	; 0x80
    63b2:	019b      	lsls	r3, r3, #6
    63b4:	604b      	str	r3, [r1, #4]

	return 0;
}
    63b6:	2000      	movs	r0, #0
    63b8:	4770      	bx	lr
    63ba:	46c0      	nop			; (mov r8, r8)

000063bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    63bc:	2001      	movs	r0, #1
    63be:	4770      	bx	lr

000063c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    63c0:	2000      	movs	r0, #0
    63c2:	4770      	bx	lr

000063c4 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    63c4:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    63c6:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    63c8:	2200      	movs	r2, #0
    63ca:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    63cc:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    63ce:	9b00      	ldr	r3, [sp, #0]
    63d0:	60c3      	str	r3, [r0, #12]
}
    63d2:	4770      	bx	lr

000063d4 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    63d4:	b510      	push	{r4, lr}
    63d6:	1c04      	adds	r4, r0, #0
	if(writer->written > 0) {
    63d8:	6842      	ldr	r2, [r0, #4]
    63da:	2a00      	cmp	r2, #0
    63dc:	d005      	beq.n	63ea <stream_writer_send_remain+0x16>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    63de:	68c0      	ldr	r0, [r0, #12]
    63e0:	6921      	ldr	r1, [r4, #16]
    63e2:	68a3      	ldr	r3, [r4, #8]
    63e4:	4798      	blx	r3
		writer->written = 0;
    63e6:	2300      	movs	r3, #0
    63e8:	6063      	str	r3, [r4, #4]
	}
}
    63ea:	bd10      	pop	{r4, pc}

000063ec <stream_writer_send_8>:
	writer->write_func = func;
	writer->priv_data = priv_data;
}

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    63ec:	b538      	push	{r3, r4, r5, lr}
    63ee:	1c04      	adds	r4, r0, #0
    63f0:	1c0d      	adds	r5, r1, #0
	int remain = writer->max_size - writer->written;
    63f2:	6801      	ldr	r1, [r0, #0]
    63f4:	6842      	ldr	r2, [r0, #4]
    63f6:	1a8b      	subs	r3, r1, r2

	if (remain < 1) {
    63f8:	2b00      	cmp	r3, #0
    63fa:	dc01      	bgt.n	6400 <stream_writer_send_8+0x14>
		stream_writer_send_remain(writer);
    63fc:	4b03      	ldr	r3, [pc, #12]	; (640c <stream_writer_send_8+0x20>)
    63fe:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    6400:	6922      	ldr	r2, [r4, #16]
    6402:	6863      	ldr	r3, [r4, #4]
    6404:	1c59      	adds	r1, r3, #1
    6406:	6061      	str	r1, [r4, #4]
    6408:	54d5      	strb	r5, [r2, r3]
}
    640a:	bd38      	pop	{r3, r4, r5, pc}
    640c:	000063d5 	.word	0x000063d5

00006410 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    6410:	b570      	push	{r4, r5, r6, lr}
    6412:	1c05      	adds	r5, r0, #0
    6414:	1c0e      	adds	r6, r1, #0
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    6416:	1209      	asrs	r1, r1, #8
    6418:	4c02      	ldr	r4, [pc, #8]	; (6424 <stream_writer_send_16BE+0x14>)
    641a:	47a0      	blx	r4
	stream_writer_send_8(writer, value & 0xFF);
    641c:	b271      	sxtb	r1, r6
    641e:	1c28      	adds	r0, r5, #0
    6420:	47a0      	blx	r4
}
    6422:	bd70      	pop	{r4, r5, r6, pc}
    6424:	000063ed 	.word	0x000063ed

00006428 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    6428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    642a:	1c06      	adds	r6, r0, #0
    642c:	1c0d      	adds	r5, r1, #0
    642e:	1e14      	subs	r4, r2, #0
	for (; length > 0; length--, buffer++) {
    6430:	d008      	beq.n	6444 <stream_writer_send_buffer+0x1c>
		stream_writer_send_8(writer, *buffer);
    6432:	4f05      	ldr	r7, [pc, #20]	; (6448 <stream_writer_send_buffer+0x20>)
    6434:	2100      	movs	r1, #0
    6436:	5669      	ldrsb	r1, [r5, r1]
    6438:	1c30      	adds	r0, r6, #0
    643a:	47b8      	blx	r7
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
    643c:	3c01      	subs	r4, #1
    643e:	3501      	adds	r5, #1
    6440:	2c00      	cmp	r4, #0
    6442:	d1f7      	bne.n	6434 <stream_writer_send_buffer+0xc>
		stream_writer_send_8(writer, *buffer);
	}
}
    6444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	000063ed 	.word	0x000063ed

0000644c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    644c:	4b02      	ldr	r3, [pc, #8]	; (6458 <sw_timer_tcc_callback+0xc>)
    644e:	681a      	ldr	r2, [r3, #0]
    6450:	3201      	adds	r2, #1
    6452:	601a      	str	r2, [r3, #0]
}
    6454:	4770      	bx	lr
    6456:	46c0      	nop			; (mov r8, r8)
    6458:	200008b8 	.word	0x200008b8

0000645c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    645c:	2364      	movs	r3, #100	; 0x64
    645e:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    6460:	2300      	movs	r3, #0
    6462:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    6464:	7043      	strb	r3, [r0, #1]
}
    6466:	4770      	bx	lr

00006468 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
    646a:	4647      	mov	r7, r8
    646c:	b480      	push	{r7}
    646e:	b0ac      	sub	sp, #176	; 0xb0
    6470:	1c0c      	adds	r4, r1, #0
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    6472:	466d      	mov	r5, sp
    6474:	4b1d      	ldr	r3, [pc, #116]	; (64ec <sw_timer_init+0x84>)
    6476:	466a      	mov	r2, sp
    6478:	cbc2      	ldmia	r3!, {r1, r6, r7}
    647a:	c2c2      	stmia	r2!, {r1, r6, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    647c:	8863      	ldrh	r3, [r4, #2]
    647e:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    6480:	1c07      	adds	r7, r0, #0
    6482:	3714      	adds	r7, #20
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    6484:	1c16      	adds	r6, r2, #0
    6486:	7823      	ldrb	r3, [r4, #0]
    6488:	009b      	lsls	r3, r3, #2
    648a:	5959      	ldr	r1, [r3, r5]
    648c:	1c10      	adds	r0, r2, #0
    648e:	4b18      	ldr	r3, [pc, #96]	; (64f0 <sw_timer_init+0x88>)
    6490:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6492:	2000      	movs	r0, #0
    6494:	4b17      	ldr	r3, [pc, #92]	; (64f4 <sw_timer_init+0x8c>)
    6496:	4798      	blx	r3
    6498:	4b17      	ldr	r3, [pc, #92]	; (64f8 <sw_timer_init+0x90>)
    649a:	7a1b      	ldrb	r3, [r3, #8]
    649c:	b2db      	uxtb	r3, r3
    649e:	40d8      	lsrs	r0, r3
    64a0:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    64a2:	8861      	ldrh	r1, [r4, #2]
    64a4:	20fa      	movs	r0, #250	; 0xfa
    64a6:	0200      	lsls	r0, r0, #8
    64a8:	4b14      	ldr	r3, [pc, #80]	; (64fc <sw_timer_init+0x94>)
    64aa:	4798      	blx	r3
    64ac:	1c01      	adds	r1, r0, #0
    64ae:	4640      	mov	r0, r8
    64b0:	4b13      	ldr	r3, [pc, #76]	; (6500 <sw_timer_init+0x98>)
    64b2:	4798      	blx	r3
    64b4:	6070      	str	r0, [r6, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    64b6:	2305      	movs	r3, #5
    64b8:	72f3      	strb	r3, [r6, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    64ba:	7823      	ldrb	r3, [r4, #0]
    64bc:	009b      	lsls	r3, r3, #2
    64be:	5959      	ldr	r1, [r3, r5]
    64c0:	1c38      	adds	r0, r7, #0
    64c2:	1c32      	adds	r2, r6, #0
    64c4:	4b0f      	ldr	r3, [pc, #60]	; (6504 <sw_timer_init+0x9c>)
    64c6:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    64c8:	7862      	ldrb	r2, [r4, #1]
    64ca:	3208      	adds	r2, #8
    64cc:	b2d2      	uxtb	r2, r2
    64ce:	1c38      	adds	r0, r7, #0
    64d0:	490d      	ldr	r1, [pc, #52]	; (6508 <sw_timer_init+0xa0>)
    64d2:	4b0e      	ldr	r3, [pc, #56]	; (650c <sw_timer_init+0xa4>)
    64d4:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    64d6:	7861      	ldrb	r1, [r4, #1]
    64d8:	3108      	adds	r1, #8
    64da:	b2c9      	uxtb	r1, r1
    64dc:	1c38      	adds	r0, r7, #0
    64de:	4b0c      	ldr	r3, [pc, #48]	; (6510 <sw_timer_init+0xa8>)
    64e0:	4798      	blx	r3
}
    64e2:	b02c      	add	sp, #176	; 0xb0
    64e4:	bc04      	pop	{r2}
    64e6:	4690      	mov	r8, r2
    64e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64ea:	46c0      	nop			; (mov r8, r8)
    64ec:	0000a50c 	.word	0x0000a50c
    64f0:	00005be9 	.word	0x00005be9
    64f4:	00005971 	.word	0x00005971
    64f8:	40000400 	.word	0x40000400
    64fc:	000074b9 	.word	0x000074b9
    6500:	0000741d 	.word	0x0000741d
    6504:	00005d35 	.word	0x00005d35
    6508:	0000644d 	.word	0x0000644d
    650c:	0000612d 	.word	0x0000612d
    6510:	00006145 	.word	0x00006145

00006514 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6514:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    6516:	2102      	movs	r1, #2
    6518:	6893      	ldr	r3, [r2, #8]
    651a:	4219      	tst	r1, r3
    651c:	d1fc      	bne.n	6518 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    651e:	6811      	ldr	r1, [r2, #0]
    6520:	2302      	movs	r3, #2
    6522:	430b      	orrs	r3, r1
    6524:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    6526:	4770      	bx	lr

00006528 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    6528:	b538      	push	{r3, r4, r5, lr}
    652a:	1c04      	adds	r4, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    652c:	7805      	ldrb	r5, [r0, #0]
    652e:	07e8      	lsls	r0, r5, #31
    6530:	d410      	bmi.n	6554 <sw_timer_register_callback+0x2c>
			handler = &module_inst->handler[index];
			handler->callback = callback;
    6532:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    6534:	1c29      	adds	r1, r5, #0
    6536:	2002      	movs	r0, #2
    6538:	4381      	bics	r1, r0
    653a:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    653c:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    653e:	1c18      	adds	r0, r3, #0
    6540:	6d61      	ldr	r1, [r4, #84]	; 0x54
    6542:	4b06      	ldr	r3, [pc, #24]	; (655c <sw_timer_register_callback+0x34>)
    6544:	4798      	blx	r3
    6546:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    6548:	7822      	ldrb	r2, [r4, #0]
    654a:	2301      	movs	r3, #1
    654c:	4313      	orrs	r3, r2
    654e:	7023      	strb	r3, [r4, #0]
			return index;
    6550:	2000      	movs	r0, #0
    6552:	e001      	b.n	6558 <sw_timer_register_callback+0x30>
		}
	}

	return -1;
    6554:	2001      	movs	r0, #1
    6556:	4240      	negs	r0, r0
}
    6558:	bd38      	pop	{r3, r4, r5, pc}
    655a:	46c0      	nop			; (mov r8, r8)
    655c:	0000741d 	.word	0x0000741d

00006560 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    6560:	b510      	push	{r4, lr}
    6562:	1c03      	adds	r3, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    6564:	008c      	lsls	r4, r1, #2
    6566:	1864      	adds	r4, r4, r1
    6568:	00a4      	lsls	r4, r4, #2
    656a:	1904      	adds	r4, r0, r4

	handler->callback_enable = 1;
    656c:	7820      	ldrb	r0, [r4, #0]
    656e:	2102      	movs	r1, #2
    6570:	4301      	orrs	r1, r0
    6572:	7021      	strb	r1, [r4, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    6574:	1c10      	adds	r0, r2, #0
    6576:	6d59      	ldr	r1, [r3, #84]	; 0x54
    6578:	4b03      	ldr	r3, [pc, #12]	; (6588 <sw_timer_enable_callback+0x28>)
    657a:	4798      	blx	r3
    657c:	4b03      	ldr	r3, [pc, #12]	; (658c <sw_timer_enable_callback+0x2c>)
    657e:	681b      	ldr	r3, [r3, #0]
    6580:	18c0      	adds	r0, r0, r3
    6582:	6120      	str	r0, [r4, #16]
}
    6584:	bd10      	pop	{r4, pc}
    6586:	46c0      	nop			; (mov r8, r8)
    6588:	0000741d 	.word	0x0000741d
    658c:	200008b8 	.word	0x200008b8

00006590 <sw_timer_disable_callback>:
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    6590:	008b      	lsls	r3, r1, #2
    6592:	1859      	adds	r1, r3, r1
    6594:	0089      	lsls	r1, r1, #2

	handler->callback_enable = 0;
    6596:	5c43      	ldrb	r3, [r0, r1]
    6598:	2202      	movs	r2, #2
    659a:	4393      	bics	r3, r2
    659c:	5443      	strb	r3, [r0, r1]
}
    659e:	4770      	bx	lr

000065a0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    65a0:	b538      	push	{r3, r4, r5, lr}
    65a2:	1c04      	adds	r4, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    65a4:	7803      	ldrb	r3, [r0, #0]
    65a6:	07da      	lsls	r2, r3, #31
    65a8:	d522      	bpl.n	65f0 <sw_timer_task+0x50>
    65aa:	079d      	lsls	r5, r3, #30
    65ac:	d520      	bpl.n	65f0 <sw_timer_task+0x50>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    65ae:	4b11      	ldr	r3, [pc, #68]	; (65f4 <sw_timer_task+0x54>)
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	6902      	ldr	r2, [r0, #16]
    65b4:	1ad3      	subs	r3, r2, r3
    65b6:	d51b      	bpl.n	65f0 <sw_timer_task+0x50>
    65b8:	7803      	ldrb	r3, [r0, #0]
    65ba:	075d      	lsls	r5, r3, #29
    65bc:	d418      	bmi.n	65f0 <sw_timer_task+0x50>
				/* Enter critical section. */
				handler->busy = 1;
    65be:	1c1a      	adds	r2, r3, #0
    65c0:	2304      	movs	r3, #4
    65c2:	4313      	orrs	r3, r2
    65c4:	7003      	strb	r3, [r0, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    65c6:	2100      	movs	r1, #0
    65c8:	68a2      	ldr	r2, [r4, #8]
    65ca:	68e3      	ldr	r3, [r4, #12]
    65cc:	6865      	ldr	r5, [r4, #4]
    65ce:	47a8      	blx	r5
				/* Timer was expired. */
				if (handler->period > 0) {
    65d0:	68e3      	ldr	r3, [r4, #12]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d004      	beq.n	65e0 <sw_timer_task+0x40>
					handler->expire_time = sw_timer_tick + handler->period;
    65d6:	4a07      	ldr	r2, [pc, #28]	; (65f4 <sw_timer_task+0x54>)
    65d8:	6812      	ldr	r2, [r2, #0]
    65da:	18d3      	adds	r3, r2, r3
    65dc:	6123      	str	r3, [r4, #16]
    65de:	e003      	b.n	65e8 <sw_timer_task+0x48>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    65e0:	7823      	ldrb	r3, [r4, #0]
    65e2:	2202      	movs	r2, #2
    65e4:	4393      	bics	r3, r2
    65e6:	7023      	strb	r3, [r4, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    65e8:	7823      	ldrb	r3, [r4, #0]
    65ea:	2204      	movs	r2, #4
    65ec:	4393      	bics	r3, r2
    65ee:	7023      	strb	r3, [r4, #0]
			}
		}
	}

}
    65f0:	bd38      	pop	{r3, r4, r5, pc}
    65f2:	46c0      	nop			; (mov r8, r8)
    65f4:	200008b8 	.word	0x200008b8

000065f8 <_hwerr_to_stderr>:
    65f8:	1c03      	adds	r3, r0, #0
    65fa:	300e      	adds	r0, #14
    65fc:	b500      	push	{lr}
    65fe:	280e      	cmp	r0, #14
    6600:	d819      	bhi.n	6636 <_hwerr_to_stderr+0x3e>
    6602:	f000 ff01 	bl	7408 <__gnu_thumb1_case_uqi>
    6606:	1416      	.short	0x1416
    6608:	1b181012 	.word	0x1b181012
    660c:	180c0e18 	.word	0x180c0e18
    6610:	1d0a0e0e 	.word	0x1d0a0e0e
    6614:	08          	.byte	0x08
    6615:	00          	.byte	0x00
    6616:	2000      	movs	r0, #0
    6618:	e014      	b.n	6644 <_hwerr_to_stderr+0x4c>
    661a:	2070      	movs	r0, #112	; 0x70
    661c:	e011      	b.n	6642 <_hwerr_to_stderr+0x4a>
    661e:	2016      	movs	r0, #22
    6620:	e00f      	b.n	6642 <_hwerr_to_stderr+0x4a>
    6622:	200c      	movs	r0, #12
    6624:	e00d      	b.n	6642 <_hwerr_to_stderr+0x4a>
    6626:	2079      	movs	r0, #121	; 0x79
    6628:	e00b      	b.n	6642 <_hwerr_to_stderr+0x4a>
    662a:	2068      	movs	r0, #104	; 0x68
    662c:	e009      	b.n	6642 <_hwerr_to_stderr+0x4a>
    662e:	200b      	movs	r0, #11
    6630:	e007      	b.n	6642 <_hwerr_to_stderr+0x4a>
    6632:	2010      	movs	r0, #16
    6634:	e005      	b.n	6642 <_hwerr_to_stderr+0x4a>
    6636:	2000      	movs	r0, #0
    6638:	4283      	cmp	r3, r0
    663a:	da03      	bge.n	6644 <_hwerr_to_stderr+0x4c>
    663c:	2005      	movs	r0, #5
    663e:	e000      	b.n	6642 <_hwerr_to_stderr+0x4a>
    6640:	2002      	movs	r0, #2
    6642:	4240      	negs	r0, r0
    6644:	bd00      	pop	{pc}
	...

00006648 <_mqtt_send_wait>:
    6648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    664a:	1c04      	adds	r4, r0, #0
    664c:	3443      	adds	r4, #67	; 0x43
    664e:	7823      	ldrb	r3, [r4, #0]
    6650:	1c05      	adds	r5, r0, #0
    6652:	07d8      	lsls	r0, r3, #31
    6654:	d51c      	bpl.n	6690 <_mqtt_send_wait+0x48>
    6656:	2604      	movs	r6, #4
    6658:	4333      	orrs	r3, r6
    665a:	7023      	strb	r3, [r4, #0]
    665c:	2002      	movs	r0, #2
    665e:	5628      	ldrsb	r0, [r5, r0]
    6660:	b292      	uxth	r2, r2
    6662:	2300      	movs	r3, #0
    6664:	4f0c      	ldr	r7, [pc, #48]	; (6698 <_mqtt_send_wait+0x50>)
    6666:	47b8      	blx	r7
    6668:	2800      	cmp	r0, #0
    666a:	da05      	bge.n	6678 <_mqtt_send_wait+0x30>
    666c:	7823      	ldrb	r3, [r4, #0]
    666e:	43b3      	bics	r3, r6
    6670:	7023      	strb	r3, [r4, #0]
    6672:	4b0a      	ldr	r3, [pc, #40]	; (669c <_mqtt_send_wait+0x54>)
    6674:	4798      	blx	r3
    6676:	e00d      	b.n	6694 <_mqtt_send_wait+0x4c>
    6678:	7822      	ldrb	r2, [r4, #0]
    667a:	2314      	movs	r3, #20
    667c:	4013      	ands	r3, r2
    667e:	2000      	movs	r0, #0
    6680:	2b04      	cmp	r3, #4
    6682:	d107      	bne.n	6694 <_mqtt_send_wait+0x4c>
    6684:	4b06      	ldr	r3, [pc, #24]	; (66a0 <_mqtt_send_wait+0x58>)
    6686:	4798      	blx	r3
    6688:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    668a:	4b06      	ldr	r3, [pc, #24]	; (66a4 <_mqtt_send_wait+0x5c>)
    668c:	4798      	blx	r3
    668e:	e7f3      	b.n	6678 <_mqtt_send_wait+0x30>
    6690:	2001      	movs	r0, #1
    6692:	4240      	negs	r0, r0
    6694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6696:	46c0      	nop			; (mov r8, r8)
    6698:	00003a49 	.word	0x00003a49
    669c:	000065f9 	.word	0x000065f9
    66a0:	00001da9 	.word	0x00001da9
    66a4:	000065a1 	.word	0x000065a1

000066a8 <mqtt_get_config_defaults>:
    66a8:	4b07      	ldr	r3, [pc, #28]	; (66c8 <mqtt_get_config_defaults+0x20>)
    66aa:	2240      	movs	r2, #64	; 0x40
    66ac:	8003      	strh	r3, [r0, #0]
    66ae:	2396      	movs	r3, #150	; 0x96
    66b0:	009b      	lsls	r3, r3, #2
    66b2:	8103      	strh	r3, [r0, #8]
    66b4:	6102      	str	r2, [r0, #16]
    66b6:	2300      	movs	r3, #0
    66b8:	2220      	movs	r2, #32
    66ba:	7083      	strb	r3, [r0, #2]
    66bc:	6043      	str	r3, [r0, #4]
    66be:	60c3      	str	r3, [r0, #12]
    66c0:	6142      	str	r2, [r0, #20]
    66c2:	7603      	strb	r3, [r0, #24]
    66c4:	4770      	bx	lr
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	0000075b 	.word	0x0000075b

000066cc <mqtt_init>:
    66cc:	b538      	push	{r3, r4, r5, lr}
    66ce:	1c04      	adds	r4, r0, #0
    66d0:	1c0d      	adds	r5, r1, #0
    66d2:	2800      	cmp	r0, #0
    66d4:	d030      	beq.n	6738 <mqtt_init+0x6c>
    66d6:	2900      	cmp	r1, #0
    66d8:	d02e      	beq.n	6738 <mqtt_init+0x6c>
    66da:	690b      	ldr	r3, [r1, #16]
    66dc:	2b00      	cmp	r3, #0
    66de:	d02b      	beq.n	6738 <mqtt_init+0x6c>
    66e0:	684b      	ldr	r3, [r1, #4]
    66e2:	2b00      	cmp	r3, #0
    66e4:	d028      	beq.n	6738 <mqtt_init+0x6c>
    66e6:	2100      	movs	r1, #0
    66e8:	2274      	movs	r2, #116	; 0x74
    66ea:	4b16      	ldr	r3, [pc, #88]	; (6744 <mqtt_init+0x78>)
    66ec:	4798      	blx	r3
    66ee:	1c20      	adds	r0, r4, #0
    66f0:	4b15      	ldr	r3, [pc, #84]	; (6748 <mqtt_init+0x7c>)
    66f2:	3058      	adds	r0, #88	; 0x58
    66f4:	1c29      	adds	r1, r5, #0
    66f6:	221c      	movs	r2, #28
    66f8:	4798      	blx	r3
    66fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    66fc:	2b00      	cmp	r3, #0
    66fe:	d10b      	bne.n	6718 <mqtt_init+0x4c>
    6700:	6928      	ldr	r0, [r5, #16]
    6702:	4b12      	ldr	r3, [pc, #72]	; (674c <mqtt_init+0x80>)
    6704:	4798      	blx	r3
    6706:	6660      	str	r0, [r4, #100]	; 0x64
    6708:	2800      	cmp	r0, #0
    670a:	d017      	beq.n	673c <mqtt_init+0x70>
    670c:	1c23      	adds	r3, r4, #0
    670e:	3343      	adds	r3, #67	; 0x43
    6710:	781a      	ldrb	r2, [r3, #0]
    6712:	2120      	movs	r1, #32
    6714:	430a      	orrs	r2, r1
    6716:	701a      	strb	r2, [r3, #0]
    6718:	892a      	ldrh	r2, [r5, #8]
    671a:	23fa      	movs	r3, #250	; 0xfa
    671c:	005b      	lsls	r3, r3, #1
    671e:	4353      	muls	r3, r2
    6720:	6868      	ldr	r0, [r5, #4]
    6722:	490b      	ldr	r1, [pc, #44]	; (6750 <mqtt_init+0x84>)
    6724:	1c22      	adds	r2, r4, #0
    6726:	4d0b      	ldr	r5, [pc, #44]	; (6754 <mqtt_init+0x88>)
    6728:	47a8      	blx	r5
    672a:	1c03      	adds	r3, r0, #0
    672c:	6520      	str	r0, [r4, #80]	; 0x50
    672e:	2000      	movs	r0, #0
    6730:	4283      	cmp	r3, r0
    6732:	da05      	bge.n	6740 <mqtt_init+0x74>
    6734:	201c      	movs	r0, #28
    6736:	e002      	b.n	673e <mqtt_init+0x72>
    6738:	2016      	movs	r0, #22
    673a:	e000      	b.n	673e <mqtt_init+0x72>
    673c:	200c      	movs	r0, #12
    673e:	4240      	negs	r0, r0
    6740:	bd38      	pop	{r3, r4, r5, pc}
    6742:	46c0      	nop			; (mov r8, r8)
    6744:	000076d1 	.word	0x000076d1
    6748:	0000768d 	.word	0x0000768d
    674c:	00007679 	.word	0x00007679
    6750:	00006ed5 	.word	0x00006ed5
    6754:	00006529 	.word	0x00006529

00006758 <mqtt_register_callback>:
    6758:	2800      	cmp	r0, #0
    675a:	d002      	beq.n	6762 <mqtt_register_callback+0xa>
    675c:	6541      	str	r1, [r0, #84]	; 0x54
    675e:	2000      	movs	r0, #0
    6760:	e001      	b.n	6766 <mqtt_register_callback+0xe>
    6762:	2016      	movs	r0, #22
    6764:	4240      	negs	r0, r0
    6766:	4770      	bx	lr

00006768 <mqtt_socket_resolve_handler>:
    6768:	b5f0      	push	{r4, r5, r6, r7, lr}
    676a:	1c06      	adds	r6, r0, #0
    676c:	b085      	sub	sp, #20
    676e:	1c0f      	adds	r7, r1, #0
    6770:	2400      	movs	r4, #0
    6772:	4b0f      	ldr	r3, [pc, #60]	; (67b0 <mqtt_socket_resolve_handler+0x48>)
    6774:	58e5      	ldr	r5, [r4, r3]
    6776:	2d00      	cmp	r5, #0
    6778:	d015      	beq.n	67a6 <mqtt_socket_resolve_handler+0x3e>
    677a:	1ce9      	adds	r1, r5, #3
    677c:	1c30      	adds	r0, r6, #0
    677e:	4b0d      	ldr	r3, [pc, #52]	; (67b4 <mqtt_socket_resolve_handler+0x4c>)
    6780:	4798      	blx	r3
    6782:	2800      	cmp	r0, #0
    6784:	d10f      	bne.n	67a6 <mqtt_socket_resolve_handler+0x3e>
    6786:	466a      	mov	r2, sp
    6788:	2302      	movs	r3, #2
    678a:	8013      	strh	r3, [r2, #0]
    678c:	1c2b      	adds	r3, r5, #0
    678e:	3358      	adds	r3, #88	; 0x58
    6790:	881b      	ldrh	r3, [r3, #0]
    6792:	9701      	str	r7, [sp, #4]
    6794:	ba5b      	rev16	r3, r3
    6796:	8053      	strh	r3, [r2, #2]
    6798:	2002      	movs	r0, #2
    679a:	5628      	ldrsb	r0, [r5, r0]
    679c:	4669      	mov	r1, sp
    679e:	2210      	movs	r2, #16
    67a0:	4b05      	ldr	r3, [pc, #20]	; (67b8 <mqtt_socket_resolve_handler+0x50>)
    67a2:	4798      	blx	r3
    67a4:	e002      	b.n	67ac <mqtt_socket_resolve_handler+0x44>
    67a6:	3404      	adds	r4, #4
    67a8:	2c1c      	cmp	r4, #28
    67aa:	d1e2      	bne.n	6772 <mqtt_socket_resolve_handler+0xa>
    67ac:	b005      	add	sp, #20
    67ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67b0:	200008bc 	.word	0x200008bc
    67b4:	00007ef5 	.word	0x00007ef5
    67b8:	000039b1 	.word	0x000039b1

000067bc <mqtt_connect>:
    67bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67be:	1c04      	adds	r4, r0, #0
    67c0:	b089      	sub	sp, #36	; 0x24
    67c2:	1c0d      	adds	r5, r1, #0
    67c4:	2800      	cmp	r0, #0
    67c6:	d051      	beq.n	686c <mqtt_connect+0xb0>
    67c8:	2900      	cmp	r1, #0
    67ca:	d04f      	beq.n	686c <mqtt_connect+0xb0>
    67cc:	1c08      	adds	r0, r1, #0
    67ce:	4b39      	ldr	r3, [pc, #228]	; (68b4 <mqtt_connect+0xf8>)
    67d0:	4798      	blx	r3
    67d2:	2840      	cmp	r0, #64	; 0x40
    67d4:	d84c      	bhi.n	6870 <mqtt_connect+0xb4>
    67d6:	1c21      	adds	r1, r4, #0
    67d8:	3143      	adds	r1, #67	; 0x43
    67da:	780b      	ldrb	r3, [r1, #0]
    67dc:	9101      	str	r1, [sp, #4]
    67de:	07db      	lsls	r3, r3, #31
    67e0:	0fd9      	lsrs	r1, r3, #31
    67e2:	466a      	mov	r2, sp
    67e4:	b2ce      	uxtb	r6, r1
    67e6:	1ce0      	adds	r0, r4, #3
    67e8:	7211      	strb	r1, [r2, #8]
    67ea:	2e00      	cmp	r6, #0
    67ec:	d142      	bne.n	6874 <mqtt_connect+0xb8>
    67ee:	2701      	movs	r7, #1
    67f0:	1c29      	adds	r1, r5, #0
    67f2:	4b31      	ldr	r3, [pc, #196]	; (68b8 <mqtt_connect+0xfc>)
    67f4:	8027      	strh	r7, [r4, #0]
    67f6:	4798      	blx	r3
    67f8:	9a01      	ldr	r2, [sp, #4]
    67fa:	2002      	movs	r0, #2
    67fc:	7813      	ldrb	r3, [r2, #0]
    67fe:	9901      	ldr	r1, [sp, #4]
    6800:	43bb      	bics	r3, r7
    6802:	4383      	bics	r3, r0
    6804:	22e3      	movs	r2, #227	; 0xe3
    6806:	4013      	ands	r3, r2
    6808:	466a      	mov	r2, sp
    680a:	700b      	strb	r3, [r1, #0]
    680c:	7a12      	ldrb	r2, [r2, #8]
    680e:	1c23      	adds	r3, r4, #0
    6810:	3348      	adds	r3, #72	; 0x48
    6812:	6466      	str	r6, [r4, #68]	; 0x44
    6814:	701a      	strb	r2, [r3, #0]
    6816:	7c9a      	ldrb	r2, [r3, #18]
    6818:	805e      	strh	r6, [r3, #2]
    681a:	1e53      	subs	r3, r2, #1
    681c:	419a      	sbcs	r2, r3
    681e:	b2d2      	uxtb	r2, r2
    6820:	1c39      	adds	r1, r7, #0
    6822:	4b26      	ldr	r3, [pc, #152]	; (68bc <mqtt_connect+0x100>)
    6824:	4798      	blx	r3
    6826:	70a0      	strb	r0, [r4, #2]
    6828:	2800      	cmp	r0, #0
    682a:	db25      	blt.n	6878 <mqtt_connect+0xbc>
    682c:	4b24      	ldr	r3, [pc, #144]	; (68c0 <mqtt_connect+0x104>)
    682e:	0080      	lsls	r0, r0, #2
    6830:	50c4      	str	r4, [r0, r3]
    6832:	1c2b      	adds	r3, r5, #0
    6834:	781f      	ldrb	r7, [r3, #0]
    6836:	2f00      	cmp	r7, #0
    6838:	d026      	beq.n	6888 <mqtt_connect+0xcc>
    683a:	2220      	movs	r2, #32
    683c:	1c39      	adds	r1, r7, #0
    683e:	4391      	bics	r1, r2
    6840:	1c0a      	adds	r2, r1, #0
    6842:	3a41      	subs	r2, #65	; 0x41
    6844:	b2d2      	uxtb	r2, r2
    6846:	3301      	adds	r3, #1
    6848:	2a05      	cmp	r2, #5
    684a:	d90d      	bls.n	6868 <mqtt_connect+0xac>
    684c:	2f3a      	cmp	r7, #58	; 0x3a
    684e:	d00b      	beq.n	6868 <mqtt_connect+0xac>
    6850:	2f2f      	cmp	r7, #47	; 0x2f
    6852:	d009      	beq.n	6868 <mqtt_connect+0xac>
    6854:	2f2e      	cmp	r7, #46	; 0x2e
    6856:	d102      	bne.n	685e <mqtt_connect+0xa2>
    6858:	2e00      	cmp	r6, #0
    685a:	d0eb      	beq.n	6834 <mqtt_connect+0x78>
    685c:	e00f      	b.n	687e <mqtt_connect+0xc2>
    685e:	2230      	movs	r2, #48	; 0x30
    6860:	4017      	ands	r7, r2
    6862:	4297      	cmp	r7, r2
    6864:	d0e6      	beq.n	6834 <mqtt_connect+0x78>
    6866:	e00a      	b.n	687e <mqtt_connect+0xc2>
    6868:	2601      	movs	r6, #1
    686a:	e7e3      	b.n	6834 <mqtt_connect+0x78>
    686c:	2016      	movs	r0, #22
    686e:	e004      	b.n	687a <mqtt_connect+0xbe>
    6870:	205b      	movs	r0, #91	; 0x5b
    6872:	e002      	b.n	687a <mqtt_connect+0xbe>
    6874:	2078      	movs	r0, #120	; 0x78
    6876:	e000      	b.n	687a <mqtt_connect+0xbe>
    6878:	201c      	movs	r0, #28
    687a:	4240      	negs	r0, r0
    687c:	e017      	b.n	68ae <mqtt_connect+0xf2>
    687e:	1c28      	adds	r0, r5, #0
    6880:	4b10      	ldr	r3, [pc, #64]	; (68c4 <mqtt_connect+0x108>)
    6882:	4798      	blx	r3
    6884:	2000      	movs	r0, #0
    6886:	e012      	b.n	68ae <mqtt_connect+0xf2>
    6888:	466a      	mov	r2, sp
    688a:	2302      	movs	r3, #2
    688c:	8213      	strh	r3, [r2, #16]
    688e:	1c23      	adds	r3, r4, #0
    6890:	3358      	adds	r3, #88	; 0x58
    6892:	881b      	ldrh	r3, [r3, #0]
    6894:	1c28      	adds	r0, r5, #0
    6896:	ba5b      	rev16	r3, r3
    6898:	8253      	strh	r3, [r2, #18]
    689a:	4b0b      	ldr	r3, [pc, #44]	; (68c8 <mqtt_connect+0x10c>)
    689c:	4798      	blx	r3
    689e:	9005      	str	r0, [sp, #20]
    68a0:	2002      	movs	r0, #2
    68a2:	5620      	ldrsb	r0, [r4, r0]
    68a4:	a904      	add	r1, sp, #16
    68a6:	2210      	movs	r2, #16
    68a8:	4b08      	ldr	r3, [pc, #32]	; (68cc <mqtt_connect+0x110>)
    68aa:	4798      	blx	r3
    68ac:	1c38      	adds	r0, r7, #0
    68ae:	b009      	add	sp, #36	; 0x24
    68b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68b2:	46c0      	nop			; (mov r8, r8)
    68b4:	00007f19 	.word	0x00007f19
    68b8:	00007f09 	.word	0x00007f09
    68bc:	00003871 	.word	0x00003871
    68c0:	200008bc 	.word	0x200008bc
    68c4:	00003de5 	.word	0x00003de5
    68c8:	00003d75 	.word	0x00003d75
    68cc:	000039b1 	.word	0x000039b1

000068d0 <mqtt_connect_broker>:
    68d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68d2:	b095      	sub	sp, #84	; 0x54
    68d4:	af02      	add	r7, sp, #8
    68d6:	617b      	str	r3, [r7, #20]
    68d8:	1c3b      	adds	r3, r7, #0
    68da:	3370      	adds	r3, #112	; 0x70
    68dc:	781b      	ldrb	r3, [r3, #0]
    68de:	1c05      	adds	r5, r0, #0
    68e0:	60fb      	str	r3, [r7, #12]
    68e2:	1c3b      	adds	r3, r7, #0
    68e4:	3374      	adds	r3, #116	; 0x74
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	6139      	str	r1, [r7, #16]
    68ea:	61fa      	str	r2, [r7, #28]
    68ec:	60bb      	str	r3, [r7, #8]
    68ee:	2800      	cmp	r0, #0
    68f0:	d101      	bne.n	68f6 <mqtt_connect_broker+0x26>
    68f2:	2016      	movs	r0, #22
    68f4:	e129      	b.n	6b4a <mqtt_connect_broker+0x27a>
    68f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    68f8:	4668      	mov	r0, sp
    68fa:	3307      	adds	r3, #7
    68fc:	08db      	lsrs	r3, r3, #3
    68fe:	00db      	lsls	r3, r3, #3
    6900:	1ac0      	subs	r0, r0, r3
    6902:	4685      	mov	sp, r0
    6904:	ac02      	add	r4, sp, #8
    6906:	607c      	str	r4, [r7, #4]
    6908:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    690a:	2c00      	cmp	r4, #0
    690c:	d0f1      	beq.n	68f2 <mqtt_connect_broker+0x22>
    690e:	1c2b      	adds	r3, r5, #0
    6910:	3343      	adds	r3, #67	; 0x43
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	07d8      	lsls	r0, r3, #31
    6916:	d400      	bmi.n	691a <mqtt_connect_broker+0x4a>
    6918:	e112      	b.n	6b40 <mqtt_connect_broker+0x270>
    691a:	079a      	lsls	r2, r3, #30
    691c:	d500      	bpl.n	6920 <mqtt_connect_broker+0x50>
    691e:	e111      	b.n	6b44 <mqtt_connect_broker+0x274>
    6920:	071c      	lsls	r4, r3, #28
    6922:	d40b      	bmi.n	693c <mqtt_connect_broker+0x6c>
    6924:	4e8b      	ldr	r6, [pc, #556]	; (6b54 <mqtt_connect_broker+0x284>)
    6926:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6928:	47b0      	blx	r6
    692a:	1c03      	adds	r3, r0, #0
    692c:	61b8      	str	r0, [r7, #24]
    692e:	69f8      	ldr	r0, [r7, #28]
    6930:	330e      	adds	r3, #14
    6932:	1c34      	adds	r4, r6, #0
    6934:	2800      	cmp	r0, #0
    6936:	d113      	bne.n	6960 <mqtt_connect_broker+0x90>
    6938:	1c1e      	adds	r6, r3, #0
    693a:	e01d      	b.n	6978 <mqtt_connect_broker+0xa8>
    693c:	1c2b      	adds	r3, r5, #0
    693e:	3370      	adds	r3, #112	; 0x70
    6940:	781b      	ldrb	r3, [r3, #0]
    6942:	2b00      	cmp	r3, #0
    6944:	d000      	beq.n	6948 <mqtt_connect_broker+0x78>
    6946:	e0ff      	b.n	6b48 <mqtt_connect_broker+0x278>
    6948:	1c2b      	adds	r3, r5, #0
    694a:	3343      	adds	r3, #67	; 0x43
    694c:	781b      	ldrb	r3, [r3, #0]
    694e:	071a      	lsls	r2, r3, #28
    6950:	d5e8      	bpl.n	6924 <mqtt_connect_broker+0x54>
    6952:	4b81      	ldr	r3, [pc, #516]	; (6b58 <mqtt_connect_broker+0x288>)
    6954:	2000      	movs	r0, #0
    6956:	4798      	blx	r3
    6958:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    695a:	4b80      	ldr	r3, [pc, #512]	; (6b5c <mqtt_connect_broker+0x28c>)
    695c:	4798      	blx	r3
    695e:	e7f3      	b.n	6948 <mqtt_connect_broker+0x78>
    6960:	69f8      	ldr	r0, [r7, #28]
    6962:	47b0      	blx	r6
    6964:	69be      	ldr	r6, [r7, #24]
    6966:	697b      	ldr	r3, [r7, #20]
    6968:	3610      	adds	r6, #16
    696a:	1836      	adds	r6, r6, r0
    696c:	2b00      	cmp	r3, #0
    696e:	d003      	beq.n	6978 <mqtt_connect_broker+0xa8>
    6970:	1c18      	adds	r0, r3, #0
    6972:	47a0      	blx	r4
    6974:	3602      	adds	r6, #2
    6976:	1836      	adds	r6, r6, r0
    6978:	6e78      	ldr	r0, [r7, #100]	; 0x64
    697a:	2800      	cmp	r0, #0
    697c:	d007      	beq.n	698e <mqtt_connect_broker+0xbe>
    697e:	47a0      	blx	r4
    6980:	3602      	adds	r6, #2
    6982:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6984:	1830      	adds	r0, r6, r0
    6986:	1906      	adds	r6, r0, r4
    6988:	2c00      	cmp	r4, #0
    698a:	d100      	bne.n	698e <mqtt_connect_broker+0xbe>
    698c:	1c06      	adds	r6, r0, #0
    698e:	69fc      	ldr	r4, [r7, #28]
    6990:	2c00      	cmp	r4, #0
    6992:	d006      	beq.n	69a2 <mqtt_connect_broker+0xd2>
    6994:	24c0      	movs	r4, #192	; 0xc0
    6996:	61bc      	str	r4, [r7, #24]
    6998:	697c      	ldr	r4, [r7, #20]
    699a:	2c00      	cmp	r4, #0
    699c:	d103      	bne.n	69a6 <mqtt_connect_broker+0xd6>
    699e:	2480      	movs	r4, #128	; 0x80
    69a0:	e000      	b.n	69a4 <mqtt_connect_broker+0xd4>
    69a2:	69fc      	ldr	r4, [r7, #28]
    69a4:	61bc      	str	r4, [r7, #24]
    69a6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    69a8:	2c00      	cmp	r4, #0
    69aa:	d00f      	beq.n	69cc <mqtt_connect_broker+0xfc>
    69ac:	68bc      	ldr	r4, [r7, #8]
    69ae:	2c00      	cmp	r4, #0
    69b0:	d003      	beq.n	69ba <mqtt_connect_broker+0xea>
    69b2:	69bc      	ldr	r4, [r7, #24]
    69b4:	2320      	movs	r3, #32
    69b6:	431c      	orrs	r4, r3
    69b8:	61bc      	str	r4, [r7, #24]
    69ba:	68fc      	ldr	r4, [r7, #12]
    69bc:	2303      	movs	r3, #3
    69be:	4023      	ands	r3, r4
    69c0:	00db      	lsls	r3, r3, #3
    69c2:	69bc      	ldr	r4, [r7, #24]
    69c4:	2204      	movs	r2, #4
    69c6:	4313      	orrs	r3, r2
    69c8:	431c      	orrs	r4, r3
    69ca:	61bc      	str	r4, [r7, #24]
    69cc:	693c      	ldr	r4, [r7, #16]
    69ce:	2c00      	cmp	r4, #0
    69d0:	d003      	beq.n	69da <mqtt_connect_broker+0x10a>
    69d2:	69bc      	ldr	r4, [r7, #24]
    69d4:	2302      	movs	r3, #2
    69d6:	431c      	orrs	r4, r3
    69d8:	61bc      	str	r4, [r7, #24]
    69da:	1c2b      	adds	r3, r5, #0
    69dc:	3343      	adds	r3, #67	; 0x43
    69de:	781a      	ldrb	r2, [r3, #0]
    69e0:	2108      	movs	r1, #8
    69e2:	430a      	orrs	r2, r1
    69e4:	701a      	strb	r2, [r3, #0]
    69e6:	1c38      	adds	r0, r7, #0
    69e8:	9500      	str	r5, [sp, #0]
    69ea:	3020      	adds	r0, #32
    69ec:	6879      	ldr	r1, [r7, #4]
    69ee:	4b5c      	ldr	r3, [pc, #368]	; (6b60 <mqtt_connect_broker+0x290>)
    69f0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    69f2:	4c5c      	ldr	r4, [pc, #368]	; (6b64 <mqtt_connect_broker+0x294>)
    69f4:	47a0      	blx	r4
    69f6:	1c38      	adds	r0, r7, #0
    69f8:	3020      	adds	r0, #32
    69fa:	2110      	movs	r1, #16
    69fc:	4b5a      	ldr	r3, [pc, #360]	; (6b68 <mqtt_connect_broker+0x298>)
    69fe:	4798      	blx	r3
    6a00:	2e80      	cmp	r6, #128	; 0x80
    6a02:	dd09      	ble.n	6a18 <mqtt_connect_broker+0x148>
    6a04:	2180      	movs	r1, #128	; 0x80
    6a06:	4249      	negs	r1, r1
    6a08:	4331      	orrs	r1, r6
    6a0a:	1c38      	adds	r0, r7, #0
    6a0c:	b249      	sxtb	r1, r1
    6a0e:	3020      	adds	r0, #32
    6a10:	4c55      	ldr	r4, [pc, #340]	; (6b68 <mqtt_connect_broker+0x298>)
    6a12:	47a0      	blx	r4
    6a14:	11f6      	asrs	r6, r6, #7
    6a16:	e7f3      	b.n	6a00 <mqtt_connect_broker+0x130>
    6a18:	4b54      	ldr	r3, [pc, #336]	; (6b6c <mqtt_connect_broker+0x29c>)
    6a1a:	401e      	ands	r6, r3
    6a1c:	d504      	bpl.n	6a28 <mqtt_connect_broker+0x158>
    6a1e:	2380      	movs	r3, #128	; 0x80
    6a20:	3e01      	subs	r6, #1
    6a22:	425b      	negs	r3, r3
    6a24:	431e      	orrs	r6, r3
    6a26:	3601      	adds	r6, #1
    6a28:	1c38      	adds	r0, r7, #0
    6a2a:	b271      	sxtb	r1, r6
    6a2c:	3020      	adds	r0, #32
    6a2e:	4c4e      	ldr	r4, [pc, #312]	; (6b68 <mqtt_connect_broker+0x298>)
    6a30:	47a0      	blx	r4
    6a32:	1c38      	adds	r0, r7, #0
    6a34:	4c4e      	ldr	r4, [pc, #312]	; (6b70 <mqtt_connect_broker+0x2a0>)
    6a36:	3020      	adds	r0, #32
    6a38:	2106      	movs	r1, #6
    6a3a:	47a0      	blx	r4
    6a3c:	1c38      	adds	r0, r7, #0
    6a3e:	4b4d      	ldr	r3, [pc, #308]	; (6b74 <mqtt_connect_broker+0x2a4>)
    6a40:	3020      	adds	r0, #32
    6a42:	494d      	ldr	r1, [pc, #308]	; (6b78 <mqtt_connect_broker+0x2a8>)
    6a44:	2206      	movs	r2, #6
    6a46:	4798      	blx	r3
    6a48:	1c38      	adds	r0, r7, #0
    6a4a:	3020      	adds	r0, #32
    6a4c:	2103      	movs	r1, #3
    6a4e:	4a46      	ldr	r2, [pc, #280]	; (6b68 <mqtt_connect_broker+0x298>)
    6a50:	4790      	blx	r2
    6a52:	69bb      	ldr	r3, [r7, #24]
    6a54:	1c38      	adds	r0, r7, #0
    6a56:	4a44      	ldr	r2, [pc, #272]	; (6b68 <mqtt_connect_broker+0x298>)
    6a58:	b259      	sxtb	r1, r3
    6a5a:	3020      	adds	r0, #32
    6a5c:	4790      	blx	r2
    6a5e:	1c2b      	adds	r3, r5, #0
    6a60:	3360      	adds	r3, #96	; 0x60
    6a62:	2000      	movs	r0, #0
    6a64:	5e19      	ldrsh	r1, [r3, r0]
    6a66:	1c38      	adds	r0, r7, #0
    6a68:	3020      	adds	r0, #32
    6a6a:	47a0      	blx	r4
    6a6c:	4e39      	ldr	r6, [pc, #228]	; (6b54 <mqtt_connect_broker+0x284>)
    6a6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6a70:	47b0      	blx	r6
    6a72:	b201      	sxth	r1, r0
    6a74:	1c38      	adds	r0, r7, #0
    6a76:	3020      	adds	r0, #32
    6a78:	47a0      	blx	r4
    6a7a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6a7c:	47b0      	blx	r6
    6a7e:	1c02      	adds	r2, r0, #0
    6a80:	1c38      	adds	r0, r7, #0
    6a82:	3020      	adds	r0, #32
    6a84:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6a86:	4b3b      	ldr	r3, [pc, #236]	; (6b74 <mqtt_connect_broker+0x2a4>)
    6a88:	4798      	blx	r3
    6a8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6a8c:	2800      	cmp	r0, #0
    6a8e:	d015      	beq.n	6abc <mqtt_connect_broker+0x1ec>
    6a90:	47b0      	blx	r6
    6a92:	b201      	sxth	r1, r0
    6a94:	1c38      	adds	r0, r7, #0
    6a96:	3020      	adds	r0, #32
    6a98:	47a0      	blx	r4
    6a9a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6a9c:	47b0      	blx	r6
    6a9e:	1c02      	adds	r2, r0, #0
    6aa0:	1c38      	adds	r0, r7, #0
    6aa2:	4c34      	ldr	r4, [pc, #208]	; (6b74 <mqtt_connect_broker+0x2a4>)
    6aa4:	3020      	adds	r0, #32
    6aa6:	6e79      	ldr	r1, [r7, #100]	; 0x64
    6aa8:	47a0      	blx	r4
    6aaa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    6aac:	2c00      	cmp	r4, #0
    6aae:	d005      	beq.n	6abc <mqtt_connect_broker+0x1ec>
    6ab0:	1c38      	adds	r0, r7, #0
    6ab2:	1c21      	adds	r1, r4, #0
    6ab4:	3020      	adds	r0, #32
    6ab6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6ab8:	4c2e      	ldr	r4, [pc, #184]	; (6b74 <mqtt_connect_broker+0x2a4>)
    6aba:	47a0      	blx	r4
    6abc:	69fc      	ldr	r4, [r7, #28]
    6abe:	2c00      	cmp	r4, #0
    6ac0:	d01f      	beq.n	6b02 <mqtt_connect_broker+0x232>
    6ac2:	4e24      	ldr	r6, [pc, #144]	; (6b54 <mqtt_connect_broker+0x284>)
    6ac4:	1c20      	adds	r0, r4, #0
    6ac6:	47b0      	blx	r6
    6ac8:	b201      	sxth	r1, r0
    6aca:	1c38      	adds	r0, r7, #0
    6acc:	3020      	adds	r0, #32
    6ace:	4c28      	ldr	r4, [pc, #160]	; (6b70 <mqtt_connect_broker+0x2a0>)
    6ad0:	47a0      	blx	r4
    6ad2:	69f8      	ldr	r0, [r7, #28]
    6ad4:	47b0      	blx	r6
    6ad6:	1c02      	adds	r2, r0, #0
    6ad8:	1c38      	adds	r0, r7, #0
    6ada:	3020      	adds	r0, #32
    6adc:	69f9      	ldr	r1, [r7, #28]
    6ade:	4c25      	ldr	r4, [pc, #148]	; (6b74 <mqtt_connect_broker+0x2a4>)
    6ae0:	47a0      	blx	r4
    6ae2:	6978      	ldr	r0, [r7, #20]
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d00c      	beq.n	6b02 <mqtt_connect_broker+0x232>
    6ae8:	47b0      	blx	r6
    6aea:	b201      	sxth	r1, r0
    6aec:	1c38      	adds	r0, r7, #0
    6aee:	4a20      	ldr	r2, [pc, #128]	; (6b70 <mqtt_connect_broker+0x2a0>)
    6af0:	3020      	adds	r0, #32
    6af2:	4790      	blx	r2
    6af4:	6978      	ldr	r0, [r7, #20]
    6af6:	47b0      	blx	r6
    6af8:	1c02      	adds	r2, r0, #0
    6afa:	1c38      	adds	r0, r7, #0
    6afc:	3020      	adds	r0, #32
    6afe:	6979      	ldr	r1, [r7, #20]
    6b00:	47a0      	blx	r4
    6b02:	1c38      	adds	r0, r7, #0
    6b04:	1c2c      	adds	r4, r5, #0
    6b06:	3020      	adds	r0, #32
    6b08:	4b1c      	ldr	r3, [pc, #112]	; (6b7c <mqtt_connect_broker+0x2ac>)
    6b0a:	3443      	adds	r4, #67	; 0x43
    6b0c:	4798      	blx	r3
    6b0e:	7821      	ldrb	r1, [r4, #0]
    6b10:	0789      	lsls	r1, r1, #30
    6b12:	0fc9      	lsrs	r1, r1, #31
    6b14:	2901      	cmp	r1, #1
    6b16:	d10b      	bne.n	6b30 <mqtt_connect_broker+0x260>
    6b18:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6b1a:	2a00      	cmp	r2, #0
    6b1c:	d108      	bne.n	6b30 <mqtt_connect_broker+0x260>
    6b1e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6b20:	2b00      	cmp	r3, #0
    6b22:	d005      	beq.n	6b30 <mqtt_connect_broker+0x260>
    6b24:	2034      	movs	r0, #52	; 0x34
    6b26:	55c2      	strb	r2, [r0, r7]
    6b28:	1c3a      	adds	r2, r7, #0
    6b2a:	1c28      	adds	r0, r5, #0
    6b2c:	3234      	adds	r2, #52	; 0x34
    6b2e:	4798      	blx	r3
    6b30:	7823      	ldrb	r3, [r4, #0]
    6b32:	2202      	movs	r2, #2
    6b34:	4313      	orrs	r3, r2
    6b36:	2208      	movs	r2, #8
    6b38:	4393      	bics	r3, r2
    6b3a:	7023      	strb	r3, [r4, #0]
    6b3c:	2000      	movs	r0, #0
    6b3e:	e005      	b.n	6b4c <mqtt_connect_broker+0x27c>
    6b40:	2080      	movs	r0, #128	; 0x80
    6b42:	e002      	b.n	6b4a <mqtt_connect_broker+0x27a>
    6b44:	2078      	movs	r0, #120	; 0x78
    6b46:	e000      	b.n	6b4a <mqtt_connect_broker+0x27a>
    6b48:	200b      	movs	r0, #11
    6b4a:	4240      	negs	r0, r0
    6b4c:	46bd      	mov	sp, r7
    6b4e:	b013      	add	sp, #76	; 0x4c
    6b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	00007f19 	.word	0x00007f19
    6b58:	00001da9 	.word	0x00001da9
    6b5c:	000065a1 	.word	0x000065a1
    6b60:	00006649 	.word	0x00006649
    6b64:	000063c5 	.word	0x000063c5
    6b68:	000063ed 	.word	0x000063ed
    6b6c:	8000007f 	.word	0x8000007f
    6b70:	00006411 	.word	0x00006411
    6b74:	00006429 	.word	0x00006429
    6b78:	0000a518 	.word	0x0000a518
    6b7c:	000063d5 	.word	0x000063d5

00006b80 <mqtt_publish>:
    6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b82:	b093      	sub	sp, #76	; 0x4c
    6b84:	af02      	add	r7, sp, #8
    6b86:	60fb      	str	r3, [r7, #12]
    6b88:	1c3b      	adds	r3, r7, #0
    6b8a:	3358      	adds	r3, #88	; 0x58
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	1c04      	adds	r4, r0, #0
    6b90:	613b      	str	r3, [r7, #16]
    6b92:	1c3b      	adds	r3, r7, #0
    6b94:	335c      	adds	r3, #92	; 0x5c
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	6179      	str	r1, [r7, #20]
    6b9a:	60ba      	str	r2, [r7, #8]
    6b9c:	607b      	str	r3, [r7, #4]
    6b9e:	2800      	cmp	r0, #0
    6ba0:	d101      	bne.n	6ba6 <mqtt_publish+0x26>
    6ba2:	2516      	movs	r5, #22
    6ba4:	e0a7      	b.n	6cf6 <mqtt_publish+0x176>
    6ba6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6ba8:	466a      	mov	r2, sp
    6baa:	3307      	adds	r3, #7
    6bac:	08db      	lsrs	r3, r3, #3
    6bae:	00db      	lsls	r3, r3, #3
    6bb0:	1ad2      	subs	r2, r2, r3
    6bb2:	697b      	ldr	r3, [r7, #20]
    6bb4:	4695      	mov	sp, r2
    6bb6:	ae02      	add	r6, sp, #8
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d0f2      	beq.n	6ba2 <mqtt_publish+0x22>
    6bbc:	693a      	ldr	r2, [r7, #16]
    6bbe:	2a02      	cmp	r2, #2
    6bc0:	d8ef      	bhi.n	6ba2 <mqtt_publish+0x22>
    6bc2:	1c05      	adds	r5, r0, #0
    6bc4:	3543      	adds	r5, #67	; 0x43
    6bc6:	782b      	ldrb	r3, [r5, #0]
    6bc8:	079a      	lsls	r2, r3, #30
    6bca:	d400      	bmi.n	6bce <mqtt_publish+0x4e>
    6bcc:	e090      	b.n	6cf0 <mqtt_publish+0x170>
    6bce:	071a      	lsls	r2, r3, #28
    6bd0:	d40a      	bmi.n	6be8 <mqtt_publish+0x68>
    6bd2:	4b4b      	ldr	r3, [pc, #300]	; (6d00 <mqtt_publish+0x180>)
    6bd4:	6978      	ldr	r0, [r7, #20]
    6bd6:	4798      	blx	r3
    6bd8:	68fd      	ldr	r5, [r7, #12]
    6bda:	693b      	ldr	r3, [r7, #16]
    6bdc:	3502      	adds	r5, #2
    6bde:	182d      	adds	r5, r5, r0
    6be0:	2b00      	cmp	r3, #0
    6be2:	d011      	beq.n	6c08 <mqtt_publish+0x88>
    6be4:	3502      	adds	r5, #2
    6be6:	e00f      	b.n	6c08 <mqtt_publish+0x88>
    6be8:	1c03      	adds	r3, r0, #0
    6bea:	3370      	adds	r3, #112	; 0x70
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d000      	beq.n	6bf4 <mqtt_publish+0x74>
    6bf2:	e07f      	b.n	6cf4 <mqtt_publish+0x174>
    6bf4:	782b      	ldrb	r3, [r5, #0]
    6bf6:	071a      	lsls	r2, r3, #28
    6bf8:	d5eb      	bpl.n	6bd2 <mqtt_publish+0x52>
    6bfa:	4b42      	ldr	r3, [pc, #264]	; (6d04 <mqtt_publish+0x184>)
    6bfc:	2000      	movs	r0, #0
    6bfe:	4798      	blx	r3
    6c00:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6c02:	4b41      	ldr	r3, [pc, #260]	; (6d08 <mqtt_publish+0x188>)
    6c04:	4798      	blx	r3
    6c06:	e7f5      	b.n	6bf4 <mqtt_publish+0x74>
    6c08:	1c23      	adds	r3, r4, #0
    6c0a:	3343      	adds	r3, #67	; 0x43
    6c0c:	781a      	ldrb	r2, [r3, #0]
    6c0e:	2108      	movs	r1, #8
    6c10:	430a      	orrs	r2, r1
    6c12:	701a      	strb	r2, [r3, #0]
    6c14:	1c38      	adds	r0, r7, #0
    6c16:	9400      	str	r4, [sp, #0]
    6c18:	1c31      	adds	r1, r6, #0
    6c1a:	302c      	adds	r0, #44	; 0x2c
    6c1c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6c1e:	4b3b      	ldr	r3, [pc, #236]	; (6d0c <mqtt_publish+0x18c>)
    6c20:	4e3b      	ldr	r6, [pc, #236]	; (6d10 <mqtt_publish+0x190>)
    6c22:	47b0      	blx	r6
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	2101      	movs	r1, #1
    6c28:	4019      	ands	r1, r3
    6c2a:	2330      	movs	r3, #48	; 0x30
    6c2c:	4319      	orrs	r1, r3
    6c2e:	693b      	ldr	r3, [r7, #16]
    6c30:	1c38      	adds	r0, r7, #0
    6c32:	005a      	lsls	r2, r3, #1
    6c34:	2306      	movs	r3, #6
    6c36:	4013      	ands	r3, r2
    6c38:	4319      	orrs	r1, r3
    6c3a:	302c      	adds	r0, #44	; 0x2c
    6c3c:	4b35      	ldr	r3, [pc, #212]	; (6d14 <mqtt_publish+0x194>)
    6c3e:	4798      	blx	r3
    6c40:	4b34      	ldr	r3, [pc, #208]	; (6d14 <mqtt_publish+0x194>)
    6c42:	2d80      	cmp	r5, #128	; 0x80
    6c44:	dd08      	ble.n	6c58 <mqtt_publish+0xd8>
    6c46:	2180      	movs	r1, #128	; 0x80
    6c48:	4249      	negs	r1, r1
    6c4a:	4329      	orrs	r1, r5
    6c4c:	1c38      	adds	r0, r7, #0
    6c4e:	b249      	sxtb	r1, r1
    6c50:	302c      	adds	r0, #44	; 0x2c
    6c52:	4798      	blx	r3
    6c54:	11ed      	asrs	r5, r5, #7
    6c56:	e7f3      	b.n	6c40 <mqtt_publish+0xc0>
    6c58:	4a2f      	ldr	r2, [pc, #188]	; (6d18 <mqtt_publish+0x198>)
    6c5a:	4015      	ands	r5, r2
    6c5c:	d504      	bpl.n	6c68 <mqtt_publish+0xe8>
    6c5e:	2280      	movs	r2, #128	; 0x80
    6c60:	3d01      	subs	r5, #1
    6c62:	4252      	negs	r2, r2
    6c64:	4315      	orrs	r5, r2
    6c66:	3501      	adds	r5, #1
    6c68:	1c38      	adds	r0, r7, #0
    6c6a:	b269      	sxtb	r1, r5
    6c6c:	302c      	adds	r0, #44	; 0x2c
    6c6e:	4798      	blx	r3
    6c70:	4e23      	ldr	r6, [pc, #140]	; (6d00 <mqtt_publish+0x180>)
    6c72:	6978      	ldr	r0, [r7, #20]
    6c74:	47b0      	blx	r6
    6c76:	b201      	sxth	r1, r0
    6c78:	1c38      	adds	r0, r7, #0
    6c7a:	302c      	adds	r0, #44	; 0x2c
    6c7c:	4d27      	ldr	r5, [pc, #156]	; (6d1c <mqtt_publish+0x19c>)
    6c7e:	47a8      	blx	r5
    6c80:	6978      	ldr	r0, [r7, #20]
    6c82:	47b0      	blx	r6
    6c84:	1c02      	adds	r2, r0, #0
    6c86:	1c38      	adds	r0, r7, #0
    6c88:	302c      	adds	r0, #44	; 0x2c
    6c8a:	6979      	ldr	r1, [r7, #20]
    6c8c:	4e24      	ldr	r6, [pc, #144]	; (6d20 <mqtt_publish+0x1a0>)
    6c8e:	47b0      	blx	r6
    6c90:	693a      	ldr	r2, [r7, #16]
    6c92:	2a00      	cmp	r2, #0
    6c94:	d006      	beq.n	6ca4 <mqtt_publish+0x124>
    6c96:	8821      	ldrh	r1, [r4, #0]
    6c98:	1c38      	adds	r0, r7, #0
    6c9a:	1c4b      	adds	r3, r1, #1
    6c9c:	8023      	strh	r3, [r4, #0]
    6c9e:	b209      	sxth	r1, r1
    6ca0:	302c      	adds	r0, #44	; 0x2c
    6ca2:	47a8      	blx	r5
    6ca4:	8823      	ldrh	r3, [r4, #0]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d101      	bne.n	6cae <mqtt_publish+0x12e>
    6caa:	2301      	movs	r3, #1
    6cac:	8023      	strh	r3, [r4, #0]
    6cae:	68bb      	ldr	r3, [r7, #8]
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	d006      	beq.n	6cc2 <mqtt_publish+0x142>
    6cb4:	68fa      	ldr	r2, [r7, #12]
    6cb6:	2a00      	cmp	r2, #0
    6cb8:	d003      	beq.n	6cc2 <mqtt_publish+0x142>
    6cba:	1c38      	adds	r0, r7, #0
    6cbc:	302c      	adds	r0, #44	; 0x2c
    6cbe:	1c19      	adds	r1, r3, #0
    6cc0:	47b0      	blx	r6
    6cc2:	1c38      	adds	r0, r7, #0
    6cc4:	4b17      	ldr	r3, [pc, #92]	; (6d24 <mqtt_publish+0x1a4>)
    6cc6:	302c      	adds	r0, #44	; 0x2c
    6cc8:	4798      	blx	r3
    6cca:	1c23      	adds	r3, r4, #0
    6ccc:	3343      	adds	r3, #67	; 0x43
    6cce:	781a      	ldrb	r2, [r3, #0]
    6cd0:	2108      	movs	r1, #8
    6cd2:	438a      	bics	r2, r1
    6cd4:	701a      	strb	r2, [r3, #0]
    6cd6:	693b      	ldr	r3, [r7, #16]
    6cd8:	2500      	movs	r5, #0
    6cda:	42ab      	cmp	r3, r5
    6cdc:	d10c      	bne.n	6cf8 <mqtt_publish+0x178>
    6cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ce0:	42ab      	cmp	r3, r5
    6ce2:	d009      	beq.n	6cf8 <mqtt_publish+0x178>
    6ce4:	1c3a      	adds	r2, r7, #0
    6ce6:	1c20      	adds	r0, r4, #0
    6ce8:	2102      	movs	r1, #2
    6cea:	3218      	adds	r2, #24
    6cec:	4798      	blx	r3
    6cee:	e003      	b.n	6cf8 <mqtt_publish+0x178>
    6cf0:	2580      	movs	r5, #128	; 0x80
    6cf2:	e000      	b.n	6cf6 <mqtt_publish+0x176>
    6cf4:	250b      	movs	r5, #11
    6cf6:	426d      	negs	r5, r5
    6cf8:	1c28      	adds	r0, r5, #0
    6cfa:	46bd      	mov	sp, r7
    6cfc:	b011      	add	sp, #68	; 0x44
    6cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d00:	00007f19 	.word	0x00007f19
    6d04:	00001da9 	.word	0x00001da9
    6d08:	000065a1 	.word	0x000065a1
    6d0c:	00006649 	.word	0x00006649
    6d10:	000063c5 	.word	0x000063c5
    6d14:	000063ed 	.word	0x000063ed
    6d18:	8000007f 	.word	0x8000007f
    6d1c:	00006411 	.word	0x00006411
    6d20:	00006429 	.word	0x00006429
    6d24:	000063d5 	.word	0x000063d5

00006d28 <mqtt_subscribe>:
    6d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d2a:	b08d      	sub	sp, #52	; 0x34
    6d2c:	af02      	add	r7, sp, #8
    6d2e:	1c04      	adds	r4, r0, #0
    6d30:	60b9      	str	r1, [r7, #8]
    6d32:	607a      	str	r2, [r7, #4]
    6d34:	d101      	bne.n	6d3a <mqtt_subscribe+0x12>
    6d36:	2016      	movs	r0, #22
    6d38:	e086      	b.n	6e48 <mqtt_subscribe+0x120>
    6d3a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6d3c:	466a      	mov	r2, sp
    6d3e:	3307      	adds	r3, #7
    6d40:	08db      	lsrs	r3, r3, #3
    6d42:	00db      	lsls	r3, r3, #3
    6d44:	1ad2      	subs	r2, r2, r3
    6d46:	4695      	mov	sp, r2
    6d48:	ad02      	add	r5, sp, #8
    6d4a:	603d      	str	r5, [r7, #0]
    6d4c:	68bd      	ldr	r5, [r7, #8]
    6d4e:	2d00      	cmp	r5, #0
    6d50:	d0f1      	beq.n	6d36 <mqtt_subscribe+0xe>
    6d52:	687d      	ldr	r5, [r7, #4]
    6d54:	2d02      	cmp	r5, #2
    6d56:	d8ee      	bhi.n	6d36 <mqtt_subscribe+0xe>
    6d58:	1c05      	adds	r5, r0, #0
    6d5a:	3543      	adds	r5, #67	; 0x43
    6d5c:	782b      	ldrb	r3, [r5, #0]
    6d5e:	079a      	lsls	r2, r3, #30
    6d60:	d56f      	bpl.n	6e42 <mqtt_subscribe+0x11a>
    6d62:	071a      	lsls	r2, r3, #28
    6d64:	d41a      	bmi.n	6d9c <mqtt_subscribe+0x74>
    6d66:	68b8      	ldr	r0, [r7, #8]
    6d68:	4d39      	ldr	r5, [pc, #228]	; (6e50 <mqtt_subscribe+0x128>)
    6d6a:	47a8      	blx	r5
    6d6c:	1c25      	adds	r5, r4, #0
    6d6e:	3543      	adds	r5, #67	; 0x43
    6d70:	782b      	ldrb	r3, [r5, #0]
    6d72:	2208      	movs	r2, #8
    6d74:	4313      	orrs	r3, r2
    6d76:	702b      	strb	r3, [r5, #0]
    6d78:	60fd      	str	r5, [r7, #12]
    6d7a:	1d46      	adds	r6, r0, #5
    6d7c:	9400      	str	r4, [sp, #0]
    6d7e:	1c38      	adds	r0, r7, #0
    6d80:	3014      	adds	r0, #20
    6d82:	6839      	ldr	r1, [r7, #0]
    6d84:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6d86:	4b33      	ldr	r3, [pc, #204]	; (6e54 <mqtt_subscribe+0x12c>)
    6d88:	4d33      	ldr	r5, [pc, #204]	; (6e58 <mqtt_subscribe+0x130>)
    6d8a:	47a8      	blx	r5
    6d8c:	1c38      	adds	r0, r7, #0
    6d8e:	217e      	movs	r1, #126	; 0x7e
    6d90:	3014      	adds	r0, #20
    6d92:	4249      	negs	r1, r1
    6d94:	4b31      	ldr	r3, [pc, #196]	; (6e5c <mqtt_subscribe+0x134>)
    6d96:	4798      	blx	r3
    6d98:	4d2d      	ldr	r5, [pc, #180]	; (6e50 <mqtt_subscribe+0x128>)
    6d9a:	e00e      	b.n	6dba <mqtt_subscribe+0x92>
    6d9c:	1c03      	adds	r3, r0, #0
    6d9e:	3370      	adds	r3, #112	; 0x70
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	2b00      	cmp	r3, #0
    6da4:	d14f      	bne.n	6e46 <mqtt_subscribe+0x11e>
    6da6:	782b      	ldrb	r3, [r5, #0]
    6da8:	071a      	lsls	r2, r3, #28
    6daa:	d5dc      	bpl.n	6d66 <mqtt_subscribe+0x3e>
    6dac:	4b2c      	ldr	r3, [pc, #176]	; (6e60 <mqtt_subscribe+0x138>)
    6dae:	2000      	movs	r0, #0
    6db0:	4798      	blx	r3
    6db2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6db4:	4b2b      	ldr	r3, [pc, #172]	; (6e64 <mqtt_subscribe+0x13c>)
    6db6:	4798      	blx	r3
    6db8:	e7f5      	b.n	6da6 <mqtt_subscribe+0x7e>
    6dba:	4b28      	ldr	r3, [pc, #160]	; (6e5c <mqtt_subscribe+0x134>)
    6dbc:	2e80      	cmp	r6, #128	; 0x80
    6dbe:	dd08      	ble.n	6dd2 <mqtt_subscribe+0xaa>
    6dc0:	2180      	movs	r1, #128	; 0x80
    6dc2:	4249      	negs	r1, r1
    6dc4:	4331      	orrs	r1, r6
    6dc6:	1c38      	adds	r0, r7, #0
    6dc8:	b249      	sxtb	r1, r1
    6dca:	3014      	adds	r0, #20
    6dcc:	4798      	blx	r3
    6dce:	11f6      	asrs	r6, r6, #7
    6dd0:	e7f3      	b.n	6dba <mqtt_subscribe+0x92>
    6dd2:	4925      	ldr	r1, [pc, #148]	; (6e68 <mqtt_subscribe+0x140>)
    6dd4:	4031      	ands	r1, r6
    6dd6:	d504      	bpl.n	6de2 <mqtt_subscribe+0xba>
    6dd8:	2280      	movs	r2, #128	; 0x80
    6dda:	3901      	subs	r1, #1
    6ddc:	4252      	negs	r2, r2
    6dde:	4311      	orrs	r1, r2
    6de0:	3101      	adds	r1, #1
    6de2:	1c38      	adds	r0, r7, #0
    6de4:	b249      	sxtb	r1, r1
    6de6:	3014      	adds	r0, #20
    6de8:	4798      	blx	r3
    6dea:	8821      	ldrh	r1, [r4, #0]
    6dec:	1c38      	adds	r0, r7, #0
    6dee:	1c4b      	adds	r3, r1, #1
    6df0:	8023      	strh	r3, [r4, #0]
    6df2:	b209      	sxth	r1, r1
    6df4:	3014      	adds	r0, #20
    6df6:	4e1d      	ldr	r6, [pc, #116]	; (6e6c <mqtt_subscribe+0x144>)
    6df8:	47b0      	blx	r6
    6dfa:	8823      	ldrh	r3, [r4, #0]
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d101      	bne.n	6e04 <mqtt_subscribe+0xdc>
    6e00:	2301      	movs	r3, #1
    6e02:	8023      	strh	r3, [r4, #0]
    6e04:	68b8      	ldr	r0, [r7, #8]
    6e06:	47a8      	blx	r5
    6e08:	b201      	sxth	r1, r0
    6e0a:	1c38      	adds	r0, r7, #0
    6e0c:	3014      	adds	r0, #20
    6e0e:	47b0      	blx	r6
    6e10:	68b8      	ldr	r0, [r7, #8]
    6e12:	47a8      	blx	r5
    6e14:	1c02      	adds	r2, r0, #0
    6e16:	1c38      	adds	r0, r7, #0
    6e18:	3014      	adds	r0, #20
    6e1a:	68b9      	ldr	r1, [r7, #8]
    6e1c:	4b14      	ldr	r3, [pc, #80]	; (6e70 <mqtt_subscribe+0x148>)
    6e1e:	4798      	blx	r3
    6e20:	687d      	ldr	r5, [r7, #4]
    6e22:	1c38      	adds	r0, r7, #0
    6e24:	b269      	sxtb	r1, r5
    6e26:	3014      	adds	r0, #20
    6e28:	4b0c      	ldr	r3, [pc, #48]	; (6e5c <mqtt_subscribe+0x134>)
    6e2a:	4798      	blx	r3
    6e2c:	1c38      	adds	r0, r7, #0
    6e2e:	3014      	adds	r0, #20
    6e30:	4b10      	ldr	r3, [pc, #64]	; (6e74 <mqtt_subscribe+0x14c>)
    6e32:	4798      	blx	r3
    6e34:	68fd      	ldr	r5, [r7, #12]
    6e36:	2208      	movs	r2, #8
    6e38:	782b      	ldrb	r3, [r5, #0]
    6e3a:	2000      	movs	r0, #0
    6e3c:	4393      	bics	r3, r2
    6e3e:	702b      	strb	r3, [r5, #0]
    6e40:	e003      	b.n	6e4a <mqtt_subscribe+0x122>
    6e42:	2080      	movs	r0, #128	; 0x80
    6e44:	e000      	b.n	6e48 <mqtt_subscribe+0x120>
    6e46:	200b      	movs	r0, #11
    6e48:	4240      	negs	r0, r0
    6e4a:	46bd      	mov	sp, r7
    6e4c:	b00b      	add	sp, #44	; 0x2c
    6e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e50:	00007f19 	.word	0x00007f19
    6e54:	00006649 	.word	0x00006649
    6e58:	000063c5 	.word	0x000063c5
    6e5c:	000063ed 	.word	0x000063ed
    6e60:	00001da9 	.word	0x00001da9
    6e64:	000065a1 	.word	0x000065a1
    6e68:	8000007f 	.word	0x8000007f
    6e6c:	00006411 	.word	0x00006411
    6e70:	00006429 	.word	0x00006429
    6e74:	000063d5 	.word	0x000063d5

00006e78 <_mqtt_ping>:
    6e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e7a:	23c0      	movs	r3, #192	; 0xc0
    6e7c:	a901      	add	r1, sp, #4
    6e7e:	2500      	movs	r5, #0
    6e80:	700b      	strb	r3, [r1, #0]
    6e82:	704d      	strb	r5, [r1, #1]
    6e84:	42a8      	cmp	r0, r5
    6e86:	d019      	beq.n	6ebc <_mqtt_ping+0x44>
    6e88:	1c04      	adds	r4, r0, #0
    6e8a:	3443      	adds	r4, #67	; 0x43
    6e8c:	7823      	ldrb	r3, [r4, #0]
    6e8e:	079a      	lsls	r2, r3, #30
    6e90:	d516      	bpl.n	6ec0 <_mqtt_ping+0x48>
    6e92:	071a      	lsls	r2, r3, #28
    6e94:	d416      	bmi.n	6ec4 <_mqtt_ping+0x4c>
    6e96:	2608      	movs	r6, #8
    6e98:	4333      	orrs	r3, r6
    6e9a:	7023      	strb	r3, [r4, #0]
    6e9c:	7880      	ldrb	r0, [r0, #2]
    6e9e:	1c2b      	adds	r3, r5, #0
    6ea0:	b240      	sxtb	r0, r0
    6ea2:	2202      	movs	r2, #2
    6ea4:	4f09      	ldr	r7, [pc, #36]	; (6ecc <_mqtt_ping+0x54>)
    6ea6:	47b8      	blx	r7
    6ea8:	1c2b      	adds	r3, r5, #0
    6eaa:	42a8      	cmp	r0, r5
    6eac:	da0c      	bge.n	6ec8 <_mqtt_ping+0x50>
    6eae:	7823      	ldrb	r3, [r4, #0]
    6eb0:	43b3      	bics	r3, r6
    6eb2:	7023      	strb	r3, [r4, #0]
    6eb4:	4b06      	ldr	r3, [pc, #24]	; (6ed0 <_mqtt_ping+0x58>)
    6eb6:	4798      	blx	r3
    6eb8:	1c03      	adds	r3, r0, #0
    6eba:	e005      	b.n	6ec8 <_mqtt_ping+0x50>
    6ebc:	2316      	movs	r3, #22
    6ebe:	e002      	b.n	6ec6 <_mqtt_ping+0x4e>
    6ec0:	2380      	movs	r3, #128	; 0x80
    6ec2:	e000      	b.n	6ec6 <_mqtt_ping+0x4e>
    6ec4:	230b      	movs	r3, #11
    6ec6:	425b      	negs	r3, r3
    6ec8:	1c18      	adds	r0, r3, #0
    6eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ecc:	00003a49 	.word	0x00003a49
    6ed0:	000065f9 	.word	0x000065f9

00006ed4 <mqtt_timer_callback>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	1c05      	adds	r5, r0, #0
    6ed8:	b086      	sub	sp, #24
    6eda:	1c0e      	adds	r6, r1, #0
    6edc:	1c14      	adds	r4, r2, #0
    6ede:	2800      	cmp	r0, #0
    6ee0:	d012      	beq.n	6f08 <mqtt_timer_callback+0x34>
    6ee2:	2a00      	cmp	r2, #0
    6ee4:	d010      	beq.n	6f08 <mqtt_timer_callback+0x34>
    6ee6:	1c10      	adds	r0, r2, #0
    6ee8:	4b08      	ldr	r3, [pc, #32]	; (6f0c <mqtt_timer_callback+0x38>)
    6eea:	4798      	blx	r3
    6eec:	2800      	cmp	r0, #0
    6eee:	da04      	bge.n	6efa <mqtt_timer_callback+0x26>
    6ef0:	1c28      	adds	r0, r5, #0
    6ef2:	1c31      	adds	r1, r6, #0
    6ef4:	2200      	movs	r2, #0
    6ef6:	4b06      	ldr	r3, [pc, #24]	; (6f10 <mqtt_timer_callback+0x3c>)
    6ef8:	e005      	b.n	6f06 <mqtt_timer_callback+0x32>
    6efa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6efc:	2b00      	cmp	r3, #0
    6efe:	d003      	beq.n	6f08 <mqtt_timer_callback+0x34>
    6f00:	1c20      	adds	r0, r4, #0
    6f02:	2107      	movs	r1, #7
    6f04:	aa01      	add	r2, sp, #4
    6f06:	4798      	blx	r3
    6f08:	b006      	add	sp, #24
    6f0a:	bd70      	pop	{r4, r5, r6, pc}
    6f0c:	00006e79 	.word	0x00006e79
    6f10:	00006561 	.word	0x00006561

00006f14 <_mqtt_puback>:
    6f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f16:	2302      	movs	r3, #2
    6f18:	ac01      	add	r4, sp, #4
    6f1a:	2700      	movs	r7, #0
    6f1c:	7063      	strb	r3, [r4, #1]
    6f1e:	42b8      	cmp	r0, r7
    6f20:	d01e      	beq.n	6f60 <_mqtt_puback+0x4c>
    6f22:	1c05      	adds	r5, r0, #0
    6f24:	3543      	adds	r5, #67	; 0x43
    6f26:	782b      	ldrb	r3, [r5, #0]
    6f28:	079e      	lsls	r6, r3, #30
    6f2a:	d51b      	bpl.n	6f64 <_mqtt_puback+0x50>
    6f2c:	071e      	lsls	r6, r3, #28
    6f2e:	d41b      	bmi.n	6f68 <_mqtt_puback+0x54>
    6f30:	2608      	movs	r6, #8
    6f32:	4333      	orrs	r3, r6
    6f34:	702b      	strb	r3, [r5, #0]
    6f36:	7880      	ldrb	r0, [r0, #2]
    6f38:	7021      	strb	r1, [r4, #0]
    6f3a:	0a11      	lsrs	r1, r2, #8
    6f3c:	70a1      	strb	r1, [r4, #2]
    6f3e:	70e2      	strb	r2, [r4, #3]
    6f40:	1c21      	adds	r1, r4, #0
    6f42:	1c3b      	adds	r3, r7, #0
    6f44:	b240      	sxtb	r0, r0
    6f46:	2204      	movs	r2, #4
    6f48:	4c09      	ldr	r4, [pc, #36]	; (6f70 <_mqtt_puback+0x5c>)
    6f4a:	47a0      	blx	r4
    6f4c:	1c3b      	adds	r3, r7, #0
    6f4e:	42b8      	cmp	r0, r7
    6f50:	da0c      	bge.n	6f6c <_mqtt_puback+0x58>
    6f52:	782b      	ldrb	r3, [r5, #0]
    6f54:	43b3      	bics	r3, r6
    6f56:	702b      	strb	r3, [r5, #0]
    6f58:	4b06      	ldr	r3, [pc, #24]	; (6f74 <_mqtt_puback+0x60>)
    6f5a:	4798      	blx	r3
    6f5c:	1c03      	adds	r3, r0, #0
    6f5e:	e005      	b.n	6f6c <_mqtt_puback+0x58>
    6f60:	2316      	movs	r3, #22
    6f62:	e002      	b.n	6f6a <_mqtt_puback+0x56>
    6f64:	2380      	movs	r3, #128	; 0x80
    6f66:	e000      	b.n	6f6a <_mqtt_puback+0x56>
    6f68:	230b      	movs	r3, #11
    6f6a:	425b      	negs	r3, r3
    6f6c:	1c18      	adds	r0, r3, #0
    6f6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f70:	00003a49 	.word	0x00003a49
    6f74:	000065f9 	.word	0x000065f9

00006f78 <mqtt_clear_conn>:
    6f78:	b530      	push	{r4, r5, lr}
    6f7a:	1c04      	adds	r4, r0, #0
    6f7c:	b087      	sub	sp, #28
    6f7e:	2800      	cmp	r0, #0
    6f80:	d01c      	beq.n	6fbc <mqtt_clear_conn+0x44>
    6f82:	2002      	movs	r0, #2
    6f84:	4b0e      	ldr	r3, [pc, #56]	; (6fc0 <mqtt_clear_conn+0x48>)
    6f86:	5620      	ldrsb	r0, [r4, r0]
    6f88:	4798      	blx	r3
    6f8a:	1c23      	adds	r3, r4, #0
    6f8c:	3343      	adds	r3, #67	; 0x43
    6f8e:	781a      	ldrb	r2, [r3, #0]
    6f90:	21fc      	movs	r1, #252	; 0xfc
    6f92:	0795      	lsls	r5, r2, #30
    6f94:	400a      	ands	r2, r1
    6f96:	701a      	strb	r2, [r3, #0]
    6f98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6f9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6f9c:	9301      	str	r3, [sp, #4]
    6f9e:	2300      	movs	r3, #0
    6fa0:	64e3      	str	r3, [r4, #76]	; 0x4c
    6fa2:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6fa4:	4b07      	ldr	r3, [pc, #28]	; (6fc4 <mqtt_clear_conn+0x4c>)
    6fa6:	4798      	blx	r3
    6fa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6faa:	0fed      	lsrs	r5, r5, #31
    6fac:	2b00      	cmp	r3, #0
    6fae:	d005      	beq.n	6fbc <mqtt_clear_conn+0x44>
    6fb0:	2d00      	cmp	r5, #0
    6fb2:	d003      	beq.n	6fbc <mqtt_clear_conn+0x44>
    6fb4:	1c20      	adds	r0, r4, #0
    6fb6:	2105      	movs	r1, #5
    6fb8:	aa01      	add	r2, sp, #4
    6fba:	4798      	blx	r3
    6fbc:	b007      	add	sp, #28
    6fbe:	bd30      	pop	{r4, r5, pc}
    6fc0:	00003c45 	.word	0x00003c45
    6fc4:	00006591 	.word	0x00006591

00006fc8 <mqtt_disconnect>:
    6fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fca:	23e0      	movs	r3, #224	; 0xe0
    6fcc:	ae01      	add	r6, sp, #4
    6fce:	2700      	movs	r7, #0
    6fd0:	1c05      	adds	r5, r0, #0
    6fd2:	7033      	strb	r3, [r6, #0]
    6fd4:	7077      	strb	r7, [r6, #1]
    6fd6:	42b8      	cmp	r0, r7
    6fd8:	d036      	beq.n	7048 <mqtt_disconnect+0x80>
    6fda:	1c04      	adds	r4, r0, #0
    6fdc:	3443      	adds	r4, #67	; 0x43
    6fde:	7823      	ldrb	r3, [r4, #0]
    6fe0:	079a      	lsls	r2, r3, #30
    6fe2:	d533      	bpl.n	704c <mqtt_disconnect+0x84>
    6fe4:	42b9      	cmp	r1, r7
    6fe6:	d12b      	bne.n	7040 <mqtt_disconnect+0x78>
    6fe8:	071a      	lsls	r2, r3, #28
    6fea:	d414      	bmi.n	7016 <mqtt_disconnect+0x4e>
    6fec:	7823      	ldrb	r3, [r4, #0]
    6fee:	2210      	movs	r2, #16
    6ff0:	4313      	orrs	r3, r2
    6ff2:	2708      	movs	r7, #8
    6ff4:	433b      	orrs	r3, r7
    6ff6:	7023      	strb	r3, [r4, #0]
    6ff8:	2002      	movs	r0, #2
    6ffa:	5628      	ldrsb	r0, [r5, r0]
    6ffc:	1c31      	adds	r1, r6, #0
    6ffe:	2202      	movs	r2, #2
    7000:	2300      	movs	r3, #0
    7002:	4d15      	ldr	r5, [pc, #84]	; (7058 <mqtt_disconnect+0x90>)
    7004:	47a8      	blx	r5
    7006:	2800      	cmp	r0, #0
    7008:	da14      	bge.n	7034 <mqtt_disconnect+0x6c>
    700a:	7823      	ldrb	r3, [r4, #0]
    700c:	43bb      	bics	r3, r7
    700e:	7023      	strb	r3, [r4, #0]
    7010:	4b12      	ldr	r3, [pc, #72]	; (705c <mqtt_disconnect+0x94>)
    7012:	4798      	blx	r3
    7014:	e01e      	b.n	7054 <mqtt_disconnect+0x8c>
    7016:	1c03      	adds	r3, r0, #0
    7018:	3370      	adds	r3, #112	; 0x70
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	2b00      	cmp	r3, #0
    701e:	d117      	bne.n	7050 <mqtt_disconnect+0x88>
    7020:	7823      	ldrb	r3, [r4, #0]
    7022:	071a      	lsls	r2, r3, #28
    7024:	d5e2      	bpl.n	6fec <mqtt_disconnect+0x24>
    7026:	4b0e      	ldr	r3, [pc, #56]	; (7060 <mqtt_disconnect+0x98>)
    7028:	2000      	movs	r0, #0
    702a:	4798      	blx	r3
    702c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    702e:	4b0d      	ldr	r3, [pc, #52]	; (7064 <mqtt_disconnect+0x9c>)
    7030:	4798      	blx	r3
    7032:	e7f5      	b.n	7020 <mqtt_disconnect+0x58>
    7034:	7823      	ldrb	r3, [r4, #0]
    7036:	2202      	movs	r2, #2
    7038:	4393      	bics	r3, r2
    703a:	7023      	strb	r3, [r4, #0]
    703c:	2000      	movs	r0, #0
    703e:	e009      	b.n	7054 <mqtt_disconnect+0x8c>
    7040:	4b09      	ldr	r3, [pc, #36]	; (7068 <mqtt_disconnect+0xa0>)
    7042:	4798      	blx	r3
    7044:	1c38      	adds	r0, r7, #0
    7046:	e005      	b.n	7054 <mqtt_disconnect+0x8c>
    7048:	2016      	movs	r0, #22
    704a:	e002      	b.n	7052 <mqtt_disconnect+0x8a>
    704c:	2080      	movs	r0, #128	; 0x80
    704e:	e000      	b.n	7052 <mqtt_disconnect+0x8a>
    7050:	200b      	movs	r0, #11
    7052:	4240      	negs	r0, r0
    7054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7056:	46c0      	nop			; (mov r8, r8)
    7058:	00003a49 	.word	0x00003a49
    705c:	000065f9 	.word	0x000065f9
    7060:	00001da9 	.word	0x00001da9
    7064:	000065a1 	.word	0x000065a1
    7068:	00006f79 	.word	0x00006f79

0000706c <_mqtt_recv_handler>:
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	1c04      	adds	r4, r0, #0
    7070:	6e40      	ldr	r0, [r0, #100]	; 0x64
    7072:	230f      	movs	r3, #15
    7074:	7802      	ldrb	r2, [r0, #0]
    7076:	b087      	sub	sp, #28
    7078:	1c15      	adds	r5, r2, #0
    707a:	439d      	bics	r5, r3
    707c:	2d50      	cmp	r5, #80	; 0x50
    707e:	d100      	bne.n	7082 <_mqtt_recv_handler+0x16>
    7080:	e098      	b.n	71b4 <_mqtt_recv_handler+0x148>
    7082:	d808      	bhi.n	7096 <_mqtt_recv_handler+0x2a>
    7084:	2d30      	cmp	r5, #48	; 0x30
    7086:	d03f      	beq.n	7108 <_mqtt_recv_handler+0x9c>
    7088:	2d40      	cmp	r5, #64	; 0x40
    708a:	d100      	bne.n	708e <_mqtt_recv_handler+0x22>
    708c:	e0b3      	b.n	71f6 <_mqtt_recv_handler+0x18a>
    708e:	2d20      	cmp	r5, #32
    7090:	d000      	beq.n	7094 <_mqtt_recv_handler+0x28>
    7092:	e0c3      	b.n	721c <_mqtt_recv_handler+0x1b0>
    7094:	e00e      	b.n	70b4 <_mqtt_recv_handler+0x48>
    7096:	2d70      	cmp	r5, #112	; 0x70
    7098:	d100      	bne.n	709c <_mqtt_recv_handler+0x30>
    709a:	e0ac      	b.n	71f6 <_mqtt_recv_handler+0x18a>
    709c:	d803      	bhi.n	70a6 <_mqtt_recv_handler+0x3a>
    709e:	2d60      	cmp	r5, #96	; 0x60
    70a0:	d100      	bne.n	70a4 <_mqtt_recv_handler+0x38>
    70a2:	e096      	b.n	71d2 <_mqtt_recv_handler+0x166>
    70a4:	e0ba      	b.n	721c <_mqtt_recv_handler+0x1b0>
    70a6:	2d90      	cmp	r5, #144	; 0x90
    70a8:	d100      	bne.n	70ac <_mqtt_recv_handler+0x40>
    70aa:	e0aa      	b.n	7202 <_mqtt_recv_handler+0x196>
    70ac:	2db0      	cmp	r5, #176	; 0xb0
    70ae:	d100      	bne.n	70b2 <_mqtt_recv_handler+0x46>
    70b0:	e0ad      	b.n	720e <_mqtt_recv_handler+0x1a2>
    70b2:	e0b3      	b.n	721c <_mqtt_recv_handler+0x1b0>
    70b4:	aa01      	add	r2, sp, #4
    70b6:	2303      	movs	r3, #3
    70b8:	2901      	cmp	r1, #1
    70ba:	d900      	bls.n	70be <_mqtt_recv_handler+0x52>
    70bc:	78c3      	ldrb	r3, [r0, #3]
    70be:	7013      	strb	r3, [r2, #0]
    70c0:	7813      	ldrb	r3, [r2, #0]
    70c2:	2b00      	cmp	r3, #0
    70c4:	d00d      	beq.n	70e2 <_mqtt_recv_handler+0x76>
    70c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70c8:	2b00      	cmp	r3, #0
    70ca:	d002      	beq.n	70d2 <_mqtt_recv_handler+0x66>
    70cc:	1c20      	adds	r0, r4, #0
    70ce:	2101      	movs	r1, #1
    70d0:	4798      	blx	r3
    70d2:	236f      	movs	r3, #111	; 0x6f
    70d4:	425b      	negs	r3, r3
    70d6:	64e3      	str	r3, [r4, #76]	; 0x4c
    70d8:	1c20      	adds	r0, r4, #0
    70da:	2100      	movs	r1, #0
    70dc:	4b50      	ldr	r3, [pc, #320]	; (7220 <_mqtt_recv_handler+0x1b4>)
    70de:	4798      	blx	r3
    70e0:	e09c      	b.n	721c <_mqtt_recv_handler+0x1b0>
    70e2:	1c23      	adds	r3, r4, #0
    70e4:	3343      	adds	r3, #67	; 0x43
    70e6:	7819      	ldrb	r1, [r3, #0]
    70e8:	0789      	lsls	r1, r1, #30
    70ea:	0fc9      	lsrs	r1, r1, #31
    70ec:	d105      	bne.n	70fa <_mqtt_recv_handler+0x8e>
    70ee:	781a      	ldrb	r2, [r3, #0]
    70f0:	64e1      	str	r1, [r4, #76]	; 0x4c
    70f2:	2102      	movs	r1, #2
    70f4:	430a      	orrs	r2, r1
    70f6:	701a      	strb	r2, [r3, #0]
    70f8:	e090      	b.n	721c <_mqtt_recv_handler+0x1b0>
    70fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70fc:	2b00      	cmp	r3, #0
    70fe:	d100      	bne.n	7102 <_mqtt_recv_handler+0x96>
    7100:	e08c      	b.n	721c <_mqtt_recv_handler+0x1b0>
    7102:	1c20      	adds	r0, r4, #0
    7104:	2101      	movs	r1, #1
    7106:	e088      	b.n	721a <_mqtt_recv_handler+0x1ae>
    7108:	ad01      	add	r5, sp, #4
    710a:	0713      	lsls	r3, r2, #28
    710c:	7c2a      	ldrb	r2, [r5, #16]
    710e:	0fdb      	lsrs	r3, r3, #31
    7110:	2604      	movs	r6, #4
    7112:	009b      	lsls	r3, r3, #2
    7114:	43b2      	bics	r2, r6
    7116:	431a      	orrs	r2, r3
    7118:	742a      	strb	r2, [r5, #16]
    711a:	7807      	ldrb	r7, [r0, #0]
    711c:	2303      	movs	r3, #3
    711e:	b2d2      	uxtb	r2, r2
    7120:	087f      	lsrs	r7, r7, #1
    7122:	439a      	bics	r2, r3
    7124:	401f      	ands	r7, r3
    7126:	1c13      	adds	r3, r2, #0
    7128:	433b      	orrs	r3, r7
    712a:	742b      	strb	r3, [r5, #16]
    712c:	1c43      	adds	r3, r0, #1
    712e:	7818      	ldrb	r0, [r3, #0]
    7130:	1c5a      	adds	r2, r3, #1
    7132:	287f      	cmp	r0, #127	; 0x7f
    7134:	d901      	bls.n	713a <_mqtt_recv_handler+0xce>
    7136:	1c13      	adds	r3, r2, #0
    7138:	e7f9      	b.n	712e <_mqtt_recv_handler+0xc2>
    713a:	7858      	ldrb	r0, [r3, #1]
    713c:	789e      	ldrb	r6, [r3, #2]
    713e:	0200      	lsls	r0, r0, #8
    7140:	4330      	orrs	r0, r6
    7142:	3303      	adds	r3, #3
    7144:	2600      	movs	r6, #0
    7146:	6068      	str	r0, [r5, #4]
    7148:	9301      	str	r3, [sp, #4]
    714a:	1818      	adds	r0, r3, r0
    714c:	42b7      	cmp	r7, r6
    714e:	d004      	beq.n	715a <_mqtt_recv_handler+0xee>
    7150:	7806      	ldrb	r6, [r0, #0]
    7152:	7843      	ldrb	r3, [r0, #1]
    7154:	0236      	lsls	r6, r6, #8
    7156:	431e      	orrs	r6, r3
    7158:	3002      	adds	r0, #2
    715a:	1851      	adds	r1, r2, r1
    715c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    715e:	60a8      	str	r0, [r5, #8]
    7160:	1a08      	subs	r0, r1, r0
    7162:	60e8      	str	r0, [r5, #12]
    7164:	2b00      	cmp	r3, #0
    7166:	d003      	beq.n	7170 <_mqtt_recv_handler+0x104>
    7168:	1c20      	adds	r0, r4, #0
    716a:	2106      	movs	r1, #6
    716c:	1c2a      	adds	r2, r5, #0
    716e:	4798      	blx	r3
    7170:	7c2b      	ldrb	r3, [r5, #16]
    7172:	079b      	lsls	r3, r3, #30
    7174:	0f9b      	lsrs	r3, r3, #30
    7176:	2b01      	cmp	r3, #1
    7178:	d10b      	bne.n	7192 <_mqtt_recv_handler+0x126>
    717a:	b2b6      	uxth	r6, r6
    717c:	1c20      	adds	r0, r4, #0
    717e:	2140      	movs	r1, #64	; 0x40
    7180:	1c32      	adds	r2, r6, #0
    7182:	4b28      	ldr	r3, [pc, #160]	; (7224 <_mqtt_recv_handler+0x1b8>)
    7184:	4798      	blx	r3
    7186:	2800      	cmp	r0, #0
    7188:	d048      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    718a:	1c23      	adds	r3, r4, #0
    718c:	3348      	adds	r3, #72	; 0x48
    718e:	2240      	movs	r2, #64	; 0x40
    7190:	e00c      	b.n	71ac <_mqtt_recv_handler+0x140>
    7192:	2b02      	cmp	r3, #2
    7194:	d142      	bne.n	721c <_mqtt_recv_handler+0x1b0>
    7196:	b2b6      	uxth	r6, r6
    7198:	1c20      	adds	r0, r4, #0
    719a:	2150      	movs	r1, #80	; 0x50
    719c:	1c32      	adds	r2, r6, #0
    719e:	4b21      	ldr	r3, [pc, #132]	; (7224 <_mqtt_recv_handler+0x1b8>)
    71a0:	4798      	blx	r3
    71a2:	2800      	cmp	r0, #0
    71a4:	d03a      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    71a6:	1c23      	adds	r3, r4, #0
    71a8:	3348      	adds	r3, #72	; 0x48
    71aa:	2250      	movs	r2, #80	; 0x50
    71ac:	344a      	adds	r4, #74	; 0x4a
    71ae:	701a      	strb	r2, [r3, #0]
    71b0:	8026      	strh	r6, [r4, #0]
    71b2:	e033      	b.n	721c <_mqtt_recv_handler+0x1b0>
    71b4:	7885      	ldrb	r5, [r0, #2]
    71b6:	78c3      	ldrb	r3, [r0, #3]
    71b8:	022d      	lsls	r5, r5, #8
    71ba:	431d      	orrs	r5, r3
    71bc:	1c20      	adds	r0, r4, #0
    71be:	2162      	movs	r1, #98	; 0x62
    71c0:	1c2a      	adds	r2, r5, #0
    71c2:	4b18      	ldr	r3, [pc, #96]	; (7224 <_mqtt_recv_handler+0x1b8>)
    71c4:	4798      	blx	r3
    71c6:	2800      	cmp	r0, #0
    71c8:	d028      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    71ca:	1c23      	adds	r3, r4, #0
    71cc:	3348      	adds	r3, #72	; 0x48
    71ce:	2260      	movs	r2, #96	; 0x60
    71d0:	e00d      	b.n	71ee <_mqtt_recv_handler+0x182>
    71d2:	7885      	ldrb	r5, [r0, #2]
    71d4:	78c3      	ldrb	r3, [r0, #3]
    71d6:	022d      	lsls	r5, r5, #8
    71d8:	431d      	orrs	r5, r3
    71da:	1c20      	adds	r0, r4, #0
    71dc:	2170      	movs	r1, #112	; 0x70
    71de:	1c2a      	adds	r2, r5, #0
    71e0:	4b10      	ldr	r3, [pc, #64]	; (7224 <_mqtt_recv_handler+0x1b8>)
    71e2:	4798      	blx	r3
    71e4:	2800      	cmp	r0, #0
    71e6:	d019      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    71e8:	1c23      	adds	r3, r4, #0
    71ea:	3348      	adds	r3, #72	; 0x48
    71ec:	2270      	movs	r2, #112	; 0x70
    71ee:	344a      	adds	r4, #74	; 0x4a
    71f0:	701a      	strb	r2, [r3, #0]
    71f2:	8025      	strh	r5, [r4, #0]
    71f4:	e012      	b.n	721c <_mqtt_recv_handler+0x1b0>
    71f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    71f8:	2b00      	cmp	r3, #0
    71fa:	d00f      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    71fc:	1c20      	adds	r0, r4, #0
    71fe:	2102      	movs	r1, #2
    7200:	e00a      	b.n	7218 <_mqtt_recv_handler+0x1ac>
    7202:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7204:	2b00      	cmp	r3, #0
    7206:	d009      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    7208:	1c20      	adds	r0, r4, #0
    720a:	2103      	movs	r1, #3
    720c:	e004      	b.n	7218 <_mqtt_recv_handler+0x1ac>
    720e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7210:	2b00      	cmp	r3, #0
    7212:	d003      	beq.n	721c <_mqtt_recv_handler+0x1b0>
    7214:	1c20      	adds	r0, r4, #0
    7216:	2104      	movs	r1, #4
    7218:	aa01      	add	r2, sp, #4
    721a:	4798      	blx	r3
    721c:	b007      	add	sp, #28
    721e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7220:	00006fc9 	.word	0x00006fc9
    7224:	00006f15 	.word	0x00006f15

00007228 <mqtt_recv_packet>:
    7228:	b538      	push	{r3, r4, r5, lr}
    722a:	1e04      	subs	r4, r0, #0
    722c:	d017      	beq.n	725e <mqtt_recv_packet+0x36>
    722e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7230:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7232:	429a      	cmp	r2, r3
    7234:	d906      	bls.n	7244 <mqtt_recv_packet+0x1c>
    7236:	238b      	movs	r3, #139	; 0x8b
    7238:	425b      	negs	r3, r3
    723a:	64c3      	str	r3, [r0, #76]	; 0x4c
    723c:	2100      	movs	r1, #0
    723e:	4b08      	ldr	r3, [pc, #32]	; (7260 <mqtt_recv_packet+0x38>)
    7240:	4798      	blx	r3
    7242:	e00c      	b.n	725e <mqtt_recv_packet+0x36>
    7244:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7246:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7248:	2002      	movs	r0, #2
    724a:	1899      	adds	r1, r3, r2
    724c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    724e:	5620      	ldrsb	r0, [r4, r0]
    7250:	1a9a      	subs	r2, r3, r2
    7252:	b292      	uxth	r2, r2
    7254:	2300      	movs	r3, #0
    7256:	4d03      	ldr	r5, [pc, #12]	; (7264 <mqtt_recv_packet+0x3c>)
    7258:	47a8      	blx	r5
    725a:	2800      	cmp	r0, #0
    725c:	d1f2      	bne.n	7244 <mqtt_recv_packet+0x1c>
    725e:	bd38      	pop	{r3, r4, r5, pc}
    7260:	00006fc9 	.word	0x00006fc9
    7264:	00003ba1 	.word	0x00003ba1

00007268 <mqtt_recved_packet>:
    7268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    726a:	1e04      	subs	r4, r0, #0
    726c:	d042      	beq.n	72f4 <mqtt_recved_packet+0x8c>
    726e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7270:	6e67      	ldr	r7, [r4, #100]	; 0x64
    7272:	18ca      	adds	r2, r1, r3
    7274:	2301      	movs	r3, #1
    7276:	9701      	str	r7, [sp, #4]
    7278:	6462      	str	r2, [r4, #68]	; 0x44
    727a:	2600      	movs	r6, #0
    727c:	1c1d      	adds	r5, r3, #0
    727e:	42a9      	cmp	r1, r5
    7280:	dc03      	bgt.n	728a <mqtt_recved_packet+0x22>
    7282:	1c20      	adds	r0, r4, #0
    7284:	4b1c      	ldr	r3, [pc, #112]	; (72f8 <mqtt_recved_packet+0x90>)
    7286:	4798      	blx	r3
    7288:	e034      	b.n	72f4 <mqtt_recved_packet+0x8c>
    728a:	9f01      	ldr	r7, [sp, #4]
    728c:	5d78      	ldrb	r0, [r7, r5]
    728e:	01df      	lsls	r7, r3, #7
    7290:	46bc      	mov	ip, r7
    7292:	2d03      	cmp	r5, #3
    7294:	d101      	bne.n	729a <mqtt_recved_packet+0x32>
    7296:	234d      	movs	r3, #77	; 0x4d
    7298:	e00e      	b.n	72b8 <mqtt_recved_packet+0x50>
    729a:	277f      	movs	r7, #127	; 0x7f
    729c:	4007      	ands	r7, r0
    729e:	437b      	muls	r3, r7
    72a0:	b240      	sxtb	r0, r0
    72a2:	3501      	adds	r5, #1
    72a4:	18f6      	adds	r6, r6, r3
    72a6:	2800      	cmp	r0, #0
    72a8:	da01      	bge.n	72ae <mqtt_recved_packet+0x46>
    72aa:	4663      	mov	r3, ip
    72ac:	e7e7      	b.n	727e <mqtt_recved_packet+0x16>
    72ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    72b0:	19af      	adds	r7, r5, r6
    72b2:	429f      	cmp	r7, r3
    72b4:	d907      	bls.n	72c6 <mqtt_recved_packet+0x5e>
    72b6:	238b      	movs	r3, #139	; 0x8b
    72b8:	425b      	negs	r3, r3
    72ba:	64e3      	str	r3, [r4, #76]	; 0x4c
    72bc:	1c20      	adds	r0, r4, #0
    72be:	2100      	movs	r1, #0
    72c0:	4b0e      	ldr	r3, [pc, #56]	; (72fc <mqtt_recved_packet+0x94>)
    72c2:	4798      	blx	r3
    72c4:	e016      	b.n	72f4 <mqtt_recved_packet+0x8c>
    72c6:	42ba      	cmp	r2, r7
    72c8:	d314      	bcc.n	72f4 <mqtt_recved_packet+0x8c>
    72ca:	4b0d      	ldr	r3, [pc, #52]	; (7300 <mqtt_recved_packet+0x98>)
    72cc:	1c20      	adds	r0, r4, #0
    72ce:	1c31      	adds	r1, r6, #0
    72d0:	4798      	blx	r3
    72d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    72d4:	42bb      	cmp	r3, r7
    72d6:	d102      	bne.n	72de <mqtt_recved_packet+0x76>
    72d8:	2300      	movs	r3, #0
    72da:	6463      	str	r3, [r4, #68]	; 0x44
    72dc:	e00a      	b.n	72f4 <mqtt_recved_packet+0x8c>
    72de:	1b9e      	subs	r6, r3, r6
    72e0:	9b01      	ldr	r3, [sp, #4]
    72e2:	1b75      	subs	r5, r6, r5
    72e4:	19d9      	adds	r1, r3, r7
    72e6:	1c18      	adds	r0, r3, #0
    72e8:	1c2a      	adds	r2, r5, #0
    72ea:	4b06      	ldr	r3, [pc, #24]	; (7304 <mqtt_recved_packet+0x9c>)
    72ec:	4798      	blx	r3
    72ee:	6465      	str	r5, [r4, #68]	; 0x44
    72f0:	2100      	movs	r1, #0
    72f2:	e7bc      	b.n	726e <mqtt_recved_packet+0x6>
    72f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	00007229 	.word	0x00007229
    72fc:	00006fc9 	.word	0x00006fc9
    7300:	0000706d 	.word	0x0000706d
    7304:	0000769f 	.word	0x0000769f

00007308 <mqtt_socket_event_handler>:
    7308:	b570      	push	{r4, r5, r6, lr}
    730a:	4d37      	ldr	r5, [pc, #220]	; (73e8 <mqtt_socket_event_handler+0xe0>)
    730c:	0086      	lsls	r6, r0, #2
    730e:	5974      	ldr	r4, [r6, r5]
    7310:	b086      	sub	sp, #24
    7312:	2c00      	cmp	r4, #0
    7314:	d066      	beq.n	73e4 <mqtt_socket_event_handler+0xdc>
    7316:	2906      	cmp	r1, #6
    7318:	d02b      	beq.n	7372 <mqtt_socket_event_handler+0x6a>
    731a:	2907      	cmp	r1, #7
    731c:	d039      	beq.n	7392 <mqtt_socket_event_handler+0x8a>
    731e:	2905      	cmp	r1, #5
    7320:	d160      	bne.n	73e4 <mqtt_socket_event_handler+0xdc>
    7322:	2001      	movs	r0, #1
    7324:	5610      	ldrsb	r0, [r2, r0]
    7326:	4b31      	ldr	r3, [pc, #196]	; (73ec <mqtt_socket_event_handler+0xe4>)
    7328:	4798      	blx	r3
    732a:	9001      	str	r0, [sp, #4]
    732c:	2800      	cmp	r0, #0
    732e:	da06      	bge.n	733e <mqtt_socket_event_handler+0x36>
    7330:	2002      	movs	r0, #2
    7332:	4b2f      	ldr	r3, [pc, #188]	; (73f0 <mqtt_socket_event_handler+0xe8>)
    7334:	5620      	ldrsb	r0, [r4, r0]
    7336:	4798      	blx	r3
    7338:	2300      	movs	r3, #0
    733a:	5173      	str	r3, [r6, r5]
    733c:	e011      	b.n	7362 <mqtt_socket_event_handler+0x5a>
    733e:	1c23      	adds	r3, r4, #0
    7340:	3343      	adds	r3, #67	; 0x43
    7342:	781a      	ldrb	r2, [r3, #0]
    7344:	2101      	movs	r1, #1
    7346:	430a      	orrs	r2, r1
    7348:	701a      	strb	r2, [r3, #0]
    734a:	331d      	adds	r3, #29
    734c:	881b      	ldrh	r3, [r3, #0]
    734e:	2b00      	cmp	r3, #0
    7350:	d004      	beq.n	735c <mqtt_socket_event_handler+0x54>
    7352:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7354:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7356:	2200      	movs	r2, #0
    7358:	4b26      	ldr	r3, [pc, #152]	; (73f4 <mqtt_socket_event_handler+0xec>)
    735a:	4798      	blx	r3
    735c:	1c20      	adds	r0, r4, #0
    735e:	4b26      	ldr	r3, [pc, #152]	; (73f8 <mqtt_socket_event_handler+0xf0>)
    7360:	4798      	blx	r3
    7362:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7364:	2b00      	cmp	r3, #0
    7366:	d03d      	beq.n	73e4 <mqtt_socket_event_handler+0xdc>
    7368:	1c20      	adds	r0, r4, #0
    736a:	2100      	movs	r1, #0
    736c:	aa01      	add	r2, sp, #4
    736e:	4798      	blx	r3
    7370:	e038      	b.n	73e4 <mqtt_socket_event_handler+0xdc>
    7372:	2304      	movs	r3, #4
    7374:	5ed1      	ldrsh	r1, [r2, r3]
    7376:	2900      	cmp	r1, #0
    7378:	dd03      	ble.n	7382 <mqtt_socket_event_handler+0x7a>
    737a:	1c20      	adds	r0, r4, #0
    737c:	4b1f      	ldr	r3, [pc, #124]	; (73fc <mqtt_socket_event_handler+0xf4>)
    737e:	4798      	blx	r3
    7380:	e003      	b.n	738a <mqtt_socket_event_handler+0x82>
    7382:	1c0b      	adds	r3, r1, #0
    7384:	1c08      	adds	r0, r1, #0
    7386:	330d      	adds	r3, #13
    7388:	d11a      	bne.n	73c0 <mqtt_socket_event_handler+0xb8>
    738a:	4b1b      	ldr	r3, [pc, #108]	; (73f8 <mqtt_socket_event_handler+0xf0>)
    738c:	1c20      	adds	r0, r4, #0
    738e:	4798      	blx	r3
    7390:	e028      	b.n	73e4 <mqtt_socket_event_handler+0xdc>
    7392:	1c23      	adds	r3, r4, #0
    7394:	3343      	adds	r3, #67	; 0x43
    7396:	8810      	ldrh	r0, [r2, #0]
    7398:	781a      	ldrb	r2, [r3, #0]
    739a:	0751      	lsls	r1, r2, #29
    739c:	d402      	bmi.n	73a4 <mqtt_socket_event_handler+0x9c>
    739e:	2108      	movs	r1, #8
    73a0:	438a      	bics	r2, r1
    73a2:	701a      	strb	r2, [r3, #0]
    73a4:	781a      	ldrb	r2, [r3, #0]
    73a6:	2104      	movs	r1, #4
    73a8:	438a      	bics	r2, r1
    73aa:	701a      	strb	r2, [r3, #0]
    73ac:	06d3      	lsls	r3, r2, #27
    73ae:	0fde      	lsrs	r6, r3, #31
    73b0:	b200      	sxth	r0, r0
    73b2:	2b00      	cmp	r3, #0
    73b4:	db02      	blt.n	73bc <mqtt_socket_event_handler+0xb4>
    73b6:	2800      	cmp	r0, #0
    73b8:	da08      	bge.n	73cc <mqtt_socket_event_handler+0xc4>
    73ba:	e001      	b.n	73c0 <mqtt_socket_event_handler+0xb8>
    73bc:	2800      	cmp	r0, #0
    73be:	da02      	bge.n	73c6 <mqtt_socket_event_handler+0xbe>
    73c0:	4b0a      	ldr	r3, [pc, #40]	; (73ec <mqtt_socket_event_handler+0xe4>)
    73c2:	4798      	blx	r3
    73c4:	64e0      	str	r0, [r4, #76]	; 0x4c
    73c6:	1c20      	adds	r0, r4, #0
    73c8:	4b0d      	ldr	r3, [pc, #52]	; (7400 <mqtt_socket_event_handler+0xf8>)
    73ca:	e7e0      	b.n	738e <mqtt_socket_event_handler+0x86>
    73cc:	1c25      	adds	r5, r4, #0
    73ce:	3548      	adds	r5, #72	; 0x48
    73d0:	7829      	ldrb	r1, [r5, #0]
    73d2:	2900      	cmp	r1, #0
    73d4:	d006      	beq.n	73e4 <mqtt_socket_event_handler+0xdc>
    73d6:	1c23      	adds	r3, r4, #0
    73d8:	334a      	adds	r3, #74	; 0x4a
    73da:	881a      	ldrh	r2, [r3, #0]
    73dc:	1c20      	adds	r0, r4, #0
    73de:	4b09      	ldr	r3, [pc, #36]	; (7404 <mqtt_socket_event_handler+0xfc>)
    73e0:	4798      	blx	r3
    73e2:	702e      	strb	r6, [r5, #0]
    73e4:	b006      	add	sp, #24
    73e6:	bd70      	pop	{r4, r5, r6, pc}
    73e8:	200008bc 	.word	0x200008bc
    73ec:	000065f9 	.word	0x000065f9
    73f0:	00003c45 	.word	0x00003c45
    73f4:	00006561 	.word	0x00006561
    73f8:	00007229 	.word	0x00007229
    73fc:	00007269 	.word	0x00007269
    7400:	00006f79 	.word	0x00006f79
    7404:	00006f15 	.word	0x00006f15

00007408 <__gnu_thumb1_case_uqi>:
    7408:	b402      	push	{r1}
    740a:	4671      	mov	r1, lr
    740c:	0849      	lsrs	r1, r1, #1
    740e:	0049      	lsls	r1, r1, #1
    7410:	5c09      	ldrb	r1, [r1, r0]
    7412:	0049      	lsls	r1, r1, #1
    7414:	448e      	add	lr, r1
    7416:	bc02      	pop	{r1}
    7418:	4770      	bx	lr
    741a:	46c0      	nop			; (mov r8, r8)

0000741c <__aeabi_uidiv>:
    741c:	2900      	cmp	r1, #0
    741e:	d034      	beq.n	748a <.udivsi3_skip_div0_test+0x6a>

00007420 <.udivsi3_skip_div0_test>:
    7420:	2301      	movs	r3, #1
    7422:	2200      	movs	r2, #0
    7424:	b410      	push	{r4}
    7426:	4288      	cmp	r0, r1
    7428:	d32c      	bcc.n	7484 <.udivsi3_skip_div0_test+0x64>
    742a:	2401      	movs	r4, #1
    742c:	0724      	lsls	r4, r4, #28
    742e:	42a1      	cmp	r1, r4
    7430:	d204      	bcs.n	743c <.udivsi3_skip_div0_test+0x1c>
    7432:	4281      	cmp	r1, r0
    7434:	d202      	bcs.n	743c <.udivsi3_skip_div0_test+0x1c>
    7436:	0109      	lsls	r1, r1, #4
    7438:	011b      	lsls	r3, r3, #4
    743a:	e7f8      	b.n	742e <.udivsi3_skip_div0_test+0xe>
    743c:	00e4      	lsls	r4, r4, #3
    743e:	42a1      	cmp	r1, r4
    7440:	d204      	bcs.n	744c <.udivsi3_skip_div0_test+0x2c>
    7442:	4281      	cmp	r1, r0
    7444:	d202      	bcs.n	744c <.udivsi3_skip_div0_test+0x2c>
    7446:	0049      	lsls	r1, r1, #1
    7448:	005b      	lsls	r3, r3, #1
    744a:	e7f8      	b.n	743e <.udivsi3_skip_div0_test+0x1e>
    744c:	4288      	cmp	r0, r1
    744e:	d301      	bcc.n	7454 <.udivsi3_skip_div0_test+0x34>
    7450:	1a40      	subs	r0, r0, r1
    7452:	431a      	orrs	r2, r3
    7454:	084c      	lsrs	r4, r1, #1
    7456:	42a0      	cmp	r0, r4
    7458:	d302      	bcc.n	7460 <.udivsi3_skip_div0_test+0x40>
    745a:	1b00      	subs	r0, r0, r4
    745c:	085c      	lsrs	r4, r3, #1
    745e:	4322      	orrs	r2, r4
    7460:	088c      	lsrs	r4, r1, #2
    7462:	42a0      	cmp	r0, r4
    7464:	d302      	bcc.n	746c <.udivsi3_skip_div0_test+0x4c>
    7466:	1b00      	subs	r0, r0, r4
    7468:	089c      	lsrs	r4, r3, #2
    746a:	4322      	orrs	r2, r4
    746c:	08cc      	lsrs	r4, r1, #3
    746e:	42a0      	cmp	r0, r4
    7470:	d302      	bcc.n	7478 <.udivsi3_skip_div0_test+0x58>
    7472:	1b00      	subs	r0, r0, r4
    7474:	08dc      	lsrs	r4, r3, #3
    7476:	4322      	orrs	r2, r4
    7478:	2800      	cmp	r0, #0
    747a:	d003      	beq.n	7484 <.udivsi3_skip_div0_test+0x64>
    747c:	091b      	lsrs	r3, r3, #4
    747e:	d001      	beq.n	7484 <.udivsi3_skip_div0_test+0x64>
    7480:	0909      	lsrs	r1, r1, #4
    7482:	e7e3      	b.n	744c <.udivsi3_skip_div0_test+0x2c>
    7484:	1c10      	adds	r0, r2, #0
    7486:	bc10      	pop	{r4}
    7488:	4770      	bx	lr
    748a:	2800      	cmp	r0, #0
    748c:	d001      	beq.n	7492 <.udivsi3_skip_div0_test+0x72>
    748e:	2000      	movs	r0, #0
    7490:	43c0      	mvns	r0, r0
    7492:	b407      	push	{r0, r1, r2}
    7494:	4802      	ldr	r0, [pc, #8]	; (74a0 <.udivsi3_skip_div0_test+0x80>)
    7496:	a102      	add	r1, pc, #8	; (adr r1, 74a0 <.udivsi3_skip_div0_test+0x80>)
    7498:	1840      	adds	r0, r0, r1
    749a:	9002      	str	r0, [sp, #8]
    749c:	bd03      	pop	{r0, r1, pc}
    749e:	46c0      	nop			; (mov r8, r8)
    74a0:	000000d9 	.word	0x000000d9

000074a4 <__aeabi_uidivmod>:
    74a4:	2900      	cmp	r1, #0
    74a6:	d0f0      	beq.n	748a <.udivsi3_skip_div0_test+0x6a>
    74a8:	b503      	push	{r0, r1, lr}
    74aa:	f7ff ffb9 	bl	7420 <.udivsi3_skip_div0_test>
    74ae:	bc0e      	pop	{r1, r2, r3}
    74b0:	4342      	muls	r2, r0
    74b2:	1a89      	subs	r1, r1, r2
    74b4:	4718      	bx	r3
    74b6:	46c0      	nop			; (mov r8, r8)

000074b8 <__aeabi_idiv>:
    74b8:	2900      	cmp	r1, #0
    74ba:	d041      	beq.n	7540 <.divsi3_skip_div0_test+0x84>

000074bc <.divsi3_skip_div0_test>:
    74bc:	b410      	push	{r4}
    74be:	1c04      	adds	r4, r0, #0
    74c0:	404c      	eors	r4, r1
    74c2:	46a4      	mov	ip, r4
    74c4:	2301      	movs	r3, #1
    74c6:	2200      	movs	r2, #0
    74c8:	2900      	cmp	r1, #0
    74ca:	d500      	bpl.n	74ce <.divsi3_skip_div0_test+0x12>
    74cc:	4249      	negs	r1, r1
    74ce:	2800      	cmp	r0, #0
    74d0:	d500      	bpl.n	74d4 <.divsi3_skip_div0_test+0x18>
    74d2:	4240      	negs	r0, r0
    74d4:	4288      	cmp	r0, r1
    74d6:	d32c      	bcc.n	7532 <.divsi3_skip_div0_test+0x76>
    74d8:	2401      	movs	r4, #1
    74da:	0724      	lsls	r4, r4, #28
    74dc:	42a1      	cmp	r1, r4
    74de:	d204      	bcs.n	74ea <.divsi3_skip_div0_test+0x2e>
    74e0:	4281      	cmp	r1, r0
    74e2:	d202      	bcs.n	74ea <.divsi3_skip_div0_test+0x2e>
    74e4:	0109      	lsls	r1, r1, #4
    74e6:	011b      	lsls	r3, r3, #4
    74e8:	e7f8      	b.n	74dc <.divsi3_skip_div0_test+0x20>
    74ea:	00e4      	lsls	r4, r4, #3
    74ec:	42a1      	cmp	r1, r4
    74ee:	d204      	bcs.n	74fa <.divsi3_skip_div0_test+0x3e>
    74f0:	4281      	cmp	r1, r0
    74f2:	d202      	bcs.n	74fa <.divsi3_skip_div0_test+0x3e>
    74f4:	0049      	lsls	r1, r1, #1
    74f6:	005b      	lsls	r3, r3, #1
    74f8:	e7f8      	b.n	74ec <.divsi3_skip_div0_test+0x30>
    74fa:	4288      	cmp	r0, r1
    74fc:	d301      	bcc.n	7502 <.divsi3_skip_div0_test+0x46>
    74fe:	1a40      	subs	r0, r0, r1
    7500:	431a      	orrs	r2, r3
    7502:	084c      	lsrs	r4, r1, #1
    7504:	42a0      	cmp	r0, r4
    7506:	d302      	bcc.n	750e <.divsi3_skip_div0_test+0x52>
    7508:	1b00      	subs	r0, r0, r4
    750a:	085c      	lsrs	r4, r3, #1
    750c:	4322      	orrs	r2, r4
    750e:	088c      	lsrs	r4, r1, #2
    7510:	42a0      	cmp	r0, r4
    7512:	d302      	bcc.n	751a <.divsi3_skip_div0_test+0x5e>
    7514:	1b00      	subs	r0, r0, r4
    7516:	089c      	lsrs	r4, r3, #2
    7518:	4322      	orrs	r2, r4
    751a:	08cc      	lsrs	r4, r1, #3
    751c:	42a0      	cmp	r0, r4
    751e:	d302      	bcc.n	7526 <.divsi3_skip_div0_test+0x6a>
    7520:	1b00      	subs	r0, r0, r4
    7522:	08dc      	lsrs	r4, r3, #3
    7524:	4322      	orrs	r2, r4
    7526:	2800      	cmp	r0, #0
    7528:	d003      	beq.n	7532 <.divsi3_skip_div0_test+0x76>
    752a:	091b      	lsrs	r3, r3, #4
    752c:	d001      	beq.n	7532 <.divsi3_skip_div0_test+0x76>
    752e:	0909      	lsrs	r1, r1, #4
    7530:	e7e3      	b.n	74fa <.divsi3_skip_div0_test+0x3e>
    7532:	1c10      	adds	r0, r2, #0
    7534:	4664      	mov	r4, ip
    7536:	2c00      	cmp	r4, #0
    7538:	d500      	bpl.n	753c <.divsi3_skip_div0_test+0x80>
    753a:	4240      	negs	r0, r0
    753c:	bc10      	pop	{r4}
    753e:	4770      	bx	lr
    7540:	2800      	cmp	r0, #0
    7542:	d006      	beq.n	7552 <.divsi3_skip_div0_test+0x96>
    7544:	db03      	blt.n	754e <.divsi3_skip_div0_test+0x92>
    7546:	2000      	movs	r0, #0
    7548:	43c0      	mvns	r0, r0
    754a:	0840      	lsrs	r0, r0, #1
    754c:	e001      	b.n	7552 <.divsi3_skip_div0_test+0x96>
    754e:	2080      	movs	r0, #128	; 0x80
    7550:	0600      	lsls	r0, r0, #24
    7552:	b407      	push	{r0, r1, r2}
    7554:	4802      	ldr	r0, [pc, #8]	; (7560 <.divsi3_skip_div0_test+0xa4>)
    7556:	a102      	add	r1, pc, #8	; (adr r1, 7560 <.divsi3_skip_div0_test+0xa4>)
    7558:	1840      	adds	r0, r0, r1
    755a:	9002      	str	r0, [sp, #8]
    755c:	bd03      	pop	{r0, r1, pc}
    755e:	46c0      	nop			; (mov r8, r8)
    7560:	00000019 	.word	0x00000019

00007564 <__aeabi_idivmod>:
    7564:	2900      	cmp	r1, #0
    7566:	d0eb      	beq.n	7540 <.divsi3_skip_div0_test+0x84>
    7568:	b503      	push	{r0, r1, lr}
    756a:	f7ff ffa7 	bl	74bc <.divsi3_skip_div0_test>
    756e:	bc0e      	pop	{r1, r2, r3}
    7570:	4342      	muls	r2, r0
    7572:	1a89      	subs	r1, r1, r2
    7574:	4718      	bx	r3
    7576:	46c0      	nop			; (mov r8, r8)

00007578 <__aeabi_idiv0>:
    7578:	4770      	bx	lr
    757a:	46c0      	nop			; (mov r8, r8)

0000757c <__aeabi_lmul>:
    757c:	469c      	mov	ip, r3
    757e:	0403      	lsls	r3, r0, #16
    7580:	b5f0      	push	{r4, r5, r6, r7, lr}
    7582:	0c1b      	lsrs	r3, r3, #16
    7584:	0417      	lsls	r7, r2, #16
    7586:	0c3f      	lsrs	r7, r7, #16
    7588:	0c15      	lsrs	r5, r2, #16
    758a:	1c1e      	adds	r6, r3, #0
    758c:	1c04      	adds	r4, r0, #0
    758e:	0c00      	lsrs	r0, r0, #16
    7590:	437e      	muls	r6, r7
    7592:	436b      	muls	r3, r5
    7594:	4347      	muls	r7, r0
    7596:	4345      	muls	r5, r0
    7598:	18fb      	adds	r3, r7, r3
    759a:	0c30      	lsrs	r0, r6, #16
    759c:	1818      	adds	r0, r3, r0
    759e:	4287      	cmp	r7, r0
    75a0:	d902      	bls.n	75a8 <__aeabi_lmul+0x2c>
    75a2:	2380      	movs	r3, #128	; 0x80
    75a4:	025b      	lsls	r3, r3, #9
    75a6:	18ed      	adds	r5, r5, r3
    75a8:	0c03      	lsrs	r3, r0, #16
    75aa:	18ed      	adds	r5, r5, r3
    75ac:	4663      	mov	r3, ip
    75ae:	435c      	muls	r4, r3
    75b0:	434a      	muls	r2, r1
    75b2:	0436      	lsls	r6, r6, #16
    75b4:	0c36      	lsrs	r6, r6, #16
    75b6:	18a1      	adds	r1, r4, r2
    75b8:	0400      	lsls	r0, r0, #16
    75ba:	1980      	adds	r0, r0, r6
    75bc:	1949      	adds	r1, r1, r5
    75be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000075c0 <ctime>:
    75c0:	b508      	push	{r3, lr}
    75c2:	f000 f841 	bl	7648 <localtime>
    75c6:	f001 f985 	bl	88d4 <asctime>
    75ca:	bd08      	pop	{r3, pc}

000075cc <gmtime>:
    75cc:	b538      	push	{r3, r4, r5, lr}
    75ce:	4b07      	ldr	r3, [pc, #28]	; (75ec <gmtime+0x20>)
    75d0:	1c05      	adds	r5, r0, #0
    75d2:	681c      	ldr	r4, [r3, #0]
    75d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    75d6:	2b00      	cmp	r3, #0
    75d8:	d103      	bne.n	75e2 <gmtime+0x16>
    75da:	2024      	movs	r0, #36	; 0x24
    75dc:	f000 f84c 	bl	7678 <malloc>
    75e0:	63e0      	str	r0, [r4, #60]	; 0x3c
    75e2:	1c28      	adds	r0, r5, #0
    75e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    75e6:	f000 f803 	bl	75f0 <gmtime_r>
    75ea:	bd38      	pop	{r3, r4, r5, pc}
    75ec:	20000078 	.word	0x20000078

000075f0 <gmtime_r>:
    75f0:	b508      	push	{r3, lr}
    75f2:	2201      	movs	r2, #1
    75f4:	f000 f928 	bl	7848 <_mktm_r>
    75f8:	bd08      	pop	{r3, pc}
	...

000075fc <__libc_init_array>:
    75fc:	b570      	push	{r4, r5, r6, lr}
    75fe:	4b0e      	ldr	r3, [pc, #56]	; (7638 <__libc_init_array+0x3c>)
    7600:	4d0e      	ldr	r5, [pc, #56]	; (763c <__libc_init_array+0x40>)
    7602:	2400      	movs	r4, #0
    7604:	1aed      	subs	r5, r5, r3
    7606:	10ad      	asrs	r5, r5, #2
    7608:	1c1e      	adds	r6, r3, #0
    760a:	42ac      	cmp	r4, r5
    760c:	d004      	beq.n	7618 <__libc_init_array+0x1c>
    760e:	00a3      	lsls	r3, r4, #2
    7610:	58f3      	ldr	r3, [r6, r3]
    7612:	4798      	blx	r3
    7614:	3401      	adds	r4, #1
    7616:	e7f8      	b.n	760a <__libc_init_array+0xe>
    7618:	f003 f830 	bl	a67c <_init>
    761c:	4b08      	ldr	r3, [pc, #32]	; (7640 <__libc_init_array+0x44>)
    761e:	4d09      	ldr	r5, [pc, #36]	; (7644 <__libc_init_array+0x48>)
    7620:	2400      	movs	r4, #0
    7622:	1aed      	subs	r5, r5, r3
    7624:	10ad      	asrs	r5, r5, #2
    7626:	1c1e      	adds	r6, r3, #0
    7628:	42ac      	cmp	r4, r5
    762a:	d004      	beq.n	7636 <__libc_init_array+0x3a>
    762c:	00a3      	lsls	r3, r4, #2
    762e:	58f3      	ldr	r3, [r6, r3]
    7630:	4798      	blx	r3
    7632:	3401      	adds	r4, #1
    7634:	e7f8      	b.n	7628 <__libc_init_array+0x2c>
    7636:	bd70      	pop	{r4, r5, r6, pc}
    7638:	0000a688 	.word	0x0000a688
    763c:	0000a688 	.word	0x0000a688
    7640:	0000a688 	.word	0x0000a688
    7644:	0000a68c 	.word	0x0000a68c

00007648 <localtime>:
    7648:	b538      	push	{r3, r4, r5, lr}
    764a:	4b07      	ldr	r3, [pc, #28]	; (7668 <localtime+0x20>)
    764c:	1c05      	adds	r5, r0, #0
    764e:	681c      	ldr	r4, [r3, #0]
    7650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7652:	2b00      	cmp	r3, #0
    7654:	d103      	bne.n	765e <localtime+0x16>
    7656:	2024      	movs	r0, #36	; 0x24
    7658:	f000 f80e 	bl	7678 <malloc>
    765c:	63e0      	str	r0, [r4, #60]	; 0x3c
    765e:	1c28      	adds	r0, r5, #0
    7660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7662:	f000 f803 	bl	766c <localtime_r>
    7666:	bd38      	pop	{r3, r4, r5, pc}
    7668:	20000078 	.word	0x20000078

0000766c <localtime_r>:
    766c:	b508      	push	{r3, lr}
    766e:	2200      	movs	r2, #0
    7670:	f000 f8ea 	bl	7848 <_mktm_r>
    7674:	bd08      	pop	{r3, pc}
	...

00007678 <malloc>:
    7678:	b508      	push	{r3, lr}
    767a:	4b03      	ldr	r3, [pc, #12]	; (7688 <malloc+0x10>)
    767c:	1c01      	adds	r1, r0, #0
    767e:	6818      	ldr	r0, [r3, #0]
    7680:	f000 fa86 	bl	7b90 <_malloc_r>
    7684:	bd08      	pop	{r3, pc}
    7686:	46c0      	nop			; (mov r8, r8)
    7688:	20000078 	.word	0x20000078

0000768c <memcpy>:
    768c:	b510      	push	{r4, lr}
    768e:	2300      	movs	r3, #0
    7690:	4293      	cmp	r3, r2
    7692:	d003      	beq.n	769c <memcpy+0x10>
    7694:	5ccc      	ldrb	r4, [r1, r3]
    7696:	54c4      	strb	r4, [r0, r3]
    7698:	3301      	adds	r3, #1
    769a:	e7f9      	b.n	7690 <memcpy+0x4>
    769c:	bd10      	pop	{r4, pc}

0000769e <memmove>:
    769e:	b570      	push	{r4, r5, r6, lr}
    76a0:	4281      	cmp	r1, r0
    76a2:	d301      	bcc.n	76a8 <memmove+0xa>
    76a4:	2300      	movs	r3, #0
    76a6:	e00c      	b.n	76c2 <memmove+0x24>
    76a8:	188c      	adds	r4, r1, r2
    76aa:	42a0      	cmp	r0, r4
    76ac:	d2fa      	bcs.n	76a4 <memmove+0x6>
    76ae:	1885      	adds	r5, r0, r2
    76b0:	1c13      	adds	r3, r2, #0
    76b2:	3b01      	subs	r3, #1
    76b4:	d30b      	bcc.n	76ce <memmove+0x30>
    76b6:	4251      	negs	r1, r2
    76b8:	1866      	adds	r6, r4, r1
    76ba:	5cf6      	ldrb	r6, [r6, r3]
    76bc:	1869      	adds	r1, r5, r1
    76be:	54ce      	strb	r6, [r1, r3]
    76c0:	e7f7      	b.n	76b2 <memmove+0x14>
    76c2:	4293      	cmp	r3, r2
    76c4:	d003      	beq.n	76ce <memmove+0x30>
    76c6:	5ccc      	ldrb	r4, [r1, r3]
    76c8:	54c4      	strb	r4, [r0, r3]
    76ca:	3301      	adds	r3, #1
    76cc:	e7f9      	b.n	76c2 <memmove+0x24>
    76ce:	bd70      	pop	{r4, r5, r6, pc}

000076d0 <memset>:
    76d0:	1c03      	adds	r3, r0, #0
    76d2:	1882      	adds	r2, r0, r2
    76d4:	4293      	cmp	r3, r2
    76d6:	d002      	beq.n	76de <memset+0xe>
    76d8:	7019      	strb	r1, [r3, #0]
    76da:	3301      	adds	r3, #1
    76dc:	e7fa      	b.n	76d4 <memset+0x4>
    76de:	4770      	bx	lr

000076e0 <__tzcalc_limits>:
    76e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e2:	b087      	sub	sp, #28
    76e4:	1c05      	adds	r5, r0, #0
    76e6:	f001 faad 	bl	8c44 <__gettzinfo>
    76ea:	4b4f      	ldr	r3, [pc, #316]	; (7828 <__tzcalc_limits+0x148>)
    76ec:	1c06      	adds	r6, r0, #0
    76ee:	2700      	movs	r7, #0
    76f0:	429d      	cmp	r5, r3
    76f2:	dc00      	bgt.n	76f6 <__tzcalc_limits+0x16>
    76f4:	e095      	b.n	7822 <__tzcalc_limits+0x142>
    76f6:	6045      	str	r5, [r0, #4]
    76f8:	484c      	ldr	r0, [pc, #304]	; (782c <__tzcalc_limits+0x14c>)
    76fa:	246e      	movs	r4, #110	; 0x6e
    76fc:	182b      	adds	r3, r5, r0
    76fe:	34ff      	adds	r4, #255	; 0xff
    7700:	435c      	muls	r4, r3
    7702:	494b      	ldr	r1, [pc, #300]	; (7830 <__tzcalc_limits+0x150>)
    7704:	4a4b      	ldr	r2, [pc, #300]	; (7834 <__tzcalc_limits+0x154>)
    7706:	186b      	adds	r3, r5, r1
    7708:	2164      	movs	r1, #100	; 0x64
    770a:	18a8      	adds	r0, r5, r2
    770c:	109b      	asrs	r3, r3, #2
    770e:	4249      	negs	r1, r1
    7710:	18e4      	adds	r4, r4, r3
    7712:	f7ff fed1 	bl	74b8 <__aeabi_idiv>
    7716:	4b48      	ldr	r3, [pc, #288]	; (7838 <__tzcalc_limits+0x158>)
    7718:	21c8      	movs	r1, #200	; 0xc8
    771a:	1824      	adds	r4, r4, r0
    771c:	0049      	lsls	r1, r1, #1
    771e:	18e8      	adds	r0, r5, r3
    7720:	f7ff feca 	bl	74b8 <__aeabi_idiv>
    7724:	1820      	adds	r0, r4, r0
    7726:	9002      	str	r0, [sp, #8]
    7728:	2164      	movs	r1, #100	; 0x64
    772a:	1c28      	adds	r0, r5, #0
    772c:	f7ff ff1a 	bl	7564 <__aeabi_idivmod>
    7730:	9104      	str	r1, [sp, #16]
    7732:	21c8      	movs	r1, #200	; 0xc8
    7734:	1c28      	adds	r0, r5, #0
    7736:	0049      	lsls	r1, r1, #1
    7738:	f7ff ff14 	bl	7564 <__aeabi_idivmod>
    773c:	424b      	negs	r3, r1
    773e:	414b      	adcs	r3, r1
    7740:	b2db      	uxtb	r3, r3
    7742:	1c34      	adds	r4, r6, #0
    7744:	9301      	str	r3, [sp, #4]
    7746:	3414      	adds	r4, #20
    7748:	9703      	str	r7, [sp, #12]
    774a:	1c23      	adds	r3, r4, #0
    774c:	3b0c      	subs	r3, #12
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	2b4a      	cmp	r3, #74	; 0x4a
    7752:	d112      	bne.n	777a <__tzcalc_limits+0x9a>
    7754:	6823      	ldr	r3, [r4, #0]
    7756:	9802      	ldr	r0, [sp, #8]
    7758:	18c2      	adds	r2, r0, r3
    775a:	07a9      	lsls	r1, r5, #30
    775c:	d102      	bne.n	7764 <__tzcalc_limits+0x84>
    775e:	9804      	ldr	r0, [sp, #16]
    7760:	2800      	cmp	r0, #0
    7762:	d103      	bne.n	776c <__tzcalc_limits+0x8c>
    7764:	9801      	ldr	r0, [sp, #4]
    7766:	2100      	movs	r1, #0
    7768:	4288      	cmp	r0, r1
    776a:	d003      	beq.n	7774 <__tzcalc_limits+0x94>
    776c:	2101      	movs	r1, #1
    776e:	2b3b      	cmp	r3, #59	; 0x3b
    7770:	dc00      	bgt.n	7774 <__tzcalc_limits+0x94>
    7772:	2100      	movs	r1, #0
    7774:	1851      	adds	r1, r2, r1
    7776:	3901      	subs	r1, #1
    7778:	e03e      	b.n	77f8 <__tzcalc_limits+0x118>
    777a:	2b44      	cmp	r3, #68	; 0x44
    777c:	d103      	bne.n	7786 <__tzcalc_limits+0xa6>
    777e:	9a02      	ldr	r2, [sp, #8]
    7780:	6823      	ldr	r3, [r4, #0]
    7782:	18d1      	adds	r1, r2, r3
    7784:	e038      	b.n	77f8 <__tzcalc_limits+0x118>
    7786:	9b01      	ldr	r3, [sp, #4]
    7788:	07a8      	lsls	r0, r5, #30
    778a:	d104      	bne.n	7796 <__tzcalc_limits+0xb6>
    778c:	9904      	ldr	r1, [sp, #16]
    778e:	2301      	movs	r3, #1
    7790:	2900      	cmp	r1, #0
    7792:	d100      	bne.n	7796 <__tzcalc_limits+0xb6>
    7794:	9b01      	ldr	r3, [sp, #4]
    7796:	2230      	movs	r2, #48	; 0x30
    7798:	4353      	muls	r3, r2
    779a:	4a28      	ldr	r2, [pc, #160]	; (783c <__tzcalc_limits+0x15c>)
    779c:	18d3      	adds	r3, r2, r3
    779e:	9305      	str	r3, [sp, #20]
    77a0:	1c23      	adds	r3, r4, #0
    77a2:	3b08      	subs	r3, #8
    77a4:	681f      	ldr	r7, [r3, #0]
    77a6:	9b02      	ldr	r3, [sp, #8]
    77a8:	9a05      	ldr	r2, [sp, #20]
    77aa:	9300      	str	r3, [sp, #0]
    77ac:	2301      	movs	r3, #1
    77ae:	42bb      	cmp	r3, r7
    77b0:	da05      	bge.n	77be <__tzcalc_limits+0xde>
    77b2:	9800      	ldr	r0, [sp, #0]
    77b4:	ca02      	ldmia	r2!, {r1}
    77b6:	3301      	adds	r3, #1
    77b8:	1840      	adds	r0, r0, r1
    77ba:	9000      	str	r0, [sp, #0]
    77bc:	e7f7      	b.n	77ae <__tzcalc_limits+0xce>
    77be:	2f00      	cmp	r7, #0
    77c0:	dc00      	bgt.n	77c4 <__tzcalc_limits+0xe4>
    77c2:	2701      	movs	r7, #1
    77c4:	9800      	ldr	r0, [sp, #0]
    77c6:	2107      	movs	r1, #7
    77c8:	3004      	adds	r0, #4
    77ca:	f7ff fecb 	bl	7564 <__aeabi_idivmod>
    77ce:	6822      	ldr	r2, [r4, #0]
    77d0:	1a53      	subs	r3, r2, r1
    77d2:	d500      	bpl.n	77d6 <__tzcalc_limits+0xf6>
    77d4:	3307      	adds	r3, #7
    77d6:	1f22      	subs	r2, r4, #4
    77d8:	6811      	ldr	r1, [r2, #0]
    77da:	2207      	movs	r2, #7
    77dc:	3901      	subs	r1, #1
    77de:	4351      	muls	r1, r2
    77e0:	18c9      	adds	r1, r1, r3
    77e2:	4b17      	ldr	r3, [pc, #92]	; (7840 <__tzcalc_limits+0x160>)
    77e4:	9805      	ldr	r0, [sp, #20]
    77e6:	18ff      	adds	r7, r7, r3
    77e8:	00bf      	lsls	r7, r7, #2
    77ea:	583b      	ldr	r3, [r7, r0]
    77ec:	4299      	cmp	r1, r3
    77ee:	db01      	blt.n	77f4 <__tzcalc_limits+0x114>
    77f0:	3907      	subs	r1, #7
    77f2:	e7fb      	b.n	77ec <__tzcalc_limits+0x10c>
    77f4:	9a00      	ldr	r2, [sp, #0]
    77f6:	1851      	adds	r1, r2, r1
    77f8:	4b12      	ldr	r3, [pc, #72]	; (7844 <__tzcalc_limits+0x164>)
    77fa:	68e0      	ldr	r0, [r4, #12]
    77fc:	4359      	muls	r1, r3
    77fe:	6863      	ldr	r3, [r4, #4]
    7800:	18c9      	adds	r1, r1, r3
    7802:	1809      	adds	r1, r1, r0
    7804:	60a1      	str	r1, [r4, #8]
    7806:	9903      	ldr	r1, [sp, #12]
    7808:	341c      	adds	r4, #28
    780a:	3101      	adds	r1, #1
    780c:	9103      	str	r1, [sp, #12]
    780e:	2902      	cmp	r1, #2
    7810:	d19b      	bne.n	774a <__tzcalc_limits+0x6a>
    7812:	69f2      	ldr	r2, [r6, #28]
    7814:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    7816:	2301      	movs	r3, #1
    7818:	4282      	cmp	r2, r0
    781a:	db00      	blt.n	781e <__tzcalc_limits+0x13e>
    781c:	2300      	movs	r3, #0
    781e:	6033      	str	r3, [r6, #0]
    7820:	2701      	movs	r7, #1
    7822:	1c38      	adds	r0, r7, #0
    7824:	b007      	add	sp, #28
    7826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7828:	000007b1 	.word	0x000007b1
    782c:	fffff84e 	.word	0xfffff84e
    7830:	fffff84f 	.word	0xfffff84f
    7834:	fffff893 	.word	0xfffff893
    7838:	fffff9bf 	.word	0xfffff9bf
    783c:	0000a528 	.word	0x0000a528
    7840:	3fffffff 	.word	0x3fffffff
    7844:	00015180 	.word	0x00015180

00007848 <_mktm_r>:
    7848:	b5f0      	push	{r4, r5, r6, r7, lr}
    784a:	b085      	sub	sp, #20
    784c:	9203      	str	r2, [sp, #12]
    784e:	1c0c      	adds	r4, r1, #0
    7850:	9001      	str	r0, [sp, #4]
    7852:	f001 f9f7 	bl	8c44 <__gettzinfo>
    7856:	1c07      	adds	r7, r0, #0
    7858:	9801      	ldr	r0, [sp, #4]
    785a:	49a2      	ldr	r1, [pc, #648]	; (7ae4 <_mktm_r+0x29c>)
    785c:	6806      	ldr	r6, [r0, #0]
    785e:	1c30      	adds	r0, r6, #0
    7860:	f7ff fe2a 	bl	74b8 <__aeabi_idiv>
    7864:	499f      	ldr	r1, [pc, #636]	; (7ae4 <_mktm_r+0x29c>)
    7866:	1c05      	adds	r5, r0, #0
    7868:	1c30      	adds	r0, r6, #0
    786a:	f7ff fe7b 	bl	7564 <__aeabi_idivmod>
    786e:	1c0e      	adds	r6, r1, #0
    7870:	2e00      	cmp	r6, #0
    7872:	da03      	bge.n	787c <_mktm_r+0x34>
    7874:	499b      	ldr	r1, [pc, #620]	; (7ae4 <_mktm_r+0x29c>)
    7876:	3d01      	subs	r5, #1
    7878:	1876      	adds	r6, r6, r1
    787a:	e7f9      	b.n	7870 <_mktm_r+0x28>
    787c:	21e1      	movs	r1, #225	; 0xe1
    787e:	1c30      	adds	r0, r6, #0
    7880:	0109      	lsls	r1, r1, #4
    7882:	f7ff fe19 	bl	74b8 <__aeabi_idiv>
    7886:	21e1      	movs	r1, #225	; 0xe1
    7888:	60a0      	str	r0, [r4, #8]
    788a:	0109      	lsls	r1, r1, #4
    788c:	1c30      	adds	r0, r6, #0
    788e:	f7ff fe69 	bl	7564 <__aeabi_idivmod>
    7892:	1c0e      	adds	r6, r1, #0
    7894:	1c08      	adds	r0, r1, #0
    7896:	213c      	movs	r1, #60	; 0x3c
    7898:	f7ff fe0e 	bl	74b8 <__aeabi_idiv>
    789c:	213c      	movs	r1, #60	; 0x3c
    789e:	6060      	str	r0, [r4, #4]
    78a0:	1c30      	adds	r0, r6, #0
    78a2:	f7ff fe5f 	bl	7564 <__aeabi_idivmod>
    78a6:	1d28      	adds	r0, r5, #4
    78a8:	6021      	str	r1, [r4, #0]
    78aa:	2107      	movs	r1, #7
    78ac:	f7ff fe5a 	bl	7564 <__aeabi_idivmod>
    78b0:	2900      	cmp	r1, #0
    78b2:	da00      	bge.n	78b6 <_mktm_r+0x6e>
    78b4:	3107      	adds	r1, #7
    78b6:	61a1      	str	r1, [r4, #24]
    78b8:	4e8b      	ldr	r6, [pc, #556]	; (7ae8 <_mktm_r+0x2a0>)
    78ba:	2d00      	cmp	r5, #0
    78bc:	db23      	blt.n	7906 <_mktm_r+0xbe>
    78be:	07b2      	lsls	r2, r6, #30
    78c0:	d106      	bne.n	78d0 <_mktm_r+0x88>
    78c2:	1c30      	adds	r0, r6, #0
    78c4:	2164      	movs	r1, #100	; 0x64
    78c6:	f7ff fe4d 	bl	7564 <__aeabi_idivmod>
    78ca:	2301      	movs	r3, #1
    78cc:	2900      	cmp	r1, #0
    78ce:	d106      	bne.n	78de <_mktm_r+0x96>
    78d0:	21c8      	movs	r1, #200	; 0xc8
    78d2:	1c30      	adds	r0, r6, #0
    78d4:	0049      	lsls	r1, r1, #1
    78d6:	f7ff fe45 	bl	7564 <__aeabi_idivmod>
    78da:	424b      	negs	r3, r1
    78dc:	414b      	adcs	r3, r1
    78de:	4883      	ldr	r0, [pc, #524]	; (7aec <_mktm_r+0x2a4>)
    78e0:	009a      	lsls	r2, r3, #2
    78e2:	5882      	ldr	r2, [r0, r2]
    78e4:	4295      	cmp	r5, r2
    78e6:	db19      	blt.n	791c <_mktm_r+0xd4>
    78e8:	3601      	adds	r6, #1
    78ea:	1aad      	subs	r5, r5, r2
    78ec:	e7e7      	b.n	78be <_mktm_r+0x76>
    78ee:	1c30      	adds	r0, r6, #0
    78f0:	2164      	movs	r1, #100	; 0x64
    78f2:	f7ff fe37 	bl	7564 <__aeabi_idivmod>
    78f6:	2301      	movs	r3, #1
    78f8:	2900      	cmp	r1, #0
    78fa:	d007      	beq.n	790c <_mktm_r+0xc4>
    78fc:	487b      	ldr	r0, [pc, #492]	; (7aec <_mktm_r+0x2a4>)
    78fe:	009a      	lsls	r2, r3, #2
    7900:	5882      	ldr	r2, [r0, r2]
    7902:	18ad      	adds	r5, r5, r2
    7904:	d50a      	bpl.n	791c <_mktm_r+0xd4>
    7906:	3e01      	subs	r6, #1
    7908:	07b1      	lsls	r1, r6, #30
    790a:	d0f0      	beq.n	78ee <_mktm_r+0xa6>
    790c:	21c8      	movs	r1, #200	; 0xc8
    790e:	1c30      	adds	r0, r6, #0
    7910:	0049      	lsls	r1, r1, #1
    7912:	f7ff fe27 	bl	7564 <__aeabi_idivmod>
    7916:	424b      	negs	r3, r1
    7918:	414b      	adcs	r3, r1
    791a:	e7ef      	b.n	78fc <_mktm_r+0xb4>
    791c:	4974      	ldr	r1, [pc, #464]	; (7af0 <_mktm_r+0x2a8>)
    791e:	61e5      	str	r5, [r4, #28]
    7920:	1872      	adds	r2, r6, r1
    7922:	6162      	str	r2, [r4, #20]
    7924:	2230      	movs	r2, #48	; 0x30
    7926:	4353      	muls	r3, r2
    7928:	4a72      	ldr	r2, [pc, #456]	; (7af4 <_mktm_r+0x2ac>)
    792a:	18d3      	adds	r3, r2, r3
    792c:	9302      	str	r3, [sp, #8]
    792e:	2300      	movs	r3, #0
    7930:	6123      	str	r3, [r4, #16]
    7932:	6922      	ldr	r2, [r4, #16]
    7934:	9802      	ldr	r0, [sp, #8]
    7936:	0093      	lsls	r3, r2, #2
    7938:	581b      	ldr	r3, [r3, r0]
    793a:	429d      	cmp	r5, r3
    793c:	db03      	blt.n	7946 <_mktm_r+0xfe>
    793e:	3201      	adds	r2, #1
    7940:	1aed      	subs	r5, r5, r3
    7942:	6122      	str	r2, [r4, #16]
    7944:	e7f5      	b.n	7932 <_mktm_r+0xea>
    7946:	9903      	ldr	r1, [sp, #12]
    7948:	3501      	adds	r5, #1
    794a:	60e5      	str	r5, [r4, #12]
    794c:	2900      	cmp	r1, #0
    794e:	d000      	beq.n	7952 <_mktm_r+0x10a>
    7950:	e0c3      	b.n	7ada <_mktm_r+0x292>
    7952:	f000 fc39 	bl	81c8 <__tz_lock>
    7956:	4b68      	ldr	r3, [pc, #416]	; (7af8 <_mktm_r+0x2b0>)
    7958:	681b      	ldr	r3, [r3, #0]
    795a:	2b00      	cmp	r3, #0
    795c:	d023      	beq.n	79a6 <_mktm_r+0x15e>
    795e:	687a      	ldr	r2, [r7, #4]
    7960:	4296      	cmp	r6, r2
    7962:	d106      	bne.n	7972 <_mktm_r+0x12a>
    7964:	9b01      	ldr	r3, [sp, #4]
    7966:	6839      	ldr	r1, [r7, #0]
    7968:	681a      	ldr	r2, [r3, #0]
    796a:	69f8      	ldr	r0, [r7, #28]
    796c:	2900      	cmp	r1, #0
    796e:	d108      	bne.n	7982 <_mktm_r+0x13a>
    7970:	e010      	b.n	7994 <_mktm_r+0x14c>
    7972:	1c30      	adds	r0, r6, #0
    7974:	f7ff feb4 	bl	76e0 <__tzcalc_limits>
    7978:	2800      	cmp	r0, #0
    797a:	d1f3      	bne.n	7964 <_mktm_r+0x11c>
    797c:	2301      	movs	r3, #1
    797e:	425b      	negs	r3, r3
    7980:	e00f      	b.n	79a2 <_mktm_r+0x15a>
    7982:	2300      	movs	r3, #0
    7984:	4282      	cmp	r2, r0
    7986:	db0c      	blt.n	79a2 <_mktm_r+0x15a>
    7988:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    798a:	2101      	movs	r1, #1
    798c:	4282      	cmp	r2, r0
    798e:	db07      	blt.n	79a0 <_mktm_r+0x158>
    7990:	1c19      	adds	r1, r3, #0
    7992:	e005      	b.n	79a0 <_mktm_r+0x158>
    7994:	2301      	movs	r3, #1
    7996:	4282      	cmp	r2, r0
    7998:	da03      	bge.n	79a2 <_mktm_r+0x15a>
    799a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    799c:	4282      	cmp	r2, r0
    799e:	db00      	blt.n	79a2 <_mktm_r+0x15a>
    79a0:	1c0b      	adds	r3, r1, #0
    79a2:	6223      	str	r3, [r4, #32]
    79a4:	e001      	b.n	79aa <_mktm_r+0x162>
    79a6:	9903      	ldr	r1, [sp, #12]
    79a8:	6221      	str	r1, [r4, #32]
    79aa:	6a22      	ldr	r2, [r4, #32]
    79ac:	2a01      	cmp	r2, #1
    79ae:	d101      	bne.n	79b4 <_mktm_r+0x16c>
    79b0:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    79b2:	e000      	b.n	79b6 <_mktm_r+0x16e>
    79b4:	6a3e      	ldr	r6, [r7, #32]
    79b6:	21e1      	movs	r1, #225	; 0xe1
    79b8:	1c30      	adds	r0, r6, #0
    79ba:	0109      	lsls	r1, r1, #4
    79bc:	f7ff fdd2 	bl	7564 <__aeabi_idivmod>
    79c0:	1c0f      	adds	r7, r1, #0
    79c2:	1c08      	adds	r0, r1, #0
    79c4:	213c      	movs	r1, #60	; 0x3c
    79c6:	f7ff fdcd 	bl	7564 <__aeabi_idivmod>
    79ca:	6823      	ldr	r3, [r4, #0]
    79cc:	1c38      	adds	r0, r7, #0
    79ce:	1a5d      	subs	r5, r3, r1
    79d0:	6025      	str	r5, [r4, #0]
    79d2:	213c      	movs	r1, #60	; 0x3c
    79d4:	f7ff fd70 	bl	74b8 <__aeabi_idiv>
    79d8:	6861      	ldr	r1, [r4, #4]
    79da:	1a0f      	subs	r7, r1, r0
    79dc:	21e1      	movs	r1, #225	; 0xe1
    79de:	6067      	str	r7, [r4, #4]
    79e0:	1c30      	adds	r0, r6, #0
    79e2:	0109      	lsls	r1, r1, #4
    79e4:	f7ff fd68 	bl	74b8 <__aeabi_idiv>
    79e8:	68a2      	ldr	r2, [r4, #8]
    79ea:	1a10      	subs	r0, r2, r0
    79ec:	60a0      	str	r0, [r4, #8]
    79ee:	2d3b      	cmp	r5, #59	; 0x3b
    79f0:	dd03      	ble.n	79fa <_mktm_r+0x1b2>
    79f2:	3701      	adds	r7, #1
    79f4:	6067      	str	r7, [r4, #4]
    79f6:	3d3c      	subs	r5, #60	; 0x3c
    79f8:	e004      	b.n	7a04 <_mktm_r+0x1bc>
    79fa:	2d00      	cmp	r5, #0
    79fc:	da03      	bge.n	7a06 <_mktm_r+0x1be>
    79fe:	3f01      	subs	r7, #1
    7a00:	6067      	str	r7, [r4, #4]
    7a02:	353c      	adds	r5, #60	; 0x3c
    7a04:	6025      	str	r5, [r4, #0]
    7a06:	6863      	ldr	r3, [r4, #4]
    7a08:	2b3b      	cmp	r3, #59	; 0x3b
    7a0a:	dd03      	ble.n	7a14 <_mktm_r+0x1cc>
    7a0c:	3001      	adds	r0, #1
    7a0e:	60a0      	str	r0, [r4, #8]
    7a10:	3b3c      	subs	r3, #60	; 0x3c
    7a12:	e004      	b.n	7a1e <_mktm_r+0x1d6>
    7a14:	2b00      	cmp	r3, #0
    7a16:	da03      	bge.n	7a20 <_mktm_r+0x1d8>
    7a18:	3801      	subs	r0, #1
    7a1a:	60a0      	str	r0, [r4, #8]
    7a1c:	333c      	adds	r3, #60	; 0x3c
    7a1e:	6063      	str	r3, [r4, #4]
    7a20:	68a3      	ldr	r3, [r4, #8]
    7a22:	2b17      	cmp	r3, #23
    7a24:	dd21      	ble.n	7a6a <_mktm_r+0x222>
    7a26:	69e2      	ldr	r2, [r4, #28]
    7a28:	3201      	adds	r2, #1
    7a2a:	61e2      	str	r2, [r4, #28]
    7a2c:	69a2      	ldr	r2, [r4, #24]
    7a2e:	3201      	adds	r2, #1
    7a30:	2a06      	cmp	r2, #6
    7a32:	dd00      	ble.n	7a36 <_mktm_r+0x1ee>
    7a34:	2200      	movs	r2, #0
    7a36:	61a2      	str	r2, [r4, #24]
    7a38:	3b18      	subs	r3, #24
    7a3a:	68e2      	ldr	r2, [r4, #12]
    7a3c:	60a3      	str	r3, [r4, #8]
    7a3e:	6923      	ldr	r3, [r4, #16]
    7a40:	3201      	adds	r2, #1
    7a42:	9802      	ldr	r0, [sp, #8]
    7a44:	60e2      	str	r2, [r4, #12]
    7a46:	0099      	lsls	r1, r3, #2
    7a48:	5809      	ldr	r1, [r1, r0]
    7a4a:	428a      	cmp	r2, r1
    7a4c:	dd42      	ble.n	7ad4 <_mktm_r+0x28c>
    7a4e:	1a52      	subs	r2, r2, r1
    7a50:	3301      	adds	r3, #1
    7a52:	60e2      	str	r2, [r4, #12]
    7a54:	2b0c      	cmp	r3, #12
    7a56:	d001      	beq.n	7a5c <_mktm_r+0x214>
    7a58:	6123      	str	r3, [r4, #16]
    7a5a:	e03b      	b.n	7ad4 <_mktm_r+0x28c>
    7a5c:	6962      	ldr	r2, [r4, #20]
    7a5e:	2300      	movs	r3, #0
    7a60:	3201      	adds	r2, #1
    7a62:	6123      	str	r3, [r4, #16]
    7a64:	6162      	str	r2, [r4, #20]
    7a66:	61e3      	str	r3, [r4, #28]
    7a68:	e034      	b.n	7ad4 <_mktm_r+0x28c>
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	da32      	bge.n	7ad4 <_mktm_r+0x28c>
    7a6e:	69e2      	ldr	r2, [r4, #28]
    7a70:	3a01      	subs	r2, #1
    7a72:	61e2      	str	r2, [r4, #28]
    7a74:	69a2      	ldr	r2, [r4, #24]
    7a76:	3a01      	subs	r2, #1
    7a78:	d500      	bpl.n	7a7c <_mktm_r+0x234>
    7a7a:	2206      	movs	r2, #6
    7a7c:	61a2      	str	r2, [r4, #24]
    7a7e:	68e2      	ldr	r2, [r4, #12]
    7a80:	3318      	adds	r3, #24
    7a82:	3a01      	subs	r2, #1
    7a84:	60e2      	str	r2, [r4, #12]
    7a86:	60a3      	str	r3, [r4, #8]
    7a88:	2a00      	cmp	r2, #0
    7a8a:	d123      	bne.n	7ad4 <_mktm_r+0x28c>
    7a8c:	6923      	ldr	r3, [r4, #16]
    7a8e:	3b01      	subs	r3, #1
    7a90:	d401      	bmi.n	7a96 <_mktm_r+0x24e>
    7a92:	6123      	str	r3, [r4, #16]
    7a94:	e019      	b.n	7aca <_mktm_r+0x282>
    7a96:	6965      	ldr	r5, [r4, #20]
    7a98:	230b      	movs	r3, #11
    7a9a:	4918      	ldr	r1, [pc, #96]	; (7afc <_mktm_r+0x2b4>)
    7a9c:	6123      	str	r3, [r4, #16]
    7a9e:	1e6b      	subs	r3, r5, #1
    7aa0:	6163      	str	r3, [r4, #20]
    7aa2:	186d      	adds	r5, r5, r1
    7aa4:	079a      	lsls	r2, r3, #30
    7aa6:	d106      	bne.n	7ab6 <_mktm_r+0x26e>
    7aa8:	1c28      	adds	r0, r5, #0
    7aaa:	2164      	movs	r1, #100	; 0x64
    7aac:	f7ff fd5a 	bl	7564 <__aeabi_idivmod>
    7ab0:	2301      	movs	r3, #1
    7ab2:	2900      	cmp	r1, #0
    7ab4:	d106      	bne.n	7ac4 <_mktm_r+0x27c>
    7ab6:	21c8      	movs	r1, #200	; 0xc8
    7ab8:	1c28      	adds	r0, r5, #0
    7aba:	0049      	lsls	r1, r1, #1
    7abc:	f7ff fd52 	bl	7564 <__aeabi_idivmod>
    7ac0:	424b      	negs	r3, r1
    7ac2:	414b      	adcs	r3, r1
    7ac4:	336d      	adds	r3, #109	; 0x6d
    7ac6:	33ff      	adds	r3, #255	; 0xff
    7ac8:	61e3      	str	r3, [r4, #28]
    7aca:	6920      	ldr	r0, [r4, #16]
    7acc:	9902      	ldr	r1, [sp, #8]
    7ace:	0083      	lsls	r3, r0, #2
    7ad0:	585b      	ldr	r3, [r3, r1]
    7ad2:	60e3      	str	r3, [r4, #12]
    7ad4:	f000 fb79 	bl	81ca <__tz_unlock>
    7ad8:	e001      	b.n	7ade <_mktm_r+0x296>
    7ada:	2300      	movs	r3, #0
    7adc:	6223      	str	r3, [r4, #32]
    7ade:	1c20      	adds	r0, r4, #0
    7ae0:	b005      	add	sp, #20
    7ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ae4:	00015180 	.word	0x00015180
    7ae8:	000007b2 	.word	0x000007b2
    7aec:	0000a588 	.word	0x0000a588
    7af0:	fffff894 	.word	0xfffff894
    7af4:	0000a528 	.word	0x0000a528
    7af8:	200008e0 	.word	0x200008e0
    7afc:	0000076b 	.word	0x0000076b

00007b00 <_free_r>:
    7b00:	b530      	push	{r4, r5, lr}
    7b02:	2900      	cmp	r1, #0
    7b04:	d040      	beq.n	7b88 <_free_r+0x88>
    7b06:	3904      	subs	r1, #4
    7b08:	680b      	ldr	r3, [r1, #0]
    7b0a:	2b00      	cmp	r3, #0
    7b0c:	da00      	bge.n	7b10 <_free_r+0x10>
    7b0e:	18c9      	adds	r1, r1, r3
    7b10:	4a1e      	ldr	r2, [pc, #120]	; (7b8c <_free_r+0x8c>)
    7b12:	6813      	ldr	r3, [r2, #0]
    7b14:	1c14      	adds	r4, r2, #0
    7b16:	2b00      	cmp	r3, #0
    7b18:	d102      	bne.n	7b20 <_free_r+0x20>
    7b1a:	604b      	str	r3, [r1, #4]
    7b1c:	6011      	str	r1, [r2, #0]
    7b1e:	e033      	b.n	7b88 <_free_r+0x88>
    7b20:	4299      	cmp	r1, r3
    7b22:	d20f      	bcs.n	7b44 <_free_r+0x44>
    7b24:	6808      	ldr	r0, [r1, #0]
    7b26:	180a      	adds	r2, r1, r0
    7b28:	429a      	cmp	r2, r3
    7b2a:	d105      	bne.n	7b38 <_free_r+0x38>
    7b2c:	6813      	ldr	r3, [r2, #0]
    7b2e:	6852      	ldr	r2, [r2, #4]
    7b30:	18c0      	adds	r0, r0, r3
    7b32:	6008      	str	r0, [r1, #0]
    7b34:	604a      	str	r2, [r1, #4]
    7b36:	e000      	b.n	7b3a <_free_r+0x3a>
    7b38:	604b      	str	r3, [r1, #4]
    7b3a:	6021      	str	r1, [r4, #0]
    7b3c:	e024      	b.n	7b88 <_free_r+0x88>
    7b3e:	428a      	cmp	r2, r1
    7b40:	d803      	bhi.n	7b4a <_free_r+0x4a>
    7b42:	1c13      	adds	r3, r2, #0
    7b44:	685a      	ldr	r2, [r3, #4]
    7b46:	2a00      	cmp	r2, #0
    7b48:	d1f9      	bne.n	7b3e <_free_r+0x3e>
    7b4a:	681d      	ldr	r5, [r3, #0]
    7b4c:	195c      	adds	r4, r3, r5
    7b4e:	428c      	cmp	r4, r1
    7b50:	d10b      	bne.n	7b6a <_free_r+0x6a>
    7b52:	6809      	ldr	r1, [r1, #0]
    7b54:	1869      	adds	r1, r5, r1
    7b56:	1858      	adds	r0, r3, r1
    7b58:	6019      	str	r1, [r3, #0]
    7b5a:	4290      	cmp	r0, r2
    7b5c:	d114      	bne.n	7b88 <_free_r+0x88>
    7b5e:	6814      	ldr	r4, [r2, #0]
    7b60:	6852      	ldr	r2, [r2, #4]
    7b62:	1909      	adds	r1, r1, r4
    7b64:	6019      	str	r1, [r3, #0]
    7b66:	605a      	str	r2, [r3, #4]
    7b68:	e00e      	b.n	7b88 <_free_r+0x88>
    7b6a:	428c      	cmp	r4, r1
    7b6c:	d902      	bls.n	7b74 <_free_r+0x74>
    7b6e:	230c      	movs	r3, #12
    7b70:	6003      	str	r3, [r0, #0]
    7b72:	e009      	b.n	7b88 <_free_r+0x88>
    7b74:	6808      	ldr	r0, [r1, #0]
    7b76:	180c      	adds	r4, r1, r0
    7b78:	4294      	cmp	r4, r2
    7b7a:	d103      	bne.n	7b84 <_free_r+0x84>
    7b7c:	6814      	ldr	r4, [r2, #0]
    7b7e:	6852      	ldr	r2, [r2, #4]
    7b80:	1900      	adds	r0, r0, r4
    7b82:	6008      	str	r0, [r1, #0]
    7b84:	604a      	str	r2, [r1, #4]
    7b86:	6059      	str	r1, [r3, #4]
    7b88:	bd30      	pop	{r4, r5, pc}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	200008dc 	.word	0x200008dc

00007b90 <_malloc_r>:
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	2303      	movs	r3, #3
    7b94:	1ccd      	adds	r5, r1, #3
    7b96:	439d      	bics	r5, r3
    7b98:	3508      	adds	r5, #8
    7b9a:	1c06      	adds	r6, r0, #0
    7b9c:	2d0c      	cmp	r5, #12
    7b9e:	d201      	bcs.n	7ba4 <_malloc_r+0x14>
    7ba0:	250c      	movs	r5, #12
    7ba2:	e001      	b.n	7ba8 <_malloc_r+0x18>
    7ba4:	2d00      	cmp	r5, #0
    7ba6:	db3f      	blt.n	7c28 <_malloc_r+0x98>
    7ba8:	428d      	cmp	r5, r1
    7baa:	d33d      	bcc.n	7c28 <_malloc_r+0x98>
    7bac:	4b20      	ldr	r3, [pc, #128]	; (7c30 <_malloc_r+0xa0>)
    7bae:	681c      	ldr	r4, [r3, #0]
    7bb0:	1c1a      	adds	r2, r3, #0
    7bb2:	1c21      	adds	r1, r4, #0
    7bb4:	2900      	cmp	r1, #0
    7bb6:	d013      	beq.n	7be0 <_malloc_r+0x50>
    7bb8:	6808      	ldr	r0, [r1, #0]
    7bba:	1b43      	subs	r3, r0, r5
    7bbc:	d40d      	bmi.n	7bda <_malloc_r+0x4a>
    7bbe:	2b0b      	cmp	r3, #11
    7bc0:	d902      	bls.n	7bc8 <_malloc_r+0x38>
    7bc2:	600b      	str	r3, [r1, #0]
    7bc4:	18cc      	adds	r4, r1, r3
    7bc6:	e01e      	b.n	7c06 <_malloc_r+0x76>
    7bc8:	428c      	cmp	r4, r1
    7bca:	d102      	bne.n	7bd2 <_malloc_r+0x42>
    7bcc:	6863      	ldr	r3, [r4, #4]
    7bce:	6013      	str	r3, [r2, #0]
    7bd0:	e01a      	b.n	7c08 <_malloc_r+0x78>
    7bd2:	6848      	ldr	r0, [r1, #4]
    7bd4:	6060      	str	r0, [r4, #4]
    7bd6:	1c0c      	adds	r4, r1, #0
    7bd8:	e016      	b.n	7c08 <_malloc_r+0x78>
    7bda:	1c0c      	adds	r4, r1, #0
    7bdc:	6849      	ldr	r1, [r1, #4]
    7bde:	e7e9      	b.n	7bb4 <_malloc_r+0x24>
    7be0:	4c14      	ldr	r4, [pc, #80]	; (7c34 <_malloc_r+0xa4>)
    7be2:	6820      	ldr	r0, [r4, #0]
    7be4:	2800      	cmp	r0, #0
    7be6:	d103      	bne.n	7bf0 <_malloc_r+0x60>
    7be8:	1c30      	adds	r0, r6, #0
    7bea:	f000 f8bf 	bl	7d6c <_sbrk_r>
    7bee:	6020      	str	r0, [r4, #0]
    7bf0:	1c30      	adds	r0, r6, #0
    7bf2:	1c29      	adds	r1, r5, #0
    7bf4:	f000 f8ba 	bl	7d6c <_sbrk_r>
    7bf8:	1c43      	adds	r3, r0, #1
    7bfa:	d015      	beq.n	7c28 <_malloc_r+0x98>
    7bfc:	1cc4      	adds	r4, r0, #3
    7bfe:	2303      	movs	r3, #3
    7c00:	439c      	bics	r4, r3
    7c02:	4284      	cmp	r4, r0
    7c04:	d10a      	bne.n	7c1c <_malloc_r+0x8c>
    7c06:	6025      	str	r5, [r4, #0]
    7c08:	1c20      	adds	r0, r4, #0
    7c0a:	300b      	adds	r0, #11
    7c0c:	2207      	movs	r2, #7
    7c0e:	1d23      	adds	r3, r4, #4
    7c10:	4390      	bics	r0, r2
    7c12:	1ac3      	subs	r3, r0, r3
    7c14:	d00b      	beq.n	7c2e <_malloc_r+0x9e>
    7c16:	425a      	negs	r2, r3
    7c18:	50e2      	str	r2, [r4, r3]
    7c1a:	e008      	b.n	7c2e <_malloc_r+0x9e>
    7c1c:	1a21      	subs	r1, r4, r0
    7c1e:	1c30      	adds	r0, r6, #0
    7c20:	f000 f8a4 	bl	7d6c <_sbrk_r>
    7c24:	3001      	adds	r0, #1
    7c26:	d1ee      	bne.n	7c06 <_malloc_r+0x76>
    7c28:	230c      	movs	r3, #12
    7c2a:	6033      	str	r3, [r6, #0]
    7c2c:	2000      	movs	r0, #0
    7c2e:	bd70      	pop	{r4, r5, r6, pc}
    7c30:	200008dc 	.word	0x200008dc
    7c34:	200008d8 	.word	0x200008d8

00007c38 <iprintf>:
    7c38:	b40f      	push	{r0, r1, r2, r3}
    7c3a:	4b0b      	ldr	r3, [pc, #44]	; (7c68 <iprintf+0x30>)
    7c3c:	b513      	push	{r0, r1, r4, lr}
    7c3e:	681c      	ldr	r4, [r3, #0]
    7c40:	2c00      	cmp	r4, #0
    7c42:	d005      	beq.n	7c50 <iprintf+0x18>
    7c44:	69a3      	ldr	r3, [r4, #24]
    7c46:	2b00      	cmp	r3, #0
    7c48:	d102      	bne.n	7c50 <iprintf+0x18>
    7c4a:	1c20      	adds	r0, r4, #0
    7c4c:	f000 ff8a 	bl	8b64 <__sinit>
    7c50:	ab05      	add	r3, sp, #20
    7c52:	68a1      	ldr	r1, [r4, #8]
    7c54:	1c20      	adds	r0, r4, #0
    7c56:	9a04      	ldr	r2, [sp, #16]
    7c58:	9301      	str	r3, [sp, #4]
    7c5a:	f000 fadf 	bl	821c <_vfiprintf_r>
    7c5e:	bc16      	pop	{r1, r2, r4}
    7c60:	bc08      	pop	{r3}
    7c62:	b004      	add	sp, #16
    7c64:	4718      	bx	r3
    7c66:	46c0      	nop			; (mov r8, r8)
    7c68:	20000078 	.word	0x20000078

00007c6c <putchar>:
    7c6c:	b538      	push	{r3, r4, r5, lr}
    7c6e:	4b08      	ldr	r3, [pc, #32]	; (7c90 <putchar+0x24>)
    7c70:	1c05      	adds	r5, r0, #0
    7c72:	681c      	ldr	r4, [r3, #0]
    7c74:	2c00      	cmp	r4, #0
    7c76:	d005      	beq.n	7c84 <putchar+0x18>
    7c78:	69a3      	ldr	r3, [r4, #24]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d102      	bne.n	7c84 <putchar+0x18>
    7c7e:	1c20      	adds	r0, r4, #0
    7c80:	f000 ff70 	bl	8b64 <__sinit>
    7c84:	1c29      	adds	r1, r5, #0
    7c86:	68a2      	ldr	r2, [r4, #8]
    7c88:	1c20      	adds	r0, r4, #0
    7c8a:	f001 f861 	bl	8d50 <_putc_r>
    7c8e:	bd38      	pop	{r3, r4, r5, pc}
    7c90:	20000078 	.word	0x20000078

00007c94 <_puts_r>:
    7c94:	b570      	push	{r4, r5, r6, lr}
    7c96:	1c05      	adds	r5, r0, #0
    7c98:	1c0e      	adds	r6, r1, #0
    7c9a:	2800      	cmp	r0, #0
    7c9c:	d004      	beq.n	7ca8 <_puts_r+0x14>
    7c9e:	6982      	ldr	r2, [r0, #24]
    7ca0:	2a00      	cmp	r2, #0
    7ca2:	d101      	bne.n	7ca8 <_puts_r+0x14>
    7ca4:	f000 ff5e 	bl	8b64 <__sinit>
    7ca8:	68ac      	ldr	r4, [r5, #8]
    7caa:	89a3      	ldrh	r3, [r4, #12]
    7cac:	071a      	lsls	r2, r3, #28
    7cae:	d502      	bpl.n	7cb6 <_puts_r+0x22>
    7cb0:	6923      	ldr	r3, [r4, #16]
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	d119      	bne.n	7cea <_puts_r+0x56>
    7cb6:	1c28      	adds	r0, r5, #0
    7cb8:	1c21      	adds	r1, r4, #0
    7cba:	f000 fd99 	bl	87f0 <__swsetup_r>
    7cbe:	2800      	cmp	r0, #0
    7cc0:	d013      	beq.n	7cea <_puts_r+0x56>
    7cc2:	2001      	movs	r0, #1
    7cc4:	4240      	negs	r0, r0
    7cc6:	e045      	b.n	7d54 <_puts_r+0xc0>
    7cc8:	7831      	ldrb	r1, [r6, #0]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	da1b      	bge.n	7d06 <_puts_r+0x72>
    7cce:	69a2      	ldr	r2, [r4, #24]
    7cd0:	4293      	cmp	r3, r2
    7cd2:	da11      	bge.n	7cf8 <_puts_r+0x64>
    7cd4:	1c28      	adds	r0, r5, #0
    7cd6:	1c22      	adds	r2, r4, #0
    7cd8:	f000 fd32 	bl	8740 <__swbuf_r>
    7cdc:	3001      	adds	r0, #1
    7cde:	4243      	negs	r3, r0
    7ce0:	4158      	adcs	r0, r3
    7ce2:	b2c0      	uxtb	r0, r0
    7ce4:	2800      	cmp	r0, #0
    7ce6:	d1ec      	bne.n	7cc2 <_puts_r+0x2e>
    7ce8:	3601      	adds	r6, #1
    7cea:	68a3      	ldr	r3, [r4, #8]
    7cec:	7832      	ldrb	r2, [r6, #0]
    7cee:	3b01      	subs	r3, #1
    7cf0:	60a3      	str	r3, [r4, #8]
    7cf2:	2a00      	cmp	r2, #0
    7cf4:	d1e8      	bne.n	7cc8 <_puts_r+0x34>
    7cf6:	e00c      	b.n	7d12 <_puts_r+0x7e>
    7cf8:	6823      	ldr	r3, [r4, #0]
    7cfa:	7019      	strb	r1, [r3, #0]
    7cfc:	6823      	ldr	r3, [r4, #0]
    7cfe:	7819      	ldrb	r1, [r3, #0]
    7d00:	290a      	cmp	r1, #10
    7d02:	d103      	bne.n	7d0c <_puts_r+0x78>
    7d04:	e7e6      	b.n	7cd4 <_puts_r+0x40>
    7d06:	6822      	ldr	r2, [r4, #0]
    7d08:	7011      	strb	r1, [r2, #0]
    7d0a:	6823      	ldr	r3, [r4, #0]
    7d0c:	3301      	adds	r3, #1
    7d0e:	6023      	str	r3, [r4, #0]
    7d10:	e7ea      	b.n	7ce8 <_puts_r+0x54>
    7d12:	2b00      	cmp	r3, #0
    7d14:	da17      	bge.n	7d46 <_puts_r+0xb2>
    7d16:	69a2      	ldr	r2, [r4, #24]
    7d18:	4293      	cmp	r3, r2
    7d1a:	db08      	blt.n	7d2e <_puts_r+0x9a>
    7d1c:	6822      	ldr	r2, [r4, #0]
    7d1e:	230a      	movs	r3, #10
    7d20:	7013      	strb	r3, [r2, #0]
    7d22:	6823      	ldr	r3, [r4, #0]
    7d24:	7819      	ldrb	r1, [r3, #0]
    7d26:	290a      	cmp	r1, #10
    7d28:	d111      	bne.n	7d4e <_puts_r+0xba>
    7d2a:	1c28      	adds	r0, r5, #0
    7d2c:	e001      	b.n	7d32 <_puts_r+0x9e>
    7d2e:	1c28      	adds	r0, r5, #0
    7d30:	210a      	movs	r1, #10
    7d32:	1c22      	adds	r2, r4, #0
    7d34:	f000 fd04 	bl	8740 <__swbuf_r>
    7d38:	3001      	adds	r0, #1
    7d3a:	4243      	negs	r3, r0
    7d3c:	4158      	adcs	r0, r3
    7d3e:	b2c0      	uxtb	r0, r0
    7d40:	2800      	cmp	r0, #0
    7d42:	d006      	beq.n	7d52 <_puts_r+0xbe>
    7d44:	e7bd      	b.n	7cc2 <_puts_r+0x2e>
    7d46:	6822      	ldr	r2, [r4, #0]
    7d48:	230a      	movs	r3, #10
    7d4a:	7013      	strb	r3, [r2, #0]
    7d4c:	6823      	ldr	r3, [r4, #0]
    7d4e:	3301      	adds	r3, #1
    7d50:	6023      	str	r3, [r4, #0]
    7d52:	200a      	movs	r0, #10
    7d54:	bd70      	pop	{r4, r5, r6, pc}
	...

00007d58 <puts>:
    7d58:	b508      	push	{r3, lr}
    7d5a:	4b03      	ldr	r3, [pc, #12]	; (7d68 <puts+0x10>)
    7d5c:	1c01      	adds	r1, r0, #0
    7d5e:	6818      	ldr	r0, [r3, #0]
    7d60:	f7ff ff98 	bl	7c94 <_puts_r>
    7d64:	bd08      	pop	{r3, pc}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	20000078 	.word	0x20000078

00007d6c <_sbrk_r>:
    7d6c:	b538      	push	{r3, r4, r5, lr}
    7d6e:	4c07      	ldr	r4, [pc, #28]	; (7d8c <_sbrk_r+0x20>)
    7d70:	2300      	movs	r3, #0
    7d72:	1c05      	adds	r5, r0, #0
    7d74:	1c08      	adds	r0, r1, #0
    7d76:	6023      	str	r3, [r4, #0]
    7d78:	f7fe fb04 	bl	6384 <_sbrk>
    7d7c:	1c43      	adds	r3, r0, #1
    7d7e:	d103      	bne.n	7d88 <_sbrk_r+0x1c>
    7d80:	6823      	ldr	r3, [r4, #0]
    7d82:	2b00      	cmp	r3, #0
    7d84:	d000      	beq.n	7d88 <_sbrk_r+0x1c>
    7d86:	602b      	str	r3, [r5, #0]
    7d88:	bd38      	pop	{r3, r4, r5, pc}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	20000bf8 	.word	0x20000bf8

00007d90 <setbuf>:
    7d90:	b508      	push	{r3, lr}
    7d92:	424a      	negs	r2, r1
    7d94:	414a      	adcs	r2, r1
    7d96:	2380      	movs	r3, #128	; 0x80
    7d98:	0052      	lsls	r2, r2, #1
    7d9a:	00db      	lsls	r3, r3, #3
    7d9c:	f000 f802 	bl	7da4 <setvbuf>
    7da0:	bd08      	pop	{r3, pc}
	...

00007da4 <setvbuf>:
    7da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7da6:	1c1e      	adds	r6, r3, #0
    7da8:	4b3c      	ldr	r3, [pc, #240]	; (7e9c <setvbuf+0xf8>)
    7daa:	1c04      	adds	r4, r0, #0
    7dac:	681d      	ldr	r5, [r3, #0]
    7dae:	1c0f      	adds	r7, r1, #0
    7db0:	9201      	str	r2, [sp, #4]
    7db2:	2d00      	cmp	r5, #0
    7db4:	d005      	beq.n	7dc2 <setvbuf+0x1e>
    7db6:	69aa      	ldr	r2, [r5, #24]
    7db8:	2a00      	cmp	r2, #0
    7dba:	d102      	bne.n	7dc2 <setvbuf+0x1e>
    7dbc:	1c28      	adds	r0, r5, #0
    7dbe:	f000 fed1 	bl	8b64 <__sinit>
    7dc2:	4b37      	ldr	r3, [pc, #220]	; (7ea0 <setvbuf+0xfc>)
    7dc4:	429c      	cmp	r4, r3
    7dc6:	d101      	bne.n	7dcc <setvbuf+0x28>
    7dc8:	686c      	ldr	r4, [r5, #4]
    7dca:	e008      	b.n	7dde <setvbuf+0x3a>
    7dcc:	4b35      	ldr	r3, [pc, #212]	; (7ea4 <setvbuf+0x100>)
    7dce:	429c      	cmp	r4, r3
    7dd0:	d101      	bne.n	7dd6 <setvbuf+0x32>
    7dd2:	68ac      	ldr	r4, [r5, #8]
    7dd4:	e003      	b.n	7dde <setvbuf+0x3a>
    7dd6:	4b34      	ldr	r3, [pc, #208]	; (7ea8 <setvbuf+0x104>)
    7dd8:	429c      	cmp	r4, r3
    7dda:	d100      	bne.n	7dde <setvbuf+0x3a>
    7ddc:	68ec      	ldr	r4, [r5, #12]
    7dde:	9b01      	ldr	r3, [sp, #4]
    7de0:	2b02      	cmp	r3, #2
    7de2:	d857      	bhi.n	7e94 <setvbuf+0xf0>
    7de4:	2e00      	cmp	r6, #0
    7de6:	db55      	blt.n	7e94 <setvbuf+0xf0>
    7de8:	1c28      	adds	r0, r5, #0
    7dea:	1c21      	adds	r1, r4, #0
    7dec:	f000 fe3a 	bl	8a64 <_fflush_r>
    7df0:	2300      	movs	r3, #0
    7df2:	6063      	str	r3, [r4, #4]
    7df4:	61a3      	str	r3, [r4, #24]
    7df6:	89a3      	ldrh	r3, [r4, #12]
    7df8:	061a      	lsls	r2, r3, #24
    7dfa:	d503      	bpl.n	7e04 <setvbuf+0x60>
    7dfc:	1c28      	adds	r0, r5, #0
    7dfe:	6921      	ldr	r1, [r4, #16]
    7e00:	f7ff fe7e 	bl	7b00 <_free_r>
    7e04:	89a3      	ldrh	r3, [r4, #12]
    7e06:	2283      	movs	r2, #131	; 0x83
    7e08:	4393      	bics	r3, r2
    7e0a:	81a3      	strh	r3, [r4, #12]
    7e0c:	9b01      	ldr	r3, [sp, #4]
    7e0e:	2b02      	cmp	r3, #2
    7e10:	d013      	beq.n	7e3a <setvbuf+0x96>
    7e12:	2f00      	cmp	r7, #0
    7e14:	d125      	bne.n	7e62 <setvbuf+0xbe>
    7e16:	2e00      	cmp	r6, #0
    7e18:	d101      	bne.n	7e1e <setvbuf+0x7a>
    7e1a:	2680      	movs	r6, #128	; 0x80
    7e1c:	00f6      	lsls	r6, r6, #3
    7e1e:	1c30      	adds	r0, r6, #0
    7e20:	f7ff fc2a 	bl	7678 <malloc>
    7e24:	1e07      	subs	r7, r0, #0
    7e26:	d118      	bne.n	7e5a <setvbuf+0xb6>
    7e28:	2080      	movs	r0, #128	; 0x80
    7e2a:	00c0      	lsls	r0, r0, #3
    7e2c:	f7ff fc24 	bl	7678 <malloc>
    7e30:	1e07      	subs	r7, r0, #0
    7e32:	d110      	bne.n	7e56 <setvbuf+0xb2>
    7e34:	2001      	movs	r0, #1
    7e36:	4240      	negs	r0, r0
    7e38:	e000      	b.n	7e3c <setvbuf+0x98>
    7e3a:	2000      	movs	r0, #0
    7e3c:	89a3      	ldrh	r3, [r4, #12]
    7e3e:	2202      	movs	r2, #2
    7e40:	4313      	orrs	r3, r2
    7e42:	81a3      	strh	r3, [r4, #12]
    7e44:	2300      	movs	r3, #0
    7e46:	60a3      	str	r3, [r4, #8]
    7e48:	1c23      	adds	r3, r4, #0
    7e4a:	3347      	adds	r3, #71	; 0x47
    7e4c:	6023      	str	r3, [r4, #0]
    7e4e:	6123      	str	r3, [r4, #16]
    7e50:	2301      	movs	r3, #1
    7e52:	6163      	str	r3, [r4, #20]
    7e54:	e020      	b.n	7e98 <setvbuf+0xf4>
    7e56:	2680      	movs	r6, #128	; 0x80
    7e58:	00f6      	lsls	r6, r6, #3
    7e5a:	89a3      	ldrh	r3, [r4, #12]
    7e5c:	2280      	movs	r2, #128	; 0x80
    7e5e:	4313      	orrs	r3, r2
    7e60:	81a3      	strh	r3, [r4, #12]
    7e62:	9a01      	ldr	r2, [sp, #4]
    7e64:	2a01      	cmp	r2, #1
    7e66:	d104      	bne.n	7e72 <setvbuf+0xce>
    7e68:	89a3      	ldrh	r3, [r4, #12]
    7e6a:	4313      	orrs	r3, r2
    7e6c:	81a3      	strh	r3, [r4, #12]
    7e6e:	4273      	negs	r3, r6
    7e70:	61a3      	str	r3, [r4, #24]
    7e72:	4b0e      	ldr	r3, [pc, #56]	; (7eac <setvbuf+0x108>)
    7e74:	2000      	movs	r0, #0
    7e76:	62ab      	str	r3, [r5, #40]	; 0x28
    7e78:	89a3      	ldrh	r3, [r4, #12]
    7e7a:	6027      	str	r7, [r4, #0]
    7e7c:	6127      	str	r7, [r4, #16]
    7e7e:	6166      	str	r6, [r4, #20]
    7e80:	071a      	lsls	r2, r3, #28
    7e82:	d509      	bpl.n	7e98 <setvbuf+0xf4>
    7e84:	2203      	movs	r2, #3
    7e86:	4013      	ands	r3, r2
    7e88:	425a      	negs	r2, r3
    7e8a:	4153      	adcs	r3, r2
    7e8c:	425b      	negs	r3, r3
    7e8e:	401e      	ands	r6, r3
    7e90:	60a6      	str	r6, [r4, #8]
    7e92:	e001      	b.n	7e98 <setvbuf+0xf4>
    7e94:	2001      	movs	r0, #1
    7e96:	4240      	negs	r0, r0
    7e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	20000078 	.word	0x20000078
    7ea0:	0000a61c 	.word	0x0000a61c
    7ea4:	0000a63c 	.word	0x0000a63c
    7ea8:	0000a65c 	.word	0x0000a65c
    7eac:	00008abd 	.word	0x00008abd

00007eb0 <siprintf>:
    7eb0:	b40e      	push	{r1, r2, r3}
    7eb2:	b500      	push	{lr}
    7eb4:	b09c      	sub	sp, #112	; 0x70
    7eb6:	ab1d      	add	r3, sp, #116	; 0x74
    7eb8:	cb04      	ldmia	r3!, {r2}
    7eba:	2282      	movs	r2, #130	; 0x82
    7ebc:	a902      	add	r1, sp, #8
    7ebe:	0092      	lsls	r2, r2, #2
    7ec0:	818a      	strh	r2, [r1, #12]
    7ec2:	4a0a      	ldr	r2, [pc, #40]	; (7eec <siprintf+0x3c>)
    7ec4:	9002      	str	r0, [sp, #8]
    7ec6:	608a      	str	r2, [r1, #8]
    7ec8:	614a      	str	r2, [r1, #20]
    7eca:	2201      	movs	r2, #1
    7ecc:	4252      	negs	r2, r2
    7ece:	81ca      	strh	r2, [r1, #14]
    7ed0:	4a07      	ldr	r2, [pc, #28]	; (7ef0 <siprintf+0x40>)
    7ed2:	6108      	str	r0, [r1, #16]
    7ed4:	6810      	ldr	r0, [r2, #0]
    7ed6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7ed8:	9301      	str	r3, [sp, #4]
    7eda:	f000 f885 	bl	7fe8 <_svfiprintf_r>
    7ede:	9a02      	ldr	r2, [sp, #8]
    7ee0:	2300      	movs	r3, #0
    7ee2:	7013      	strb	r3, [r2, #0]
    7ee4:	b01c      	add	sp, #112	; 0x70
    7ee6:	bc08      	pop	{r3}
    7ee8:	b003      	add	sp, #12
    7eea:	4718      	bx	r3
    7eec:	7fffffff 	.word	0x7fffffff
    7ef0:	20000078 	.word	0x20000078

00007ef4 <strcmp>:
    7ef4:	7802      	ldrb	r2, [r0, #0]
    7ef6:	780b      	ldrb	r3, [r1, #0]
    7ef8:	3001      	adds	r0, #1
    7efa:	3101      	adds	r1, #1
    7efc:	2a00      	cmp	r2, #0
    7efe:	d001      	beq.n	7f04 <strcmp+0x10>
    7f00:	429a      	cmp	r2, r3
    7f02:	d0f7      	beq.n	7ef4 <strcmp>
    7f04:	1ad0      	subs	r0, r2, r3
    7f06:	4770      	bx	lr

00007f08 <strcpy>:
    7f08:	1c03      	adds	r3, r0, #0
    7f0a:	780a      	ldrb	r2, [r1, #0]
    7f0c:	3101      	adds	r1, #1
    7f0e:	701a      	strb	r2, [r3, #0]
    7f10:	3301      	adds	r3, #1
    7f12:	2a00      	cmp	r2, #0
    7f14:	d1f9      	bne.n	7f0a <strcpy+0x2>
    7f16:	4770      	bx	lr

00007f18 <strlen>:
    7f18:	2300      	movs	r3, #0
    7f1a:	5cc2      	ldrb	r2, [r0, r3]
    7f1c:	3301      	adds	r3, #1
    7f1e:	2a00      	cmp	r2, #0
    7f20:	d1fb      	bne.n	7f1a <strlen+0x2>
    7f22:	1e58      	subs	r0, r3, #1
    7f24:	4770      	bx	lr
	...

00007f28 <__ssputs_r>:
    7f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f2a:	688d      	ldr	r5, [r1, #8]
    7f2c:	b085      	sub	sp, #20
    7f2e:	1c07      	adds	r7, r0, #0
    7f30:	1c0c      	adds	r4, r1, #0
    7f32:	9203      	str	r2, [sp, #12]
    7f34:	9301      	str	r3, [sp, #4]
    7f36:	42ab      	cmp	r3, r5
    7f38:	d345      	bcc.n	7fc6 <__ssputs_r+0x9e>
    7f3a:	2290      	movs	r2, #144	; 0x90
    7f3c:	898b      	ldrh	r3, [r1, #12]
    7f3e:	00d2      	lsls	r2, r2, #3
    7f40:	4213      	tst	r3, r2
    7f42:	d03d      	beq.n	7fc0 <__ssputs_r+0x98>
    7f44:	6962      	ldr	r2, [r4, #20]
    7f46:	2603      	movs	r6, #3
    7f48:	4356      	muls	r6, r2
    7f4a:	6909      	ldr	r1, [r1, #16]
    7f4c:	6820      	ldr	r0, [r4, #0]
    7f4e:	0ff2      	lsrs	r2, r6, #31
    7f50:	1a40      	subs	r0, r0, r1
    7f52:	1996      	adds	r6, r2, r6
    7f54:	9002      	str	r0, [sp, #8]
    7f56:	1c02      	adds	r2, r0, #0
    7f58:	9801      	ldr	r0, [sp, #4]
    7f5a:	3201      	adds	r2, #1
    7f5c:	1812      	adds	r2, r2, r0
    7f5e:	1076      	asrs	r6, r6, #1
    7f60:	4296      	cmp	r6, r2
    7f62:	d200      	bcs.n	7f66 <__ssputs_r+0x3e>
    7f64:	1c16      	adds	r6, r2, #0
    7f66:	1c38      	adds	r0, r7, #0
    7f68:	055a      	lsls	r2, r3, #21
    7f6a:	d50f      	bpl.n	7f8c <__ssputs_r+0x64>
    7f6c:	1c31      	adds	r1, r6, #0
    7f6e:	f7ff fe0f 	bl	7b90 <_malloc_r>
    7f72:	1e05      	subs	r5, r0, #0
    7f74:	d013      	beq.n	7f9e <__ssputs_r+0x76>
    7f76:	9a02      	ldr	r2, [sp, #8]
    7f78:	6921      	ldr	r1, [r4, #16]
    7f7a:	f7ff fb87 	bl	768c <memcpy>
    7f7e:	89a2      	ldrh	r2, [r4, #12]
    7f80:	4b18      	ldr	r3, [pc, #96]	; (7fe4 <__ssputs_r+0xbc>)
    7f82:	4013      	ands	r3, r2
    7f84:	2280      	movs	r2, #128	; 0x80
    7f86:	4313      	orrs	r3, r2
    7f88:	81a3      	strh	r3, [r4, #12]
    7f8a:	e011      	b.n	7fb0 <__ssputs_r+0x88>
    7f8c:	1c32      	adds	r2, r6, #0
    7f8e:	f000 feb8 	bl	8d02 <_realloc_r>
    7f92:	1e05      	subs	r5, r0, #0
    7f94:	d10c      	bne.n	7fb0 <__ssputs_r+0x88>
    7f96:	1c38      	adds	r0, r7, #0
    7f98:	6921      	ldr	r1, [r4, #16]
    7f9a:	f7ff fdb1 	bl	7b00 <_free_r>
    7f9e:	230c      	movs	r3, #12
    7fa0:	603b      	str	r3, [r7, #0]
    7fa2:	89a3      	ldrh	r3, [r4, #12]
    7fa4:	2240      	movs	r2, #64	; 0x40
    7fa6:	4313      	orrs	r3, r2
    7fa8:	2001      	movs	r0, #1
    7faa:	81a3      	strh	r3, [r4, #12]
    7fac:	4240      	negs	r0, r0
    7fae:	e017      	b.n	7fe0 <__ssputs_r+0xb8>
    7fb0:	9b02      	ldr	r3, [sp, #8]
    7fb2:	6125      	str	r5, [r4, #16]
    7fb4:	18ed      	adds	r5, r5, r3
    7fb6:	6025      	str	r5, [r4, #0]
    7fb8:	6166      	str	r6, [r4, #20]
    7fba:	9d01      	ldr	r5, [sp, #4]
    7fbc:	1af6      	subs	r6, r6, r3
    7fbe:	60a6      	str	r6, [r4, #8]
    7fc0:	9801      	ldr	r0, [sp, #4]
    7fc2:	42a8      	cmp	r0, r5
    7fc4:	d200      	bcs.n	7fc8 <__ssputs_r+0xa0>
    7fc6:	9d01      	ldr	r5, [sp, #4]
    7fc8:	1c2a      	adds	r2, r5, #0
    7fca:	6820      	ldr	r0, [r4, #0]
    7fcc:	9903      	ldr	r1, [sp, #12]
    7fce:	f7ff fb66 	bl	769e <memmove>
    7fd2:	68a2      	ldr	r2, [r4, #8]
    7fd4:	2000      	movs	r0, #0
    7fd6:	1b53      	subs	r3, r2, r5
    7fd8:	60a3      	str	r3, [r4, #8]
    7fda:	6823      	ldr	r3, [r4, #0]
    7fdc:	195d      	adds	r5, r3, r5
    7fde:	6025      	str	r5, [r4, #0]
    7fe0:	b005      	add	sp, #20
    7fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fe4:	fffffb7f 	.word	0xfffffb7f

00007fe8 <_svfiprintf_r>:
    7fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fea:	b09f      	sub	sp, #124	; 0x7c
    7fec:	9003      	str	r0, [sp, #12]
    7fee:	9305      	str	r3, [sp, #20]
    7ff0:	898b      	ldrh	r3, [r1, #12]
    7ff2:	1c0e      	adds	r6, r1, #0
    7ff4:	1c17      	adds	r7, r2, #0
    7ff6:	0619      	lsls	r1, r3, #24
    7ff8:	d50f      	bpl.n	801a <_svfiprintf_r+0x32>
    7ffa:	6932      	ldr	r2, [r6, #16]
    7ffc:	2a00      	cmp	r2, #0
    7ffe:	d10c      	bne.n	801a <_svfiprintf_r+0x32>
    8000:	2140      	movs	r1, #64	; 0x40
    8002:	f7ff fdc5 	bl	7b90 <_malloc_r>
    8006:	6030      	str	r0, [r6, #0]
    8008:	6130      	str	r0, [r6, #16]
    800a:	2800      	cmp	r0, #0
    800c:	d103      	bne.n	8016 <_svfiprintf_r+0x2e>
    800e:	9903      	ldr	r1, [sp, #12]
    8010:	230c      	movs	r3, #12
    8012:	600b      	str	r3, [r1, #0]
    8014:	e0c9      	b.n	81aa <_svfiprintf_r+0x1c2>
    8016:	2340      	movs	r3, #64	; 0x40
    8018:	6173      	str	r3, [r6, #20]
    801a:	ad06      	add	r5, sp, #24
    801c:	2300      	movs	r3, #0
    801e:	616b      	str	r3, [r5, #20]
    8020:	2320      	movs	r3, #32
    8022:	766b      	strb	r3, [r5, #25]
    8024:	2330      	movs	r3, #48	; 0x30
    8026:	76ab      	strb	r3, [r5, #26]
    8028:	1c3c      	adds	r4, r7, #0
    802a:	7823      	ldrb	r3, [r4, #0]
    802c:	2b00      	cmp	r3, #0
    802e:	d103      	bne.n	8038 <_svfiprintf_r+0x50>
    8030:	1be2      	subs	r2, r4, r7
    8032:	9202      	str	r2, [sp, #8]
    8034:	d011      	beq.n	805a <_svfiprintf_r+0x72>
    8036:	e003      	b.n	8040 <_svfiprintf_r+0x58>
    8038:	2b25      	cmp	r3, #37	; 0x25
    803a:	d0f9      	beq.n	8030 <_svfiprintf_r+0x48>
    803c:	3401      	adds	r4, #1
    803e:	e7f4      	b.n	802a <_svfiprintf_r+0x42>
    8040:	9803      	ldr	r0, [sp, #12]
    8042:	1c31      	adds	r1, r6, #0
    8044:	1c3a      	adds	r2, r7, #0
    8046:	9b02      	ldr	r3, [sp, #8]
    8048:	f7ff ff6e 	bl	7f28 <__ssputs_r>
    804c:	3001      	adds	r0, #1
    804e:	d100      	bne.n	8052 <_svfiprintf_r+0x6a>
    8050:	e0a6      	b.n	81a0 <_svfiprintf_r+0x1b8>
    8052:	6969      	ldr	r1, [r5, #20]
    8054:	9a02      	ldr	r2, [sp, #8]
    8056:	188b      	adds	r3, r1, r2
    8058:	616b      	str	r3, [r5, #20]
    805a:	7823      	ldrb	r3, [r4, #0]
    805c:	2b00      	cmp	r3, #0
    805e:	d100      	bne.n	8062 <_svfiprintf_r+0x7a>
    8060:	e09e      	b.n	81a0 <_svfiprintf_r+0x1b8>
    8062:	2201      	movs	r2, #1
    8064:	4252      	negs	r2, r2
    8066:	606a      	str	r2, [r5, #4]
    8068:	466a      	mov	r2, sp
    806a:	2300      	movs	r3, #0
    806c:	325b      	adds	r2, #91	; 0x5b
    806e:	3401      	adds	r4, #1
    8070:	602b      	str	r3, [r5, #0]
    8072:	60eb      	str	r3, [r5, #12]
    8074:	60ab      	str	r3, [r5, #8]
    8076:	7013      	strb	r3, [r2, #0]
    8078:	65ab      	str	r3, [r5, #88]	; 0x58
    807a:	4f4e      	ldr	r7, [pc, #312]	; (81b4 <_svfiprintf_r+0x1cc>)
    807c:	7821      	ldrb	r1, [r4, #0]
    807e:	1c38      	adds	r0, r7, #0
    8080:	2205      	movs	r2, #5
    8082:	f000 fe33 	bl	8cec <memchr>
    8086:	2800      	cmp	r0, #0
    8088:	d007      	beq.n	809a <_svfiprintf_r+0xb2>
    808a:	1bc7      	subs	r7, r0, r7
    808c:	682b      	ldr	r3, [r5, #0]
    808e:	2001      	movs	r0, #1
    8090:	40b8      	lsls	r0, r7
    8092:	4318      	orrs	r0, r3
    8094:	6028      	str	r0, [r5, #0]
    8096:	3401      	adds	r4, #1
    8098:	e7ef      	b.n	807a <_svfiprintf_r+0x92>
    809a:	682b      	ldr	r3, [r5, #0]
    809c:	06d9      	lsls	r1, r3, #27
    809e:	d503      	bpl.n	80a8 <_svfiprintf_r+0xc0>
    80a0:	466a      	mov	r2, sp
    80a2:	2120      	movs	r1, #32
    80a4:	325b      	adds	r2, #91	; 0x5b
    80a6:	7011      	strb	r1, [r2, #0]
    80a8:	071a      	lsls	r2, r3, #28
    80aa:	d503      	bpl.n	80b4 <_svfiprintf_r+0xcc>
    80ac:	466a      	mov	r2, sp
    80ae:	212b      	movs	r1, #43	; 0x2b
    80b0:	325b      	adds	r2, #91	; 0x5b
    80b2:	7011      	strb	r1, [r2, #0]
    80b4:	7822      	ldrb	r2, [r4, #0]
    80b6:	2a2a      	cmp	r2, #42	; 0x2a
    80b8:	d001      	beq.n	80be <_svfiprintf_r+0xd6>
    80ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80bc:	e00e      	b.n	80dc <_svfiprintf_r+0xf4>
    80be:	9a05      	ldr	r2, [sp, #20]
    80c0:	1d11      	adds	r1, r2, #4
    80c2:	6812      	ldr	r2, [r2, #0]
    80c4:	9105      	str	r1, [sp, #20]
    80c6:	2a00      	cmp	r2, #0
    80c8:	db01      	blt.n	80ce <_svfiprintf_r+0xe6>
    80ca:	9209      	str	r2, [sp, #36]	; 0x24
    80cc:	e004      	b.n	80d8 <_svfiprintf_r+0xf0>
    80ce:	4252      	negs	r2, r2
    80d0:	60ea      	str	r2, [r5, #12]
    80d2:	2202      	movs	r2, #2
    80d4:	4313      	orrs	r3, r2
    80d6:	602b      	str	r3, [r5, #0]
    80d8:	3401      	adds	r4, #1
    80da:	e009      	b.n	80f0 <_svfiprintf_r+0x108>
    80dc:	7822      	ldrb	r2, [r4, #0]
    80de:	3a30      	subs	r2, #48	; 0x30
    80e0:	2a09      	cmp	r2, #9
    80e2:	d804      	bhi.n	80ee <_svfiprintf_r+0x106>
    80e4:	210a      	movs	r1, #10
    80e6:	434b      	muls	r3, r1
    80e8:	3401      	adds	r4, #1
    80ea:	189b      	adds	r3, r3, r2
    80ec:	e7f6      	b.n	80dc <_svfiprintf_r+0xf4>
    80ee:	9309      	str	r3, [sp, #36]	; 0x24
    80f0:	7823      	ldrb	r3, [r4, #0]
    80f2:	2b2e      	cmp	r3, #46	; 0x2e
    80f4:	d118      	bne.n	8128 <_svfiprintf_r+0x140>
    80f6:	7863      	ldrb	r3, [r4, #1]
    80f8:	2b2a      	cmp	r3, #42	; 0x2a
    80fa:	d109      	bne.n	8110 <_svfiprintf_r+0x128>
    80fc:	9b05      	ldr	r3, [sp, #20]
    80fe:	3402      	adds	r4, #2
    8100:	1d1a      	adds	r2, r3, #4
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	9205      	str	r2, [sp, #20]
    8106:	2b00      	cmp	r3, #0
    8108:	da0d      	bge.n	8126 <_svfiprintf_r+0x13e>
    810a:	2301      	movs	r3, #1
    810c:	425b      	negs	r3, r3
    810e:	e00a      	b.n	8126 <_svfiprintf_r+0x13e>
    8110:	3401      	adds	r4, #1
    8112:	2300      	movs	r3, #0
    8114:	7822      	ldrb	r2, [r4, #0]
    8116:	3a30      	subs	r2, #48	; 0x30
    8118:	2a09      	cmp	r2, #9
    811a:	d804      	bhi.n	8126 <_svfiprintf_r+0x13e>
    811c:	210a      	movs	r1, #10
    811e:	434b      	muls	r3, r1
    8120:	3401      	adds	r4, #1
    8122:	189b      	adds	r3, r3, r2
    8124:	e7f6      	b.n	8114 <_svfiprintf_r+0x12c>
    8126:	9307      	str	r3, [sp, #28]
    8128:	4f23      	ldr	r7, [pc, #140]	; (81b8 <_svfiprintf_r+0x1d0>)
    812a:	7821      	ldrb	r1, [r4, #0]
    812c:	1c38      	adds	r0, r7, #0
    812e:	2203      	movs	r2, #3
    8130:	f000 fddc 	bl	8cec <memchr>
    8134:	2800      	cmp	r0, #0
    8136:	d006      	beq.n	8146 <_svfiprintf_r+0x15e>
    8138:	1bc7      	subs	r7, r0, r7
    813a:	682b      	ldr	r3, [r5, #0]
    813c:	2040      	movs	r0, #64	; 0x40
    813e:	40b8      	lsls	r0, r7
    8140:	4318      	orrs	r0, r3
    8142:	6028      	str	r0, [r5, #0]
    8144:	3401      	adds	r4, #1
    8146:	7821      	ldrb	r1, [r4, #0]
    8148:	481c      	ldr	r0, [pc, #112]	; (81bc <_svfiprintf_r+0x1d4>)
    814a:	2206      	movs	r2, #6
    814c:	1c67      	adds	r7, r4, #1
    814e:	7629      	strb	r1, [r5, #24]
    8150:	f000 fdcc 	bl	8cec <memchr>
    8154:	2800      	cmp	r0, #0
    8156:	d012      	beq.n	817e <_svfiprintf_r+0x196>
    8158:	4b19      	ldr	r3, [pc, #100]	; (81c0 <_svfiprintf_r+0x1d8>)
    815a:	2b00      	cmp	r3, #0
    815c:	d106      	bne.n	816c <_svfiprintf_r+0x184>
    815e:	9b05      	ldr	r3, [sp, #20]
    8160:	2207      	movs	r2, #7
    8162:	3307      	adds	r3, #7
    8164:	4393      	bics	r3, r2
    8166:	3308      	adds	r3, #8
    8168:	9305      	str	r3, [sp, #20]
    816a:	e014      	b.n	8196 <_svfiprintf_r+0x1ae>
    816c:	ab05      	add	r3, sp, #20
    816e:	9300      	str	r3, [sp, #0]
    8170:	9803      	ldr	r0, [sp, #12]
    8172:	1c29      	adds	r1, r5, #0
    8174:	1c32      	adds	r2, r6, #0
    8176:	4b13      	ldr	r3, [pc, #76]	; (81c4 <_svfiprintf_r+0x1dc>)
    8178:	e000      	b.n	817c <_svfiprintf_r+0x194>
    817a:	bf00      	nop
    817c:	e007      	b.n	818e <_svfiprintf_r+0x1a6>
    817e:	ab05      	add	r3, sp, #20
    8180:	9300      	str	r3, [sp, #0]
    8182:	9803      	ldr	r0, [sp, #12]
    8184:	1c29      	adds	r1, r5, #0
    8186:	1c32      	adds	r2, r6, #0
    8188:	4b0e      	ldr	r3, [pc, #56]	; (81c4 <_svfiprintf_r+0x1dc>)
    818a:	f000 f9c3 	bl	8514 <_printf_i>
    818e:	9004      	str	r0, [sp, #16]
    8190:	9904      	ldr	r1, [sp, #16]
    8192:	3101      	adds	r1, #1
    8194:	d004      	beq.n	81a0 <_svfiprintf_r+0x1b8>
    8196:	696a      	ldr	r2, [r5, #20]
    8198:	9904      	ldr	r1, [sp, #16]
    819a:	1853      	adds	r3, r2, r1
    819c:	616b      	str	r3, [r5, #20]
    819e:	e743      	b.n	8028 <_svfiprintf_r+0x40>
    81a0:	89b3      	ldrh	r3, [r6, #12]
    81a2:	065a      	lsls	r2, r3, #25
    81a4:	d401      	bmi.n	81aa <_svfiprintf_r+0x1c2>
    81a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    81a8:	e001      	b.n	81ae <_svfiprintf_r+0x1c6>
    81aa:	2001      	movs	r0, #1
    81ac:	4240      	negs	r0, r0
    81ae:	b01f      	add	sp, #124	; 0x7c
    81b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	0000a590 	.word	0x0000a590
    81b8:	0000a596 	.word	0x0000a596
    81bc:	0000a59a 	.word	0x0000a59a
    81c0:	00000000 	.word	0x00000000
    81c4:	00007f29 	.word	0x00007f29

000081c8 <__tz_lock>:
    81c8:	4770      	bx	lr

000081ca <__tz_unlock>:
    81ca:	4770      	bx	lr

000081cc <__sfputc_r>:
    81cc:	6893      	ldr	r3, [r2, #8]
    81ce:	b510      	push	{r4, lr}
    81d0:	3b01      	subs	r3, #1
    81d2:	6093      	str	r3, [r2, #8]
    81d4:	2b00      	cmp	r3, #0
    81d6:	da05      	bge.n	81e4 <__sfputc_r+0x18>
    81d8:	6994      	ldr	r4, [r2, #24]
    81da:	42a3      	cmp	r3, r4
    81dc:	db08      	blt.n	81f0 <__sfputc_r+0x24>
    81de:	b2cb      	uxtb	r3, r1
    81e0:	2b0a      	cmp	r3, #10
    81e2:	d005      	beq.n	81f0 <__sfputc_r+0x24>
    81e4:	6813      	ldr	r3, [r2, #0]
    81e6:	1c58      	adds	r0, r3, #1
    81e8:	6010      	str	r0, [r2, #0]
    81ea:	7019      	strb	r1, [r3, #0]
    81ec:	b2c8      	uxtb	r0, r1
    81ee:	e001      	b.n	81f4 <__sfputc_r+0x28>
    81f0:	f000 faa6 	bl	8740 <__swbuf_r>
    81f4:	bd10      	pop	{r4, pc}

000081f6 <__sfputs_r>:
    81f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81f8:	1c06      	adds	r6, r0, #0
    81fa:	1c0f      	adds	r7, r1, #0
    81fc:	1c14      	adds	r4, r2, #0
    81fe:	18d5      	adds	r5, r2, r3
    8200:	42ac      	cmp	r4, r5
    8202:	d008      	beq.n	8216 <__sfputs_r+0x20>
    8204:	7821      	ldrb	r1, [r4, #0]
    8206:	1c30      	adds	r0, r6, #0
    8208:	1c3a      	adds	r2, r7, #0
    820a:	f7ff ffdf 	bl	81cc <__sfputc_r>
    820e:	3401      	adds	r4, #1
    8210:	1c43      	adds	r3, r0, #1
    8212:	d1f5      	bne.n	8200 <__sfputs_r+0xa>
    8214:	e000      	b.n	8218 <__sfputs_r+0x22>
    8216:	2000      	movs	r0, #0
    8218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000821c <_vfiprintf_r>:
    821c:	b5f0      	push	{r4, r5, r6, r7, lr}
    821e:	b09f      	sub	sp, #124	; 0x7c
    8220:	1c06      	adds	r6, r0, #0
    8222:	1c0f      	adds	r7, r1, #0
    8224:	9203      	str	r2, [sp, #12]
    8226:	9305      	str	r3, [sp, #20]
    8228:	2800      	cmp	r0, #0
    822a:	d004      	beq.n	8236 <_vfiprintf_r+0x1a>
    822c:	6981      	ldr	r1, [r0, #24]
    822e:	2900      	cmp	r1, #0
    8230:	d101      	bne.n	8236 <_vfiprintf_r+0x1a>
    8232:	f000 fc97 	bl	8b64 <__sinit>
    8236:	4b75      	ldr	r3, [pc, #468]	; (840c <_vfiprintf_r+0x1f0>)
    8238:	429f      	cmp	r7, r3
    823a:	d101      	bne.n	8240 <_vfiprintf_r+0x24>
    823c:	6877      	ldr	r7, [r6, #4]
    823e:	e008      	b.n	8252 <_vfiprintf_r+0x36>
    8240:	4b73      	ldr	r3, [pc, #460]	; (8410 <_vfiprintf_r+0x1f4>)
    8242:	429f      	cmp	r7, r3
    8244:	d101      	bne.n	824a <_vfiprintf_r+0x2e>
    8246:	68b7      	ldr	r7, [r6, #8]
    8248:	e003      	b.n	8252 <_vfiprintf_r+0x36>
    824a:	4b72      	ldr	r3, [pc, #456]	; (8414 <_vfiprintf_r+0x1f8>)
    824c:	429f      	cmp	r7, r3
    824e:	d100      	bne.n	8252 <_vfiprintf_r+0x36>
    8250:	68f7      	ldr	r7, [r6, #12]
    8252:	89bb      	ldrh	r3, [r7, #12]
    8254:	071a      	lsls	r2, r3, #28
    8256:	d50a      	bpl.n	826e <_vfiprintf_r+0x52>
    8258:	693b      	ldr	r3, [r7, #16]
    825a:	2b00      	cmp	r3, #0
    825c:	d007      	beq.n	826e <_vfiprintf_r+0x52>
    825e:	ad06      	add	r5, sp, #24
    8260:	2300      	movs	r3, #0
    8262:	616b      	str	r3, [r5, #20]
    8264:	2320      	movs	r3, #32
    8266:	766b      	strb	r3, [r5, #25]
    8268:	2330      	movs	r3, #48	; 0x30
    826a:	76ab      	strb	r3, [r5, #26]
    826c:	e03b      	b.n	82e6 <_vfiprintf_r+0xca>
    826e:	1c30      	adds	r0, r6, #0
    8270:	1c39      	adds	r1, r7, #0
    8272:	f000 fabd 	bl	87f0 <__swsetup_r>
    8276:	2800      	cmp	r0, #0
    8278:	d0f1      	beq.n	825e <_vfiprintf_r+0x42>
    827a:	2001      	movs	r0, #1
    827c:	4240      	negs	r0, r0
    827e:	e0c2      	b.n	8406 <_vfiprintf_r+0x1ea>
    8280:	9a05      	ldr	r2, [sp, #20]
    8282:	1d11      	adds	r1, r2, #4
    8284:	6812      	ldr	r2, [r2, #0]
    8286:	9105      	str	r1, [sp, #20]
    8288:	2a00      	cmp	r2, #0
    828a:	db76      	blt.n	837a <_vfiprintf_r+0x15e>
    828c:	9209      	str	r2, [sp, #36]	; 0x24
    828e:	3401      	adds	r4, #1
    8290:	7823      	ldrb	r3, [r4, #0]
    8292:	2b2e      	cmp	r3, #46	; 0x2e
    8294:	d100      	bne.n	8298 <_vfiprintf_r+0x7c>
    8296:	e081      	b.n	839c <_vfiprintf_r+0x180>
    8298:	7821      	ldrb	r1, [r4, #0]
    829a:	485f      	ldr	r0, [pc, #380]	; (8418 <_vfiprintf_r+0x1fc>)
    829c:	2203      	movs	r2, #3
    829e:	f000 fd25 	bl	8cec <memchr>
    82a2:	2800      	cmp	r0, #0
    82a4:	d007      	beq.n	82b6 <_vfiprintf_r+0x9a>
    82a6:	495c      	ldr	r1, [pc, #368]	; (8418 <_vfiprintf_r+0x1fc>)
    82a8:	682a      	ldr	r2, [r5, #0]
    82aa:	1a43      	subs	r3, r0, r1
    82ac:	2040      	movs	r0, #64	; 0x40
    82ae:	4098      	lsls	r0, r3
    82b0:	4310      	orrs	r0, r2
    82b2:	6028      	str	r0, [r5, #0]
    82b4:	3401      	adds	r4, #1
    82b6:	7821      	ldrb	r1, [r4, #0]
    82b8:	1c63      	adds	r3, r4, #1
    82ba:	4858      	ldr	r0, [pc, #352]	; (841c <_vfiprintf_r+0x200>)
    82bc:	2206      	movs	r2, #6
    82be:	9303      	str	r3, [sp, #12]
    82c0:	7629      	strb	r1, [r5, #24]
    82c2:	f000 fd13 	bl	8cec <memchr>
    82c6:	2800      	cmp	r0, #0
    82c8:	d100      	bne.n	82cc <_vfiprintf_r+0xb0>
    82ca:	e08a      	b.n	83e2 <_vfiprintf_r+0x1c6>
    82cc:	4b54      	ldr	r3, [pc, #336]	; (8420 <_vfiprintf_r+0x204>)
    82ce:	2b00      	cmp	r3, #0
    82d0:	d17e      	bne.n	83d0 <_vfiprintf_r+0x1b4>
    82d2:	9b05      	ldr	r3, [sp, #20]
    82d4:	2207      	movs	r2, #7
    82d6:	3307      	adds	r3, #7
    82d8:	4393      	bics	r3, r2
    82da:	3308      	adds	r3, #8
    82dc:	9305      	str	r3, [sp, #20]
    82de:	696a      	ldr	r2, [r5, #20]
    82e0:	9904      	ldr	r1, [sp, #16]
    82e2:	1853      	adds	r3, r2, r1
    82e4:	616b      	str	r3, [r5, #20]
    82e6:	9c03      	ldr	r4, [sp, #12]
    82e8:	7823      	ldrb	r3, [r4, #0]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d104      	bne.n	82f8 <_vfiprintf_r+0xdc>
    82ee:	9903      	ldr	r1, [sp, #12]
    82f0:	1a61      	subs	r1, r4, r1
    82f2:	9102      	str	r1, [sp, #8]
    82f4:	d010      	beq.n	8318 <_vfiprintf_r+0xfc>
    82f6:	e003      	b.n	8300 <_vfiprintf_r+0xe4>
    82f8:	2b25      	cmp	r3, #37	; 0x25
    82fa:	d0f8      	beq.n	82ee <_vfiprintf_r+0xd2>
    82fc:	3401      	adds	r4, #1
    82fe:	e7f3      	b.n	82e8 <_vfiprintf_r+0xcc>
    8300:	1c30      	adds	r0, r6, #0
    8302:	1c39      	adds	r1, r7, #0
    8304:	9a03      	ldr	r2, [sp, #12]
    8306:	9b02      	ldr	r3, [sp, #8]
    8308:	f7ff ff75 	bl	81f6 <__sfputs_r>
    830c:	3001      	adds	r0, #1
    830e:	d075      	beq.n	83fc <_vfiprintf_r+0x1e0>
    8310:	696a      	ldr	r2, [r5, #20]
    8312:	9902      	ldr	r1, [sp, #8]
    8314:	1853      	adds	r3, r2, r1
    8316:	616b      	str	r3, [r5, #20]
    8318:	7823      	ldrb	r3, [r4, #0]
    831a:	2b00      	cmp	r3, #0
    831c:	d06e      	beq.n	83fc <_vfiprintf_r+0x1e0>
    831e:	2201      	movs	r2, #1
    8320:	4252      	negs	r2, r2
    8322:	606a      	str	r2, [r5, #4]
    8324:	466a      	mov	r2, sp
    8326:	2300      	movs	r3, #0
    8328:	325b      	adds	r2, #91	; 0x5b
    832a:	3401      	adds	r4, #1
    832c:	602b      	str	r3, [r5, #0]
    832e:	60eb      	str	r3, [r5, #12]
    8330:	60ab      	str	r3, [r5, #8]
    8332:	7013      	strb	r3, [r2, #0]
    8334:	65ab      	str	r3, [r5, #88]	; 0x58
    8336:	7821      	ldrb	r1, [r4, #0]
    8338:	483a      	ldr	r0, [pc, #232]	; (8424 <_vfiprintf_r+0x208>)
    833a:	2205      	movs	r2, #5
    833c:	f000 fcd6 	bl	8cec <memchr>
    8340:	2800      	cmp	r0, #0
    8342:	d008      	beq.n	8356 <_vfiprintf_r+0x13a>
    8344:	4a37      	ldr	r2, [pc, #220]	; (8424 <_vfiprintf_r+0x208>)
    8346:	3401      	adds	r4, #1
    8348:	1a83      	subs	r3, r0, r2
    834a:	2001      	movs	r0, #1
    834c:	4098      	lsls	r0, r3
    834e:	682b      	ldr	r3, [r5, #0]
    8350:	4318      	orrs	r0, r3
    8352:	6028      	str	r0, [r5, #0]
    8354:	e7ef      	b.n	8336 <_vfiprintf_r+0x11a>
    8356:	682b      	ldr	r3, [r5, #0]
    8358:	06d9      	lsls	r1, r3, #27
    835a:	d503      	bpl.n	8364 <_vfiprintf_r+0x148>
    835c:	466a      	mov	r2, sp
    835e:	2120      	movs	r1, #32
    8360:	325b      	adds	r2, #91	; 0x5b
    8362:	7011      	strb	r1, [r2, #0]
    8364:	071a      	lsls	r2, r3, #28
    8366:	d503      	bpl.n	8370 <_vfiprintf_r+0x154>
    8368:	466a      	mov	r2, sp
    836a:	212b      	movs	r1, #43	; 0x2b
    836c:	325b      	adds	r2, #91	; 0x5b
    836e:	7011      	strb	r1, [r2, #0]
    8370:	7822      	ldrb	r2, [r4, #0]
    8372:	2a2a      	cmp	r2, #42	; 0x2a
    8374:	d084      	beq.n	8280 <_vfiprintf_r+0x64>
    8376:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8378:	e005      	b.n	8386 <_vfiprintf_r+0x16a>
    837a:	4252      	negs	r2, r2
    837c:	60ea      	str	r2, [r5, #12]
    837e:	2202      	movs	r2, #2
    8380:	4313      	orrs	r3, r2
    8382:	602b      	str	r3, [r5, #0]
    8384:	e783      	b.n	828e <_vfiprintf_r+0x72>
    8386:	7822      	ldrb	r2, [r4, #0]
    8388:	3a30      	subs	r2, #48	; 0x30
    838a:	2a09      	cmp	r2, #9
    838c:	d804      	bhi.n	8398 <_vfiprintf_r+0x17c>
    838e:	210a      	movs	r1, #10
    8390:	434b      	muls	r3, r1
    8392:	3401      	adds	r4, #1
    8394:	189b      	adds	r3, r3, r2
    8396:	e7f6      	b.n	8386 <_vfiprintf_r+0x16a>
    8398:	9309      	str	r3, [sp, #36]	; 0x24
    839a:	e779      	b.n	8290 <_vfiprintf_r+0x74>
    839c:	7863      	ldrb	r3, [r4, #1]
    839e:	2b2a      	cmp	r3, #42	; 0x2a
    83a0:	d109      	bne.n	83b6 <_vfiprintf_r+0x19a>
    83a2:	9b05      	ldr	r3, [sp, #20]
    83a4:	3402      	adds	r4, #2
    83a6:	1d1a      	adds	r2, r3, #4
    83a8:	681b      	ldr	r3, [r3, #0]
    83aa:	9205      	str	r2, [sp, #20]
    83ac:	2b00      	cmp	r3, #0
    83ae:	da0d      	bge.n	83cc <_vfiprintf_r+0x1b0>
    83b0:	2301      	movs	r3, #1
    83b2:	425b      	negs	r3, r3
    83b4:	e00a      	b.n	83cc <_vfiprintf_r+0x1b0>
    83b6:	3401      	adds	r4, #1
    83b8:	2300      	movs	r3, #0
    83ba:	7822      	ldrb	r2, [r4, #0]
    83bc:	3a30      	subs	r2, #48	; 0x30
    83be:	2a09      	cmp	r2, #9
    83c0:	d804      	bhi.n	83cc <_vfiprintf_r+0x1b0>
    83c2:	210a      	movs	r1, #10
    83c4:	434b      	muls	r3, r1
    83c6:	3401      	adds	r4, #1
    83c8:	189b      	adds	r3, r3, r2
    83ca:	e7f6      	b.n	83ba <_vfiprintf_r+0x19e>
    83cc:	9307      	str	r3, [sp, #28]
    83ce:	e763      	b.n	8298 <_vfiprintf_r+0x7c>
    83d0:	ab05      	add	r3, sp, #20
    83d2:	9300      	str	r3, [sp, #0]
    83d4:	1c30      	adds	r0, r6, #0
    83d6:	1c29      	adds	r1, r5, #0
    83d8:	1c3a      	adds	r2, r7, #0
    83da:	4b13      	ldr	r3, [pc, #76]	; (8428 <_vfiprintf_r+0x20c>)
    83dc:	e000      	b.n	83e0 <_vfiprintf_r+0x1c4>
    83de:	bf00      	nop
    83e0:	e007      	b.n	83f2 <_vfiprintf_r+0x1d6>
    83e2:	ab05      	add	r3, sp, #20
    83e4:	9300      	str	r3, [sp, #0]
    83e6:	1c30      	adds	r0, r6, #0
    83e8:	1c29      	adds	r1, r5, #0
    83ea:	1c3a      	adds	r2, r7, #0
    83ec:	4b0e      	ldr	r3, [pc, #56]	; (8428 <_vfiprintf_r+0x20c>)
    83ee:	f000 f891 	bl	8514 <_printf_i>
    83f2:	9004      	str	r0, [sp, #16]
    83f4:	9904      	ldr	r1, [sp, #16]
    83f6:	3101      	adds	r1, #1
    83f8:	d000      	beq.n	83fc <_vfiprintf_r+0x1e0>
    83fa:	e770      	b.n	82de <_vfiprintf_r+0xc2>
    83fc:	89bb      	ldrh	r3, [r7, #12]
    83fe:	065a      	lsls	r2, r3, #25
    8400:	d500      	bpl.n	8404 <_vfiprintf_r+0x1e8>
    8402:	e73a      	b.n	827a <_vfiprintf_r+0x5e>
    8404:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8406:	b01f      	add	sp, #124	; 0x7c
    8408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	0000a61c 	.word	0x0000a61c
    8410:	0000a63c 	.word	0x0000a63c
    8414:	0000a65c 	.word	0x0000a65c
    8418:	0000a596 	.word	0x0000a596
    841c:	0000a59a 	.word	0x0000a59a
    8420:	00000000 	.word	0x00000000
    8424:	0000a590 	.word	0x0000a590
    8428:	000081f7 	.word	0x000081f7

0000842c <_printf_common>:
    842c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    842e:	1c15      	adds	r5, r2, #0
    8430:	9301      	str	r3, [sp, #4]
    8432:	690a      	ldr	r2, [r1, #16]
    8434:	688b      	ldr	r3, [r1, #8]
    8436:	1c06      	adds	r6, r0, #0
    8438:	1c0c      	adds	r4, r1, #0
    843a:	4293      	cmp	r3, r2
    843c:	da00      	bge.n	8440 <_printf_common+0x14>
    843e:	1c13      	adds	r3, r2, #0
    8440:	1c22      	adds	r2, r4, #0
    8442:	602b      	str	r3, [r5, #0]
    8444:	3243      	adds	r2, #67	; 0x43
    8446:	7812      	ldrb	r2, [r2, #0]
    8448:	2a00      	cmp	r2, #0
    844a:	d001      	beq.n	8450 <_printf_common+0x24>
    844c:	3301      	adds	r3, #1
    844e:	602b      	str	r3, [r5, #0]
    8450:	6820      	ldr	r0, [r4, #0]
    8452:	0680      	lsls	r0, r0, #26
    8454:	d502      	bpl.n	845c <_printf_common+0x30>
    8456:	682b      	ldr	r3, [r5, #0]
    8458:	3302      	adds	r3, #2
    845a:	602b      	str	r3, [r5, #0]
    845c:	6821      	ldr	r1, [r4, #0]
    845e:	2706      	movs	r7, #6
    8460:	400f      	ands	r7, r1
    8462:	d01f      	beq.n	84a4 <_printf_common+0x78>
    8464:	1c23      	adds	r3, r4, #0
    8466:	3343      	adds	r3, #67	; 0x43
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	1e5a      	subs	r2, r3, #1
    846c:	4193      	sbcs	r3, r2
    846e:	6822      	ldr	r2, [r4, #0]
    8470:	0692      	lsls	r2, r2, #26
    8472:	d51f      	bpl.n	84b4 <_printf_common+0x88>
    8474:	18e1      	adds	r1, r4, r3
    8476:	3140      	adds	r1, #64	; 0x40
    8478:	2030      	movs	r0, #48	; 0x30
    847a:	70c8      	strb	r0, [r1, #3]
    847c:	1c21      	adds	r1, r4, #0
    847e:	1c5a      	adds	r2, r3, #1
    8480:	3145      	adds	r1, #69	; 0x45
    8482:	7809      	ldrb	r1, [r1, #0]
    8484:	18a2      	adds	r2, r4, r2
    8486:	3240      	adds	r2, #64	; 0x40
    8488:	3302      	adds	r3, #2
    848a:	70d1      	strb	r1, [r2, #3]
    848c:	e012      	b.n	84b4 <_printf_common+0x88>
    848e:	1c22      	adds	r2, r4, #0
    8490:	1c30      	adds	r0, r6, #0
    8492:	9901      	ldr	r1, [sp, #4]
    8494:	3219      	adds	r2, #25
    8496:	2301      	movs	r3, #1
    8498:	9f08      	ldr	r7, [sp, #32]
    849a:	47b8      	blx	r7
    849c:	3001      	adds	r0, #1
    849e:	d011      	beq.n	84c4 <_printf_common+0x98>
    84a0:	9f00      	ldr	r7, [sp, #0]
    84a2:	3701      	adds	r7, #1
    84a4:	9700      	str	r7, [sp, #0]
    84a6:	68e0      	ldr	r0, [r4, #12]
    84a8:	6829      	ldr	r1, [r5, #0]
    84aa:	9f00      	ldr	r7, [sp, #0]
    84ac:	1a43      	subs	r3, r0, r1
    84ae:	429f      	cmp	r7, r3
    84b0:	dbed      	blt.n	848e <_printf_common+0x62>
    84b2:	e7d7      	b.n	8464 <_printf_common+0x38>
    84b4:	1c22      	adds	r2, r4, #0
    84b6:	1c30      	adds	r0, r6, #0
    84b8:	9901      	ldr	r1, [sp, #4]
    84ba:	3243      	adds	r2, #67	; 0x43
    84bc:	9f08      	ldr	r7, [sp, #32]
    84be:	47b8      	blx	r7
    84c0:	3001      	adds	r0, #1
    84c2:	d102      	bne.n	84ca <_printf_common+0x9e>
    84c4:	2001      	movs	r0, #1
    84c6:	4240      	negs	r0, r0
    84c8:	e023      	b.n	8512 <_printf_common+0xe6>
    84ca:	6820      	ldr	r0, [r4, #0]
    84cc:	2106      	movs	r1, #6
    84ce:	682b      	ldr	r3, [r5, #0]
    84d0:	68e2      	ldr	r2, [r4, #12]
    84d2:	4001      	ands	r1, r0
    84d4:	2500      	movs	r5, #0
    84d6:	2904      	cmp	r1, #4
    84d8:	d103      	bne.n	84e2 <_printf_common+0xb6>
    84da:	1ad5      	subs	r5, r2, r3
    84dc:	43eb      	mvns	r3, r5
    84de:	17db      	asrs	r3, r3, #31
    84e0:	401d      	ands	r5, r3
    84e2:	68a2      	ldr	r2, [r4, #8]
    84e4:	6923      	ldr	r3, [r4, #16]
    84e6:	429a      	cmp	r2, r3
    84e8:	dd01      	ble.n	84ee <_printf_common+0xc2>
    84ea:	1ad3      	subs	r3, r2, r3
    84ec:	18ed      	adds	r5, r5, r3
    84ee:	2700      	movs	r7, #0
    84f0:	9700      	str	r7, [sp, #0]
    84f2:	9f00      	ldr	r7, [sp, #0]
    84f4:	42af      	cmp	r7, r5
    84f6:	da0b      	bge.n	8510 <_printf_common+0xe4>
    84f8:	1c22      	adds	r2, r4, #0
    84fa:	1c30      	adds	r0, r6, #0
    84fc:	9901      	ldr	r1, [sp, #4]
    84fe:	321a      	adds	r2, #26
    8500:	2301      	movs	r3, #1
    8502:	9f08      	ldr	r7, [sp, #32]
    8504:	47b8      	blx	r7
    8506:	3001      	adds	r0, #1
    8508:	d0dc      	beq.n	84c4 <_printf_common+0x98>
    850a:	9f00      	ldr	r7, [sp, #0]
    850c:	3701      	adds	r7, #1
    850e:	e7ef      	b.n	84f0 <_printf_common+0xc4>
    8510:	2000      	movs	r0, #0
    8512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008514 <_printf_i>:
    8514:	b5f0      	push	{r4, r5, r6, r7, lr}
    8516:	1c0d      	adds	r5, r1, #0
    8518:	b08b      	sub	sp, #44	; 0x2c
    851a:	3543      	adds	r5, #67	; 0x43
    851c:	9206      	str	r2, [sp, #24]
    851e:	9005      	str	r0, [sp, #20]
    8520:	9307      	str	r3, [sp, #28]
    8522:	9504      	str	r5, [sp, #16]
    8524:	7e0b      	ldrb	r3, [r1, #24]
    8526:	1c0c      	adds	r4, r1, #0
    8528:	9a10      	ldr	r2, [sp, #64]	; 0x40
    852a:	2b6e      	cmp	r3, #110	; 0x6e
    852c:	d100      	bne.n	8530 <_printf_i+0x1c>
    852e:	e0a7      	b.n	8680 <_printf_i+0x16c>
    8530:	d811      	bhi.n	8556 <_printf_i+0x42>
    8532:	2b63      	cmp	r3, #99	; 0x63
    8534:	d022      	beq.n	857c <_printf_i+0x68>
    8536:	d809      	bhi.n	854c <_printf_i+0x38>
    8538:	2b00      	cmp	r3, #0
    853a:	d100      	bne.n	853e <_printf_i+0x2a>
    853c:	e0b0      	b.n	86a0 <_printf_i+0x18c>
    853e:	2b58      	cmp	r3, #88	; 0x58
    8540:	d000      	beq.n	8544 <_printf_i+0x30>
    8542:	e0c0      	b.n	86c6 <_printf_i+0x1b2>
    8544:	3145      	adds	r1, #69	; 0x45
    8546:	700b      	strb	r3, [r1, #0]
    8548:	4d7b      	ldr	r5, [pc, #492]	; (8738 <_printf_i+0x224>)
    854a:	e04e      	b.n	85ea <_printf_i+0xd6>
    854c:	2b64      	cmp	r3, #100	; 0x64
    854e:	d01c      	beq.n	858a <_printf_i+0x76>
    8550:	2b69      	cmp	r3, #105	; 0x69
    8552:	d01a      	beq.n	858a <_printf_i+0x76>
    8554:	e0b7      	b.n	86c6 <_printf_i+0x1b2>
    8556:	2b73      	cmp	r3, #115	; 0x73
    8558:	d100      	bne.n	855c <_printf_i+0x48>
    855a:	e0a5      	b.n	86a8 <_printf_i+0x194>
    855c:	d809      	bhi.n	8572 <_printf_i+0x5e>
    855e:	2b6f      	cmp	r3, #111	; 0x6f
    8560:	d029      	beq.n	85b6 <_printf_i+0xa2>
    8562:	2b70      	cmp	r3, #112	; 0x70
    8564:	d000      	beq.n	8568 <_printf_i+0x54>
    8566:	e0ae      	b.n	86c6 <_printf_i+0x1b2>
    8568:	680e      	ldr	r6, [r1, #0]
    856a:	2320      	movs	r3, #32
    856c:	4333      	orrs	r3, r6
    856e:	600b      	str	r3, [r1, #0]
    8570:	e036      	b.n	85e0 <_printf_i+0xcc>
    8572:	2b75      	cmp	r3, #117	; 0x75
    8574:	d01f      	beq.n	85b6 <_printf_i+0xa2>
    8576:	2b78      	cmp	r3, #120	; 0x78
    8578:	d032      	beq.n	85e0 <_printf_i+0xcc>
    857a:	e0a4      	b.n	86c6 <_printf_i+0x1b2>
    857c:	6813      	ldr	r3, [r2, #0]
    857e:	1c0d      	adds	r5, r1, #0
    8580:	1d19      	adds	r1, r3, #4
    8582:	3542      	adds	r5, #66	; 0x42
    8584:	6011      	str	r1, [r2, #0]
    8586:	681b      	ldr	r3, [r3, #0]
    8588:	e09f      	b.n	86ca <_printf_i+0x1b6>
    858a:	6821      	ldr	r1, [r4, #0]
    858c:	6813      	ldr	r3, [r2, #0]
    858e:	060e      	lsls	r6, r1, #24
    8590:	d503      	bpl.n	859a <_printf_i+0x86>
    8592:	1d19      	adds	r1, r3, #4
    8594:	6011      	str	r1, [r2, #0]
    8596:	681e      	ldr	r6, [r3, #0]
    8598:	e005      	b.n	85a6 <_printf_i+0x92>
    859a:	0648      	lsls	r0, r1, #25
    859c:	d5f9      	bpl.n	8592 <_printf_i+0x7e>
    859e:	1d19      	adds	r1, r3, #4
    85a0:	6011      	str	r1, [r2, #0]
    85a2:	2100      	movs	r1, #0
    85a4:	5e5e      	ldrsh	r6, [r3, r1]
    85a6:	4b64      	ldr	r3, [pc, #400]	; (8738 <_printf_i+0x224>)
    85a8:	2e00      	cmp	r6, #0
    85aa:	da3b      	bge.n	8624 <_printf_i+0x110>
    85ac:	9d04      	ldr	r5, [sp, #16]
    85ae:	222d      	movs	r2, #45	; 0x2d
    85b0:	4276      	negs	r6, r6
    85b2:	702a      	strb	r2, [r5, #0]
    85b4:	e036      	b.n	8624 <_printf_i+0x110>
    85b6:	6821      	ldr	r1, [r4, #0]
    85b8:	6813      	ldr	r3, [r2, #0]
    85ba:	060e      	lsls	r6, r1, #24
    85bc:	d503      	bpl.n	85c6 <_printf_i+0xb2>
    85be:	1d19      	adds	r1, r3, #4
    85c0:	6011      	str	r1, [r2, #0]
    85c2:	681e      	ldr	r6, [r3, #0]
    85c4:	e004      	b.n	85d0 <_printf_i+0xbc>
    85c6:	0648      	lsls	r0, r1, #25
    85c8:	d5f9      	bpl.n	85be <_printf_i+0xaa>
    85ca:	1d19      	adds	r1, r3, #4
    85cc:	881e      	ldrh	r6, [r3, #0]
    85ce:	6011      	str	r1, [r2, #0]
    85d0:	4b59      	ldr	r3, [pc, #356]	; (8738 <_printf_i+0x224>)
    85d2:	7e22      	ldrb	r2, [r4, #24]
    85d4:	9303      	str	r3, [sp, #12]
    85d6:	2708      	movs	r7, #8
    85d8:	2a6f      	cmp	r2, #111	; 0x6f
    85da:	d01e      	beq.n	861a <_printf_i+0x106>
    85dc:	270a      	movs	r7, #10
    85de:	e01c      	b.n	861a <_printf_i+0x106>
    85e0:	1c23      	adds	r3, r4, #0
    85e2:	2178      	movs	r1, #120	; 0x78
    85e4:	3345      	adds	r3, #69	; 0x45
    85e6:	4d55      	ldr	r5, [pc, #340]	; (873c <_printf_i+0x228>)
    85e8:	7019      	strb	r1, [r3, #0]
    85ea:	6811      	ldr	r1, [r2, #0]
    85ec:	6823      	ldr	r3, [r4, #0]
    85ee:	1d08      	adds	r0, r1, #4
    85f0:	9503      	str	r5, [sp, #12]
    85f2:	6010      	str	r0, [r2, #0]
    85f4:	061e      	lsls	r6, r3, #24
    85f6:	d501      	bpl.n	85fc <_printf_i+0xe8>
    85f8:	680e      	ldr	r6, [r1, #0]
    85fa:	e002      	b.n	8602 <_printf_i+0xee>
    85fc:	0658      	lsls	r0, r3, #25
    85fe:	d5fb      	bpl.n	85f8 <_printf_i+0xe4>
    8600:	880e      	ldrh	r6, [r1, #0]
    8602:	07d9      	lsls	r1, r3, #31
    8604:	d502      	bpl.n	860c <_printf_i+0xf8>
    8606:	2220      	movs	r2, #32
    8608:	4313      	orrs	r3, r2
    860a:	6023      	str	r3, [r4, #0]
    860c:	2710      	movs	r7, #16
    860e:	2e00      	cmp	r6, #0
    8610:	d103      	bne.n	861a <_printf_i+0x106>
    8612:	6822      	ldr	r2, [r4, #0]
    8614:	2320      	movs	r3, #32
    8616:	439a      	bics	r2, r3
    8618:	6022      	str	r2, [r4, #0]
    861a:	1c23      	adds	r3, r4, #0
    861c:	2200      	movs	r2, #0
    861e:	3343      	adds	r3, #67	; 0x43
    8620:	701a      	strb	r2, [r3, #0]
    8622:	e001      	b.n	8628 <_printf_i+0x114>
    8624:	9303      	str	r3, [sp, #12]
    8626:	270a      	movs	r7, #10
    8628:	6863      	ldr	r3, [r4, #4]
    862a:	60a3      	str	r3, [r4, #8]
    862c:	2b00      	cmp	r3, #0
    862e:	db03      	blt.n	8638 <_printf_i+0x124>
    8630:	6825      	ldr	r5, [r4, #0]
    8632:	2204      	movs	r2, #4
    8634:	4395      	bics	r5, r2
    8636:	6025      	str	r5, [r4, #0]
    8638:	2e00      	cmp	r6, #0
    863a:	d102      	bne.n	8642 <_printf_i+0x12e>
    863c:	9d04      	ldr	r5, [sp, #16]
    863e:	2b00      	cmp	r3, #0
    8640:	d00e      	beq.n	8660 <_printf_i+0x14c>
    8642:	9d04      	ldr	r5, [sp, #16]
    8644:	1c30      	adds	r0, r6, #0
    8646:	1c39      	adds	r1, r7, #0
    8648:	f7fe ff2c 	bl	74a4 <__aeabi_uidivmod>
    864c:	9803      	ldr	r0, [sp, #12]
    864e:	3d01      	subs	r5, #1
    8650:	5c43      	ldrb	r3, [r0, r1]
    8652:	1c30      	adds	r0, r6, #0
    8654:	702b      	strb	r3, [r5, #0]
    8656:	1c39      	adds	r1, r7, #0
    8658:	f7fe fee0 	bl	741c <__aeabi_uidiv>
    865c:	1e06      	subs	r6, r0, #0
    865e:	d1f1      	bne.n	8644 <_printf_i+0x130>
    8660:	2f08      	cmp	r7, #8
    8662:	d109      	bne.n	8678 <_printf_i+0x164>
    8664:	6821      	ldr	r1, [r4, #0]
    8666:	07c9      	lsls	r1, r1, #31
    8668:	d506      	bpl.n	8678 <_printf_i+0x164>
    866a:	6862      	ldr	r2, [r4, #4]
    866c:	6923      	ldr	r3, [r4, #16]
    866e:	429a      	cmp	r2, r3
    8670:	dc02      	bgt.n	8678 <_printf_i+0x164>
    8672:	3d01      	subs	r5, #1
    8674:	2330      	movs	r3, #48	; 0x30
    8676:	702b      	strb	r3, [r5, #0]
    8678:	9e04      	ldr	r6, [sp, #16]
    867a:	1b73      	subs	r3, r6, r5
    867c:	6123      	str	r3, [r4, #16]
    867e:	e02a      	b.n	86d6 <_printf_i+0x1c2>
    8680:	6808      	ldr	r0, [r1, #0]
    8682:	6813      	ldr	r3, [r2, #0]
    8684:	6949      	ldr	r1, [r1, #20]
    8686:	0605      	lsls	r5, r0, #24
    8688:	d504      	bpl.n	8694 <_printf_i+0x180>
    868a:	1d18      	adds	r0, r3, #4
    868c:	6010      	str	r0, [r2, #0]
    868e:	681b      	ldr	r3, [r3, #0]
    8690:	6019      	str	r1, [r3, #0]
    8692:	e005      	b.n	86a0 <_printf_i+0x18c>
    8694:	0646      	lsls	r6, r0, #25
    8696:	d5f8      	bpl.n	868a <_printf_i+0x176>
    8698:	1d18      	adds	r0, r3, #4
    869a:	6010      	str	r0, [r2, #0]
    869c:	681b      	ldr	r3, [r3, #0]
    869e:	8019      	strh	r1, [r3, #0]
    86a0:	2300      	movs	r3, #0
    86a2:	6123      	str	r3, [r4, #16]
    86a4:	9d04      	ldr	r5, [sp, #16]
    86a6:	e016      	b.n	86d6 <_printf_i+0x1c2>
    86a8:	6813      	ldr	r3, [r2, #0]
    86aa:	1d19      	adds	r1, r3, #4
    86ac:	6011      	str	r1, [r2, #0]
    86ae:	681d      	ldr	r5, [r3, #0]
    86b0:	1c28      	adds	r0, r5, #0
    86b2:	f7ff fc31 	bl	7f18 <strlen>
    86b6:	6863      	ldr	r3, [r4, #4]
    86b8:	6120      	str	r0, [r4, #16]
    86ba:	4298      	cmp	r0, r3
    86bc:	d900      	bls.n	86c0 <_printf_i+0x1ac>
    86be:	6123      	str	r3, [r4, #16]
    86c0:	6920      	ldr	r0, [r4, #16]
    86c2:	6060      	str	r0, [r4, #4]
    86c4:	e004      	b.n	86d0 <_printf_i+0x1bc>
    86c6:	1c25      	adds	r5, r4, #0
    86c8:	3542      	adds	r5, #66	; 0x42
    86ca:	702b      	strb	r3, [r5, #0]
    86cc:	2301      	movs	r3, #1
    86ce:	6123      	str	r3, [r4, #16]
    86d0:	9e04      	ldr	r6, [sp, #16]
    86d2:	2300      	movs	r3, #0
    86d4:	7033      	strb	r3, [r6, #0]
    86d6:	9e07      	ldr	r6, [sp, #28]
    86d8:	9805      	ldr	r0, [sp, #20]
    86da:	9600      	str	r6, [sp, #0]
    86dc:	1c21      	adds	r1, r4, #0
    86de:	aa09      	add	r2, sp, #36	; 0x24
    86e0:	9b06      	ldr	r3, [sp, #24]
    86e2:	f7ff fea3 	bl	842c <_printf_common>
    86e6:	3001      	adds	r0, #1
    86e8:	d102      	bne.n	86f0 <_printf_i+0x1dc>
    86ea:	2001      	movs	r0, #1
    86ec:	4240      	negs	r0, r0
    86ee:	e021      	b.n	8734 <_printf_i+0x220>
    86f0:	1c2a      	adds	r2, r5, #0
    86f2:	9805      	ldr	r0, [sp, #20]
    86f4:	9906      	ldr	r1, [sp, #24]
    86f6:	6923      	ldr	r3, [r4, #16]
    86f8:	9d07      	ldr	r5, [sp, #28]
    86fa:	47a8      	blx	r5
    86fc:	3001      	adds	r0, #1
    86fe:	d0f4      	beq.n	86ea <_printf_i+0x1d6>
    8700:	6826      	ldr	r6, [r4, #0]
    8702:	07b6      	lsls	r6, r6, #30
    8704:	d405      	bmi.n	8712 <_printf_i+0x1fe>
    8706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8708:	68e0      	ldr	r0, [r4, #12]
    870a:	4298      	cmp	r0, r3
    870c:	da12      	bge.n	8734 <_printf_i+0x220>
    870e:	1c18      	adds	r0, r3, #0
    8710:	e010      	b.n	8734 <_printf_i+0x220>
    8712:	2500      	movs	r5, #0
    8714:	68e0      	ldr	r0, [r4, #12]
    8716:	9909      	ldr	r1, [sp, #36]	; 0x24
    8718:	1a43      	subs	r3, r0, r1
    871a:	429d      	cmp	r5, r3
    871c:	daf3      	bge.n	8706 <_printf_i+0x1f2>
    871e:	1c22      	adds	r2, r4, #0
    8720:	9805      	ldr	r0, [sp, #20]
    8722:	9906      	ldr	r1, [sp, #24]
    8724:	3219      	adds	r2, #25
    8726:	2301      	movs	r3, #1
    8728:	9e07      	ldr	r6, [sp, #28]
    872a:	47b0      	blx	r6
    872c:	3001      	adds	r0, #1
    872e:	d0dc      	beq.n	86ea <_printf_i+0x1d6>
    8730:	3501      	adds	r5, #1
    8732:	e7ef      	b.n	8714 <_printf_i+0x200>
    8734:	b00b      	add	sp, #44	; 0x2c
    8736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8738:	0000a5a1 	.word	0x0000a5a1
    873c:	0000a5b2 	.word	0x0000a5b2

00008740 <__swbuf_r>:
    8740:	b570      	push	{r4, r5, r6, lr}
    8742:	1c05      	adds	r5, r0, #0
    8744:	1c0e      	adds	r6, r1, #0
    8746:	1c14      	adds	r4, r2, #0
    8748:	2800      	cmp	r0, #0
    874a:	d004      	beq.n	8756 <__swbuf_r+0x16>
    874c:	6982      	ldr	r2, [r0, #24]
    874e:	2a00      	cmp	r2, #0
    8750:	d101      	bne.n	8756 <__swbuf_r+0x16>
    8752:	f000 fa07 	bl	8b64 <__sinit>
    8756:	4b23      	ldr	r3, [pc, #140]	; (87e4 <__swbuf_r+0xa4>)
    8758:	429c      	cmp	r4, r3
    875a:	d101      	bne.n	8760 <__swbuf_r+0x20>
    875c:	686c      	ldr	r4, [r5, #4]
    875e:	e008      	b.n	8772 <__swbuf_r+0x32>
    8760:	4b21      	ldr	r3, [pc, #132]	; (87e8 <__swbuf_r+0xa8>)
    8762:	429c      	cmp	r4, r3
    8764:	d101      	bne.n	876a <__swbuf_r+0x2a>
    8766:	68ac      	ldr	r4, [r5, #8]
    8768:	e003      	b.n	8772 <__swbuf_r+0x32>
    876a:	4b20      	ldr	r3, [pc, #128]	; (87ec <__swbuf_r+0xac>)
    876c:	429c      	cmp	r4, r3
    876e:	d100      	bne.n	8772 <__swbuf_r+0x32>
    8770:	68ec      	ldr	r4, [r5, #12]
    8772:	69a3      	ldr	r3, [r4, #24]
    8774:	60a3      	str	r3, [r4, #8]
    8776:	89a3      	ldrh	r3, [r4, #12]
    8778:	071a      	lsls	r2, r3, #28
    877a:	d50a      	bpl.n	8792 <__swbuf_r+0x52>
    877c:	6923      	ldr	r3, [r4, #16]
    877e:	2b00      	cmp	r3, #0
    8780:	d007      	beq.n	8792 <__swbuf_r+0x52>
    8782:	6822      	ldr	r2, [r4, #0]
    8784:	6923      	ldr	r3, [r4, #16]
    8786:	b2f6      	uxtb	r6, r6
    8788:	1ad0      	subs	r0, r2, r3
    878a:	6962      	ldr	r2, [r4, #20]
    878c:	4290      	cmp	r0, r2
    878e:	db0f      	blt.n	87b0 <__swbuf_r+0x70>
    8790:	e008      	b.n	87a4 <__swbuf_r+0x64>
    8792:	1c28      	adds	r0, r5, #0
    8794:	1c21      	adds	r1, r4, #0
    8796:	f000 f82b 	bl	87f0 <__swsetup_r>
    879a:	2800      	cmp	r0, #0
    879c:	d0f1      	beq.n	8782 <__swbuf_r+0x42>
    879e:	2001      	movs	r0, #1
    87a0:	4240      	negs	r0, r0
    87a2:	e01d      	b.n	87e0 <__swbuf_r+0xa0>
    87a4:	1c28      	adds	r0, r5, #0
    87a6:	1c21      	adds	r1, r4, #0
    87a8:	f000 f95c 	bl	8a64 <_fflush_r>
    87ac:	2800      	cmp	r0, #0
    87ae:	d1f6      	bne.n	879e <__swbuf_r+0x5e>
    87b0:	68a3      	ldr	r3, [r4, #8]
    87b2:	3001      	adds	r0, #1
    87b4:	3b01      	subs	r3, #1
    87b6:	60a3      	str	r3, [r4, #8]
    87b8:	6823      	ldr	r3, [r4, #0]
    87ba:	1c5a      	adds	r2, r3, #1
    87bc:	6022      	str	r2, [r4, #0]
    87be:	701e      	strb	r6, [r3, #0]
    87c0:	6963      	ldr	r3, [r4, #20]
    87c2:	4298      	cmp	r0, r3
    87c4:	d005      	beq.n	87d2 <__swbuf_r+0x92>
    87c6:	89a3      	ldrh	r3, [r4, #12]
    87c8:	1c30      	adds	r0, r6, #0
    87ca:	07da      	lsls	r2, r3, #31
    87cc:	d508      	bpl.n	87e0 <__swbuf_r+0xa0>
    87ce:	2e0a      	cmp	r6, #10
    87d0:	d106      	bne.n	87e0 <__swbuf_r+0xa0>
    87d2:	1c28      	adds	r0, r5, #0
    87d4:	1c21      	adds	r1, r4, #0
    87d6:	f000 f945 	bl	8a64 <_fflush_r>
    87da:	2800      	cmp	r0, #0
    87dc:	d1df      	bne.n	879e <__swbuf_r+0x5e>
    87de:	1c30      	adds	r0, r6, #0
    87e0:	bd70      	pop	{r4, r5, r6, pc}
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	0000a61c 	.word	0x0000a61c
    87e8:	0000a63c 	.word	0x0000a63c
    87ec:	0000a65c 	.word	0x0000a65c

000087f0 <__swsetup_r>:
    87f0:	4b34      	ldr	r3, [pc, #208]	; (88c4 <__swsetup_r+0xd4>)
    87f2:	b570      	push	{r4, r5, r6, lr}
    87f4:	681d      	ldr	r5, [r3, #0]
    87f6:	1c06      	adds	r6, r0, #0
    87f8:	1c0c      	adds	r4, r1, #0
    87fa:	2d00      	cmp	r5, #0
    87fc:	d005      	beq.n	880a <__swsetup_r+0x1a>
    87fe:	69a9      	ldr	r1, [r5, #24]
    8800:	2900      	cmp	r1, #0
    8802:	d102      	bne.n	880a <__swsetup_r+0x1a>
    8804:	1c28      	adds	r0, r5, #0
    8806:	f000 f9ad 	bl	8b64 <__sinit>
    880a:	4b2f      	ldr	r3, [pc, #188]	; (88c8 <__swsetup_r+0xd8>)
    880c:	429c      	cmp	r4, r3
    880e:	d101      	bne.n	8814 <__swsetup_r+0x24>
    8810:	686c      	ldr	r4, [r5, #4]
    8812:	e008      	b.n	8826 <__swsetup_r+0x36>
    8814:	4b2d      	ldr	r3, [pc, #180]	; (88cc <__swsetup_r+0xdc>)
    8816:	429c      	cmp	r4, r3
    8818:	d101      	bne.n	881e <__swsetup_r+0x2e>
    881a:	68ac      	ldr	r4, [r5, #8]
    881c:	e003      	b.n	8826 <__swsetup_r+0x36>
    881e:	4b2c      	ldr	r3, [pc, #176]	; (88d0 <__swsetup_r+0xe0>)
    8820:	429c      	cmp	r4, r3
    8822:	d100      	bne.n	8826 <__swsetup_r+0x36>
    8824:	68ec      	ldr	r4, [r5, #12]
    8826:	89a2      	ldrh	r2, [r4, #12]
    8828:	b293      	uxth	r3, r2
    882a:	0719      	lsls	r1, r3, #28
    882c:	d421      	bmi.n	8872 <__swsetup_r+0x82>
    882e:	06d9      	lsls	r1, r3, #27
    8830:	d405      	bmi.n	883e <__swsetup_r+0x4e>
    8832:	2309      	movs	r3, #9
    8834:	6033      	str	r3, [r6, #0]
    8836:	2340      	movs	r3, #64	; 0x40
    8838:	431a      	orrs	r2, r3
    883a:	81a2      	strh	r2, [r4, #12]
    883c:	e03f      	b.n	88be <__swsetup_r+0xce>
    883e:	075a      	lsls	r2, r3, #29
    8840:	d513      	bpl.n	886a <__swsetup_r+0x7a>
    8842:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8844:	2900      	cmp	r1, #0
    8846:	d008      	beq.n	885a <__swsetup_r+0x6a>
    8848:	1c23      	adds	r3, r4, #0
    884a:	3344      	adds	r3, #68	; 0x44
    884c:	4299      	cmp	r1, r3
    884e:	d002      	beq.n	8856 <__swsetup_r+0x66>
    8850:	1c30      	adds	r0, r6, #0
    8852:	f7ff f955 	bl	7b00 <_free_r>
    8856:	2300      	movs	r3, #0
    8858:	6363      	str	r3, [r4, #52]	; 0x34
    885a:	89a3      	ldrh	r3, [r4, #12]
    885c:	2224      	movs	r2, #36	; 0x24
    885e:	4393      	bics	r3, r2
    8860:	81a3      	strh	r3, [r4, #12]
    8862:	2300      	movs	r3, #0
    8864:	6063      	str	r3, [r4, #4]
    8866:	6923      	ldr	r3, [r4, #16]
    8868:	6023      	str	r3, [r4, #0]
    886a:	89a3      	ldrh	r3, [r4, #12]
    886c:	2208      	movs	r2, #8
    886e:	4313      	orrs	r3, r2
    8870:	81a3      	strh	r3, [r4, #12]
    8872:	6921      	ldr	r1, [r4, #16]
    8874:	2900      	cmp	r1, #0
    8876:	d10b      	bne.n	8890 <__swsetup_r+0xa0>
    8878:	89a3      	ldrh	r3, [r4, #12]
    887a:	22a0      	movs	r2, #160	; 0xa0
    887c:	0092      	lsls	r2, r2, #2
    887e:	401a      	ands	r2, r3
    8880:	2380      	movs	r3, #128	; 0x80
    8882:	009b      	lsls	r3, r3, #2
    8884:	429a      	cmp	r2, r3
    8886:	d003      	beq.n	8890 <__swsetup_r+0xa0>
    8888:	1c30      	adds	r0, r6, #0
    888a:	1c21      	adds	r1, r4, #0
    888c:	f000 f9de 	bl	8c4c <__smakebuf_r>
    8890:	89a3      	ldrh	r3, [r4, #12]
    8892:	2201      	movs	r2, #1
    8894:	401a      	ands	r2, r3
    8896:	d005      	beq.n	88a4 <__swsetup_r+0xb4>
    8898:	6961      	ldr	r1, [r4, #20]
    889a:	2200      	movs	r2, #0
    889c:	60a2      	str	r2, [r4, #8]
    889e:	424a      	negs	r2, r1
    88a0:	61a2      	str	r2, [r4, #24]
    88a2:	e003      	b.n	88ac <__swsetup_r+0xbc>
    88a4:	0799      	lsls	r1, r3, #30
    88a6:	d400      	bmi.n	88aa <__swsetup_r+0xba>
    88a8:	6962      	ldr	r2, [r4, #20]
    88aa:	60a2      	str	r2, [r4, #8]
    88ac:	6922      	ldr	r2, [r4, #16]
    88ae:	2000      	movs	r0, #0
    88b0:	4282      	cmp	r2, r0
    88b2:	d106      	bne.n	88c2 <__swsetup_r+0xd2>
    88b4:	0619      	lsls	r1, r3, #24
    88b6:	d504      	bpl.n	88c2 <__swsetup_r+0xd2>
    88b8:	2240      	movs	r2, #64	; 0x40
    88ba:	4313      	orrs	r3, r2
    88bc:	81a3      	strh	r3, [r4, #12]
    88be:	2001      	movs	r0, #1
    88c0:	4240      	negs	r0, r0
    88c2:	bd70      	pop	{r4, r5, r6, pc}
    88c4:	20000078 	.word	0x20000078
    88c8:	0000a61c 	.word	0x0000a61c
    88cc:	0000a63c 	.word	0x0000a63c
    88d0:	0000a65c 	.word	0x0000a65c

000088d4 <asctime>:
    88d4:	4b09      	ldr	r3, [pc, #36]	; (88fc <asctime+0x28>)
    88d6:	b570      	push	{r4, r5, r6, lr}
    88d8:	681c      	ldr	r4, [r3, #0]
    88da:	1c06      	adds	r6, r0, #0
    88dc:	6c25      	ldr	r5, [r4, #64]	; 0x40
    88de:	2d00      	cmp	r5, #0
    88e0:	d107      	bne.n	88f2 <asctime+0x1e>
    88e2:	201a      	movs	r0, #26
    88e4:	f7fe fec8 	bl	7678 <malloc>
    88e8:	1c29      	adds	r1, r5, #0
    88ea:	6420      	str	r0, [r4, #64]	; 0x40
    88ec:	221a      	movs	r2, #26
    88ee:	f7fe feef 	bl	76d0 <memset>
    88f2:	1c30      	adds	r0, r6, #0
    88f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    88f6:	f000 f803 	bl	8900 <asctime_r>
    88fa:	bd70      	pop	{r4, r5, r6, pc}
    88fc:	20000078 	.word	0x20000078

00008900 <asctime_r>:
    8900:	6982      	ldr	r2, [r0, #24]
    8902:	2303      	movs	r3, #3
    8904:	435a      	muls	r2, r3
    8906:	b520      	push	{r5, lr}
    8908:	1c0d      	adds	r5, r1, #0
    890a:	490d      	ldr	r1, [pc, #52]	; (8940 <asctime_r+0x40>)
    890c:	b086      	sub	sp, #24
    890e:	188a      	adds	r2, r1, r2
    8910:	6901      	ldr	r1, [r0, #16]
    8912:	434b      	muls	r3, r1
    8914:	490b      	ldr	r1, [pc, #44]	; (8944 <asctime_r+0x44>)
    8916:	18cb      	adds	r3, r1, r3
    8918:	68c1      	ldr	r1, [r0, #12]
    891a:	9100      	str	r1, [sp, #0]
    891c:	6881      	ldr	r1, [r0, #8]
    891e:	9101      	str	r1, [sp, #4]
    8920:	6841      	ldr	r1, [r0, #4]
    8922:	9102      	str	r1, [sp, #8]
    8924:	6801      	ldr	r1, [r0, #0]
    8926:	9103      	str	r1, [sp, #12]
    8928:	6941      	ldr	r1, [r0, #20]
    892a:	4807      	ldr	r0, [pc, #28]	; (8948 <asctime_r+0x48>)
    892c:	1809      	adds	r1, r1, r0
    892e:	9104      	str	r1, [sp, #16]
    8930:	1c28      	adds	r0, r5, #0
    8932:	4906      	ldr	r1, [pc, #24]	; (894c <asctime_r+0x4c>)
    8934:	f7ff fabc 	bl	7eb0 <siprintf>
    8938:	1c28      	adds	r0, r5, #0
    893a:	b006      	add	sp, #24
    893c:	bd20      	pop	{r5, pc}
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	0000a5e3 	.word	0x0000a5e3
    8944:	0000a5f8 	.word	0x0000a5f8
    8948:	0000076c 	.word	0x0000076c
    894c:	0000a5c3 	.word	0x0000a5c3

00008950 <__sflush_r>:
    8950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8952:	898b      	ldrh	r3, [r1, #12]
    8954:	1c05      	adds	r5, r0, #0
    8956:	1c0c      	adds	r4, r1, #0
    8958:	0719      	lsls	r1, r3, #28
    895a:	d45e      	bmi.n	8a1a <__sflush_r+0xca>
    895c:	6862      	ldr	r2, [r4, #4]
    895e:	2a00      	cmp	r2, #0
    8960:	dc02      	bgt.n	8968 <__sflush_r+0x18>
    8962:	6c27      	ldr	r7, [r4, #64]	; 0x40
    8964:	2f00      	cmp	r7, #0
    8966:	dd1a      	ble.n	899e <__sflush_r+0x4e>
    8968:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    896a:	2f00      	cmp	r7, #0
    896c:	d017      	beq.n	899e <__sflush_r+0x4e>
    896e:	2200      	movs	r2, #0
    8970:	682e      	ldr	r6, [r5, #0]
    8972:	602a      	str	r2, [r5, #0]
    8974:	2280      	movs	r2, #128	; 0x80
    8976:	0152      	lsls	r2, r2, #5
    8978:	401a      	ands	r2, r3
    897a:	d001      	beq.n	8980 <__sflush_r+0x30>
    897c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    897e:	e015      	b.n	89ac <__sflush_r+0x5c>
    8980:	1c28      	adds	r0, r5, #0
    8982:	6a21      	ldr	r1, [r4, #32]
    8984:	2301      	movs	r3, #1
    8986:	47b8      	blx	r7
    8988:	1c02      	adds	r2, r0, #0
    898a:	1c41      	adds	r1, r0, #1
    898c:	d10e      	bne.n	89ac <__sflush_r+0x5c>
    898e:	682b      	ldr	r3, [r5, #0]
    8990:	2b00      	cmp	r3, #0
    8992:	d00b      	beq.n	89ac <__sflush_r+0x5c>
    8994:	2b1d      	cmp	r3, #29
    8996:	d001      	beq.n	899c <__sflush_r+0x4c>
    8998:	2b16      	cmp	r3, #22
    899a:	d102      	bne.n	89a2 <__sflush_r+0x52>
    899c:	602e      	str	r6, [r5, #0]
    899e:	2000      	movs	r0, #0
    89a0:	e05e      	b.n	8a60 <__sflush_r+0x110>
    89a2:	89a3      	ldrh	r3, [r4, #12]
    89a4:	2140      	movs	r1, #64	; 0x40
    89a6:	430b      	orrs	r3, r1
    89a8:	81a3      	strh	r3, [r4, #12]
    89aa:	e059      	b.n	8a60 <__sflush_r+0x110>
    89ac:	89a3      	ldrh	r3, [r4, #12]
    89ae:	075f      	lsls	r7, r3, #29
    89b0:	d506      	bpl.n	89c0 <__sflush_r+0x70>
    89b2:	6861      	ldr	r1, [r4, #4]
    89b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    89b6:	1a52      	subs	r2, r2, r1
    89b8:	2b00      	cmp	r3, #0
    89ba:	d001      	beq.n	89c0 <__sflush_r+0x70>
    89bc:	6c27      	ldr	r7, [r4, #64]	; 0x40
    89be:	1bd2      	subs	r2, r2, r7
    89c0:	1c28      	adds	r0, r5, #0
    89c2:	6a21      	ldr	r1, [r4, #32]
    89c4:	2300      	movs	r3, #0
    89c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    89c8:	47b8      	blx	r7
    89ca:	89a2      	ldrh	r2, [r4, #12]
    89cc:	1c41      	adds	r1, r0, #1
    89ce:	d106      	bne.n	89de <__sflush_r+0x8e>
    89d0:	682b      	ldr	r3, [r5, #0]
    89d2:	2b00      	cmp	r3, #0
    89d4:	d003      	beq.n	89de <__sflush_r+0x8e>
    89d6:	2b1d      	cmp	r3, #29
    89d8:	d001      	beq.n	89de <__sflush_r+0x8e>
    89da:	2b16      	cmp	r3, #22
    89dc:	d119      	bne.n	8a12 <__sflush_r+0xc2>
    89de:	2300      	movs	r3, #0
    89e0:	6063      	str	r3, [r4, #4]
    89e2:	6923      	ldr	r3, [r4, #16]
    89e4:	6023      	str	r3, [r4, #0]
    89e6:	04d7      	lsls	r7, r2, #19
    89e8:	d505      	bpl.n	89f6 <__sflush_r+0xa6>
    89ea:	1c41      	adds	r1, r0, #1
    89ec:	d102      	bne.n	89f4 <__sflush_r+0xa4>
    89ee:	682a      	ldr	r2, [r5, #0]
    89f0:	2a00      	cmp	r2, #0
    89f2:	d100      	bne.n	89f6 <__sflush_r+0xa6>
    89f4:	6560      	str	r0, [r4, #84]	; 0x54
    89f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    89f8:	602e      	str	r6, [r5, #0]
    89fa:	2900      	cmp	r1, #0
    89fc:	d0cf      	beq.n	899e <__sflush_r+0x4e>
    89fe:	1c23      	adds	r3, r4, #0
    8a00:	3344      	adds	r3, #68	; 0x44
    8a02:	4299      	cmp	r1, r3
    8a04:	d002      	beq.n	8a0c <__sflush_r+0xbc>
    8a06:	1c28      	adds	r0, r5, #0
    8a08:	f7ff f87a 	bl	7b00 <_free_r>
    8a0c:	2000      	movs	r0, #0
    8a0e:	6360      	str	r0, [r4, #52]	; 0x34
    8a10:	e026      	b.n	8a60 <__sflush_r+0x110>
    8a12:	2340      	movs	r3, #64	; 0x40
    8a14:	431a      	orrs	r2, r3
    8a16:	81a2      	strh	r2, [r4, #12]
    8a18:	e022      	b.n	8a60 <__sflush_r+0x110>
    8a1a:	6926      	ldr	r6, [r4, #16]
    8a1c:	2e00      	cmp	r6, #0
    8a1e:	d0be      	beq.n	899e <__sflush_r+0x4e>
    8a20:	6827      	ldr	r7, [r4, #0]
    8a22:	2200      	movs	r2, #0
    8a24:	1bbf      	subs	r7, r7, r6
    8a26:	9701      	str	r7, [sp, #4]
    8a28:	6026      	str	r6, [r4, #0]
    8a2a:	0799      	lsls	r1, r3, #30
    8a2c:	d100      	bne.n	8a30 <__sflush_r+0xe0>
    8a2e:	6962      	ldr	r2, [r4, #20]
    8a30:	60a2      	str	r2, [r4, #8]
    8a32:	9f01      	ldr	r7, [sp, #4]
    8a34:	2f00      	cmp	r7, #0
    8a36:	ddb2      	ble.n	899e <__sflush_r+0x4e>
    8a38:	1c28      	adds	r0, r5, #0
    8a3a:	6a21      	ldr	r1, [r4, #32]
    8a3c:	1c32      	adds	r2, r6, #0
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    8a42:	47b8      	blx	r7
    8a44:	2800      	cmp	r0, #0
    8a46:	dc06      	bgt.n	8a56 <__sflush_r+0x106>
    8a48:	89a3      	ldrh	r3, [r4, #12]
    8a4a:	2240      	movs	r2, #64	; 0x40
    8a4c:	4313      	orrs	r3, r2
    8a4e:	2001      	movs	r0, #1
    8a50:	81a3      	strh	r3, [r4, #12]
    8a52:	4240      	negs	r0, r0
    8a54:	e004      	b.n	8a60 <__sflush_r+0x110>
    8a56:	9f01      	ldr	r7, [sp, #4]
    8a58:	1836      	adds	r6, r6, r0
    8a5a:	1a3f      	subs	r7, r7, r0
    8a5c:	9701      	str	r7, [sp, #4]
    8a5e:	e7e8      	b.n	8a32 <__sflush_r+0xe2>
    8a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00008a64 <_fflush_r>:
    8a64:	690a      	ldr	r2, [r1, #16]
    8a66:	b538      	push	{r3, r4, r5, lr}
    8a68:	1c05      	adds	r5, r0, #0
    8a6a:	1c0c      	adds	r4, r1, #0
    8a6c:	2a00      	cmp	r2, #0
    8a6e:	d101      	bne.n	8a74 <_fflush_r+0x10>
    8a70:	2000      	movs	r0, #0
    8a72:	e01c      	b.n	8aae <_fflush_r+0x4a>
    8a74:	2800      	cmp	r0, #0
    8a76:	d004      	beq.n	8a82 <_fflush_r+0x1e>
    8a78:	6983      	ldr	r3, [r0, #24]
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	d101      	bne.n	8a82 <_fflush_r+0x1e>
    8a7e:	f000 f871 	bl	8b64 <__sinit>
    8a82:	4b0b      	ldr	r3, [pc, #44]	; (8ab0 <_fflush_r+0x4c>)
    8a84:	429c      	cmp	r4, r3
    8a86:	d101      	bne.n	8a8c <_fflush_r+0x28>
    8a88:	686c      	ldr	r4, [r5, #4]
    8a8a:	e008      	b.n	8a9e <_fflush_r+0x3a>
    8a8c:	4b09      	ldr	r3, [pc, #36]	; (8ab4 <_fflush_r+0x50>)
    8a8e:	429c      	cmp	r4, r3
    8a90:	d101      	bne.n	8a96 <_fflush_r+0x32>
    8a92:	68ac      	ldr	r4, [r5, #8]
    8a94:	e003      	b.n	8a9e <_fflush_r+0x3a>
    8a96:	4b08      	ldr	r3, [pc, #32]	; (8ab8 <_fflush_r+0x54>)
    8a98:	429c      	cmp	r4, r3
    8a9a:	d100      	bne.n	8a9e <_fflush_r+0x3a>
    8a9c:	68ec      	ldr	r4, [r5, #12]
    8a9e:	220c      	movs	r2, #12
    8aa0:	5ea3      	ldrsh	r3, [r4, r2]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d0e4      	beq.n	8a70 <_fflush_r+0xc>
    8aa6:	1c28      	adds	r0, r5, #0
    8aa8:	1c21      	adds	r1, r4, #0
    8aaa:	f7ff ff51 	bl	8950 <__sflush_r>
    8aae:	bd38      	pop	{r3, r4, r5, pc}
    8ab0:	0000a61c 	.word	0x0000a61c
    8ab4:	0000a63c 	.word	0x0000a63c
    8ab8:	0000a65c 	.word	0x0000a65c

00008abc <_cleanup_r>:
    8abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8abe:	1c04      	adds	r4, r0, #0
    8ac0:	1c07      	adds	r7, r0, #0
    8ac2:	3448      	adds	r4, #72	; 0x48
    8ac4:	2c00      	cmp	r4, #0
    8ac6:	d012      	beq.n	8aee <_cleanup_r+0x32>
    8ac8:	68a5      	ldr	r5, [r4, #8]
    8aca:	6866      	ldr	r6, [r4, #4]
    8acc:	3e01      	subs	r6, #1
    8ace:	d40c      	bmi.n	8aea <_cleanup_r+0x2e>
    8ad0:	89ab      	ldrh	r3, [r5, #12]
    8ad2:	2b01      	cmp	r3, #1
    8ad4:	d907      	bls.n	8ae6 <_cleanup_r+0x2a>
    8ad6:	220e      	movs	r2, #14
    8ad8:	5eab      	ldrsh	r3, [r5, r2]
    8ada:	3301      	adds	r3, #1
    8adc:	d003      	beq.n	8ae6 <_cleanup_r+0x2a>
    8ade:	1c38      	adds	r0, r7, #0
    8ae0:	1c29      	adds	r1, r5, #0
    8ae2:	f7ff ffbf 	bl	8a64 <_fflush_r>
    8ae6:	3568      	adds	r5, #104	; 0x68
    8ae8:	e7f0      	b.n	8acc <_cleanup_r+0x10>
    8aea:	6824      	ldr	r4, [r4, #0]
    8aec:	e7ea      	b.n	8ac4 <_cleanup_r+0x8>
    8aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008af0 <std.isra.0>:
    8af0:	2300      	movs	r3, #0
    8af2:	b510      	push	{r4, lr}
    8af4:	1c04      	adds	r4, r0, #0
    8af6:	6003      	str	r3, [r0, #0]
    8af8:	6043      	str	r3, [r0, #4]
    8afa:	6083      	str	r3, [r0, #8]
    8afc:	8181      	strh	r1, [r0, #12]
    8afe:	6643      	str	r3, [r0, #100]	; 0x64
    8b00:	81c2      	strh	r2, [r0, #14]
    8b02:	6103      	str	r3, [r0, #16]
    8b04:	6143      	str	r3, [r0, #20]
    8b06:	6183      	str	r3, [r0, #24]
    8b08:	1c19      	adds	r1, r3, #0
    8b0a:	2208      	movs	r2, #8
    8b0c:	305c      	adds	r0, #92	; 0x5c
    8b0e:	f7fe fddf 	bl	76d0 <memset>
    8b12:	4b05      	ldr	r3, [pc, #20]	; (8b28 <std.isra.0+0x38>)
    8b14:	6224      	str	r4, [r4, #32]
    8b16:	6263      	str	r3, [r4, #36]	; 0x24
    8b18:	4b04      	ldr	r3, [pc, #16]	; (8b2c <std.isra.0+0x3c>)
    8b1a:	62a3      	str	r3, [r4, #40]	; 0x28
    8b1c:	4b04      	ldr	r3, [pc, #16]	; (8b30 <std.isra.0+0x40>)
    8b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    8b20:	4b04      	ldr	r3, [pc, #16]	; (8b34 <std.isra.0+0x44>)
    8b22:	6323      	str	r3, [r4, #48]	; 0x30
    8b24:	bd10      	pop	{r4, pc}
    8b26:	46c0      	nop			; (mov r8, r8)
    8b28:	00008dc9 	.word	0x00008dc9
    8b2c:	00008df1 	.word	0x00008df1
    8b30:	00008e29 	.word	0x00008e29
    8b34:	00008e55 	.word	0x00008e55

00008b38 <__sfmoreglue>:
    8b38:	b570      	push	{r4, r5, r6, lr}
    8b3a:	1e4b      	subs	r3, r1, #1
    8b3c:	2568      	movs	r5, #104	; 0x68
    8b3e:	435d      	muls	r5, r3
    8b40:	1c0e      	adds	r6, r1, #0
    8b42:	1c29      	adds	r1, r5, #0
    8b44:	3174      	adds	r1, #116	; 0x74
    8b46:	f7ff f823 	bl	7b90 <_malloc_r>
    8b4a:	1e04      	subs	r4, r0, #0
    8b4c:	d008      	beq.n	8b60 <__sfmoreglue+0x28>
    8b4e:	2100      	movs	r1, #0
    8b50:	6001      	str	r1, [r0, #0]
    8b52:	6046      	str	r6, [r0, #4]
    8b54:	1c2a      	adds	r2, r5, #0
    8b56:	300c      	adds	r0, #12
    8b58:	60a0      	str	r0, [r4, #8]
    8b5a:	3268      	adds	r2, #104	; 0x68
    8b5c:	f7fe fdb8 	bl	76d0 <memset>
    8b60:	1c20      	adds	r0, r4, #0
    8b62:	bd70      	pop	{r4, r5, r6, pc}

00008b64 <__sinit>:
    8b64:	6983      	ldr	r3, [r0, #24]
    8b66:	b513      	push	{r0, r1, r4, lr}
    8b68:	1c04      	adds	r4, r0, #0
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d127      	bne.n	8bbe <__sinit+0x5a>
    8b6e:	6483      	str	r3, [r0, #72]	; 0x48
    8b70:	64c3      	str	r3, [r0, #76]	; 0x4c
    8b72:	6503      	str	r3, [r0, #80]	; 0x50
    8b74:	4b12      	ldr	r3, [pc, #72]	; (8bc0 <__sinit+0x5c>)
    8b76:	4a13      	ldr	r2, [pc, #76]	; (8bc4 <__sinit+0x60>)
    8b78:	681b      	ldr	r3, [r3, #0]
    8b7a:	6282      	str	r2, [r0, #40]	; 0x28
    8b7c:	4298      	cmp	r0, r3
    8b7e:	d101      	bne.n	8b84 <__sinit+0x20>
    8b80:	2301      	movs	r3, #1
    8b82:	6183      	str	r3, [r0, #24]
    8b84:	1c20      	adds	r0, r4, #0
    8b86:	f000 f81f 	bl	8bc8 <__sfp>
    8b8a:	6060      	str	r0, [r4, #4]
    8b8c:	1c20      	adds	r0, r4, #0
    8b8e:	f000 f81b 	bl	8bc8 <__sfp>
    8b92:	60a0      	str	r0, [r4, #8]
    8b94:	1c20      	adds	r0, r4, #0
    8b96:	f000 f817 	bl	8bc8 <__sfp>
    8b9a:	2104      	movs	r1, #4
    8b9c:	60e0      	str	r0, [r4, #12]
    8b9e:	2200      	movs	r2, #0
    8ba0:	6860      	ldr	r0, [r4, #4]
    8ba2:	f7ff ffa5 	bl	8af0 <std.isra.0>
    8ba6:	68a0      	ldr	r0, [r4, #8]
    8ba8:	2109      	movs	r1, #9
    8baa:	2201      	movs	r2, #1
    8bac:	f7ff ffa0 	bl	8af0 <std.isra.0>
    8bb0:	68e0      	ldr	r0, [r4, #12]
    8bb2:	2112      	movs	r1, #18
    8bb4:	2202      	movs	r2, #2
    8bb6:	f7ff ff9b 	bl	8af0 <std.isra.0>
    8bba:	2301      	movs	r3, #1
    8bbc:	61a3      	str	r3, [r4, #24]
    8bbe:	bd13      	pop	{r0, r1, r4, pc}
    8bc0:	0000a524 	.word	0x0000a524
    8bc4:	00008abd 	.word	0x00008abd

00008bc8 <__sfp>:
    8bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bca:	4b1d      	ldr	r3, [pc, #116]	; (8c40 <__sfp+0x78>)
    8bcc:	1c07      	adds	r7, r0, #0
    8bce:	681e      	ldr	r6, [r3, #0]
    8bd0:	69b2      	ldr	r2, [r6, #24]
    8bd2:	2a00      	cmp	r2, #0
    8bd4:	d102      	bne.n	8bdc <__sfp+0x14>
    8bd6:	1c30      	adds	r0, r6, #0
    8bd8:	f7ff ffc4 	bl	8b64 <__sinit>
    8bdc:	3648      	adds	r6, #72	; 0x48
    8bde:	68b4      	ldr	r4, [r6, #8]
    8be0:	6873      	ldr	r3, [r6, #4]
    8be2:	3b01      	subs	r3, #1
    8be4:	d405      	bmi.n	8bf2 <__sfp+0x2a>
    8be6:	220c      	movs	r2, #12
    8be8:	5ea5      	ldrsh	r5, [r4, r2]
    8bea:	2d00      	cmp	r5, #0
    8bec:	d010      	beq.n	8c10 <__sfp+0x48>
    8bee:	3468      	adds	r4, #104	; 0x68
    8bf0:	e7f7      	b.n	8be2 <__sfp+0x1a>
    8bf2:	6833      	ldr	r3, [r6, #0]
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d106      	bne.n	8c06 <__sfp+0x3e>
    8bf8:	1c38      	adds	r0, r7, #0
    8bfa:	2104      	movs	r1, #4
    8bfc:	f7ff ff9c 	bl	8b38 <__sfmoreglue>
    8c00:	6030      	str	r0, [r6, #0]
    8c02:	2800      	cmp	r0, #0
    8c04:	d001      	beq.n	8c0a <__sfp+0x42>
    8c06:	6836      	ldr	r6, [r6, #0]
    8c08:	e7e9      	b.n	8bde <__sfp+0x16>
    8c0a:	230c      	movs	r3, #12
    8c0c:	603b      	str	r3, [r7, #0]
    8c0e:	e016      	b.n	8c3e <__sfp+0x76>
    8c10:	2301      	movs	r3, #1
    8c12:	425b      	negs	r3, r3
    8c14:	81e3      	strh	r3, [r4, #14]
    8c16:	1c20      	adds	r0, r4, #0
    8c18:	2301      	movs	r3, #1
    8c1a:	81a3      	strh	r3, [r4, #12]
    8c1c:	6665      	str	r5, [r4, #100]	; 0x64
    8c1e:	6025      	str	r5, [r4, #0]
    8c20:	60a5      	str	r5, [r4, #8]
    8c22:	6065      	str	r5, [r4, #4]
    8c24:	6125      	str	r5, [r4, #16]
    8c26:	6165      	str	r5, [r4, #20]
    8c28:	61a5      	str	r5, [r4, #24]
    8c2a:	305c      	adds	r0, #92	; 0x5c
    8c2c:	1c29      	adds	r1, r5, #0
    8c2e:	2208      	movs	r2, #8
    8c30:	f7fe fd4e 	bl	76d0 <memset>
    8c34:	6365      	str	r5, [r4, #52]	; 0x34
    8c36:	63a5      	str	r5, [r4, #56]	; 0x38
    8c38:	64a5      	str	r5, [r4, #72]	; 0x48
    8c3a:	64e5      	str	r5, [r4, #76]	; 0x4c
    8c3c:	1c20      	adds	r0, r4, #0
    8c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c40:	0000a524 	.word	0x0000a524

00008c44 <__gettzinfo>:
    8c44:	4800      	ldr	r0, [pc, #0]	; (8c48 <__gettzinfo+0x4>)
    8c46:	4770      	bx	lr
    8c48:	2000007c 	.word	0x2000007c

00008c4c <__smakebuf_r>:
    8c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c4e:	898b      	ldrh	r3, [r1, #12]
    8c50:	b091      	sub	sp, #68	; 0x44
    8c52:	1c05      	adds	r5, r0, #0
    8c54:	1c0c      	adds	r4, r1, #0
    8c56:	079a      	lsls	r2, r3, #30
    8c58:	d425      	bmi.n	8ca6 <__smakebuf_r+0x5a>
    8c5a:	230e      	movs	r3, #14
    8c5c:	5ec9      	ldrsh	r1, [r1, r3]
    8c5e:	2900      	cmp	r1, #0
    8c60:	da06      	bge.n	8c70 <__smakebuf_r+0x24>
    8c62:	89a7      	ldrh	r7, [r4, #12]
    8c64:	2380      	movs	r3, #128	; 0x80
    8c66:	401f      	ands	r7, r3
    8c68:	d00f      	beq.n	8c8a <__smakebuf_r+0x3e>
    8c6a:	2700      	movs	r7, #0
    8c6c:	2640      	movs	r6, #64	; 0x40
    8c6e:	e00e      	b.n	8c8e <__smakebuf_r+0x42>
    8c70:	aa01      	add	r2, sp, #4
    8c72:	f000 f91b 	bl	8eac <_fstat_r>
    8c76:	2800      	cmp	r0, #0
    8c78:	dbf3      	blt.n	8c62 <__smakebuf_r+0x16>
    8c7a:	9b02      	ldr	r3, [sp, #8]
    8c7c:	27f0      	movs	r7, #240	; 0xf0
    8c7e:	023f      	lsls	r7, r7, #8
    8c80:	4a18      	ldr	r2, [pc, #96]	; (8ce4 <__smakebuf_r+0x98>)
    8c82:	401f      	ands	r7, r3
    8c84:	18bf      	adds	r7, r7, r2
    8c86:	427b      	negs	r3, r7
    8c88:	415f      	adcs	r7, r3
    8c8a:	2680      	movs	r6, #128	; 0x80
    8c8c:	00f6      	lsls	r6, r6, #3
    8c8e:	1c28      	adds	r0, r5, #0
    8c90:	1c31      	adds	r1, r6, #0
    8c92:	f7fe ff7d 	bl	7b90 <_malloc_r>
    8c96:	2800      	cmp	r0, #0
    8c98:	d10c      	bne.n	8cb4 <__smakebuf_r+0x68>
    8c9a:	89a3      	ldrh	r3, [r4, #12]
    8c9c:	059a      	lsls	r2, r3, #22
    8c9e:	d41f      	bmi.n	8ce0 <__smakebuf_r+0x94>
    8ca0:	2202      	movs	r2, #2
    8ca2:	4313      	orrs	r3, r2
    8ca4:	81a3      	strh	r3, [r4, #12]
    8ca6:	1c23      	adds	r3, r4, #0
    8ca8:	3347      	adds	r3, #71	; 0x47
    8caa:	6023      	str	r3, [r4, #0]
    8cac:	6123      	str	r3, [r4, #16]
    8cae:	2301      	movs	r3, #1
    8cb0:	6163      	str	r3, [r4, #20]
    8cb2:	e015      	b.n	8ce0 <__smakebuf_r+0x94>
    8cb4:	4b0c      	ldr	r3, [pc, #48]	; (8ce8 <__smakebuf_r+0x9c>)
    8cb6:	2280      	movs	r2, #128	; 0x80
    8cb8:	62ab      	str	r3, [r5, #40]	; 0x28
    8cba:	89a3      	ldrh	r3, [r4, #12]
    8cbc:	6020      	str	r0, [r4, #0]
    8cbe:	4313      	orrs	r3, r2
    8cc0:	81a3      	strh	r3, [r4, #12]
    8cc2:	6120      	str	r0, [r4, #16]
    8cc4:	6166      	str	r6, [r4, #20]
    8cc6:	2f00      	cmp	r7, #0
    8cc8:	d00a      	beq.n	8ce0 <__smakebuf_r+0x94>
    8cca:	230e      	movs	r3, #14
    8ccc:	5ee1      	ldrsh	r1, [r4, r3]
    8cce:	1c28      	adds	r0, r5, #0
    8cd0:	f000 f8fe 	bl	8ed0 <_isatty_r>
    8cd4:	2800      	cmp	r0, #0
    8cd6:	d003      	beq.n	8ce0 <__smakebuf_r+0x94>
    8cd8:	89a3      	ldrh	r3, [r4, #12]
    8cda:	2201      	movs	r2, #1
    8cdc:	4313      	orrs	r3, r2
    8cde:	81a3      	strh	r3, [r4, #12]
    8ce0:	b011      	add	sp, #68	; 0x44
    8ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ce4:	ffffe000 	.word	0xffffe000
    8ce8:	00008abd 	.word	0x00008abd

00008cec <memchr>:
    8cec:	b2c9      	uxtb	r1, r1
    8cee:	1882      	adds	r2, r0, r2
    8cf0:	4290      	cmp	r0, r2
    8cf2:	d004      	beq.n	8cfe <memchr+0x12>
    8cf4:	7803      	ldrb	r3, [r0, #0]
    8cf6:	428b      	cmp	r3, r1
    8cf8:	d002      	beq.n	8d00 <memchr+0x14>
    8cfa:	3001      	adds	r0, #1
    8cfc:	e7f8      	b.n	8cf0 <memchr+0x4>
    8cfe:	2000      	movs	r0, #0
    8d00:	4770      	bx	lr

00008d02 <_realloc_r>:
    8d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d04:	1c06      	adds	r6, r0, #0
    8d06:	1c0c      	adds	r4, r1, #0
    8d08:	1c15      	adds	r5, r2, #0
    8d0a:	2900      	cmp	r1, #0
    8d0c:	d104      	bne.n	8d18 <_realloc_r+0x16>
    8d0e:	1c11      	adds	r1, r2, #0
    8d10:	f7fe ff3e 	bl	7b90 <_malloc_r>
    8d14:	1c04      	adds	r4, r0, #0
    8d16:	e018      	b.n	8d4a <_realloc_r+0x48>
    8d18:	2a00      	cmp	r2, #0
    8d1a:	d103      	bne.n	8d24 <_realloc_r+0x22>
    8d1c:	f7fe fef0 	bl	7b00 <_free_r>
    8d20:	1c2c      	adds	r4, r5, #0
    8d22:	e012      	b.n	8d4a <_realloc_r+0x48>
    8d24:	f000 f8fa 	bl	8f1c <_malloc_usable_size_r>
    8d28:	42a8      	cmp	r0, r5
    8d2a:	d20e      	bcs.n	8d4a <_realloc_r+0x48>
    8d2c:	1c30      	adds	r0, r6, #0
    8d2e:	1c29      	adds	r1, r5, #0
    8d30:	f7fe ff2e 	bl	7b90 <_malloc_r>
    8d34:	1e07      	subs	r7, r0, #0
    8d36:	d007      	beq.n	8d48 <_realloc_r+0x46>
    8d38:	1c21      	adds	r1, r4, #0
    8d3a:	1c2a      	adds	r2, r5, #0
    8d3c:	f7fe fca6 	bl	768c <memcpy>
    8d40:	1c30      	adds	r0, r6, #0
    8d42:	1c21      	adds	r1, r4, #0
    8d44:	f7fe fedc 	bl	7b00 <_free_r>
    8d48:	1c3c      	adds	r4, r7, #0
    8d4a:	1c20      	adds	r0, r4, #0
    8d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008d50 <_putc_r>:
    8d50:	b570      	push	{r4, r5, r6, lr}
    8d52:	1c05      	adds	r5, r0, #0
    8d54:	1c0e      	adds	r6, r1, #0
    8d56:	1c14      	adds	r4, r2, #0
    8d58:	2800      	cmp	r0, #0
    8d5a:	d004      	beq.n	8d66 <_putc_r+0x16>
    8d5c:	6982      	ldr	r2, [r0, #24]
    8d5e:	2a00      	cmp	r2, #0
    8d60:	d101      	bne.n	8d66 <_putc_r+0x16>
    8d62:	f7ff feff 	bl	8b64 <__sinit>
    8d66:	4b15      	ldr	r3, [pc, #84]	; (8dbc <_putc_r+0x6c>)
    8d68:	429c      	cmp	r4, r3
    8d6a:	d101      	bne.n	8d70 <_putc_r+0x20>
    8d6c:	686c      	ldr	r4, [r5, #4]
    8d6e:	e008      	b.n	8d82 <_putc_r+0x32>
    8d70:	4b13      	ldr	r3, [pc, #76]	; (8dc0 <_putc_r+0x70>)
    8d72:	429c      	cmp	r4, r3
    8d74:	d101      	bne.n	8d7a <_putc_r+0x2a>
    8d76:	68ac      	ldr	r4, [r5, #8]
    8d78:	e003      	b.n	8d82 <_putc_r+0x32>
    8d7a:	4b12      	ldr	r3, [pc, #72]	; (8dc4 <_putc_r+0x74>)
    8d7c:	429c      	cmp	r4, r3
    8d7e:	d100      	bne.n	8d82 <_putc_r+0x32>
    8d80:	68ec      	ldr	r4, [r5, #12]
    8d82:	68a3      	ldr	r3, [r4, #8]
    8d84:	3b01      	subs	r3, #1
    8d86:	60a3      	str	r3, [r4, #8]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	da10      	bge.n	8dae <_putc_r+0x5e>
    8d8c:	69a2      	ldr	r2, [r4, #24]
    8d8e:	4293      	cmp	r3, r2
    8d90:	db07      	blt.n	8da2 <_putc_r+0x52>
    8d92:	6823      	ldr	r3, [r4, #0]
    8d94:	701e      	strb	r6, [r3, #0]
    8d96:	6823      	ldr	r3, [r4, #0]
    8d98:	7819      	ldrb	r1, [r3, #0]
    8d9a:	290a      	cmp	r1, #10
    8d9c:	d10a      	bne.n	8db4 <_putc_r+0x64>
    8d9e:	1c28      	adds	r0, r5, #0
    8da0:	e001      	b.n	8da6 <_putc_r+0x56>
    8da2:	1c28      	adds	r0, r5, #0
    8da4:	1c31      	adds	r1, r6, #0
    8da6:	1c22      	adds	r2, r4, #0
    8da8:	f7ff fcca 	bl	8740 <__swbuf_r>
    8dac:	e005      	b.n	8dba <_putc_r+0x6a>
    8dae:	6822      	ldr	r2, [r4, #0]
    8db0:	7016      	strb	r6, [r2, #0]
    8db2:	6823      	ldr	r3, [r4, #0]
    8db4:	1c5a      	adds	r2, r3, #1
    8db6:	6022      	str	r2, [r4, #0]
    8db8:	7818      	ldrb	r0, [r3, #0]
    8dba:	bd70      	pop	{r4, r5, r6, pc}
    8dbc:	0000a61c 	.word	0x0000a61c
    8dc0:	0000a63c 	.word	0x0000a63c
    8dc4:	0000a65c 	.word	0x0000a65c

00008dc8 <__sread>:
    8dc8:	b538      	push	{r3, r4, r5, lr}
    8dca:	1c0c      	adds	r4, r1, #0
    8dcc:	250e      	movs	r5, #14
    8dce:	5f49      	ldrsh	r1, [r1, r5]
    8dd0:	f000 f8ae 	bl	8f30 <_read_r>
    8dd4:	2800      	cmp	r0, #0
    8dd6:	db03      	blt.n	8de0 <__sread+0x18>
    8dd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    8dda:	1813      	adds	r3, r2, r0
    8ddc:	6563      	str	r3, [r4, #84]	; 0x54
    8dde:	e003      	b.n	8de8 <__sread+0x20>
    8de0:	89a2      	ldrh	r2, [r4, #12]
    8de2:	4b02      	ldr	r3, [pc, #8]	; (8dec <__sread+0x24>)
    8de4:	4013      	ands	r3, r2
    8de6:	81a3      	strh	r3, [r4, #12]
    8de8:	bd38      	pop	{r3, r4, r5, pc}
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	ffffefff 	.word	0xffffefff

00008df0 <__swrite>:
    8df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8df2:	1c1e      	adds	r6, r3, #0
    8df4:	898b      	ldrh	r3, [r1, #12]
    8df6:	1c05      	adds	r5, r0, #0
    8df8:	1c0c      	adds	r4, r1, #0
    8dfa:	1c17      	adds	r7, r2, #0
    8dfc:	05da      	lsls	r2, r3, #23
    8dfe:	d505      	bpl.n	8e0c <__swrite+0x1c>
    8e00:	230e      	movs	r3, #14
    8e02:	5ec9      	ldrsh	r1, [r1, r3]
    8e04:	2200      	movs	r2, #0
    8e06:	2302      	movs	r3, #2
    8e08:	f000 f874 	bl	8ef4 <_lseek_r>
    8e0c:	89a2      	ldrh	r2, [r4, #12]
    8e0e:	4b05      	ldr	r3, [pc, #20]	; (8e24 <__swrite+0x34>)
    8e10:	1c28      	adds	r0, r5, #0
    8e12:	4013      	ands	r3, r2
    8e14:	81a3      	strh	r3, [r4, #12]
    8e16:	220e      	movs	r2, #14
    8e18:	5ea1      	ldrsh	r1, [r4, r2]
    8e1a:	1c33      	adds	r3, r6, #0
    8e1c:	1c3a      	adds	r2, r7, #0
    8e1e:	f000 f81f 	bl	8e60 <_write_r>
    8e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e24:	ffffefff 	.word	0xffffefff

00008e28 <__sseek>:
    8e28:	b538      	push	{r3, r4, r5, lr}
    8e2a:	1c0c      	adds	r4, r1, #0
    8e2c:	250e      	movs	r5, #14
    8e2e:	5f49      	ldrsh	r1, [r1, r5]
    8e30:	f000 f860 	bl	8ef4 <_lseek_r>
    8e34:	89a3      	ldrh	r3, [r4, #12]
    8e36:	1c42      	adds	r2, r0, #1
    8e38:	d103      	bne.n	8e42 <__sseek+0x1a>
    8e3a:	4a05      	ldr	r2, [pc, #20]	; (8e50 <__sseek+0x28>)
    8e3c:	4013      	ands	r3, r2
    8e3e:	81a3      	strh	r3, [r4, #12]
    8e40:	e004      	b.n	8e4c <__sseek+0x24>
    8e42:	2280      	movs	r2, #128	; 0x80
    8e44:	0152      	lsls	r2, r2, #5
    8e46:	4313      	orrs	r3, r2
    8e48:	81a3      	strh	r3, [r4, #12]
    8e4a:	6560      	str	r0, [r4, #84]	; 0x54
    8e4c:	bd38      	pop	{r3, r4, r5, pc}
    8e4e:	46c0      	nop			; (mov r8, r8)
    8e50:	ffffefff 	.word	0xffffefff

00008e54 <__sclose>:
    8e54:	b508      	push	{r3, lr}
    8e56:	230e      	movs	r3, #14
    8e58:	5ec9      	ldrsh	r1, [r1, r3]
    8e5a:	f000 f815 	bl	8e88 <_close_r>
    8e5e:	bd08      	pop	{r3, pc}

00008e60 <_write_r>:
    8e60:	b538      	push	{r3, r4, r5, lr}
    8e62:	4c08      	ldr	r4, [pc, #32]	; (8e84 <_write_r+0x24>)
    8e64:	1c05      	adds	r5, r0, #0
    8e66:	2000      	movs	r0, #0
    8e68:	6020      	str	r0, [r4, #0]
    8e6a:	1c08      	adds	r0, r1, #0
    8e6c:	1c11      	adds	r1, r2, #0
    8e6e:	1c1a      	adds	r2, r3, #0
    8e70:	f7fd fa5e 	bl	6330 <_write>
    8e74:	1c43      	adds	r3, r0, #1
    8e76:	d103      	bne.n	8e80 <_write_r+0x20>
    8e78:	6823      	ldr	r3, [r4, #0]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d000      	beq.n	8e80 <_write_r+0x20>
    8e7e:	602b      	str	r3, [r5, #0]
    8e80:	bd38      	pop	{r3, r4, r5, pc}
    8e82:	46c0      	nop			; (mov r8, r8)
    8e84:	20000bf8 	.word	0x20000bf8

00008e88 <_close_r>:
    8e88:	b538      	push	{r3, r4, r5, lr}
    8e8a:	4c07      	ldr	r4, [pc, #28]	; (8ea8 <_close_r+0x20>)
    8e8c:	2300      	movs	r3, #0
    8e8e:	1c05      	adds	r5, r0, #0
    8e90:	1c08      	adds	r0, r1, #0
    8e92:	6023      	str	r3, [r4, #0]
    8e94:	f7fd fa88 	bl	63a8 <_close>
    8e98:	1c43      	adds	r3, r0, #1
    8e9a:	d103      	bne.n	8ea4 <_close_r+0x1c>
    8e9c:	6823      	ldr	r3, [r4, #0]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d000      	beq.n	8ea4 <_close_r+0x1c>
    8ea2:	602b      	str	r3, [r5, #0]
    8ea4:	bd38      	pop	{r3, r4, r5, pc}
    8ea6:	46c0      	nop			; (mov r8, r8)
    8ea8:	20000bf8 	.word	0x20000bf8

00008eac <_fstat_r>:
    8eac:	b538      	push	{r3, r4, r5, lr}
    8eae:	4c07      	ldr	r4, [pc, #28]	; (8ecc <_fstat_r+0x20>)
    8eb0:	2300      	movs	r3, #0
    8eb2:	1c05      	adds	r5, r0, #0
    8eb4:	1c08      	adds	r0, r1, #0
    8eb6:	1c11      	adds	r1, r2, #0
    8eb8:	6023      	str	r3, [r4, #0]
    8eba:	f7fd fa79 	bl	63b0 <_fstat>
    8ebe:	1c43      	adds	r3, r0, #1
    8ec0:	d103      	bne.n	8eca <_fstat_r+0x1e>
    8ec2:	6823      	ldr	r3, [r4, #0]
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d000      	beq.n	8eca <_fstat_r+0x1e>
    8ec8:	602b      	str	r3, [r5, #0]
    8eca:	bd38      	pop	{r3, r4, r5, pc}
    8ecc:	20000bf8 	.word	0x20000bf8

00008ed0 <_isatty_r>:
    8ed0:	b538      	push	{r3, r4, r5, lr}
    8ed2:	4c07      	ldr	r4, [pc, #28]	; (8ef0 <_isatty_r+0x20>)
    8ed4:	2300      	movs	r3, #0
    8ed6:	1c05      	adds	r5, r0, #0
    8ed8:	1c08      	adds	r0, r1, #0
    8eda:	6023      	str	r3, [r4, #0]
    8edc:	f7fd fa6e 	bl	63bc <_isatty>
    8ee0:	1c43      	adds	r3, r0, #1
    8ee2:	d103      	bne.n	8eec <_isatty_r+0x1c>
    8ee4:	6823      	ldr	r3, [r4, #0]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d000      	beq.n	8eec <_isatty_r+0x1c>
    8eea:	602b      	str	r3, [r5, #0]
    8eec:	bd38      	pop	{r3, r4, r5, pc}
    8eee:	46c0      	nop			; (mov r8, r8)
    8ef0:	20000bf8 	.word	0x20000bf8

00008ef4 <_lseek_r>:
    8ef4:	b538      	push	{r3, r4, r5, lr}
    8ef6:	4c08      	ldr	r4, [pc, #32]	; (8f18 <_lseek_r+0x24>)
    8ef8:	1c05      	adds	r5, r0, #0
    8efa:	2000      	movs	r0, #0
    8efc:	6020      	str	r0, [r4, #0]
    8efe:	1c08      	adds	r0, r1, #0
    8f00:	1c11      	adds	r1, r2, #0
    8f02:	1c1a      	adds	r2, r3, #0
    8f04:	f7fd fa5c 	bl	63c0 <_lseek>
    8f08:	1c43      	adds	r3, r0, #1
    8f0a:	d103      	bne.n	8f14 <_lseek_r+0x20>
    8f0c:	6823      	ldr	r3, [r4, #0]
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d000      	beq.n	8f14 <_lseek_r+0x20>
    8f12:	602b      	str	r3, [r5, #0]
    8f14:	bd38      	pop	{r3, r4, r5, pc}
    8f16:	46c0      	nop			; (mov r8, r8)
    8f18:	20000bf8 	.word	0x20000bf8

00008f1c <_malloc_usable_size_r>:
    8f1c:	3904      	subs	r1, #4
    8f1e:	680b      	ldr	r3, [r1, #0]
    8f20:	1f18      	subs	r0, r3, #4
    8f22:	2b00      	cmp	r3, #0
    8f24:	da02      	bge.n	8f2c <_malloc_usable_size_r+0x10>
    8f26:	58c8      	ldr	r0, [r1, r3]
    8f28:	181b      	adds	r3, r3, r0
    8f2a:	1f18      	subs	r0, r3, #4
    8f2c:	4770      	bx	lr
	...

00008f30 <_read_r>:
    8f30:	b538      	push	{r3, r4, r5, lr}
    8f32:	4c08      	ldr	r4, [pc, #32]	; (8f54 <_read_r+0x24>)
    8f34:	1c05      	adds	r5, r0, #0
    8f36:	2000      	movs	r0, #0
    8f38:	6020      	str	r0, [r4, #0]
    8f3a:	1c08      	adds	r0, r1, #0
    8f3c:	1c11      	adds	r1, r2, #0
    8f3e:	1c1a      	adds	r2, r3, #0
    8f40:	f7fd f9d4 	bl	62ec <_read>
    8f44:	1c43      	adds	r3, r0, #1
    8f46:	d103      	bne.n	8f50 <_read_r+0x20>
    8f48:	6823      	ldr	r3, [r4, #0]
    8f4a:	2b00      	cmp	r3, #0
    8f4c:	d000      	beq.n	8f50 <_read_r+0x20>
    8f4e:	602b      	str	r3, [r5, #0]
    8f50:	bd38      	pop	{r3, r4, r5, pc}
    8f52:	46c0      	nop			; (mov r8, r8)
    8f54:	20000bf8 	.word	0x20000bf8

00008f58 <__FUNCTION__.14655>:
    8f58:	7474716d 6c61635f 6361626c 0000006b     mqtt_callback...

00008f68 <main_mqtt_broker>:
    8f68:	74736574 736f6d2e 74697571 6f2e6f74     test.mosquitto.o
    8f78:	00006772 6e65704f 00000000 736f6c43     rg..Open....Clos
    8f88:	00006465 6f736572 5f65766c 203a6263     ed..resolve_cb: 
    8f98:	616d6f44 614e6e69 2520656d 000a0d73     DomainName %s...
    8fa8:	6f736572 5f65766c 203a6263 6c696166     resolve_cb: fail
    8fb8:	74206465 6573206f 2020646e 6f727265     ed to send  erro
    8fc8:	000d2172 6b636f73 635f7465 72203a62     r!..socket_cb: r
    8fd8:	20766365 6f727265 000d2172 6b636f73     ecv error!..sock
    8fe8:	635f7465 62203a62 20646e69 6f727265     et_cb: bind erro
    8ff8:	000d2172 6b636f73 635f7465 45203a62     r!..socket_cb: E
    9008:	63657078 676e6974 73657220 736e6f70     xpecting respons
    9018:	72662065 53206d6f 65767265 6e4f2072     e from Server On
    9028:	0d21796c 00000000 20656854 72727563     ly!.....The curr
    9038:	20746e65 61636f6c 6974206c 6920656d     ent local time i
    9048:	25203a73 00000073 69666977 3a62635f     s: %s...wifi_cb:
    9058:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
    9068:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
    9078:	4f43203a 43454e4e 0d444554 00000000     : CONNECTED.....
    9088:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    9098:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
    90a8:	4148435f 4445474e 4944203a 4e4f4353     _CHANGED: DISCON
    90b8:	5443454e 000d4445 69766179 0000006e     NECTED..yavin...
    90c8:	72617473 73726177 00000000 69666977     starwars....wifi
    90d8:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
    90e8:	48445f51 435f5043 3a464e4f 20504920     Q_DHCP_CONF: IP 
    90f8:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
    9108:	00000000 6c6f6f70 70746e2e 67726f2e     ....pool.ntp.org
    9118:	00000000 4e4e4f43 45544345 50412044     ....CONNECTED AP
    9128:	464e4920 0000004f 44495353 20202020      INFO...SSID    
    9138:	20202020 20202020 20202020 7325203a                 : %s
    9148:	0000000a 20434553 45505954 20202020     ....SEC TYPE    
    9158:	20202020 20202020 6425203a 0000000a             : %d....
    9168:	6e676953 53206c61 6e657274 20687467     Signal Strength 
    9178:	20202020 6425203a 0000000a 61636f4c         : %d....Loca
    9188:	5049206c 64644120 73736572 20202020     l IP Address    
    9198:	6425203a 2e64252e 252e6425 000a0d64     : %d.%d.%d.%d...
    91a8:	00003e3e 462d6957 6f632069 63656e6e     >>..Wi-Fi connec
    91b8:	20646574 6552202d 73657571 676e6974     ted - Requesting
    91c8:	43484420 2e2e2e50 00000000 462d6957      DHCP.......Wi-F
    91d8:	69642069 6e6f6373 7463656e 002e6465     i disconnected..
    91e8:	50434844 6d6f4320 74656c70 00002e65     DHCP Complete...
    91f8:	75716552 69747365 7320676e 656b636f     Requesting socke
    9208:	72662074 4d206d6f 20545451 6b6f7262     t from MQTT brok
    9218:	2e2e7265 0000002e 75716552 69747365     er......Requesti
    9228:	5720676e 20694669 6e6e6f63 69746365     ng WiFi connecti
    9238:	69206e6f 2e6f666e 00002e2e 75716552     on info.....Requ
    9248:	20747365 20736168 6e656562 6e657320     est has been sen
    9258:	00002e74 75716552 69747365 4d20676e     t...Requesting M
    9268:	20545451 6e6e6f63 69746365 2e2e6e6f     QTT connection..
    9278:	0000002e 00002121 6c696146 74206465     ....!!..Failed t
    9288:	6f63206f 63656e6e 6f742074 73252820     o connect to (%s
    9298:	41202129 6d6f7475 63697461 796c6c61     )! Automatically
    92a8:	74657220 6e697972 2e2e2e67 00000000      retrying.......
    92b8:	6c204020 20656e69 5d64255b 206e6920      @ line [%d] in 
    92c8:	636e7566 6e6f6974 73255b20 0a0d3e5d     function [%s]>..
    92d8:	00000000 6d2f7362 74696e6f 232f726f     ....bs/monitor/#
    92e8:	00000000 5454514d 6e6f4320 7463656e     ....MQTT Connect
    92f8:	206e6f69 65636341 64657470 0000002e     ion Accepted....
    9308:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    9318:	20656e69 72756f79 63636120 21737365     ine your access!
    9328:	72726520 6320726f 2065646f 00006425      error code %d..
    9338:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    9348:	00000d64 4c494146 20455255 53204f54     d...FAILURE TO S
    9358:	41205445 4d52414c 56202d20 65756c61     ET ALARM - Value
    9368:	6f6f7420 67696820 00002168 6e69616d      too high!..main
    9378:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    9388:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    9398:	0000000a 6e69616d 4455203a 6c432050     ....main: UDP Cl
    93a8:	746e6569 636f5320 2074656b 61657243     ient Socket Crea
    93b8:	6e6f6974 69614620 2e64656c 0000000d     tion Failed.....
    93c8:	62616e55 7420656c 6c63206f 6c6e6165     Unable to cleanl
    93d8:	69642079 6e6f6373 7463656e 65687420     y disconnect the
    93e8:	46695720 6f632069 63656e6e 6e6f6974      WiFi connection
    93f8:	0000002e 412a2a2a 696c7070 69746163     ....***Applicati
    9408:	53206e6f 74726174 2a676e69 00002a2a     on Starting***..
    9418:	706d6f43 64656c69 206e6f20 206c754a     Compiled on Jul 
    9428:	32203620 20353130 34312040 3a38303a      6 2015 @ 14:08:
    9438:	00003333 72746552 69766569 7420676e     33..Retrieving t
    9448:	20656d69 6d6f7266 72657320 2e726576     ime from server.
    9458:	52202e2e 77204354 206c6c69 61206562     .. RTC will be a
    9468:	6d6f7475 63697461 796c6c61 74657320     utomatically set
    9478:	0000002e 656d6954 65696c43 6320746e     ....TimeClient c
    9488:	65736f6c 53202e64 74726174 20676e69     losed. Starting 
    9498:	5454514d 61685020 2e2e6573 0000002e     MQTT Phase......
    94a8:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
    94b8:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
    94c8:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
    94d8:	00000000 5454514d 67657220 65747369     ....MQTT registe
    94e8:	61632072 61626c6c 66206b63 656c6961     r callback faile
    94f8:	45202e64 726f7272 646f6320 73692065     d. Error code is
    9508:	64252820 000a0d29 64656572 6977735f      (%d)...reed_swi
    9518:	00686374 73257325 00000000 6d2f7362     tch.%s%s....bs/m
    9528:	74696e6f 002f726f 6c627550 69687369     onitor/.Publishi
    9538:	7420676e 6f74206f 3a636970 00732520     ng to topic: %s.
    9548:	6c6c6143 72724520 203a726f 76746572     Call Error: retv
    9558:	253d6c61 00000064 65656c53 6f6d2070     al=%d...Sleep mo
    9568:	69206564 324d2073 53505f4d 4545445f     de is M2M_PS_DEE
    9578:	55415f50 414d4f54 00434954 6e6e6f43     P_AUTOMATIC.Conn
    9588:	69746365 7420676e 6957206f 2e2e6946     ecting to WiFi..
    9598:	0000002e 65746e45 676e6972 69616d20     ....Entering mai
    95a8:	6f6c206e 2e2e706f 0000002e 6e6e6f43     n loop......Conn
    95b8:	69746365 7420676e 514d206f 42205454     ecting to MQTT B
    95c8:	656b6f72 2e2e2e72 00000000 40207325     roker.......%s @
    95d8:	2f642520 252f6425 64252064 3a64253a      %d/%d/%d %d:%d:
    95e8:	00006425 646e6553 3a676e69 73252720     %d..Sending: '%s
    95f8:	6f742027 00732520 676e6950 25204020     ' to %s.Ping @ %
    9608:	64252f64 2064252f 253a6425 64253a64     d/%d/%d %d:%d:%d
    9618:	00000000 646e6553 20676e69 676e6970     ....Sending ping
    9628:	73656d20 65676173 7325203a 00000000      message: %s....
    9638:	6d2f7362 74696e6f 702f726f 00676e69     bs/monitor/ping.

00009648 <__FUNCTION__.14744>:
    9648:	54746547 46656d69 536d6f72 65767265     GetTimeFromServe
    9658:	00000072                                r...

0000965c <__FUNCTION__.14751>:
    965c:	6e69616d 00000000                       main....

00009664 <__FUNCTION__.13778>:
    9664:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    9674:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    9684:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    9694:	6320746c 0000646d                       lt cmd..

0000969c <__FUNCTION__.12226>:
    969c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000096ac <__FUNCTION__.12210>:
    96ac:	5f666968 646e6573 00000000              hif_send....

000096b8 <__FUNCTION__.12254>:
    96b8:	5f666968 69676572 72657473 0062635f     hif_register_cb.

000096c8 <__FUNCTION__.12219>:
    96c8:	5f666968 00727369 46494828 69614629     hif_isr.(HIF)Fai
    96d8:	6f74206c 6b617720 74207075 63206568     l to wakup the c
    96e8:	00706968 66696828 49572029 485f4946     hip.(hif) WIFI_H
    96f8:	5f54534f 5f564352 4c525443 6220305f     OST_RCV_CTRL_0 b
    9708:	66207375 006c6961 66696828 49572029     us fail.(hif) WI
    9718:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
    9728:	6220315f 66207375 006c6961 66696828     _1 bus fail.(hif
    9738:	64612029 73657264 75622073 61662073     ) address bus fa
    9748:	00006c69 66696828 6f432029 70757272     il..(hif) Corrup
    9758:	20646574 6b636170 53207465 20657a69     ted packet Size 
    9768:	7525203d 204c3c20 7525203d 2047202c     = %u <L = %u, G 
    9778:	7525203d 504f202c 25203d20 3e583230     = %u, OP = %02X>
    9788:	0000000a 66696828 6e692029 696c6176     ....(hif) invali
    9798:	72672064 2070756f 00004449 66696828     d group ID..(hif
    97a8:	6f682029 61207473 64207070 276e6469     ) host app didn'
    97b8:	65732074 58522074 6e6f4420 00000065     t set RX Done...
    97c8:	66696828 72572029 20676e6f 657a6953     (hif) Wrong Size
    97d8:	00000000 66696828 61462029 2065736c     ....(hif) False 
    97e8:	65746e69 70757272 6c252074 00000078     interrupt %lx...
    97f8:	66696828 61462029 74206c69 6552206f     (hif) Fail to Re
    9808:	69206461 7265746e 74707572 67657220     ad interrupt reg
    9818:	00000000 66696828 41462029 74204c49     ....(hif) FAIL t
    9828:	6177206f 7075656b 65687420 69686320     o wakeup the chi
    9838:	00000070 46494828 61462029 74206c69     p...(HIF) Fail t
    9848:	6168206f 656c646e 746e6920 75727265     o handle interru
    9858:	25207470 72742064 67412079 2e6e6961     pt %d try Again.
    9868:	00000a2e 66696820 6365725f 65766965     .... hif_receive
    9878:	6e49203a 696c6176 72612064 656d7567     : Invalid argume
    9888:	0000746e 20505041 75716552 65747365     nt..APP Requeste
    9898:	69532064 6920657a 616c2073 72656772     d Size is larger
    98a8:	61687420 6874206e 65722065 65766963      than the recive
    98b8:	75622064 72656666 7a697320 253c2065     d buffer size <%
    98c8:	253c3e64 000a3e64 20505041 75716552     d><%d>..APP Requ
    98d8:	65747365 64412064 73657264 65622073     ested Address be
    98e8:	646e6f79 65687420 63657220 64657669     yond the recived
    98f8:	66756220 20726566 72646461 20737365      buffer address 
    9908:	20646e61 676e656c 00006874 20705247     and length..GRp 
    9918:	6425203f 0000000a                       ? %d....

00009920 <__FUNCTION__.12241>:
    9920:	5f666968 65636572 00657669              hif_receive.

0000992c <__FUNCTION__.12153>:
    992c:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
    993c:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
    994c:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
    995c:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
    996c:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
    997c:	2044494c 4e494f50 00524554 41564e49     LID POINTER.INVA
    998c:	2044494c 44495353 00000000 41564e49     LID SSID....INVA
    999c:	2044494c 00004843 41564e49 2044494c     LID CH..INVALID 
    99ac:	50434844 52455320 20524556 00005049     DHCP SERVER IP..
    99bc:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
    99cc:	00000058 41564e49 2044494c 2059454b     X...INVALID KEY 
    99dc:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    99ec:	20504557 0059454b 41564e49 2044494c     WEP KEY.INVALID 
    99fc:	48545541 49544e45 49544143 4d204e4f     AUTHENTICATION M
    9a0c:	0045444f 204b5350 204e454c 41564e49     ODE.PSK LEN INVA
    9a1c:	0044494c 44495353 4e454c20 564e4920     LID.SSID LEN INV
    9a2c:	44494c41 00000000 49204843 4c41564e     ALID....CH INVAL
    9a3c:	00004449 61766e49 2064696c 20706557     ID..Invalid Wep 
    9a4c:	2079656b 65646e69 64252078 0000000a     key index %d....
    9a5c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    9a6c:	676e656c 25206874 00000a64 65646e75     length %d...unde
    9a7c:	656e6966 65732064 79742063 00006570     fined sec type..
    9a8c:	4e414353 69614620 2064656c 20746552     SCAN Failed Ret 
    9a9c:	6425203d 0000000a 5f53505f 56524553     = %d...._PS_SERV
    9aac:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    9abc:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    9acc:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    9adc:	2c312065 6f203620 31312072 00000000     e 1, 6 or 11....
    9aec:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
    9afc:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
    9b0c:	00454d41                                AME.

00009b10 <__FUNCTION__.12197>:
    9b10:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    9b20:	0063735f                                _sc.

00009b24 <__FUNCTION__.11660>:
    9b24:	5f757063 72617473 00000074              cpu_start...

00009b30 <__FUNCTION__.11725>:
    9b30:	70696863 6965645f 0074696e 20737542     chip_deinit.Bus 
    9b40:	6f727265 31282072 57202e29 20656b61     error (1). Wake 
    9b50:	66207075 656c6961 00000064 20737542     up failed...Bus 
    9b60:	6f727265 32282072 57202e29 20656b61     error (2). Wake 
    9b70:	66207075 656c6961 00000064 636f6c63     up failed...cloc
    9b80:	7320736b 6c6c6974 46464f20 6157202e     ks still OFF. Wa
    9b90:	7520656b 61662070 64656c69 00000000     ke up failed....
    9ba0:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9bb0:	6572206c 72206461 30206765 31313178     l read reg 0x111
    9bc0:	2e2e2038 0000002e 6c696166 74206465     8 ......failed t
    9bd0:	6564206f 696e692d 6c616974 00657a69     o de-initialize.
    9be0:	6f727245 68772072 20656c69 74697277     Error while writ
    9bf0:	20676e69 00676572 6f727245 68772072     ing reg.Error wh
    9c00:	20656c69 64616572 20676e69 00676572     ile reading reg.
    9c10:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    9c20:	656c6961 6f742064 61657220 00000064     ailed to read...
    9c30:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    9c40:	656c6961 6f742064 69727720 00006574     ailed to write..

00009c50 <__FUNCTION__.11636>:
    9c50:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
    9c60:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9c70:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    9c80:	20444920 0a786c25 00000000 696d6e5b      ID %lx.....[nmi
    9c90:	61747320 3a5d7472 69616620 6863206c      start]: fail ch
    9ca0:	775f7069 75656b61 00000070 6c696166     ip_wakeup...fail
    9cb0:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    9cc0:	75727265 2e737470 0000002e 6d726946     errupts.....Firm
    9cd0:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    9ce0:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    9cf0:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    9d00:	00000a75 72727543 69726420 20726576     u...Curr driver 
    9d10:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    9d20:	6d726946 65726177 72657620 6e6f6973     Firmware version
    9d30:	73696d20 6374616d 00002168 696d6e5b      mismatch!..[nmi
    9d40:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    9d50:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    9d60:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    9d70:	75622074 00000073                       t bus...

00009d78 <__FUNCTION__.12232>:
    9d78:	645f6d6e 695f7672 0074696e              nm_drv_init.

00009d84 <__FUNCTION__.12239>:
    9d84:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    9d94:	00002d50 00002d50 00002d80 00002d02     P-..P-...-...-..
    9da4:	00002d26 00002d34 00002d66 00002d66     &-..4-..f-..f-..
    9db4:	00002dae 00002cf2 00002e24 00002e24     .-...,..$...$...
    9dc4:	00002e24 00002e24 00002d42              $...$...B-..

00009dd0 <__FUNCTION__.11652>:
    9dd0:	5f697073 61746164 6972775f 00006574     spi_data_write..

00009de0 <__FUNCTION__.11704>:
    9de0:	735f6d6e 695f6970 0074696e              nm_spi_init.

00009dec <__FUNCTION__.11662>:
    9dec:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00009dfc <__FUNCTION__.11670>:
    9dfc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00009e0c <__FUNCTION__.11613>:
    9e0c:	5f697073 00646d63 696d6e5b 69707320     spi_cmd.[nmi spi
    9e1c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    9e2c:	6e6f7073 72206573 2c646165 73756220     sponse read, bus
    9e3c:	72726520 2e2e726f 0000002e 696d6e5b      error......[nmi
    9e4c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9e5c:	72206174 6f707365 2065736e 64616572     ta response read
    9e6c:	7562202c 72652073 2e726f72 00002e2e     , bus error.....
    9e7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9e8c:	61642064 72206174 6f707365 2065736e     d data response 
    9e9c:	64616572 282e2e2e 78323025 00000a29     read...(%02x)...
    9eac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9ebc:	61642064 62206174 6b636f6c 61657220     d data block rea
    9ecc:	62202c64 65207375 726f7272 002e2e2e     d, bus error....
    9edc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9eec:	61642064 62206174 6b636f6c 63726320     d data block crc
    9efc:	61657220 62202c64 65207375 726f7272      read, bus error
    9f0c:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9f1c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    9f2c:	73756220 72726520 2e2e726f 0000002e      bus error......
    9f3c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9f4c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    9f5c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    9f6c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    9f7c:	65722064 6e6f7073 202c6573 74697277     d response, writ
    9f8c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    9f9c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9fac:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    9fbc:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    9fcc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9fdc:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    9fec:	64616572 67657220 30252820 2e297838     read reg (%08x).
    9ffc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a00c:	656c6961 61642064 72206174 2e646165     ailed data read.
    a01c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a02c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    a03c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    a04c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    a05c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    a06c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a07c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    a08c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    a09c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a0ac:	6e692064 6e726574 77206c61 65746972     d internal write
    a0bc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    a0cc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a0dc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    a0ec:	64692070 002e2e2e 696d6e5b 69707320     p id....[nmi spi
    a0fc:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
    a10c:	20646165 636f6c62 2528206b 29783830     ead block (%08x)
    a11c:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
    a12c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    a13c:	6e6f7073 202c6573 64616572 6f6c6220     sponse, read blo
    a14c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    a15c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a16c:	6c622064 206b636f 61746164 61657220     d block data rea
    a17c:	2e2e2e64 00000000 696d6e5b 69707320     d.......[nmi spi
    a18c:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
    a19c:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
    a1ac:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
    a1bc:	203a5d20 6c696146 63206465 7220646d      ]: Failed cmd r
    a1cc:	6f707365 2c65736e 69727720 62206574     esponse, write b
    a1dc:	6b636f6c 30252820 2e297838 000a2e2e     lock (%08x).....
    a1ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a1fc:	61642064 62206174 6b636f6c 646d6320     d data block cmd
    a20c:	69727720 202c6574 20737562 6f727265      write, bus erro
    a21c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    a22c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    a23c:	6b636f6c 69727720 202c6574 20737562     lock write, bus 
    a24c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    a25c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    a26c:	62206174 6b636f6c 63726320 69727720     ta block crc wri
    a27c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    a28c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a29c:	656c6961 6c622064 206b636f 61746164     ailed block data
    a2ac:	69727720 2e2e6574 0000002e               write......

0000a2b8 <__FUNCTION__.11621>:
    a2b8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000a2c4 <__FUNCTION__.11679>:
    a2c4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000a2d4 <__FUNCTION__.11687>:
    a2d4:	735f6d6e 725f6970 00646165              nm_spi_read.

0000a2e0 <crc7_syndrome_table>:
    a2e0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    a2f0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    a300:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    a310:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    a320:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    a330:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    a340:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    a350:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    a360:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    a370:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    a380:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    a390:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    a3a0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    a3b0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    a3c0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    a3d0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0000a3e0 <__FUNCTION__.11637>:
    a3e0:	5f697073 61746164 6165725f 00000064     spi_data_read...
    a3f0:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
    a400:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
    a410:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    a420:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    a430:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    a440:	204c5353 6b636f53 00007465 42000800     SSL Socket.....B
    a450:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a460:	42001c00 0c0b0a09 00000e0d 000053a0     ...B.........S..
    a470:	000053fc 000053fc 0000539a 0000539a     .S...S...S...S..
    a480:	000053b6 000053a6 000053bc 000053ea     .S...S...S...S..
    a490:	00005624 00005684 00005684 00005604     $V...V...V...V..
    a4a0:	00005616 00005632 00005608 00005640     .V..2V...V..@V..
    a4b0:	00005674                                tV..

0000a4b4 <_tcc_gclk_ids>:
    a4b4:	001b1a1a                                ....

0000a4b8 <_tcc_apbcmasks>:
    a4b8:	00000100 00000200 00000400              ............

0000a4c4 <_tcc_maxs>:
    a4c4:	00ffffff 00ffffff 0000ffff              ............

0000a4d0 <_tcc_cc_nums>:
    a4d0:	00020204                                ....

0000a4d4 <_tcc_ow_nums>:
    a4d4:	00020408                                ....

0000a4d8 <_tcc_intflag>:
    a4d8:	00000001 00000002 00000004 00000008     ................
    a4e8:	00001000 00002000 00004000 00008000     ..... ...@......
    a4f8:	00010000 00020000 00040000 00080000     ................

0000a508 <tcc_interrupt_vectors.12286>:
    a508:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    a518:	7349514d 43007064 00000000              MQIsdp.C....

0000a524 <_global_impure_ptr>:
    a524:	20000018                                ... 

0000a528 <mon_lengths>:
    a528:	0000001f 0000001c 0000001f 0000001e     ................
    a538:	0000001f 0000001e 0000001f 0000001f     ................
    a548:	0000001e 0000001f 0000001e 0000001f     ................
    a558:	0000001f 0000001d 0000001f 0000001e     ................
    a568:	0000001f 0000001e 0000001f 0000001f     ................
    a578:	0000001e 0000001f 0000001e 0000001f     ................

0000a588 <year_lengths>:
    a588:	0000016d 0000016e 2b302d23 6c680020     m...n...#-0+ .hl
    a598:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
    a5a8:	41393837 45444342 31300046 35343332     789ABCDEF.012345
    a5b8:	39383736 64636261 25006665 2073332e     6789abcdef.%.3s 
    a5c8:	73332e25 20643325 64322e25 322e253a     %.3s%3d %.2d:%.2
    a5d8:	2e253a64 25206432 53000a64                       d:%.2d %d..

0000a5e3 <day_name.4594>:
    a5e3:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
    a5f3:	61536972 6e614a74                                riSat

0000a5f8 <mon_name.4595>:
    a5f8:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
    a608:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
    a618:	63654476                                vDec

0000a61c <__sf_fake_stdin>:
	...

0000a63c <__sf_fake_stdout>:
	...

0000a65c <__sf_fake_stderr>:
	...

0000a67c <_init>:
    a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a67e:	46c0      	nop			; (mov r8, r8)
    a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a682:	bc08      	pop	{r3}
    a684:	469e      	mov	lr, r3
    a686:	4770      	bx	lr

0000a688 <__init_array_start>:
    a688:	000000d9 	.word	0x000000d9

0000a68c <_fini>:
    a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a68e:	46c0      	nop			; (mov r8, r8)
    a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a692:	bc08      	pop	{r3}
    a694:	469e      	mov	lr, r3
    a696:	4770      	bx	lr

0000a698 <__fini_array_start>:
    a698:	000000b1 	.word	0x000000b1
