
MY_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009728  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00009728  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000578  20000078  000097a0  00018078  2**2
                  ALLOC
  3 .stack        00002000  200005f0  00009d18  00018078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018078  2**0
                  CONTENTS, READONLY
  5 .comment      000000cc  00000000  00000000  000180a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a4ad  00000000  00000000  0001816c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000674d  00000000  00000000  00062619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010ed8  00000000  00000000  00068d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000df0  00000000  00000000  00079c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001080  00000000  00000000  0007aa2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020f1c  00000000  00000000  0007baae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b4a8  00000000  00000000  0009c9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000910b5  00000000  00000000  000b7e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e5c  00000000  00000000  00148f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025f0 	.word	0x200025f0
       4:	0000524d 	.word	0x0000524d
       8:	00005249 	.word	0x00005249
       c:	00005249 	.word	0x00005249
	...
      2c:	00005249 	.word	0x00005249
	...
      38:	00005249 	.word	0x00005249
      3c:	00005249 	.word	0x00005249
      40:	00005249 	.word	0x00005249
      44:	00005249 	.word	0x00005249
      48:	00005249 	.word	0x00005249
      4c:	00003509 	.word	0x00003509
      50:	00002fe5 	.word	0x00002fe5
      54:	00005249 	.word	0x00005249
      58:	00005249 	.word	0x00005249
      5c:	00005249 	.word	0x00005249
      60:	00005249 	.word	0x00005249
      64:	000039a1 	.word	0x000039a1
      68:	000039b1 	.word	0x000039b1
      6c:	000039c1 	.word	0x000039c1
      70:	000039d1 	.word	0x000039d1
      74:	000039e1 	.word	0x000039e1
      78:	000039f1 	.word	0x000039f1
      7c:	00005219 	.word	0x00005219
      80:	00005229 	.word	0x00005229
      84:	00005239 	.word	0x00005239
      88:	00005249 	.word	0x00005249
      8c:	00005249 	.word	0x00005249
      90:	00005249 	.word	0x00005249
	...
      9c:	00005249 	.word	0x00005249
      a0:	00002f65 	.word	0x00002f65
      a4:	00005249 	.word	0x00005249
      a8:	00005249 	.word	0x00005249
      ac:	00005249 	.word	0x00005249

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000078 	.word	0x20000078
      d0:	00000000 	.word	0x00000000
      d4:	00009728 	.word	0x00009728

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00009728 	.word	0x00009728
     104:	2000007c 	.word	0x2000007c
     108:	00009728 	.word	0x00009728
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	000049bd 	.word	0x000049bd
     13c:	00006d25 	.word	0x00006d25
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_ms+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_ms+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     178:	b508      	push	{r3, lr}
	if (gpfIsr) {
     17a:	4b03      	ldr	r3, [pc, #12]	; (188 <chip_isr+0x10>)
     17c:	681b      	ldr	r3, [r3, #0]
     17e:	2b00      	cmp	r3, #0
     180:	d000      	beq.n	184 <chip_isr+0xc>
		gpfIsr();
     182:	4798      	blx	r3
	}
}
     184:	bd08      	pop	{r3, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	20000094 	.word	0x20000094

0000018c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     18c:	b538      	push	{r3, r4, r5, lr}
	while (u32TimeMsec--) {
     18e:	2800      	cmp	r0, #0
     190:	d006      	beq.n	1a0 <nm_bsp_sleep+0x14>
     192:	1c04      	adds	r4, r0, #0
		delay_ms(1);
     194:	4d03      	ldr	r5, [pc, #12]	; (1a4 <nm_bsp_sleep+0x18>)
     196:	2001      	movs	r0, #1
     198:	47a8      	blx	r5
     19a:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     19c:	2c00      	cmp	r4, #0
     19e:	d1fa      	bne.n	196 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     1a0:	bd38      	pop	{r3, r4, r5, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	0000014d 	.word	0x0000014d

000001a8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1aa:	4c08      	ldr	r4, [pc, #32]	; (1cc <nm_bsp_reset+0x24>)
     1ac:	2780      	movs	r7, #128	; 0x80
     1ae:	057f      	lsls	r7, r7, #21
     1b0:	6167      	str	r7, [r4, #20]
     1b2:	2680      	movs	r6, #128	; 0x80
     1b4:	0536      	lsls	r6, r6, #20
     1b6:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
     1b8:	2064      	movs	r0, #100	; 0x64
     1ba:	4d05      	ldr	r5, [pc, #20]	; (1d0 <nm_bsp_reset+0x28>)
     1bc:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1be:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(10);
     1c0:	200a      	movs	r0, #10
     1c2:	47a8      	blx	r5
     1c4:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(100);
     1c6:	2064      	movs	r0, #100	; 0x64
     1c8:	47a8      	blx	r5
}
     1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1cc:	41004400 	.word	0x41004400
     1d0:	0000018d 	.word	0x0000018d

000001d4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1d8:	2300      	movs	r3, #0
     1da:	4a13      	ldr	r2, [pc, #76]	; (228 <nm_bsp_init+0x54>)
     1dc:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1de:	ac01      	add	r4, sp, #4
     1e0:	2501      	movs	r5, #1
     1e2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e4:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1e8:	201b      	movs	r0, #27
     1ea:	1c21      	adds	r1, r4, #0
     1ec:	4e0f      	ldr	r6, [pc, #60]	; (22c <nm_bsp_init+0x58>)
     1ee:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1f0:	201c      	movs	r0, #28
     1f2:	1c21      	adds	r1, r4, #0
     1f4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1f6:	2028      	movs	r0, #40	; 0x28
     1f8:	1c21      	adds	r1, r4, #0
     1fa:	47b0      	blx	r6

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1fc:	4b0c      	ldr	r3, [pc, #48]	; (230 <nm_bsp_init+0x5c>)
     1fe:	681b      	ldr	r3, [r3, #0]
     200:	421d      	tst	r5, r3
     202:	d003      	beq.n	20c <nm_bsp_init+0x38>
     204:	4b0a      	ldr	r3, [pc, #40]	; (230 <nm_bsp_init+0x5c>)
     206:	681b      	ldr	r3, [r3, #0]
     208:	079a      	lsls	r2, r3, #30
     20a:	d401      	bmi.n	210 <nm_bsp_init+0x3c>
	    delay_init();
     20c:	4b09      	ldr	r3, [pc, #36]	; (234 <nm_bsp_init+0x60>)
     20e:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     210:	4b09      	ldr	r3, [pc, #36]	; (238 <nm_bsp_init+0x64>)
     212:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     214:	2201      	movs	r2, #1
     216:	4b09      	ldr	r3, [pc, #36]	; (23c <nm_bsp_init+0x68>)
     218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     21a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     220:	2000      	movs	r0, #0
     222:	b002      	add	sp, #8
     224:	bd70      	pop	{r4, r5, r6, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	20000094 	.word	0x20000094
     22c:	00003165 	.word	0x00003165
     230:	e000e010 	.word	0xe000e010
     234:	00000111 	.word	0x00000111
     238:	000001a9 	.word	0x000001a9
     23c:	20000010 	.word	0x20000010

00000240 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     240:	b510      	push	{r4, lr}
     242:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     244:	4b0e      	ldr	r3, [pc, #56]	; (280 <nm_bsp_register_isr+0x40>)
     246:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     248:	ac01      	add	r4, sp, #4
     24a:	1c20      	adds	r0, r4, #0
     24c:	4b0d      	ldr	r3, [pc, #52]	; (284 <nm_bsp_register_isr+0x44>)
     24e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     250:	2329      	movs	r3, #41	; 0x29
     252:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     254:	2300      	movs	r3, #0
     256:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     258:	2301      	movs	r3, #1
     25a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     25c:	2302      	movs	r3, #2
     25e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     260:	2009      	movs	r0, #9
     262:	1c21      	adds	r1, r4, #0
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <nm_bsp_register_isr+0x48>)
     266:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     268:	4808      	ldr	r0, [pc, #32]	; (28c <nm_bsp_register_isr+0x4c>)
     26a:	2109      	movs	r1, #9
     26c:	2200      	movs	r2, #0
     26e:	4b08      	ldr	r3, [pc, #32]	; (290 <nm_bsp_register_isr+0x50>)
     270:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     272:	2009      	movs	r0, #9
     274:	2100      	movs	r1, #0
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <nm_bsp_register_isr+0x54>)
     278:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     27a:	b004      	add	sp, #16
     27c:	bd10      	pop	{r4, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	20000094 	.word	0x20000094
     284:	000030d9 	.word	0x000030d9
     288:	000030ed 	.word	0x000030ed
     28c:	00000179 	.word	0x00000179
     290:	00002f75 	.word	0x00002f75
     294:	00002fa5 	.word	0x00002fa5

00000298 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     298:	b508      	push	{r3, lr}
	if (u8Enable) {
     29a:	2800      	cmp	r0, #0
     29c:	d004      	beq.n	2a8 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     29e:	2009      	movs	r0, #9
     2a0:	2100      	movs	r1, #0
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <nm_bsp_interrupt_ctrl+0x1c>)
     2a4:	4798      	blx	r3
     2a6:	e003      	b.n	2b0 <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2a8:	2009      	movs	r0, #9
     2aa:	2100      	movs	r1, #0
     2ac:	4b02      	ldr	r3, [pc, #8]	; (2b8 <nm_bsp_interrupt_ctrl+0x20>)
     2ae:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2b0:	bd08      	pop	{r3, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00002fa5 	.word	0x00002fa5
     2b8:	00002fc5 	.word	0x00002fc5

000002bc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2bc:	b530      	push	{r4, r5, lr}
     2be:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2c0:	4c2e      	ldr	r4, [pc, #184]	; (37c <nm_bus_init+0xc0>)
     2c2:	230e      	movs	r3, #14
     2c4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2c6:	2300      	movs	r3, #0
     2c8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2ca:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2201      	movs	r2, #1
     2d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2d2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2d4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d6:	200e      	movs	r0, #14
     2d8:	4b29      	ldr	r3, [pc, #164]	; (380 <nm_bus_init+0xc4>)
     2da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2dc:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2de:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2e2:	2900      	cmp	r1, #0
     2e4:	d103      	bne.n	2ee <nm_bus_init+0x32>
		return &(ports[port_index]->Group[group_index]);
     2e6:	095a      	lsrs	r2, r3, #5
     2e8:	01d2      	lsls	r2, r2, #7
     2ea:	4826      	ldr	r0, [pc, #152]	; (384 <nm_bus_init+0xc8>)
     2ec:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2ee:	211f      	movs	r1, #31
     2f0:	400b      	ands	r3, r1
     2f2:	2101      	movs	r1, #1
     2f4:	1c08      	adds	r0, r1, #0
     2f6:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2f8:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     2fa:	aa02      	add	r2, sp, #8
     2fc:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2fe:	2300      	movs	r3, #0
     300:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     302:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     304:	20c0      	movs	r0, #192	; 0xc0
     306:	0380      	lsls	r0, r0, #14
     308:	60d0      	str	r0, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     30a:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     30c:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     30e:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     310:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     312:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     314:	2124      	movs	r1, #36	; 0x24
     316:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     318:	9309      	str	r3, [sp, #36]	; 0x24
     31a:	930a      	str	r3, [sp, #40]	; 0x28
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     31c:	4b1a      	ldr	r3, [pc, #104]	; (388 <nm_bus_init+0xcc>)
     31e:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     320:	4b1a      	ldr	r3, [pc, #104]	; (38c <nm_bus_init+0xd0>)
     322:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     324:	2301      	movs	r3, #1
     326:	425b      	negs	r3, r3
     328:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     32a:	4b19      	ldr	r3, [pc, #100]	; (390 <nm_bus_init+0xd4>)
     32c:	6353      	str	r3, [r2, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     32e:	4b19      	ldr	r3, [pc, #100]	; (394 <nm_bus_init+0xd8>)
     330:	6193      	str	r3, [r2, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     332:	4819      	ldr	r0, [pc, #100]	; (398 <nm_bus_init+0xdc>)
     334:	4919      	ldr	r1, [pc, #100]	; (39c <nm_bus_init+0xe0>)
     336:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <nm_bus_init+0xe4>)
     338:	4798      	blx	r3
     33a:	2800      	cmp	r0, #0
     33c:	d11a      	bne.n	374 <nm_bus_init+0xb8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     33e:	4d16      	ldr	r5, [pc, #88]	; (398 <nm_bus_init+0xdc>)
     340:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     342:	1c20      	adds	r0, r4, #0
     344:	4b17      	ldr	r3, [pc, #92]	; (3a4 <nm_bus_init+0xe8>)
     346:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     348:	231f      	movs	r3, #31
     34a:	4018      	ands	r0, r3
     34c:	2301      	movs	r3, #1
     34e:	4083      	lsls	r3, r0
     350:	1c18      	adds	r0, r3, #0
     352:	4b15      	ldr	r3, [pc, #84]	; (3a8 <nm_bus_init+0xec>)
     354:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     356:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     358:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     35a:	2b00      	cmp	r3, #0
     35c:	d1fc      	bne.n	358 <nm_bus_init+0x9c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     35e:	6822      	ldr	r2, [r4, #0]
     360:	2302      	movs	r3, #2
     362:	4313      	orrs	r3, r2
     364:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     366:	4b11      	ldr	r3, [pc, #68]	; (3ac <nm_bus_init+0xf0>)
     368:	4798      	blx	r3
	nm_bsp_sleep(1);
     36a:	2001      	movs	r0, #1
     36c:	4b10      	ldr	r3, [pc, #64]	; (3b0 <nm_bus_init+0xf4>)
     36e:	4798      	blx	r3
#endif
	return result;
     370:	2000      	movs	r0, #0
     372:	e000      	b.n	376 <nm_bus_init+0xba>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
     374:	20fa      	movs	r0, #250	; 0xfa
     376:	b240      	sxtb	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
     378:	b011      	add	sp, #68	; 0x44
     37a:	bd30      	pop	{r4, r5, pc}
     37c:	200002e0 	.word	0x200002e0
     380:	00003165 	.word	0x00003165
     384:	41004400 	.word	0x41004400
     388:	000c0002 	.word	0x000c0002
     38c:	000d0002 	.word	0x000d0002
     390:	000f0002 	.word	0x000f0002
     394:	00b71b00 	.word	0x00b71b00
     398:	200002e4 	.word	0x200002e4
     39c:	42001000 	.word	0x42001000
     3a0:	00003a01 	.word	0x00003a01
     3a4:	00003975 	.word	0x00003975
     3a8:	e000e100 	.word	0xe000e100
     3ac:	000001a9 	.word	0x000001a9
     3b0:	0000018d 	.word	0x0000018d

000003b4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	465f      	mov	r7, fp
     3b8:	4656      	mov	r6, sl
     3ba:	464d      	mov	r5, r9
     3bc:	4644      	mov	r4, r8
     3be:	b4f0      	push	{r4, r5, r6, r7}
     3c0:	b087      	sub	sp, #28
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3c2:	2803      	cmp	r0, #3
     3c4:	d16c      	bne.n	4a0 <nm_bus_ioctl+0xec>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3c6:	680e      	ldr	r6, [r1, #0]
     3c8:	684d      	ldr	r5, [r1, #4]
     3ca:	890f      	ldrh	r7, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
     3cc:	2200      	movs	r2, #0
     3ce:	466b      	mov	r3, sp
     3d0:	75da      	strb	r2, [r3, #23]
     3d2:	3317      	adds	r3, #23
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
     3d4:	2e00      	cmp	r6, #0
     3d6:	d005      	beq.n	3e4 <nm_bus_ioctl+0x30>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
     3d8:	2d00      	cmp	r5, #0
     3da:	d15f      	bne.n	49c <nm_bus_ioctl+0xe8>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
     3dc:	2401      	movs	r4, #1
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3de:	9502      	str	r5, [sp, #8]
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
     3e0:	1c1d      	adds	r5, r3, #0
     3e2:	e004      	b.n	3ee <nm_bus_ioctl+0x3a>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3e4:	2400      	movs	r4, #0
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
     3e6:	2001      	movs	r0, #1
     3e8:	9002      	str	r0, [sp, #8]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
     3ea:	466e      	mov	r6, sp
     3ec:	3617      	adds	r6, #23
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
     3ee:	4837      	ldr	r0, [pc, #220]	; (4cc <nm_bus_ioctl+0x118>)
     3f0:	4937      	ldr	r1, [pc, #220]	; (4d0 <nm_bus_ioctl+0x11c>)
     3f2:	2201      	movs	r2, #1
     3f4:	4b37      	ldr	r3, [pc, #220]	; (4d4 <nm_bus_ioctl+0x120>)
     3f6:	4798      	blx	r3

	while (u16Sz) {
     3f8:	2f00      	cmp	r7, #0
     3fa:	d042      	beq.n	482 <nm_bus_ioctl+0xce>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3fc:	4b33      	ldr	r3, [pc, #204]	; (4cc <nm_bus_ioctl+0x118>)
     3fe:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     400:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     402:	2204      	movs	r2, #4
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     404:	2000      	movs	r0, #0
     406:	4684      	mov	ip, r0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     408:	2304      	movs	r3, #4
     40a:	4699      	mov	r9, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     40c:	201e      	movs	r0, #30
     40e:	4680      	mov	r8, r0
			;
		*pu8Miso = rxd_data;

		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
     410:	4263      	negs	r3, r4
     412:	4163      	adcs	r3, r4
     414:	9303      	str	r3, [sp, #12]
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
     416:	7834      	ldrb	r4, [r6, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     418:	4650      	mov	r0, sl
     41a:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     41c:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     41e:	4208      	tst	r0, r1
     420:	d0fc      	beq.n	41c <nm_bus_ioctl+0x68>
     422:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     424:	4208      	tst	r0, r1
     426:	d0fc      	beq.n	422 <nm_bus_ioctl+0x6e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     428:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     42a:	7e18      	ldrb	r0, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     42c:	4210      	tst	r0, r2
     42e:	d0fc      	beq.n	42a <nm_bus_ioctl+0x76>
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     430:	4826      	ldr	r0, [pc, #152]	; (4cc <nm_bus_ioctl+0x118>)
     432:	7984      	ldrb	r4, [r0, #6]
     434:	9501      	str	r5, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     436:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     438:	4210      	tst	r0, r2
     43a:	d0fc      	beq.n	436 <nm_bus_ioctl+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     43c:	8b5d      	ldrh	r5, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     43e:	4660      	mov	r0, ip

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     440:	4215      	tst	r5, r2
     442:	d005      	beq.n	450 <nm_bus_ioctl+0x9c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     444:	8b58      	ldrh	r0, [r3, #26]
     446:	464d      	mov	r5, r9
     448:	4328      	orrs	r0, r5
     44a:	b280      	uxth	r0, r0
     44c:	8358      	strh	r0, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     44e:	4640      	mov	r0, r8
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     450:	2c01      	cmp	r4, #1
     452:	d104      	bne.n	45e <nm_bus_ioctl+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     454:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     456:	05ed      	lsls	r5, r5, #23
     458:	0ded      	lsrs	r5, r5, #23
     45a:	46ab      	mov	fp, r5
     45c:	e002      	b.n	464 <nm_bus_ioctl+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     45e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     460:	b2ed      	uxtb	r5, r5
     462:	46ab      	mov	fp, r5
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     464:	2800      	cmp	r0, #0
     466:	d1e6      	bne.n	436 <nm_bus_ioctl+0x82>
     468:	9d01      	ldr	r5, [sp, #4]
			;
		*pu8Miso = rxd_data;
     46a:	4658      	mov	r0, fp
     46c:	7028      	strb	r0, [r5, #0]

		u16Sz--;
     46e:	3f01      	subs	r7, #1
     470:	b2bf      	uxth	r7, r7
		if (!u8SkipMiso)
			pu8Miso++;
     472:	9b03      	ldr	r3, [sp, #12]
     474:	18ed      	adds	r5, r5, r3
		if (!u8SkipMosi)
			pu8Mosi++;
     476:	9c02      	ldr	r4, [sp, #8]
     478:	4263      	negs	r3, r4
     47a:	4163      	adcs	r3, r4
     47c:	18f6      	adds	r6, r6, r3
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     47e:	2f00      	cmp	r7, #0
     480:	d1c9      	bne.n	416 <nm_bus_ioctl+0x62>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     482:	4b12      	ldr	r3, [pc, #72]	; (4cc <nm_bus_ioctl+0x118>)
     484:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     486:	2202      	movs	r2, #2
     488:	7e0b      	ldrb	r3, [r1, #24]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     48a:	4213      	tst	r3, r2
     48c:	d0fc      	beq.n	488 <nm_bus_ioctl+0xd4>
		;

	spi_select_slave(&master, &slave_inst, false);
     48e:	480f      	ldr	r0, [pc, #60]	; (4cc <nm_bus_ioctl+0x118>)
     490:	490f      	ldr	r1, [pc, #60]	; (4d0 <nm_bus_ioctl+0x11c>)
     492:	2200      	movs	r2, #0
     494:	4b0f      	ldr	r3, [pc, #60]	; (4d4 <nm_bus_ioctl+0x120>)
     496:	4798      	blx	r3

	return M2M_SUCCESS;
     498:	2000      	movs	r0, #0
     49a:	e00e      	b.n	4ba <nm_bus_ioctl+0x106>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
     49c:	20fa      	movs	r0, #250	; 0xfa
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
     49e:	e00c      	b.n	4ba <nm_bus_ioctl+0x106>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
     4a0:	480d      	ldr	r0, [pc, #52]	; (4d8 <nm_bus_ioctl+0x124>)
     4a2:	490e      	ldr	r1, [pc, #56]	; (4dc <nm_bus_ioctl+0x128>)
     4a4:	2286      	movs	r2, #134	; 0x86
     4a6:	0052      	lsls	r2, r2, #1
     4a8:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <nm_bus_ioctl+0x12c>)
     4aa:	4798      	blx	r3
     4ac:	480d      	ldr	r0, [pc, #52]	; (4e4 <nm_bus_ioctl+0x130>)
     4ae:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <nm_bus_ioctl+0x134>)
     4b0:	4798      	blx	r3
     4b2:	200d      	movs	r0, #13
     4b4:	4b0d      	ldr	r3, [pc, #52]	; (4ec <nm_bus_ioctl+0x138>)
     4b6:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
     4b8:	20ff      	movs	r0, #255	; 0xff
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
     4ba:	b240      	sxtb	r0, r0
}
     4bc:	b007      	add	sp, #28
     4be:	bc3c      	pop	{r2, r3, r4, r5}
     4c0:	4690      	mov	r8, r2
     4c2:	4699      	mov	r9, r3
     4c4:	46a2      	mov	sl, r4
     4c6:	46ab      	mov	fp, r5
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	200002e4 	.word	0x200002e4
     4d0:	200002e0 	.word	0x200002e0
     4d4:	00003bdd 	.word	0x00003bdd
     4d8:	0000835c 	.word	0x0000835c
     4dc:	0000834c 	.word	0x0000834c
     4e0:	000070b5 	.word	0x000070b5
     4e4:	00008370 	.word	0x00008370
     4e8:	000071d5 	.word	0x000071d5
     4ec:	000070e9 	.word	0x000070e9

000004f0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4f0:	b538      	push	{r3, r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     4f2:	4d0b      	ldr	r5, [pc, #44]	; (520 <nm_bus_deinit+0x30>)
     4f4:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4f6:	1c20      	adds	r0, r4, #0
     4f8:	4b0a      	ldr	r3, [pc, #40]	; (524 <nm_bus_deinit+0x34>)
     4fa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4fc:	231f      	movs	r3, #31
     4fe:	4018      	ands	r0, r3
     500:	2301      	movs	r3, #1
     502:	4083      	lsls	r3, r0
     504:	1c18      	adds	r0, r3, #0
     506:	2380      	movs	r3, #128	; 0x80
     508:	4a07      	ldr	r2, [pc, #28]	; (528 <nm_bus_deinit+0x38>)
     50a:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     50c:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     50e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     510:	2b00      	cmp	r3, #0
     512:	d1fc      	bne.n	50e <nm_bus_deinit+0x1e>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     514:	6823      	ldr	r3, [r4, #0]
     516:	2202      	movs	r2, #2
     518:	4393      	bics	r3, r2
     51a:	6023      	str	r3, [r4, #0]
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     51c:	2000      	movs	r0, #0
     51e:	bd38      	pop	{r3, r4, r5, pc}
     520:	200002e4 	.word	0x200002e4
     524:	00003975 	.word	0x00003975
     528:	e000e100 	.word	0xe000e100

0000052c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     52c:	2a00      	cmp	r2, #0
     52e:	d006      	beq.n	53e <m2m_memcpy+0x12>
     530:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     532:	780b      	ldrb	r3, [r1, #0]
     534:	7003      	strb	r3, [r0, #0]
		pDst++;
     536:	3001      	adds	r0, #1
		pSrc++;
     538:	3101      	adds	r1, #1
	}while(--sz);
     53a:	4290      	cmp	r0, r2
     53c:	d1f9      	bne.n	532 <m2m_memcpy+0x6>
}
     53e:	4770      	bx	lr

00000540 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     540:	2a00      	cmp	r2, #0
     542:	d004      	beq.n	54e <m2m_memset+0xe>
     544:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     546:	7001      	strb	r1, [r0, #0]
		pBuf++;
     548:	3001      	adds	r0, #1
	}while(--sz);
     54a:	4290      	cmp	r0, r2
     54c:	d1fb      	bne.n	546 <m2m_memset+0x6>
}
     54e:	4770      	bx	lr

00000550 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     550:	1c03      	adds	r3, r0, #0
	uint16	u16StrLen = 0;
	while(*pcStr)
     552:	7802      	ldrb	r2, [r0, #0]
     554:	2a00      	cmp	r2, #0
     556:	d007      	beq.n	568 <m2m_strlen+0x18>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     558:	2000      	movs	r0, #0
	while(*pcStr)
	{
		u16StrLen ++;
     55a:	3001      	adds	r0, #1
     55c:	b280      	uxth	r0, r0
		pcStr++;
     55e:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     560:	781a      	ldrb	r2, [r3, #0]
     562:	2a00      	cmp	r2, #0
     564:	d1f9      	bne.n	55a <m2m_strlen+0xa>
     566:	e000      	b.n	56a <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     568:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
     56a:	4770      	bx	lr

0000056c <isr>:
tpfHifCallBack pfOtaCb = NULL;		/*!< pointer to OTA call back function */
tpfHifCallBack pfHifCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
     56c:	4b02      	ldr	r3, [pc, #8]	; (578 <isr+0xc>)
     56e:	781a      	ldrb	r2, [r3, #0]
     570:	3201      	adds	r2, #1
     572:	b2d2      	uxtb	r2, r2
     574:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     576:	4770      	bx	lr
     578:	2000009c 	.word	0x2000009c

0000057c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     57c:	4770      	bx	lr
     57e:	46c0      	nop			; (mov r8, r8)

00000580 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     580:	b500      	push	{lr}
     582:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     584:	2001      	movs	r0, #1
     586:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x2c>)
     588:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     58a:	4809      	ldr	r0, [pc, #36]	; (5b0 <hif_set_rx_done+0x30>)
     58c:	a901      	add	r1, sp, #4
     58e:	4b09      	ldr	r3, [pc, #36]	; (5b4 <hif_set_rx_done+0x34>)
     590:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     592:	2800      	cmp	r0, #0
     594:	d106      	bne.n	5a4 <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     596:	2102      	movs	r1, #2
     598:	9b01      	ldr	r3, [sp, #4]
     59a:	4319      	orrs	r1, r3
     59c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     59e:	4804      	ldr	r0, [pc, #16]	; (5b0 <hif_set_rx_done+0x30>)
     5a0:	4b05      	ldr	r3, [pc, #20]	; (5b8 <hif_set_rx_done+0x38>)
     5a2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     5a4:	b240      	sxtb	r0, r0

}
     5a6:	b003      	add	sp, #12
     5a8:	bd00      	pop	{pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	00000299 	.word	0x00000299
     5b0:	00001070 	.word	0x00001070
     5b4:	0000196d 	.word	0x0000196d
     5b8:	00001979 	.word	0x00001979

000005bc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5bc:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <hif_chip_wake+0x44>)
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d113      	bne.n	5ee <hif_chip_wake+0x32>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     5c6:	4b0f      	ldr	r3, [pc, #60]	; (604 <hif_chip_wake+0x48>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b03      	cmp	r3, #3
     5cc:	d004      	beq.n	5d8 <hif_chip_wake+0x1c>
     5ce:	4b0d      	ldr	r3, [pc, #52]	; (604 <hif_chip_wake+0x48>)
     5d0:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
     5d2:	2000      	movs	r0, #0
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     5d4:	2b04      	cmp	r3, #4
     5d6:	d10b      	bne.n	5f0 <hif_chip_wake+0x34>
		{
			ret = nm_clkless_wake();
     5d8:	4b0b      	ldr	r3, [pc, #44]	; (608 <hif_chip_wake+0x4c>)
     5da:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5dc:	2800      	cmp	r0, #0
     5de:	d10c      	bne.n	5fa <hif_chip_wake+0x3e>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     5e0:	480a      	ldr	r0, [pc, #40]	; (60c <hif_chip_wake+0x50>)
     5e2:	490b      	ldr	r1, [pc, #44]	; (610 <hif_chip_wake+0x54>)
     5e4:	4b0b      	ldr	r3, [pc, #44]	; (614 <hif_chip_wake+0x58>)
     5e6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5e8:	2800      	cmp	r0, #0
     5ea:	d001      	beq.n	5f0 <hif_chip_wake+0x34>
     5ec:	e005      	b.n	5fa <hif_chip_wake+0x3e>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
     5ee:	2000      	movs	r0, #0
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     5f0:	4b03      	ldr	r3, [pc, #12]	; (600 <hif_chip_wake+0x44>)
     5f2:	781a      	ldrb	r2, [r3, #0]
     5f4:	3201      	adds	r2, #1
     5f6:	b2d2      	uxtb	r2, r2
     5f8:	701a      	strb	r2, [r3, #0]
ERR1:
	return ret;
     5fa:	b240      	sxtb	r0, r0
}
     5fc:	bd08      	pop	{r3, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	200000b4 	.word	0x200000b4
     604:	200000a4 	.word	0x200000a4
     608:	000012d9 	.word	0x000012d9
     60c:	00001074 	.word	0x00001074
     610:	00005678 	.word	0x00005678
     614:	00001979 	.word	0x00001979

00000618 <hif_set_sleep_mode>:
	The function SHALL return 0 for success and a negative value otherwise.
*/

void hif_set_sleep_mode(uint8 u8Pstype)
{
	gu8ChipMode = u8Pstype;
     618:	4b01      	ldr	r3, [pc, #4]	; (620 <hif_set_sleep_mode+0x8>)
     61a:	7018      	strb	r0, [r3, #0]
}
     61c:	4770      	bx	lr
     61e:	46c0      	nop			; (mov r8, r8)
     620:	200000a4 	.word	0x200000a4

00000624 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     624:	b500      	push	{lr}
     626:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
     628:	4b17      	ldr	r3, [pc, #92]	; (688 <hif_chip_sleep+0x64>)
     62a:	781b      	ldrb	r3, [r3, #0]
     62c:	2b00      	cmp	r3, #0
     62e:	d004      	beq.n	63a <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
     630:	4b15      	ldr	r3, [pc, #84]	; (688 <hif_chip_sleep+0x64>)
     632:	781a      	ldrb	r2, [r3, #0]
     634:	3a01      	subs	r2, #1
     636:	b2d2      	uxtb	r2, r2
     638:	701a      	strb	r2, [r3, #0]
	}

	if(gu8ChipSleep == 0)
     63a:	4b13      	ldr	r3, [pc, #76]	; (688 <hif_chip_sleep+0x64>)
     63c:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
     63e:	2000      	movs	r0, #0
	if(gu8ChipSleep >= 1)
	{
		gu8ChipSleep--;
	}

	if(gu8ChipSleep == 0)
     640:	2b00      	cmp	r3, #0
     642:	d11e      	bne.n	682 <hif_chip_sleep+0x5e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     644:	4b11      	ldr	r3, [pc, #68]	; (68c <hif_chip_sleep+0x68>)
     646:	781b      	ldrb	r3, [r3, #0]
     648:	2b03      	cmp	r3, #3
     64a:	d003      	beq.n	654 <hif_chip_sleep+0x30>
     64c:	4b0f      	ldr	r3, [pc, #60]	; (68c <hif_chip_sleep+0x68>)
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	2b04      	cmp	r3, #4
     652:	d116      	bne.n	682 <hif_chip_sleep+0x5e>
		{
			uint32 reg = 0;
     654:	2300      	movs	r3, #0
     656:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     658:	480d      	ldr	r0, [pc, #52]	; (690 <hif_chip_sleep+0x6c>)
     65a:	490e      	ldr	r1, [pc, #56]	; (694 <hif_chip_sleep+0x70>)
     65c:	4b0e      	ldr	r3, [pc, #56]	; (698 <hif_chip_sleep+0x74>)
     65e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     660:	2800      	cmp	r0, #0
     662:	d10e      	bne.n	682 <hif_chip_sleep+0x5e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     664:	2001      	movs	r0, #1
     666:	a901      	add	r1, sp, #4
     668:	4b0c      	ldr	r3, [pc, #48]	; (69c <hif_chip_sleep+0x78>)
     66a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     66c:	2800      	cmp	r0, #0
     66e:	d108      	bne.n	682 <hif_chip_sleep+0x5e>
			if(reg&0x2)
     670:	9901      	ldr	r1, [sp, #4]
     672:	078b      	lsls	r3, r1, #30
     674:	d505      	bpl.n	682 <hif_chip_sleep+0x5e>
			{
				reg &=~(1 << 1);
     676:	2302      	movs	r3, #2
     678:	4399      	bics	r1, r3
     67a:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
     67c:	2001      	movs	r0, #1
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <hif_chip_sleep+0x74>)
     680:	4798      	blx	r3
		else
		{
		}
	}
ERR1:
	return ret;
     682:	b240      	sxtb	r0, r0
}
     684:	b003      	add	sp, #12
     686:	bd00      	pop	{pc}
     688:	200000b4 	.word	0x200000b4
     68c:	200000a4 	.word	0x200000a4
     690:	00001074 	.word	0x00001074
     694:	00004321 	.word	0x00004321
     698:	00001979 	.word	0x00001979
     69c:	0000196d 	.word	0x0000196d

000006a0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a2:	4657      	mov	r7, sl
     6a4:	464e      	mov	r6, r9
     6a6:	4645      	mov	r5, r8
     6a8:	b4e0      	push	{r5, r6, r7}
     6aa:	b086      	sub	sp, #24
     6ac:	4682      	mov	sl, r0
     6ae:	1c0d      	adds	r5, r1, #0
     6b0:	4691      	mov	r9, r2
     6b2:	4698      	mov	r8, r3
     6b4:	ab0e      	add	r3, sp, #56	; 0x38
     6b6:	cb04      	ldmia	r3!, {r2}
     6b8:	881e      	ldrh	r6, [r3, #0]
     6ba:	ab10      	add	r3, sp, #64	; 0x40
     6bc:	881f      	ldrh	r7, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6be:	237f      	movs	r3, #127	; 0x7f
     6c0:	400b      	ands	r3, r1
     6c2:	ac05      	add	r4, sp, #20
     6c4:	7063      	strb	r3, [r4, #1]
	strHif.u8Gid		= u8Gid;
     6c6:	7020      	strb	r0, [r4, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6c8:	2308      	movs	r3, #8
     6ca:	8063      	strh	r3, [r4, #2]
	if(pu8DataBuf != NULL)
     6cc:	2a00      	cmp	r2, #0
     6ce:	d005      	beq.n	6dc <hif_send+0x3c>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6d0:	8862      	ldrh	r2, [r4, #2]
     6d2:	1992      	adds	r2, r2, r6
     6d4:	18ba      	adds	r2, r7, r2
     6d6:	b292      	uxth	r2, r2
     6d8:	8062      	strh	r2, [r4, #2]
     6da:	e004      	b.n	6e6 <hif_send+0x46>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     6dc:	ab05      	add	r3, sp, #20
     6de:	885a      	ldrh	r2, [r3, #2]
     6e0:	4442      	add	r2, r8
     6e2:	b292      	uxth	r2, r2
     6e4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     6e6:	4b55      	ldr	r3, [pc, #340]	; (83c <hif_send+0x19c>)
     6e8:	4798      	blx	r3
     6ea:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6ec:	d000      	beq.n	6f0 <hif_send+0x50>
     6ee:	e08b      	b.n	808 <hif_send+0x168>
	{
		volatile uint32 reg, dma_addr = 0;
     6f0:	2300      	movs	r3, #0
     6f2:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
     6f4:	466a      	mov	r2, sp
     6f6:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
     6f8:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
     6fa:	9b02      	ldr	r3, [sp, #8]
     6fc:	4652      	mov	r2, sl
     6fe:	4313      	orrs	r3, r2
     700:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
     702:	9b02      	ldr	r3, [sp, #8]
     704:	022d      	lsls	r5, r5, #8
     706:	431d      	orrs	r5, r3
     708:	9502      	str	r5, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
     70a:	ab05      	add	r3, sp, #20
     70c:	885b      	ldrh	r3, [r3, #2]
     70e:	9a02      	ldr	r2, [sp, #8]
     710:	041b      	lsls	r3, r3, #16
     712:	4313      	orrs	r3, r2
     714:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     716:	9902      	ldr	r1, [sp, #8]
     718:	4849      	ldr	r0, [pc, #292]	; (840 <hif_send+0x1a0>)
     71a:	4b4a      	ldr	r3, [pc, #296]	; (844 <hif_send+0x1a4>)
     71c:	4798      	blx	r3
     71e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     720:	d000      	beq.n	724 <hif_send+0x84>
     722:	e083      	b.n	82c <hif_send+0x18c>


		reg = 0;
     724:	2300      	movs	r3, #0
     726:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
     728:	9a02      	ldr	r2, [sp, #8]
     72a:	2302      	movs	r3, #2
     72c:	4313      	orrs	r3, r2
     72e:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     730:	9902      	ldr	r1, [sp, #8]
     732:	4845      	ldr	r0, [pc, #276]	; (848 <hif_send+0x1a8>)
     734:	4b43      	ldr	r3, [pc, #268]	; (844 <hif_send+0x1a4>)
     736:	4798      	blx	r3
     738:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     73a:	d177      	bne.n	82c <hif_send+0x18c>
		dma_addr = 0;
     73c:	2200      	movs	r2, #0
     73e:	9203      	str	r2, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     740:	466b      	mov	r3, sp
     742:	80da      	strh	r2, [r3, #6]
     744:	88da      	ldrh	r2, [r3, #6]
     746:	b292      	uxth	r2, r2
     748:	4b40      	ldr	r3, [pc, #256]	; (84c <hif_send+0x1ac>)
     74a:	429a      	cmp	r2, r3
     74c:	d81d      	bhi.n	78a <hif_send+0xea>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     74e:	4b3e      	ldr	r3, [pc, #248]	; (848 <hif_send+0x1a8>)
     750:	469a      	mov	sl, r3
     752:	4d3f      	ldr	r5, [pc, #252]	; (850 <hif_send+0x1b0>)
     754:	4650      	mov	r0, sl
     756:	a902      	add	r1, sp, #8
     758:	47a8      	blx	r5
			if(ret != M2M_SUCCESS) break;
     75a:	2800      	cmp	r0, #0
     75c:	d115      	bne.n	78a <hif_send+0xea>
			if (!(reg & 0x2))
     75e:	9b02      	ldr	r3, [sp, #8]
     760:	079a      	lsls	r2, r3, #30
     762:	d408      	bmi.n	776 <hif_send+0xd6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     764:	483b      	ldr	r0, [pc, #236]	; (854 <hif_send+0x1b4>)
     766:	a903      	add	r1, sp, #12
     768:	4b39      	ldr	r3, [pc, #228]	; (850 <hif_send+0x1b0>)
     76a:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
     76c:	2800      	cmp	r0, #0
     76e:	d00c      	beq.n	78a <hif_send+0xea>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     770:	2300      	movs	r3, #0
     772:	9303      	str	r3, [sp, #12]
     774:	e009      	b.n	78a <hif_send+0xea>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     776:	466c      	mov	r4, sp
     778:	88e3      	ldrh	r3, [r4, #6]
     77a:	3301      	adds	r3, #1
     77c:	b29b      	uxth	r3, r3
     77e:	80e3      	strh	r3, [r4, #6]
     780:	88e2      	ldrh	r2, [r4, #6]
     782:	b292      	uxth	r2, r2
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <hif_send+0x1ac>)
     786:	429a      	cmp	r2, r3
     788:	d9e4      	bls.n	754 <hif_send+0xb4>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     78a:	9b03      	ldr	r3, [sp, #12]
     78c:	2b00      	cmp	r3, #0
     78e:	d04c      	beq.n	82a <hif_send+0x18a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     790:	9b03      	ldr	r3, [sp, #12]
     792:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     794:	a905      	add	r1, sp, #20
     796:	884b      	ldrh	r3, [r1, #2]
     798:	b29b      	uxth	r3, r3
     79a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     79c:	9804      	ldr	r0, [sp, #16]
     79e:	2208      	movs	r2, #8
     7a0:	4b2d      	ldr	r3, [pc, #180]	; (858 <hif_send+0x1b8>)
     7a2:	4798      	blx	r3
     7a4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7a6:	d141      	bne.n	82c <hif_send+0x18c>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     7a8:	9b04      	ldr	r3, [sp, #16]
     7aa:	3308      	adds	r3, #8
     7ac:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
     7ae:	464b      	mov	r3, r9
     7b0:	2b00      	cmp	r3, #0
     7b2:	d009      	beq.n	7c8 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     7b4:	9804      	ldr	r0, [sp, #16]
     7b6:	4649      	mov	r1, r9
     7b8:	4642      	mov	r2, r8
     7ba:	4b27      	ldr	r3, [pc, #156]	; (858 <hif_send+0x1b8>)
     7bc:	4798      	blx	r3
     7be:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7c0:	d134      	bne.n	82c <hif_send+0x18c>
				u32CurrAddr += u16CtrlBufSize;
     7c2:	9b04      	ldr	r3, [sp, #16]
     7c4:	4443      	add	r3, r8
     7c6:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
     7c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     7ca:	2a00      	cmp	r2, #0
     7cc:	d00e      	beq.n	7ec <hif_send+0x14c>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7ce:	9b04      	ldr	r3, [sp, #16]
     7d0:	4642      	mov	r2, r8
     7d2:	1abf      	subs	r7, r7, r2
     7d4:	18ff      	adds	r7, r7, r3
     7d6:	9704      	str	r7, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7d8:	9804      	ldr	r0, [sp, #16]
     7da:	990e      	ldr	r1, [sp, #56]	; 0x38
     7dc:	1c32      	adds	r2, r6, #0
     7de:	4b1e      	ldr	r3, [pc, #120]	; (858 <hif_send+0x1b8>)
     7e0:	4798      	blx	r3
     7e2:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7e4:	d122      	bne.n	82c <hif_send+0x18c>
				u32CurrAddr += u16DataSize;
     7e6:	9b04      	ldr	r3, [sp, #16]
     7e8:	18f6      	adds	r6, r6, r3
     7ea:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
     7ec:	9b03      	ldr	r3, [sp, #12]
     7ee:	009b      	lsls	r3, r3, #2
     7f0:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
     7f2:	9a02      	ldr	r2, [sp, #8]
     7f4:	2302      	movs	r3, #2
     7f6:	4313      	orrs	r3, r2
     7f8:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7fa:	9902      	ldr	r1, [sp, #8]
     7fc:	4817      	ldr	r0, [pc, #92]	; (85c <hif_send+0x1bc>)
     7fe:	4b11      	ldr	r3, [pc, #68]	; (844 <hif_send+0x1a4>)
     800:	4798      	blx	r3
     802:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     804:	d112      	bne.n	82c <hif_send+0x18c>
     806:	e00c      	b.n	822 <hif_send+0x182>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     808:	4815      	ldr	r0, [pc, #84]	; (860 <hif_send+0x1c0>)
     80a:	4916      	ldr	r1, [pc, #88]	; (864 <hif_send+0x1c4>)
     80c:	2296      	movs	r2, #150	; 0x96
     80e:	32ff      	adds	r2, #255	; 0xff
     810:	4b15      	ldr	r3, [pc, #84]	; (868 <hif_send+0x1c8>)
     812:	4798      	blx	r3
     814:	4815      	ldr	r0, [pc, #84]	; (86c <hif_send+0x1cc>)
     816:	4b16      	ldr	r3, [pc, #88]	; (870 <hif_send+0x1d0>)
     818:	4798      	blx	r3
     81a:	200d      	movs	r0, #13
     81c:	4b15      	ldr	r3, [pc, #84]	; (874 <hif_send+0x1d4>)
     81e:	4798      	blx	r3
		goto ERR1;
     820:	e004      	b.n	82c <hif_send+0x18c>
	}
	ret = hif_chip_sleep();
     822:	4b15      	ldr	r3, [pc, #84]	; (878 <hif_send+0x1d8>)
     824:	4798      	blx	r3
     826:	1c04      	adds	r4, r0, #0
     828:	e000      	b.n	82c <hif_send+0x18c>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
     82a:	24fd      	movs	r4, #253	; 0xfd
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
     82c:	b260      	sxtb	r0, r4
}
     82e:	b006      	add	sp, #24
     830:	bc1c      	pop	{r2, r3, r4}
     832:	4690      	mov	r8, r2
     834:	4699      	mov	r9, r3
     836:	46a2      	mov	sl, r4
     838:	bdf0      	pop	{r4, r5, r6, r7, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000005bd 	.word	0x000005bd
     840:	0000108c 	.word	0x0000108c
     844:	00001979 	.word	0x00001979
     848:	00001078 	.word	0x00001078
     84c:	000003e7 	.word	0x000003e7
     850:	0000196d 	.word	0x0000196d
     854:	00150400 	.word	0x00150400
     858:	000019f9 	.word	0x000019f9
     85c:	0000106c 	.word	0x0000106c
     860:	0000835c 	.word	0x0000835c
     864:	00008394 	.word	0x00008394
     868:	000070b5 	.word	0x000070b5
     86c:	000083b8 	.word	0x000083b8
     870:	000071d5 	.word	0x000071d5
     874:	000070e9 	.word	0x000070e9
     878:	00000625 	.word	0x00000625

0000087c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	465f      	mov	r7, fp
     880:	4656      	mov	r6, sl
     882:	464d      	mov	r5, r9
     884:	b4e0      	push	{r5, r6, r7}
     886:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     888:	4aa4      	ldr	r2, [pc, #656]	; (b1c <hif_handle_isr+0x2a0>)
     88a:	4692      	mov	sl, r2
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     88c:	4691      	mov	r9, r2
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     88e:	4ea4      	ldr	r6, [pc, #656]	; (b20 <hif_handle_isr+0x2a4>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     890:	e137      	b.n	b02 <hif_handle_isr+0x286>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     892:	464a      	mov	r2, r9
     894:	7813      	ldrb	r3, [r2, #0]
     896:	3b01      	subs	r3, #1
     898:	b2db      	uxtb	r3, r3
     89a:	7013      	strb	r3, [r2, #0]
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     89c:	4fa1      	ldr	r7, [pc, #644]	; (b24 <hif_handle_isr+0x2a8>)
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     89e:	47b0      	blx	r6
     8a0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     8a2:	d000      	beq.n	8a6 <hif_handle_isr+0x2a>
     8a4:	e110      	b.n	ac8 <hif_handle_isr+0x24c>
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
     8a6:	48a0      	ldr	r0, [pc, #640]	; (b28 <hif_handle_isr+0x2ac>)
     8a8:	a903      	add	r1, sp, #12
     8aa:	4ba0      	ldr	r3, [pc, #640]	; (b2c <hif_handle_isr+0x2b0>)
     8ac:	4798      	blx	r3
     8ae:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
     8b0:	d000      	beq.n	8b4 <hif_handle_isr+0x38>
     8b2:	e0fc      	b.n	aae <hif_handle_isr+0x232>
		{
			if(reg & 0x1)	/* New interrupt has been received */
     8b4:	9b03      	ldr	r3, [sp, #12]
     8b6:	07db      	lsls	r3, r3, #31
     8b8:	d400      	bmi.n	8bc <hif_handle_isr+0x40>
     8ba:	e0ec      	b.n	a96 <hif_handle_isr+0x21a>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
     8bc:	2000      	movs	r0, #0
     8be:	4b9c      	ldr	r3, [pc, #624]	; (b30 <hif_handle_isr+0x2b4>)
     8c0:	4798      	blx	r3
				/*Clearing RX interrupt*/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     8c2:	4899      	ldr	r0, [pc, #612]	; (b28 <hif_handle_isr+0x2ac>)
     8c4:	a903      	add	r1, sp, #12
     8c6:	4b99      	ldr	r3, [pc, #612]	; (b2c <hif_handle_isr+0x2b0>)
     8c8:	4798      	blx	r3
     8ca:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     8cc:	d000      	beq.n	8d0 <hif_handle_isr+0x54>
     8ce:	e10c      	b.n	aea <hif_handle_isr+0x26e>
				reg &= ~(1<<0);
     8d0:	2301      	movs	r3, #1
     8d2:	9903      	ldr	r1, [sp, #12]
     8d4:	4399      	bics	r1, r3
     8d6:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     8d8:	4893      	ldr	r0, [pc, #588]	; (b28 <hif_handle_isr+0x2ac>)
     8da:	4b96      	ldr	r3, [pc, #600]	; (b34 <hif_handle_isr+0x2b8>)
     8dc:	4798      	blx	r3
     8de:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     8e0:	d000      	beq.n	8e4 <hif_handle_isr+0x68>
     8e2:	e102      	b.n	aea <hif_handle_isr+0x26e>
				/* read the rx size */
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     8e4:	4890      	ldr	r0, [pc, #576]	; (b28 <hif_handle_isr+0x2ac>)
     8e6:	a903      	add	r1, sp, #12
     8e8:	4b90      	ldr	r3, [pc, #576]	; (b2c <hif_handle_isr+0x2b0>)
     8ea:	4798      	blx	r3
     8ec:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     8ee:	d00f      	beq.n	910 <hif_handle_isr+0x94>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
     8f0:	488c      	ldr	r0, [pc, #560]	; (b24 <hif_handle_isr+0x2a8>)
     8f2:	4991      	ldr	r1, [pc, #580]	; (b38 <hif_handle_isr+0x2bc>)
     8f4:	22e0      	movs	r2, #224	; 0xe0
     8f6:	0052      	lsls	r2, r2, #1
     8f8:	4b90      	ldr	r3, [pc, #576]	; (b3c <hif_handle_isr+0x2c0>)
     8fa:	4798      	blx	r3
     8fc:	4890      	ldr	r0, [pc, #576]	; (b40 <hif_handle_isr+0x2c4>)
     8fe:	4b91      	ldr	r3, [pc, #580]	; (b44 <hif_handle_isr+0x2c8>)
     900:	4798      	blx	r3
     902:	200d      	movs	r0, #13
     904:	4b90      	ldr	r3, [pc, #576]	; (b48 <hif_handle_isr+0x2cc>)
     906:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     908:	2001      	movs	r0, #1
     90a:	4b89      	ldr	r3, [pc, #548]	; (b30 <hif_handle_isr+0x2b4>)
     90c:	4798      	blx	r3
     90e:	e0ec      	b.n	aea <hif_handle_isr+0x26e>
					goto ERR1;
				}
				gu8HifSizeDone = 0;
     910:	2200      	movs	r2, #0
     912:	4b8e      	ldr	r3, [pc, #568]	; (b4c <hif_handle_isr+0x2d0>)
     914:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
     916:	9a03      	ldr	r2, [sp, #12]
     918:	0493      	lsls	r3, r2, #18
     91a:	0d1b      	lsrs	r3, r3, #20
     91c:	469b      	mov	fp, r3
				if (size > 0) {
     91e:	d100      	bne.n	922 <hif_handle_isr+0xa6>
     920:	e0ac      	b.n	a7c <hif_handle_isr+0x200>
					uint32 address = 0;
     922:	2300      	movs	r3, #0
     924:	9305      	str	r3, [sp, #20]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     926:	488a      	ldr	r0, [pc, #552]	; (b50 <hif_handle_isr+0x2d4>)
     928:	a905      	add	r1, sp, #20
     92a:	4b80      	ldr	r3, [pc, #512]	; (b2c <hif_handle_isr+0x2b0>)
     92c:	4798      	blx	r3
     92e:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
     930:	d00f      	beq.n	952 <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     932:	487c      	ldr	r0, [pc, #496]	; (b24 <hif_handle_isr+0x2a8>)
     934:	4980      	ldr	r1, [pc, #512]	; (b38 <hif_handle_isr+0x2bc>)
     936:	22e7      	movs	r2, #231	; 0xe7
     938:	0052      	lsls	r2, r2, #1
     93a:	4b80      	ldr	r3, [pc, #512]	; (b3c <hif_handle_isr+0x2c0>)
     93c:	4798      	blx	r3
     93e:	4885      	ldr	r0, [pc, #532]	; (b54 <hif_handle_isr+0x2d8>)
     940:	4b80      	ldr	r3, [pc, #512]	; (b44 <hif_handle_isr+0x2c8>)
     942:	4798      	blx	r3
     944:	200d      	movs	r0, #13
     946:	4b80      	ldr	r3, [pc, #512]	; (b48 <hif_handle_isr+0x2cc>)
     948:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     94a:	2001      	movs	r0, #1
     94c:	4b78      	ldr	r3, [pc, #480]	; (b30 <hif_handle_isr+0x2b4>)
     94e:	4798      	blx	r3
     950:	e0c9      	b.n	ae6 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     952:	ad04      	add	r5, sp, #16
     954:	9805      	ldr	r0, [sp, #20]
     956:	1c29      	adds	r1, r5, #0
     958:	2204      	movs	r2, #4
     95a:	4b7f      	ldr	r3, [pc, #508]	; (b58 <hif_handle_isr+0x2dc>)
     95c:	4798      	blx	r3
     95e:	1c04      	adds	r4, r0, #0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     960:	886b      	ldrh	r3, [r5, #2]
     962:	b29b      	uxth	r3, r3
     964:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
     966:	2800      	cmp	r0, #0
     968:	d00f      	beq.n	98a <hif_handle_isr+0x10e>
					{
						M2M_ERR("(hif) address bus fail\n");
     96a:	486e      	ldr	r0, [pc, #440]	; (b24 <hif_handle_isr+0x2a8>)
     96c:	4972      	ldr	r1, [pc, #456]	; (b38 <hif_handle_isr+0x2bc>)
     96e:	22eb      	movs	r2, #235	; 0xeb
     970:	0052      	lsls	r2, r2, #1
     972:	4b72      	ldr	r3, [pc, #456]	; (b3c <hif_handle_isr+0x2c0>)
     974:	4798      	blx	r3
     976:	4879      	ldr	r0, [pc, #484]	; (b5c <hif_handle_isr+0x2e0>)
     978:	4b72      	ldr	r3, [pc, #456]	; (b44 <hif_handle_isr+0x2c8>)
     97a:	4798      	blx	r3
     97c:	200d      	movs	r0, #13
     97e:	4b72      	ldr	r3, [pc, #456]	; (b48 <hif_handle_isr+0x2cc>)
     980:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     982:	2001      	movs	r0, #1
     984:	4b6a      	ldr	r3, [pc, #424]	; (b30 <hif_handle_isr+0x2b4>)
     986:	4798      	blx	r3
     988:	e0ad      	b.n	ae6 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
     98a:	ab04      	add	r3, sp, #16
     98c:	885b      	ldrh	r3, [r3, #2]
     98e:	b29b      	uxth	r3, r3
     990:	459b      	cmp	fp, r3
     992:	d01d      	beq.n	9d0 <hif_handle_isr+0x154>
					{
						if((size - strHif.u16Length) > 4)
     994:	ab04      	add	r3, sp, #16
     996:	885b      	ldrh	r3, [r3, #2]
     998:	465a      	mov	r2, fp
     99a:	1ad3      	subs	r3, r2, r3
     99c:	2b04      	cmp	r3, #4
     99e:	dd17      	ble.n	9d0 <hif_handle_isr+0x154>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     9a0:	4860      	ldr	r0, [pc, #384]	; (b24 <hif_handle_isr+0x2a8>)
     9a2:	4965      	ldr	r1, [pc, #404]	; (b38 <hif_handle_isr+0x2bc>)
     9a4:	22e0      	movs	r2, #224	; 0xe0
     9a6:	32ff      	adds	r2, #255	; 0xff
     9a8:	4c64      	ldr	r4, [pc, #400]	; (b3c <hif_handle_isr+0x2c0>)
     9aa:	47a0      	blx	r4
     9ac:	a904      	add	r1, sp, #16
     9ae:	884a      	ldrh	r2, [r1, #2]
     9b0:	b292      	uxth	r2, r2
     9b2:	780b      	ldrb	r3, [r1, #0]
     9b4:	b2db      	uxtb	r3, r3
     9b6:	7849      	ldrb	r1, [r1, #1]
     9b8:	9100      	str	r1, [sp, #0]
     9ba:	4869      	ldr	r0, [pc, #420]	; (b60 <hif_handle_isr+0x2e4>)
     9bc:	4659      	mov	r1, fp
     9be:	47a0      	blx	r4
     9c0:	200d      	movs	r0, #13
     9c2:	4b61      	ldr	r3, [pc, #388]	; (b48 <hif_handle_isr+0x2cc>)
     9c4:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
     9c6:	2001      	movs	r0, #1
     9c8:	4b59      	ldr	r3, [pc, #356]	; (b30 <hif_handle_isr+0x2b4>)
     9ca:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
     9cc:	24fa      	movs	r4, #250	; 0xfa
     9ce:	e08a      	b.n	ae6 <hif_handle_isr+0x26a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
     9d0:	ab04      	add	r3, sp, #16
     9d2:	781b      	ldrb	r3, [r3, #0]
     9d4:	2b01      	cmp	r3, #1
     9d6:	d10d      	bne.n	9f4 <hif_handle_isr+0x178>
					{
						if(pfWifiCb)
     9d8:	4b62      	ldr	r3, [pc, #392]	; (b64 <hif_handle_isr+0x2e8>)
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	2b00      	cmp	r3, #0
     9de:	d03b      	beq.n	a58 <hif_handle_isr+0x1dc>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9e0:	aa04      	add	r2, sp, #16
     9e2:	7850      	ldrb	r0, [r2, #1]
     9e4:	b2c0      	uxtb	r0, r0
     9e6:	8851      	ldrh	r1, [r2, #2]
     9e8:	3908      	subs	r1, #8
     9ea:	b289      	uxth	r1, r1
     9ec:	9a05      	ldr	r2, [sp, #20]
     9ee:	3208      	adds	r2, #8
     9f0:	4798      	blx	r3
     9f2:	e031      	b.n	a58 <hif_handle_isr+0x1dc>

					}
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
     9f4:	ab04      	add	r3, sp, #16
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	2b02      	cmp	r3, #2
     9fa:	d10d      	bne.n	a18 <hif_handle_isr+0x19c>
					{
						if(pfIpCb)
     9fc:	4b5a      	ldr	r3, [pc, #360]	; (b68 <hif_handle_isr+0x2ec>)
     9fe:	681c      	ldr	r4, [r3, #0]
     a00:	2c00      	cmp	r4, #0
     a02:	d029      	beq.n	a58 <hif_handle_isr+0x1dc>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a04:	ab04      	add	r3, sp, #16
     a06:	7858      	ldrb	r0, [r3, #1]
     a08:	b2c0      	uxtb	r0, r0
     a0a:	8859      	ldrh	r1, [r3, #2]
     a0c:	3908      	subs	r1, #8
     a0e:	b289      	uxth	r1, r1
     a10:	9a05      	ldr	r2, [sp, #20]
     a12:	3208      	adds	r2, #8
     a14:	47a0      	blx	r4
     a16:	e01f      	b.n	a58 <hif_handle_isr+0x1dc>
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
     a18:	ab04      	add	r3, sp, #16
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	2b04      	cmp	r3, #4
     a1e:	d10d      	bne.n	a3c <hif_handle_isr+0x1c0>
					{
						if(pfOtaCb)
     a20:	4b52      	ldr	r3, [pc, #328]	; (b6c <hif_handle_isr+0x2f0>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	2b00      	cmp	r3, #0
     a26:	d017      	beq.n	a58 <hif_handle_isr+0x1dc>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a28:	aa04      	add	r2, sp, #16
     a2a:	7850      	ldrb	r0, [r2, #1]
     a2c:	b2c0      	uxtb	r0, r0
     a2e:	8851      	ldrh	r1, [r2, #2]
     a30:	3908      	subs	r1, #8
     a32:	b289      	uxth	r1, r1
     a34:	9a05      	ldr	r2, [sp, #20]
     a36:	3208      	adds	r2, #8
     a38:	4798      	blx	r3
     a3a:	e00d      	b.n	a58 <hif_handle_isr+0x1dc>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
     a3c:	4839      	ldr	r0, [pc, #228]	; (b24 <hif_handle_isr+0x2a8>)
     a3e:	493e      	ldr	r1, [pc, #248]	; (b38 <hif_handle_isr+0x2bc>)
     a40:	22fc      	movs	r2, #252	; 0xfc
     a42:	0052      	lsls	r2, r2, #1
     a44:	4b3d      	ldr	r3, [pc, #244]	; (b3c <hif_handle_isr+0x2c0>)
     a46:	4798      	blx	r3
     a48:	4849      	ldr	r0, [pc, #292]	; (b70 <hif_handle_isr+0x2f4>)
     a4a:	4b3e      	ldr	r3, [pc, #248]	; (b44 <hif_handle_isr+0x2c8>)
     a4c:	4798      	blx	r3
     a4e:	200d      	movs	r0, #13
     a50:	4b3d      	ldr	r3, [pc, #244]	; (b48 <hif_handle_isr+0x2cc>)
     a52:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     a54:	24fa      	movs	r4, #250	; 0xfa
     a56:	e046      	b.n	ae6 <hif_handle_isr+0x26a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
     a58:	4b3c      	ldr	r3, [pc, #240]	; (b4c <hif_handle_isr+0x2d0>)
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d13f      	bne.n	ae0 <hif_handle_isr+0x264>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
     a60:	4830      	ldr	r0, [pc, #192]	; (b24 <hif_handle_isr+0x2a8>)
     a62:	4935      	ldr	r1, [pc, #212]	; (b38 <hif_handle_isr+0x2bc>)
     a64:	4a43      	ldr	r2, [pc, #268]	; (b74 <hif_handle_isr+0x2f8>)
     a66:	4b35      	ldr	r3, [pc, #212]	; (b3c <hif_handle_isr+0x2c0>)
     a68:	4798      	blx	r3
     a6a:	4843      	ldr	r0, [pc, #268]	; (b78 <hif_handle_isr+0x2fc>)
     a6c:	4b35      	ldr	r3, [pc, #212]	; (b44 <hif_handle_isr+0x2c8>)
     a6e:	4798      	blx	r3
     a70:	200d      	movs	r0, #13
     a72:	4b35      	ldr	r3, [pc, #212]	; (b48 <hif_handle_isr+0x2cc>)
     a74:	4798      	blx	r3
						ret = hif_set_rx_done();
     a76:	4b41      	ldr	r3, [pc, #260]	; (b7c <hif_handle_isr+0x300>)
     a78:	4798      	blx	r3
     a7a:	e031      	b.n	ae0 <hif_handle_isr+0x264>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
     a7c:	4829      	ldr	r0, [pc, #164]	; (b24 <hif_handle_isr+0x2a8>)
     a7e:	492e      	ldr	r1, [pc, #184]	; (b38 <hif_handle_isr+0x2bc>)
     a80:	4a3f      	ldr	r2, [pc, #252]	; (b80 <hif_handle_isr+0x304>)
     a82:	4b2e      	ldr	r3, [pc, #184]	; (b3c <hif_handle_isr+0x2c0>)
     a84:	4798      	blx	r3
     a86:	483f      	ldr	r0, [pc, #252]	; (b84 <hif_handle_isr+0x308>)
     a88:	4b2e      	ldr	r3, [pc, #184]	; (b44 <hif_handle_isr+0x2c8>)
     a8a:	4798      	blx	r3
     a8c:	200d      	movs	r0, #13
     a8e:	4b2e      	ldr	r3, [pc, #184]	; (b48 <hif_handle_isr+0x2cc>)
     a90:	4798      	blx	r3
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
     a92:	24fe      	movs	r4, #254	; 0xfe
     a94:	e029      	b.n	aea <hif_handle_isr+0x26e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
     a96:	4823      	ldr	r0, [pc, #140]	; (b24 <hif_handle_isr+0x2a8>)
     a98:	4927      	ldr	r1, [pc, #156]	; (b38 <hif_handle_isr+0x2bc>)
     a9a:	4a3b      	ldr	r2, [pc, #236]	; (b88 <hif_handle_isr+0x30c>)
     a9c:	4c27      	ldr	r4, [pc, #156]	; (b3c <hif_handle_isr+0x2c0>)
     a9e:	47a0      	blx	r4
     aa0:	483a      	ldr	r0, [pc, #232]	; (b8c <hif_handle_isr+0x310>)
     aa2:	9903      	ldr	r1, [sp, #12]
     aa4:	47a0      	blx	r4
     aa6:	200d      	movs	r0, #13
     aa8:	4b27      	ldr	r3, [pc, #156]	; (b48 <hif_handle_isr+0x2cc>)
     aaa:	4798      	blx	r3
     aac:	e018      	b.n	ae0 <hif_handle_isr+0x264>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
     aae:	481d      	ldr	r0, [pc, #116]	; (b24 <hif_handle_isr+0x2a8>)
     ab0:	4921      	ldr	r1, [pc, #132]	; (b38 <hif_handle_isr+0x2bc>)
     ab2:	2285      	movs	r2, #133	; 0x85
     ab4:	0092      	lsls	r2, r2, #2
     ab6:	4b21      	ldr	r3, [pc, #132]	; (b3c <hif_handle_isr+0x2c0>)
     ab8:	4798      	blx	r3
     aba:	4835      	ldr	r0, [pc, #212]	; (b90 <hif_handle_isr+0x314>)
     abc:	4b21      	ldr	r3, [pc, #132]	; (b44 <hif_handle_isr+0x2c8>)
     abe:	4798      	blx	r3
     ac0:	200d      	movs	r0, #13
     ac2:	4b21      	ldr	r3, [pc, #132]	; (b48 <hif_handle_isr+0x2cc>)
     ac4:	4798      	blx	r3
     ac6:	e010      	b.n	aea <hif_handle_isr+0x26e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     ac8:	1c38      	adds	r0, r7, #0
     aca:	491b      	ldr	r1, [pc, #108]	; (b38 <hif_handle_isr+0x2bc>)
     acc:	4a31      	ldr	r2, [pc, #196]	; (b94 <hif_handle_isr+0x318>)
     ace:	4b1b      	ldr	r3, [pc, #108]	; (b3c <hif_handle_isr+0x2c0>)
     ad0:	4798      	blx	r3
     ad2:	4831      	ldr	r0, [pc, #196]	; (b98 <hif_handle_isr+0x31c>)
     ad4:	4b1b      	ldr	r3, [pc, #108]	; (b44 <hif_handle_isr+0x2c8>)
     ad6:	4798      	blx	r3
     ad8:	200d      	movs	r0, #13
     ada:	4b1b      	ldr	r3, [pc, #108]	; (b48 <hif_handle_isr+0x2cc>)
     adc:	4798      	blx	r3
     ade:	e004      	b.n	aea <hif_handle_isr+0x26e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
     ae0:	4b2e      	ldr	r3, [pc, #184]	; (b9c <hif_handle_isr+0x320>)
     ae2:	4798      	blx	r3
     ae4:	1c04      	adds	r4, r0, #0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
     ae6:	2c00      	cmp	r4, #0
     ae8:	d00b      	beq.n	b02 <hif_handle_isr+0x286>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     aea:	480e      	ldr	r0, [pc, #56]	; (b24 <hif_handle_isr+0x2a8>)
     aec:	492c      	ldr	r1, [pc, #176]	; (ba0 <hif_handle_isr+0x324>)
     aee:	4a2d      	ldr	r2, [pc, #180]	; (ba4 <hif_handle_isr+0x328>)
     af0:	4d12      	ldr	r5, [pc, #72]	; (b3c <hif_handle_isr+0x2c0>)
     af2:	47a8      	blx	r5
     af4:	b261      	sxtb	r1, r4
     af6:	482c      	ldr	r0, [pc, #176]	; (ba8 <hif_handle_isr+0x32c>)
     af8:	47a8      	blx	r5
     afa:	200d      	movs	r0, #13
     afc:	4b12      	ldr	r3, [pc, #72]	; (b48 <hif_handle_isr+0x2cc>)
     afe:	4798      	blx	r3
			}
		}
     b00:	e6cd      	b.n	89e <hif_handle_isr+0x22>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     b02:	4652      	mov	r2, sl
     b04:	7813      	ldrb	r3, [r2, #0]
     b06:	2b00      	cmp	r3, #0
     b08:	d000      	beq.n	b0c <hif_handle_isr+0x290>
     b0a:	e6c2      	b.n	892 <hif_handle_isr+0x16>
			}
		}
	}

	return ret;
}
     b0c:	2000      	movs	r0, #0
     b0e:	b006      	add	sp, #24
     b10:	bc1c      	pop	{r2, r3, r4}
     b12:	4691      	mov	r9, r2
     b14:	469a      	mov	sl, r3
     b16:	46a3      	mov	fp, r4
     b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	2000009c 	.word	0x2000009c
     b20:	000005bd 	.word	0x000005bd
     b24:	0000835c 	.word	0x0000835c
     b28:	00001070 	.word	0x00001070
     b2c:	0000196d 	.word	0x0000196d
     b30:	00000299 	.word	0x00000299
     b34:	00001979 	.word	0x00001979
     b38:	000083b0 	.word	0x000083b0
     b3c:	000070b5 	.word	0x000070b5
     b40:	000083d4 	.word	0x000083d4
     b44:	000071d5 	.word	0x000071d5
     b48:	000070e9 	.word	0x000070e9
     b4c:	200000ac 	.word	0x200000ac
     b50:	00001084 	.word	0x00001084
     b54:	000083f8 	.word	0x000083f8
     b58:	00001985 	.word	0x00001985
     b5c:	0000841c 	.word	0x0000841c
     b60:	00008434 	.word	0x00008434
     b64:	20000098 	.word	0x20000098
     b68:	200000a8 	.word	0x200000a8
     b6c:	200000b0 	.word	0x200000b0
     b70:	00008474 	.word	0x00008474
     b74:	000001ff 	.word	0x000001ff
     b78:	0000848c 	.word	0x0000848c
     b7c:	00000581 	.word	0x00000581
     b80:	00000207 	.word	0x00000207
     b84:	000084b0 	.word	0x000084b0
     b88:	0000020e 	.word	0x0000020e
     b8c:	000084c4 	.word	0x000084c4
     b90:	000084e0 	.word	0x000084e0
     b94:	0000021a 	.word	0x0000021a
     b98:	00008504 	.word	0x00008504
     b9c:	00000625 	.word	0x00000625
     ba0:	00008384 	.word	0x00008384
     ba4:	00000239 	.word	0x00000239
     ba8:	00008524 	.word	0x00008524

00000bac <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	464f      	mov	r7, r9
     bb0:	4646      	mov	r6, r8
     bb2:	b4c0      	push	{r6, r7}
     bb4:	b083      	sub	sp, #12
     bb6:	1c05      	adds	r5, r0, #0
     bb8:	1c0f      	adds	r7, r1, #0
     bba:	1c16      	adds	r6, r2, #0
     bbc:	4698      	mov	r8, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
     bbe:	2800      	cmp	r0, #0
     bc0:	d003      	beq.n	bca <hif_receive+0x1e>
     bc2:	2900      	cmp	r1, #0
     bc4:	d001      	beq.n	bca <hif_receive+0x1e>
     bc6:	2a00      	cmp	r2, #0
     bc8:	d114      	bne.n	bf4 <hif_receive+0x48>
	{
		if(isDone)
     bca:	4643      	mov	r3, r8
     bcc:	2b00      	cmp	r3, #0
     bce:	d004      	beq.n	bda <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
     bd0:	2201      	movs	r2, #1
     bd2:	4b2f      	ldr	r3, [pc, #188]	; (c90 <hif_receive+0xe4>)
     bd4:	701a      	strb	r2, [r3, #0]

			/* set RX done */
			ret = hif_set_rx_done();
     bd6:	4b2f      	ldr	r3, [pc, #188]	; (c94 <hif_receive+0xe8>)
     bd8:	4798      	blx	r3
		}
			
		ret = M2M_ERR_FAIL;
		M2M_ERR(" hif_receive: Invalid argument\n");
     bda:	482f      	ldr	r0, [pc, #188]	; (c98 <hif_receive+0xec>)
     bdc:	492f      	ldr	r1, [pc, #188]	; (c9c <hif_receive+0xf0>)
     bde:	4a30      	ldr	r2, [pc, #192]	; (ca0 <hif_receive+0xf4>)
     be0:	4b30      	ldr	r3, [pc, #192]	; (ca4 <hif_receive+0xf8>)
     be2:	4798      	blx	r3
     be4:	4830      	ldr	r0, [pc, #192]	; (ca8 <hif_receive+0xfc>)
     be6:	4b31      	ldr	r3, [pc, #196]	; (cac <hif_receive+0x100>)
     be8:	4798      	blx	r3
     bea:	200d      	movs	r0, #13
     bec:	4b30      	ldr	r3, [pc, #192]	; (cb0 <hif_receive+0x104>)
     bee:	4798      	blx	r3

			/* set RX done */
			ret = hif_set_rx_done();
		}
			
		ret = M2M_ERR_FAIL;
     bf0:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR(" hif_receive: Invalid argument\n");
		goto ERR1;
     bf2:	e046      	b.n	c82 <hif_receive+0xd6>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     bf4:	482f      	ldr	r0, [pc, #188]	; (cb4 <hif_receive+0x108>)
     bf6:	4669      	mov	r1, sp
     bf8:	4a2f      	ldr	r2, [pc, #188]	; (cb8 <hif_receive+0x10c>)
     bfa:	4790      	blx	r2
     bfc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
     bfe:	d140      	bne.n	c82 <hif_receive+0xd6>


	size = (uint16)((reg >> 2) & 0xfff);
     c00:	9b00      	ldr	r3, [sp, #0]
     c02:	4699      	mov	r9, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
     c04:	482d      	ldr	r0, [pc, #180]	; (cbc <hif_receive+0x110>)
     c06:	a901      	add	r1, sp, #4
     c08:	4b2b      	ldr	r3, [pc, #172]	; (cb8 <hif_receive+0x10c>)
     c0a:	4798      	blx	r3
     c0c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
     c0e:	d138      	bne.n	c82 <hif_receive+0xd6>

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     c10:	1c28      	adds	r0, r5, #0
     c12:	1c39      	adds	r1, r7, #0
     c14:	1c32      	adds	r2, r6, #0
     c16:	4b2a      	ldr	r3, [pc, #168]	; (cc0 <hif_receive+0x114>)
     c18:	4798      	blx	r3
     c1a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
     c1c:	d131      	bne.n	c82 <hif_receive+0xd6>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
     c1e:	464b      	mov	r3, r9
     c20:	049f      	lsls	r7, r3, #18
     c22:	0d3f      	lsrs	r7, r7, #20

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
     c24:	42be      	cmp	r6, r7
     c26:	d90d      	bls.n	c44 <hif_receive+0x98>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
     c28:	481b      	ldr	r0, [pc, #108]	; (c98 <hif_receive+0xec>)
     c2a:	491c      	ldr	r1, [pc, #112]	; (c9c <hif_receive+0xf0>)
     c2c:	4a25      	ldr	r2, [pc, #148]	; (cc4 <hif_receive+0x118>)
     c2e:	4c1d      	ldr	r4, [pc, #116]	; (ca4 <hif_receive+0xf8>)
     c30:	47a0      	blx	r4
     c32:	4825      	ldr	r0, [pc, #148]	; (cc8 <hif_receive+0x11c>)
     c34:	1c31      	adds	r1, r6, #0
     c36:	1c3a      	adds	r2, r7, #0
     c38:	47a0      	blx	r4
     c3a:	200d      	movs	r0, #13
     c3c:	4b1c      	ldr	r3, [pc, #112]	; (cb0 <hif_receive+0x104>)
     c3e:	4798      	blx	r3
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
     c40:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
     c42:	e01e      	b.n	c82 <hif_receive+0xd6>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	429d      	cmp	r5, r3
     c48:	d303      	bcc.n	c52 <hif_receive+0xa6>
     c4a:	19ad      	adds	r5, r5, r6
     c4c:	18ff      	adds	r7, r7, r3
     c4e:	42bd      	cmp	r5, r7
     c50:	d90c      	bls.n	c6c <hif_receive+0xc0>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     c52:	4811      	ldr	r0, [pc, #68]	; (c98 <hif_receive+0xec>)
     c54:	4911      	ldr	r1, [pc, #68]	; (c9c <hif_receive+0xf0>)
     c56:	4a1d      	ldr	r2, [pc, #116]	; (ccc <hif_receive+0x120>)
     c58:	4b12      	ldr	r3, [pc, #72]	; (ca4 <hif_receive+0xf8>)
     c5a:	4798      	blx	r3
     c5c:	481c      	ldr	r0, [pc, #112]	; (cd0 <hif_receive+0x124>)
     c5e:	4b13      	ldr	r3, [pc, #76]	; (cac <hif_receive+0x100>)
     c60:	4798      	blx	r3
     c62:	200d      	movs	r0, #13
     c64:	4b12      	ldr	r3, [pc, #72]	; (cb0 <hif_receive+0x104>)
     c66:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
     c68:	24f4      	movs	r4, #244	; 0xf4
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
     c6a:	e00a      	b.n	c82 <hif_receive+0xd6>
	}

	/* check if this is the last packet */
	if((((address+size) - (u32Addr+u16Sz)) <= 0) || isDone)
     c6c:	42bd      	cmp	r5, r7
     c6e:	d002      	beq.n	c76 <hif_receive+0xca>
     c70:	4643      	mov	r3, r8
     c72:	2b00      	cmp	r3, #0
     c74:	d005      	beq.n	c82 <hif_receive+0xd6>
	{
		gu8HifSizeDone = 1;
     c76:	2201      	movs	r2, #1
     c78:	4b05      	ldr	r3, [pc, #20]	; (c90 <hif_receive+0xe4>)
     c7a:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
     c7c:	4b05      	ldr	r3, [pc, #20]	; (c94 <hif_receive+0xe8>)
     c7e:	4798      	blx	r3
     c80:	1c04      	adds	r4, r0, #0
	}



ERR1:
	return ret;
     c82:	b260      	sxtb	r0, r4
}
     c84:	b003      	add	sp, #12
     c86:	bc0c      	pop	{r2, r3}
     c88:	4690      	mov	r8, r2
     c8a:	4699      	mov	r9, r3
     c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	200000ac 	.word	0x200000ac
     c94:	00000581 	.word	0x00000581
     c98:	0000835c 	.word	0x0000835c
     c9c:	00008608 	.word	0x00008608
     ca0:	0000025e 	.word	0x0000025e
     ca4:	000070b5 	.word	0x000070b5
     ca8:	00008554 	.word	0x00008554
     cac:	000071d5 	.word	0x000071d5
     cb0:	000070e9 	.word	0x000070e9
     cb4:	00001070 	.word	0x00001070
     cb8:	0000196d 	.word	0x0000196d
     cbc:	00001084 	.word	0x00001084
     cc0:	00001985 	.word	0x00001985
     cc4:	00000271 	.word	0x00000271
     cc8:	00008574 	.word	0x00008574
     ccc:	00000277 	.word	0x00000277
     cd0:	000085b8 	.word	0x000085b8

00000cd4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     cd4:	b538      	push	{r3, r4, r5, lr}
     cd6:	1e04      	subs	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     cd8:	2c02      	cmp	r4, #2
     cda:	d009      	beq.n	cf0 <hif_register_cb+0x1c>
     cdc:	2802      	cmp	r0, #2
     cde:	d802      	bhi.n	ce6 <hif_register_cb+0x12>
     ce0:	2801      	cmp	r0, #1
     ce2:	d009      	beq.n	cf8 <hif_register_cb+0x24>
     ce4:	e014      	b.n	d10 <hif_register_cb+0x3c>
     ce6:	2803      	cmp	r0, #3
     ce8:	d00e      	beq.n	d08 <hif_register_cb+0x34>
     cea:	2804      	cmp	r0, #4
     cec:	d008      	beq.n	d00 <hif_register_cb+0x2c>
     cee:	e00f      	b.n	d10 <hif_register_cb+0x3c>
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
     cf0:	4b0e      	ldr	r3, [pc, #56]	; (d2c <hif_register_cb+0x58>)
     cf2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     cf4:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
     cf6:	e017      	b.n	d28 <hif_register_cb+0x54>
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <hif_register_cb+0x5c>)
     cfa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     cfc:	2000      	movs	r0, #0
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
     cfe:	e013      	b.n	d28 <hif_register_cb+0x54>
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <hif_register_cb+0x60>)
     d02:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     d04:	2000      	movs	r0, #0
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
     d06:	e00f      	b.n	d28 <hif_register_cb+0x54>
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
     d08:	4b0b      	ldr	r3, [pc, #44]	; (d38 <hif_register_cb+0x64>)
     d0a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     d0c:	2000      	movs	r0, #0
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
			break;
     d0e:	e00b      	b.n	d28 <hif_register_cb+0x54>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
     d10:	480a      	ldr	r0, [pc, #40]	; (d3c <hif_register_cb+0x68>)
     d12:	490b      	ldr	r1, [pc, #44]	; (d40 <hif_register_cb+0x6c>)
     d14:	4a0b      	ldr	r2, [pc, #44]	; (d44 <hif_register_cb+0x70>)
     d16:	4d0c      	ldr	r5, [pc, #48]	; (d48 <hif_register_cb+0x74>)
     d18:	47a8      	blx	r5
     d1a:	480c      	ldr	r0, [pc, #48]	; (d4c <hif_register_cb+0x78>)
     d1c:	1c21      	adds	r1, r4, #0
     d1e:	47a8      	blx	r5
     d20:	200d      	movs	r0, #13
     d22:	4b0b      	ldr	r3, [pc, #44]	; (d50 <hif_register_cb+0x7c>)
     d24:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d26:	20f4      	movs	r0, #244	; 0xf4
			break;
	}
	return ret;
     d28:	b240      	sxtb	r0, r0
}
     d2a:	bd38      	pop	{r3, r4, r5, pc}
     d2c:	200000a8 	.word	0x200000a8
     d30:	20000098 	.word	0x20000098
     d34:	200000b0 	.word	0x200000b0
     d38:	200000a0 	.word	0x200000a0
     d3c:	0000835c 	.word	0x0000835c
     d40:	000083a0 	.word	0x000083a0
     d44:	000002a6 	.word	0x000002a6
     d48:	000070b5 	.word	0x000070b5
     d4c:	000085fc 	.word	0x000085fc
     d50:	000070e9 	.word	0x000070e9

00000d54 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     d54:	b508      	push	{r3, lr}
	pfWifiCb = NULL;
     d56:	2300      	movs	r3, #0
     d58:	4a09      	ldr	r2, [pc, #36]	; (d80 <hif_init+0x2c>)
     d5a:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
     d5c:	4a09      	ldr	r2, [pc, #36]	; (d84 <hif_init+0x30>)
     d5e:	6013      	str	r3, [r2, #0]

	gu8ChipSleep = 0;
     d60:	4a09      	ldr	r2, [pc, #36]	; (d88 <hif_init+0x34>)
     d62:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
     d64:	4a09      	ldr	r2, [pc, #36]	; (d8c <hif_init+0x38>)
     d66:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
     d68:	4a09      	ldr	r2, [pc, #36]	; (d90 <hif_init+0x3c>)
     d6a:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
     d6c:	4809      	ldr	r0, [pc, #36]	; (d94 <hif_init+0x40>)
     d6e:	4b0a      	ldr	r3, [pc, #40]	; (d98 <hif_init+0x44>)
     d70:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GRP_HIF,m2m_hif_cb);
     d72:	2003      	movs	r0, #3
     d74:	4909      	ldr	r1, [pc, #36]	; (d9c <hif_init+0x48>)
     d76:	4b0a      	ldr	r3, [pc, #40]	; (da0 <hif_init+0x4c>)
     d78:	4798      	blx	r3

	return M2M_SUCCESS;
}
     d7a:	2000      	movs	r0, #0
     d7c:	bd08      	pop	{r3, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	20000098 	.word	0x20000098
     d84:	200000a8 	.word	0x200000a8
     d88:	200000b4 	.word	0x200000b4
     d8c:	200000a4 	.word	0x200000a4
     d90:	2000009c 	.word	0x2000009c
     d94:	0000056d 	.word	0x0000056d
     d98:	00000241 	.word	0x00000241
     d9c:	0000057d 	.word	0x0000057d
     da0:	00000cd5 	.word	0x00000cd5

00000da4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     da4:	b530      	push	{r4, r5, lr}
     da6:	b09f      	sub	sp, #124	; 0x7c
     da8:	1c04      	adds	r4, r0, #0
     daa:	1c15      	adds	r5, r2, #0
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     dac:	282c      	cmp	r0, #44	; 0x2c
     dae:	d111      	bne.n	dd4 <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     db0:	1c10      	adds	r0, r2, #0
     db2:	a903      	add	r1, sp, #12
     db4:	2204      	movs	r2, #4
     db6:	2300      	movs	r3, #0
     db8:	4c7c      	ldr	r4, [pc, #496]	; (fac <m2m_wifi_cb+0x208>)
     dba:	47a0      	blx	r4
     dbc:	2800      	cmp	r0, #0
     dbe:	d000      	beq.n	dc2 <m2m_wifi_cb+0x1e>
     dc0:	e0f1      	b.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     dc2:	4b7b      	ldr	r3, [pc, #492]	; (fb0 <m2m_wifi_cb+0x20c>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d100      	bne.n	dcc <m2m_wifi_cb+0x28>
     dca:	e0ec      	b.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     dcc:	202c      	movs	r0, #44	; 0x2c
     dce:	a903      	add	r1, sp, #12
     dd0:	4798      	blx	r3
     dd2:	e0e8      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     dd4:	2806      	cmp	r0, #6
     dd6:	d111      	bne.n	dfc <m2m_wifi_cb+0x58>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     dd8:	1c10      	adds	r0, r2, #0
     dda:	a903      	add	r1, sp, #12
     ddc:	2230      	movs	r2, #48	; 0x30
     dde:	2301      	movs	r3, #1
     de0:	4c72      	ldr	r4, [pc, #456]	; (fac <m2m_wifi_cb+0x208>)
     de2:	47a0      	blx	r4
     de4:	2800      	cmp	r0, #0
     de6:	d000      	beq.n	dea <m2m_wifi_cb+0x46>
     de8:	e0dd      	b.n	fa6 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
     dea:	4b71      	ldr	r3, [pc, #452]	; (fb0 <m2m_wifi_cb+0x20c>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	2b00      	cmp	r3, #0
     df0:	d100      	bne.n	df4 <m2m_wifi_cb+0x50>
     df2:	e0d8      	b.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     df4:	2006      	movs	r0, #6
     df6:	a903      	add	r1, sp, #12
     df8:	4798      	blx	r3
     dfa:	e0d4      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     dfc:	280e      	cmp	r0, #14
     dfe:	d100      	bne.n	e02 <m2m_wifi_cb+0x5e>
     e00:	e0d1      	b.n	fa6 <m2m_wifi_cb+0x202>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e02:	2836      	cmp	r0, #54	; 0x36
     e04:	d111      	bne.n	e2a <m2m_wifi_cb+0x86>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     e06:	1c10      	adds	r0, r2, #0
     e08:	a903      	add	r1, sp, #12
     e0a:	2210      	movs	r2, #16
     e0c:	2300      	movs	r3, #0
     e0e:	4c67      	ldr	r4, [pc, #412]	; (fac <m2m_wifi_cb+0x208>)
     e10:	47a0      	blx	r4
     e12:	2800      	cmp	r0, #0
     e14:	d000      	beq.n	e18 <m2m_wifi_cb+0x74>
     e16:	e0c6      	b.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     e18:	4b65      	ldr	r3, [pc, #404]	; (fb0 <m2m_wifi_cb+0x20c>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d100      	bne.n	e22 <m2m_wifi_cb+0x7e>
     e20:	e0c1      	b.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig.u32StaticIP);
     e22:	2036      	movs	r0, #54	; 0x36
     e24:	a903      	add	r1, sp, #12
     e26:	4798      	blx	r3
     e28:	e0bd      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e2a:	2833      	cmp	r0, #51	; 0x33
     e2c:	d116      	bne.n	e5c <m2m_wifi_cb+0xb8>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     e2e:	a803      	add	r0, sp, #12
     e30:	2100      	movs	r1, #0
     e32:	2264      	movs	r2, #100	; 0x64
     e34:	4b5f      	ldr	r3, [pc, #380]	; (fb4 <m2m_wifi_cb+0x210>)
     e36:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     e38:	1c28      	adds	r0, r5, #0
     e3a:	a903      	add	r1, sp, #12
     e3c:	2264      	movs	r2, #100	; 0x64
     e3e:	2300      	movs	r3, #0
     e40:	4c5a      	ldr	r4, [pc, #360]	; (fac <m2m_wifi_cb+0x208>)
     e42:	47a0      	blx	r4
     e44:	2800      	cmp	r0, #0
     e46:	d000      	beq.n	e4a <m2m_wifi_cb+0xa6>
     e48:	e0ad      	b.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     e4a:	4b59      	ldr	r3, [pc, #356]	; (fb0 <m2m_wifi_cb+0x20c>)
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	2b00      	cmp	r3, #0
     e50:	d100      	bne.n	e54 <m2m_wifi_cb+0xb0>
     e52:	e0a8      	b.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     e54:	2033      	movs	r0, #51	; 0x33
     e56:	a903      	add	r1, sp, #12
     e58:	4798      	blx	r3
     e5a:	e0a4      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e5c:	2838      	cmp	r0, #56	; 0x38
     e5e:	d123      	bne.n	ea8 <m2m_wifi_cb+0x104>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     e60:	1c10      	adds	r0, r2, #0
     e62:	a903      	add	r1, sp, #12
     e64:	2204      	movs	r2, #4
     e66:	2300      	movs	r3, #0
     e68:	4c50      	ldr	r4, [pc, #320]	; (fac <m2m_wifi_cb+0x208>)
     e6a:	47a0      	blx	r4
     e6c:	2800      	cmp	r0, #0
     e6e:	d000      	beq.n	e72 <m2m_wifi_cb+0xce>
     e70:	e099      	b.n	fa6 <m2m_wifi_cb+0x202>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
     e72:	4851      	ldr	r0, [pc, #324]	; (fb8 <m2m_wifi_cb+0x214>)
     e74:	4c51      	ldr	r4, [pc, #324]	; (fbc <m2m_wifi_cb+0x218>)
     e76:	47a0      	blx	r4
     e78:	9803      	ldr	r0, [sp, #12]
     e7a:	23ff      	movs	r3, #255	; 0xff
     e7c:	1c19      	adds	r1, r3, #0
     e7e:	4001      	ands	r1, r0
     e80:	0a02      	lsrs	r2, r0, #8
     e82:	401a      	ands	r2, r3
     e84:	0c05      	lsrs	r5, r0, #16
     e86:	402b      	ands	r3, r5
     e88:	0e00      	lsrs	r0, r0, #24
     e8a:	9000      	str	r0, [sp, #0]
     e8c:	484c      	ldr	r0, [pc, #304]	; (fc0 <m2m_wifi_cb+0x21c>)
     e8e:	47a0      	blx	r4
     e90:	200d      	movs	r0, #13
     e92:	4b4c      	ldr	r3, [pc, #304]	; (fc4 <m2m_wifi_cb+0x220>)
     e94:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
     e96:	4b46      	ldr	r3, [pc, #280]	; (fb0 <m2m_wifi_cb+0x20c>)
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	2b00      	cmp	r3, #0
     e9c:	d100      	bne.n	ea0 <m2m_wifi_cb+0xfc>
     e9e:	e082      	b.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     ea0:	2038      	movs	r0, #56	; 0x38
     ea2:	2100      	movs	r1, #0
     ea4:	4798      	blx	r3
     ea6:	e07e      	b.n	fa6 <m2m_wifi_cb+0x202>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     ea8:	2811      	cmp	r0, #17
     eaa:	d116      	bne.n	eda <m2m_wifi_cb+0x136>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
     eac:	2200      	movs	r2, #0
     eae:	4b46      	ldr	r3, [pc, #280]	; (fc8 <m2m_wifi_cb+0x224>)
     eb0:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     eb2:	1c28      	adds	r0, r5, #0
     eb4:	a903      	add	r1, sp, #12
     eb6:	2204      	movs	r2, #4
     eb8:	2300      	movs	r3, #0
     eba:	4c3c      	ldr	r4, [pc, #240]	; (fac <m2m_wifi_cb+0x208>)
     ebc:	47a0      	blx	r4
     ebe:	2800      	cmp	r0, #0
     ec0:	d171      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			gu8ChNum = strState.u8NumofCh;
     ec2:	ab03      	add	r3, sp, #12
     ec4:	781a      	ldrb	r2, [r3, #0]
     ec6:	4b41      	ldr	r3, [pc, #260]	; (fcc <m2m_wifi_cb+0x228>)
     ec8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     eca:	4b39      	ldr	r3, [pc, #228]	; (fb0 <m2m_wifi_cb+0x20c>)
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	2b00      	cmp	r3, #0
     ed0:	d069      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     ed2:	2011      	movs	r0, #17
     ed4:	a903      	add	r1, sp, #12
     ed6:	4798      	blx	r3
     ed8:	e065      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     eda:	2813      	cmp	r0, #19
     edc:	d10f      	bne.n	efe <m2m_wifi_cb+0x15a>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     ede:	1c10      	adds	r0, r2, #0
     ee0:	a903      	add	r1, sp, #12
     ee2:	222c      	movs	r2, #44	; 0x2c
     ee4:	2300      	movs	r3, #0
     ee6:	4c31      	ldr	r4, [pc, #196]	; (fac <m2m_wifi_cb+0x208>)
     ee8:	47a0      	blx	r4
     eea:	2800      	cmp	r0, #0
     eec:	d15b      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     eee:	4b30      	ldr	r3, [pc, #192]	; (fb0 <m2m_wifi_cb+0x20c>)
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d057      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     ef6:	2013      	movs	r0, #19
     ef8:	a903      	add	r1, sp, #12
     efa:	4798      	blx	r3
     efc:	e053      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     efe:	2804      	cmp	r0, #4
     f00:	d10f      	bne.n	f22 <m2m_wifi_cb+0x17e>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     f02:	1c10      	adds	r0, r2, #0
     f04:	a91c      	add	r1, sp, #112	; 0x70
     f06:	2204      	movs	r2, #4
     f08:	2300      	movs	r3, #0
     f0a:	4c28      	ldr	r4, [pc, #160]	; (fac <m2m_wifi_cb+0x208>)
     f0c:	47a0      	blx	r4
     f0e:	2800      	cmp	r0, #0
     f10:	d149      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     f12:	4b27      	ldr	r3, [pc, #156]	; (fb0 <m2m_wifi_cb+0x20c>)
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	2b00      	cmp	r3, #0
     f18:	d045      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     f1a:	2004      	movs	r0, #4
     f1c:	a91c      	add	r1, sp, #112	; 0x70
     f1e:	4798      	blx	r3
     f20:	e041      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     f22:	2815      	cmp	r0, #21
     f24:	d10f      	bne.n	f46 <m2m_wifi_cb+0x1a2>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     f26:	1c10      	adds	r0, r2, #0
     f28:	a91c      	add	r1, sp, #112	; 0x70
     f2a:	2204      	movs	r2, #4
     f2c:	2300      	movs	r3, #0
     f2e:	4c1f      	ldr	r4, [pc, #124]	; (fac <m2m_wifi_cb+0x208>)
     f30:	47a0      	blx	r4
     f32:	2800      	cmp	r0, #0
     f34:	d137      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			if (gpfAppWifiCb)
     f36:	4b1e      	ldr	r3, [pc, #120]	; (fb0 <m2m_wifi_cb+0x20c>)
     f38:	681b      	ldr	r3, [r3, #0]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d033      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     f3e:	2015      	movs	r0, #21
     f40:	a91c      	add	r1, sp, #112	; 0x70
     f42:	4798      	blx	r3
     f44:	e02f      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     f46:	2809      	cmp	r0, #9
     f48:	d10f      	bne.n	f6a <m2m_wifi_cb+0x1c6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     f4a:	1c10      	adds	r0, r2, #0
     f4c:	a903      	add	r1, sp, #12
     f4e:	2264      	movs	r2, #100	; 0x64
     f50:	2301      	movs	r3, #1
     f52:	4c16      	ldr	r4, [pc, #88]	; (fac <m2m_wifi_cb+0x208>)
     f54:	47a0      	blx	r4
     f56:	2800      	cmp	r0, #0
     f58:	d125      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
     f5a:	4b15      	ldr	r3, [pc, #84]	; (fb0 <m2m_wifi_cb+0x20c>)
     f5c:	681b      	ldr	r3, [r3, #0]
     f5e:	2b00      	cmp	r3, #0
     f60:	d021      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
     f62:	2009      	movs	r0, #9
     f64:	a903      	add	r1, sp, #12
     f66:	4798      	blx	r3
     f68:	e01d      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     f6a:	282a      	cmp	r0, #42	; 0x2a
     f6c:	d10f      	bne.n	f8e <m2m_wifi_cb+0x1ea>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
     f6e:	1c10      	adds	r0, r2, #0
     f70:	a903      	add	r1, sp, #12
     f72:	2204      	movs	r2, #4
     f74:	2301      	movs	r3, #1
     f76:	4c0d      	ldr	r4, [pc, #52]	; (fac <m2m_wifi_cb+0x208>)
     f78:	47a0      	blx	r4
     f7a:	2800      	cmp	r0, #0
     f7c:	d113      	bne.n	fa6 <m2m_wifi_cb+0x202>
		{
			if(gpfAppWifiCb)
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <m2m_wifi_cb+0x20c>)
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	2b00      	cmp	r3, #0
     f84:	d00f      	beq.n	fa6 <m2m_wifi_cb+0x202>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
     f86:	202a      	movs	r0, #42	; 0x2a
     f88:	a903      	add	r1, sp, #12
     f8a:	4798      	blx	r3
     f8c:	e00b      	b.n	fa6 <m2m_wifi_cb+0x202>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     f8e:	4810      	ldr	r0, [pc, #64]	; (fd0 <m2m_wifi_cb+0x22c>)
     f90:	4910      	ldr	r1, [pc, #64]	; (fd4 <m2m_wifi_cb+0x230>)
     f92:	2288      	movs	r2, #136	; 0x88
     f94:	0052      	lsls	r2, r2, #1
     f96:	4d09      	ldr	r5, [pc, #36]	; (fbc <m2m_wifi_cb+0x218>)
     f98:	47a8      	blx	r5
     f9a:	480f      	ldr	r0, [pc, #60]	; (fd8 <m2m_wifi_cb+0x234>)
     f9c:	1c21      	adds	r1, r4, #0
     f9e:	47a8      	blx	r5
     fa0:	200d      	movs	r0, #13
     fa2:	4b08      	ldr	r3, [pc, #32]	; (fc4 <m2m_wifi_cb+0x220>)
     fa4:	4798      	blx	r3
	}
}
     fa6:	b01f      	add	sp, #124	; 0x7c
     fa8:	bd30      	pop	{r4, r5, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	00000bad 	.word	0x00000bad
     fb0:	200000b8 	.word	0x200000b8
     fb4:	00000541 	.word	0x00000541
     fb8:	00008620 	.word	0x00008620
     fbc:	000070b5 	.word	0x000070b5
     fc0:	0000862c 	.word	0x0000862c
     fc4:	000070e9 	.word	0x000070e9
     fc8:	200000bc 	.word	0x200000bc
     fcc:	200000bd 	.word	0x200000bd
     fd0:	0000835c 	.word	0x0000835c
     fd4:	00008614 	.word	0x00008614
     fd8:	0000864c 	.word	0x0000864c

00000fdc <m2m_wifi_init>:
ERR1:
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
     fdc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	gpfAppWifiCb = param->pfAppWifiCb;
     fde:	6802      	ldr	r2, [r0, #0]
     fe0:	4b0c      	ldr	r3, [pc, #48]	; (1014 <m2m_wifi_init+0x38>)
     fe2:	601a      	str	r2, [r3, #0]
#endif

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
     fe4:	2200      	movs	r2, #0
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <m2m_wifi_init+0x3c>)
     fe8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
     fea:	2000      	movs	r0, #0
     fec:	4b0b      	ldr	r3, [pc, #44]	; (101c <m2m_wifi_init+0x40>)
     fee:	4798      	blx	r3
     ff0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     ff2:	d10c      	bne.n	100e <m2m_wifi_init+0x32>
	/* Initialize host interface module */
	ret = hif_init(NULL);
     ff4:	2000      	movs	r0, #0
     ff6:	4b0a      	ldr	r3, [pc, #40]	; (1020 <m2m_wifi_init+0x44>)
     ff8:	4798      	blx	r3
     ffa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
     ffc:	d104      	bne.n	1008 <m2m_wifi_init+0x2c>

	hif_register_cb(M2M_REQ_GRP_WIFI,m2m_wifi_cb);
     ffe:	2001      	movs	r0, #1
    1000:	4908      	ldr	r1, [pc, #32]	; (1024 <m2m_wifi_init+0x48>)
    1002:	4b09      	ldr	r3, [pc, #36]	; (1028 <m2m_wifi_init+0x4c>)
    1004:	4798      	blx	r3

	return ret;
    1006:	e002      	b.n	100e <m2m_wifi_init+0x32>

_EXIT1:
	nm_drv_deinit(NULL);
    1008:	2000      	movs	r0, #0
    100a:	4b08      	ldr	r3, [pc, #32]	; (102c <m2m_wifi_init+0x50>)
    100c:	4798      	blx	r3
    100e:	b260      	sxtb	r0, r4
_EXIT0:
	return ret;
}
    1010:	bd10      	pop	{r4, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	200000b8 	.word	0x200000b8
    1018:	200000bc 	.word	0x200000bc
    101c:	00001a6d 	.word	0x00001a6d
    1020:	00000d55 	.word	0x00000d55
    1024:	00000da5 	.word	0x00000da5
    1028:	00000cd5 	.word	0x00000cd5
    102c:	00001c71 	.word	0x00001c71

00001030 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1030:	b508      	push	{r3, lr}
	return hif_handle_isr();
    1032:	4b01      	ldr	r3, [pc, #4]	; (1038 <m2m_wifi_handle_events+0x8>)
    1034:	4798      	blx	r3
}
    1036:	bd08      	pop	{r3, pc}
    1038:	0000087d 	.word	0x0000087d

0000103c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    103c:	b5f0      	push	{r4, r5, r6, r7, lr}
    103e:	4657      	mov	r7, sl
    1040:	464e      	mov	r6, r9
    1042:	4645      	mov	r5, r8
    1044:	b4e0      	push	{r5, r6, r7}
    1046:	b0a0      	sub	sp, #128	; 0x80
    1048:	4681      	mov	r9, r0
    104a:	1c0f      	adds	r7, r1, #0
    104c:	1c14      	adds	r4, r2, #0
    104e:	1c1e      	adds	r6, r3, #0
    1050:	ab28      	add	r3, sp, #160	; 0xa0
    1052:	881b      	ldrh	r3, [r3, #0]
    1054:	4698      	mov	r8, r3
    1056:	ab29      	add	r3, sp, #164	; 0xa4
    1058:	781b      	ldrb	r3, [r3, #0]
    105a:	469a      	mov	sl, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;
	if(u8SecType != M2M_WIFI_SEC_OPEN)
    105c:	2a01      	cmp	r2, #1
    105e:	d019      	beq.n	1094 <m2m_wifi_connect_sc+0x58>
	{
		if((pvAuthInfo == NULL)||(m2m_strlen(pvAuthInfo)<=0)||(m2m_strlen(pvAuthInfo)>=M2M_MAX_PSK_LEN))
    1060:	2e00      	cmp	r6, #0
    1062:	d009      	beq.n	1078 <m2m_wifi_connect_sc+0x3c>
    1064:	1c30      	adds	r0, r6, #0
    1066:	4b60      	ldr	r3, [pc, #384]	; (11e8 <m2m_wifi_connect_sc+0x1ac>)
    1068:	4798      	blx	r3
    106a:	2800      	cmp	r0, #0
    106c:	d004      	beq.n	1078 <m2m_wifi_connect_sc+0x3c>
    106e:	1c30      	adds	r0, r6, #0
    1070:	4b5d      	ldr	r3, [pc, #372]	; (11e8 <m2m_wifi_connect_sc+0x1ac>)
    1072:	4798      	blx	r3
    1074:	2840      	cmp	r0, #64	; 0x40
    1076:	d90d      	bls.n	1094 <m2m_wifi_connect_sc+0x58>
		{
			M2M_ERR("PSK LEN INVALID\n");
    1078:	485c      	ldr	r0, [pc, #368]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    107a:	495d      	ldr	r1, [pc, #372]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    107c:	22d9      	movs	r2, #217	; 0xd9
    107e:	0052      	lsls	r2, r2, #1
    1080:	4b5c      	ldr	r3, [pc, #368]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    1082:	4798      	blx	r3
    1084:	485c      	ldr	r0, [pc, #368]	; (11f8 <m2m_wifi_connect_sc+0x1bc>)
    1086:	4b5d      	ldr	r3, [pc, #372]	; (11fc <m2m_wifi_connect_sc+0x1c0>)
    1088:	4798      	blx	r3
    108a:	200d      	movs	r0, #13
    108c:	4b5c      	ldr	r3, [pc, #368]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    108e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1090:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1092:	e0a1      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1094:	1e7b      	subs	r3, r7, #1
    1096:	2b1f      	cmp	r3, #31
    1098:	d90d      	bls.n	10b6 <m2m_wifi_connect_sc+0x7a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    109a:	4854      	ldr	r0, [pc, #336]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    109c:	4954      	ldr	r1, [pc, #336]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    109e:	22ba      	movs	r2, #186	; 0xba
    10a0:	32ff      	adds	r2, #255	; 0xff
    10a2:	4b54      	ldr	r3, [pc, #336]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    10a4:	4798      	blx	r3
    10a6:	4857      	ldr	r0, [pc, #348]	; (1204 <m2m_wifi_connect_sc+0x1c8>)
    10a8:	4b54      	ldr	r3, [pc, #336]	; (11fc <m2m_wifi_connect_sc+0x1c0>)
    10aa:	4798      	blx	r3
    10ac:	200d      	movs	r0, #13
    10ae:	4b54      	ldr	r3, [pc, #336]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    10b0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    10b2:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    10b4:	e090      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    10b6:	4641      	mov	r1, r8
    10b8:	290d      	cmp	r1, #13
    10ba:	d90f      	bls.n	10dc <m2m_wifi_connect_sc+0xa0>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    10bc:	29ff      	cmp	r1, #255	; 0xff
    10be:	d00d      	beq.n	10dc <m2m_wifi_connect_sc+0xa0>
		{
			M2M_ERR("CH INVALID\n");
    10c0:	484a      	ldr	r0, [pc, #296]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    10c2:	494b      	ldr	r1, [pc, #300]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    10c4:	22e1      	movs	r2, #225	; 0xe1
    10c6:	0052      	lsls	r2, r2, #1
    10c8:	4b4a      	ldr	r3, [pc, #296]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    10ca:	4798      	blx	r3
    10cc:	484e      	ldr	r0, [pc, #312]	; (1208 <m2m_wifi_connect_sc+0x1cc>)
    10ce:	4b4b      	ldr	r3, [pc, #300]	; (11fc <m2m_wifi_connect_sc+0x1c0>)
    10d0:	4798      	blx	r3
    10d2:	200d      	movs	r0, #13
    10d4:	4b4a      	ldr	r3, [pc, #296]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    10d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    10d8:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    10da:	e07d      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    10dc:	ad05      	add	r5, sp, #20
    10de:	4668      	mov	r0, sp
    10e0:	305a      	adds	r0, #90	; 0x5a
    10e2:	4649      	mov	r1, r9
    10e4:	1c3a      	adds	r2, r7, #0
    10e6:	4b49      	ldr	r3, [pc, #292]	; (120c <m2m_wifi_connect_sc+0x1d0>)
    10e8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    10ea:	19ef      	adds	r7, r5, r7
    10ec:	3740      	adds	r7, #64	; 0x40
    10ee:	2300      	movs	r3, #0
    10f0:	71bb      	strb	r3, [r7, #6]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    10f2:	2344      	movs	r3, #68	; 0x44
    10f4:	4642      	mov	r2, r8
    10f6:	52ea      	strh	r2, [r5, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    10f8:	4652      	mov	r2, sl
    10fa:	1e53      	subs	r3, r2, #1
    10fc:	419a      	sbcs	r2, r3
    10fe:	2367      	movs	r3, #103	; 0x67
    1100:	54ea      	strb	r2, [r5, r3]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1102:	2341      	movs	r3, #65	; 0x41
    1104:	54ec      	strb	r4, [r5, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1106:	2c03      	cmp	r4, #3
    1108:	d138      	bne.n	117c <m2m_wifi_connect_sc+0x140>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    110a:	7833      	ldrb	r3, [r6, #0]
    110c:	3b01      	subs	r3, #1
    110e:	b2db      	uxtb	r3, r3
    1110:	aa05      	add	r2, sp, #20
    1112:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1114:	2b03      	cmp	r3, #3
    1116:	d90e      	bls.n	1136 <m2m_wifi_connect_sc+0xfa>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1118:	4834      	ldr	r0, [pc, #208]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    111a:	4935      	ldr	r1, [pc, #212]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    111c:	22da      	movs	r2, #218	; 0xda
    111e:	32ff      	adds	r2, #255	; 0xff
    1120:	4c34      	ldr	r4, [pc, #208]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    1122:	47a0      	blx	r4
    1124:	ab05      	add	r3, sp, #20
    1126:	7819      	ldrb	r1, [r3, #0]
    1128:	4839      	ldr	r0, [pc, #228]	; (1210 <m2m_wifi_connect_sc+0x1d4>)
    112a:	47a0      	blx	r4
    112c:	200d      	movs	r0, #13
    112e:	4b34      	ldr	r3, [pc, #208]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    1130:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1132:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1134:	e050      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1136:	7872      	ldrb	r2, [r6, #1]
    1138:	1e51      	subs	r1, r2, #1
    113a:	ab05      	add	r3, sp, #20
    113c:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    113e:	2310      	movs	r3, #16
    1140:	1c11      	adds	r1, r2, #0
    1142:	4399      	bics	r1, r3
    1144:	290b      	cmp	r1, #11
    1146:	d00e      	beq.n	1166 <m2m_wifi_connect_sc+0x12a>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1148:	4828      	ldr	r0, [pc, #160]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    114a:	4929      	ldr	r1, [pc, #164]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    114c:	22f0      	movs	r2, #240	; 0xf0
    114e:	0052      	lsls	r2, r2, #1
    1150:	4c28      	ldr	r4, [pc, #160]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    1152:	47a0      	blx	r4
    1154:	ab05      	add	r3, sp, #20
    1156:	7859      	ldrb	r1, [r3, #1]
    1158:	482e      	ldr	r0, [pc, #184]	; (1214 <m2m_wifi_connect_sc+0x1d8>)
    115a:	47a0      	blx	r4
    115c:	200d      	movs	r0, #13
    115e:	4b28      	ldr	r3, [pc, #160]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    1160:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1162:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1164:	e038      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1166:	1cb1      	adds	r1, r6, #2
    1168:	4668      	mov	r0, sp
    116a:	3016      	adds	r0, #22
    116c:	4b27      	ldr	r3, [pc, #156]	; (120c <m2m_wifi_connect_sc+0x1d0>)
    116e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1170:	7873      	ldrb	r3, [r6, #1]
    1172:	aa05      	add	r2, sp, #20
    1174:	18d3      	adds	r3, r2, r3
    1176:	2200      	movs	r2, #0
    1178:	709a      	strb	r2, [r3, #2]
    117a:	e023      	b.n	11c4 <m2m_wifi_connect_sc+0x188>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    117c:	2c02      	cmp	r4, #2
    117e:	d109      	bne.n	1194 <m2m_wifi_connect_sc+0x158>
	{
		uint8	u8KeyLen = m2m_strlen((uint8*)pvAuthInfo) + 1;
    1180:	1c30      	adds	r0, r6, #0
    1182:	4b19      	ldr	r3, [pc, #100]	; (11e8 <m2m_wifi_connect_sc+0x1ac>)
    1184:	4798      	blx	r3
    1186:	1c42      	adds	r2, r0, #1
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u8KeyLen);
    1188:	b2d2      	uxtb	r2, r2
    118a:	a805      	add	r0, sp, #20
    118c:	1c31      	adds	r1, r6, #0
    118e:	4b1f      	ldr	r3, [pc, #124]	; (120c <m2m_wifi_connect_sc+0x1d0>)
    1190:	4798      	blx	r3
    1192:	e017      	b.n	11c4 <m2m_wifi_connect_sc+0x188>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1194:	2c04      	cmp	r4, #4
    1196:	d105      	bne.n	11a4 <m2m_wifi_connect_sc+0x168>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1198:	a805      	add	r0, sp, #20
    119a:	1c31      	adds	r1, r6, #0
    119c:	223e      	movs	r2, #62	; 0x3e
    119e:	4b1b      	ldr	r3, [pc, #108]	; (120c <m2m_wifi_connect_sc+0x1d0>)
    11a0:	4798      	blx	r3
    11a2:	e00f      	b.n	11c4 <m2m_wifi_connect_sc+0x188>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    11a4:	2c01      	cmp	r4, #1
    11a6:	d00d      	beq.n	11c4 <m2m_wifi_connect_sc+0x188>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    11a8:	4810      	ldr	r0, [pc, #64]	; (11ec <m2m_wifi_connect_sc+0x1b0>)
    11aa:	4911      	ldr	r1, [pc, #68]	; (11f0 <m2m_wifi_connect_sc+0x1b4>)
    11ac:	22fa      	movs	r2, #250	; 0xfa
    11ae:	32ff      	adds	r2, #255	; 0xff
    11b0:	4b10      	ldr	r3, [pc, #64]	; (11f4 <m2m_wifi_connect_sc+0x1b8>)
    11b2:	4798      	blx	r3
    11b4:	4818      	ldr	r0, [pc, #96]	; (1218 <m2m_wifi_connect_sc+0x1dc>)
    11b6:	4b11      	ldr	r3, [pc, #68]	; (11fc <m2m_wifi_connect_sc+0x1c0>)
    11b8:	4798      	blx	r3
    11ba:	200d      	movs	r0, #13
    11bc:	4b10      	ldr	r3, [pc, #64]	; (1200 <m2m_wifi_connect_sc+0x1c4>)
    11be:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    11c0:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    11c2:	e009      	b.n	11d8 <m2m_wifi_connect_sc+0x19c>
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    11c4:	2300      	movs	r3, #0
    11c6:	9300      	str	r3, [sp, #0]
    11c8:	9301      	str	r3, [sp, #4]
    11ca:	9302      	str	r3, [sp, #8]
    11cc:	2001      	movs	r0, #1
    11ce:	2128      	movs	r1, #40	; 0x28
    11d0:	aa05      	add	r2, sp, #20
    11d2:	236c      	movs	r3, #108	; 0x6c
    11d4:	4c11      	ldr	r4, [pc, #68]	; (121c <m2m_wifi_connect_sc+0x1e0>)
    11d6:	47a0      	blx	r4

ERR1:
	return ret;
    11d8:	b240      	sxtb	r0, r0
}
    11da:	b020      	add	sp, #128	; 0x80
    11dc:	bc1c      	pop	{r2, r3, r4}
    11de:	4690      	mov	r8, r2
    11e0:	4699      	mov	r9, r3
    11e2:	46a2      	mov	sl, r4
    11e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	00000551 	.word	0x00000551
    11ec:	0000835c 	.word	0x0000835c
    11f0:	000087f8 	.word	0x000087f8
    11f4:	000070b5 	.word	0x000070b5
    11f8:	000086f8 	.word	0x000086f8
    11fc:	000071d5 	.word	0x000071d5
    1200:	000070e9 	.word	0x000070e9
    1204:	00008708 	.word	0x00008708
    1208:	0000871c 	.word	0x0000871c
    120c:	0000052d 	.word	0x0000052d
    1210:	00008728 	.word	0x00008728
    1214:	00008744 	.word	0x00008744
    1218:	00008760 	.word	0x00008760
    121c:	000006a1 	.word	0x000006a1

00001220 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1220:	b510      	push	{r4, lr}
    1222:	b082      	sub	sp, #8
    1224:	ac04      	add	r4, sp, #16
    1226:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1228:	9400      	str	r4, [sp, #0]
    122a:	2400      	movs	r4, #0
    122c:	9401      	str	r4, [sp, #4]
    122e:	4c02      	ldr	r4, [pc, #8]	; (1238 <m2m_wifi_connect+0x18>)
    1230:	47a0      	blx	r4
}
    1232:	b002      	add	sp, #8
    1234:	bd10      	pop	{r4, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	0000103d 	.word	0x0000103d

0000123c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    123c:	2000      	movs	r0, #0
    123e:	4770      	bx	lr

00001240 <m2m_wifi_set_lsn_int>:


}

sint8 m2m_wifi_set_lsn_int(tstrM2mLsnInt* pstrM2mLsnInt)
{
    1240:	b510      	push	{r4, lr}
    1242:	b084      	sub	sp, #16
    1244:	1c02      	adds	r2, r0, #0
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_LSN_INT, (uint8*)pstrM2mLsnInt, sizeof(tstrM2mLsnInt), NULL, 0, 0);
    1246:	2300      	movs	r3, #0
    1248:	9300      	str	r3, [sp, #0]
    124a:	9301      	str	r3, [sp, #4]
    124c:	9302      	str	r3, [sp, #8]
    124e:	2001      	movs	r0, #1
    1250:	213d      	movs	r1, #61	; 0x3d
    1252:	2304      	movs	r3, #4
    1254:	4c01      	ldr	r4, [pc, #4]	; (125c <m2m_wifi_set_lsn_int+0x1c>)
    1256:	47a0      	blx	r4
}
    1258:	b004      	add	sp, #16
    125a:	bd10      	pop	{r4, pc}
    125c:	000006a1 	.word	0x000006a1

00001260 <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa			tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	b086      	sub	sp, #24
    1264:	1c04      	adds	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	tstrM2mPsType strPs;
	strPs.u8PsType = PsTyp;
    1266:	aa05      	add	r2, sp, #20
    1268:	7010      	strb	r0, [r2, #0]
	strPs.u8BcastEn = BcastEn;
    126a:	7051      	strb	r1, [r2, #1]
	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8*) &strPs,sizeof(tstrM2mPsType), NULL, 0, 0);
    126c:	2300      	movs	r3, #0
    126e:	9300      	str	r3, [sp, #0]
    1270:	9301      	str	r3, [sp, #4]
    1272:	9302      	str	r3, [sp, #8]
    1274:	2001      	movs	r0, #1
    1276:	212d      	movs	r1, #45	; 0x2d
    1278:	2304      	movs	r3, #4
    127a:	4d09      	ldr	r5, [pc, #36]	; (12a0 <m2m_wifi_set_sleep_mode+0x40>)
    127c:	47a8      	blx	r5
    127e:	1c06      	adds	r6, r0, #0
	M2M_INFO("POWER SAVE %d\n",PsTyp);
    1280:	4808      	ldr	r0, [pc, #32]	; (12a4 <m2m_wifi_set_sleep_mode+0x44>)
    1282:	4d09      	ldr	r5, [pc, #36]	; (12a8 <m2m_wifi_set_sleep_mode+0x48>)
    1284:	47a8      	blx	r5
    1286:	4809      	ldr	r0, [pc, #36]	; (12ac <m2m_wifi_set_sleep_mode+0x4c>)
    1288:	1c21      	adds	r1, r4, #0
    128a:	47a8      	blx	r5
    128c:	200d      	movs	r0, #13
    128e:	4b08      	ldr	r3, [pc, #32]	; (12b0 <m2m_wifi_set_sleep_mode+0x50>)
    1290:	4798      	blx	r3
	hif_set_sleep_mode(PsTyp);
    1292:	1c20      	adds	r0, r4, #0
    1294:	4b07      	ldr	r3, [pc, #28]	; (12b4 <m2m_wifi_set_sleep_mode+0x54>)
    1296:	4798      	blx	r3
	return ret;
}
    1298:	1c30      	adds	r0, r6, #0
    129a:	b006      	add	sp, #24
    129c:	bd70      	pop	{r4, r5, r6, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	000006a1 	.word	0x000006a1
    12a4:	00008620 	.word	0x00008620
    12a8:	000070b5 	.word	0x000070b5
    12ac:	000087d4 	.word	0x000087d4
    12b0:	000070e9 	.word	0x000070e9
    12b4:	00000619 	.word	0x00000619

000012b8 <m2m_wifi_get_connection_info>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_STOP_PROVISION_MODE, NULL, 0, NULL, 0, 0);
}

sint8 m2m_wifi_get_connection_info(void)
{
    12b8:	b510      	push	{r4, lr}
    12ba:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_GET_CONN_INFO, NULL, 0, NULL, 0, 0);
    12bc:	2300      	movs	r3, #0
    12be:	9300      	str	r3, [sp, #0]
    12c0:	9301      	str	r3, [sp, #4]
    12c2:	9302      	str	r3, [sp, #8]
    12c4:	2001      	movs	r0, #1
    12c6:	2105      	movs	r1, #5
    12c8:	2200      	movs	r2, #0
    12ca:	4c02      	ldr	r4, [pc, #8]	; (12d4 <m2m_wifi_get_connection_info+0x1c>)
    12cc:	47a0      	blx	r4
}
    12ce:	b004      	add	sp, #16
    12d0:	bd10      	pop	{r4, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	000006a1 	.word	0x000006a1

000012d8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    12d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12da:	465f      	mov	r7, fp
    12dc:	4656      	mov	r6, sl
    12de:	464d      	mov	r5, r9
    12e0:	4644      	mov	r4, r8
    12e2:	b4f0      	push	{r4, r5, r6, r7}
    12e4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	ret = nm_read_reg_with_ret(0x1, &reg);
    12e6:	2001      	movs	r0, #1
    12e8:	a901      	add	r1, sp, #4
    12ea:	4b39      	ldr	r3, [pc, #228]	; (13d0 <nm_clkless_wake+0xf8>)
    12ec:	4798      	blx	r3
    12ee:	4680      	mov	r8, r0
	if(ret != M2M_SUCCESS) {
    12f0:	2400      	movs	r4, #0
    12f2:	2800      	cmp	r0, #0
    12f4:	d00b      	beq.n	130e <nm_clkless_wake+0x36>
		M2M_ERR("Bus error (1). Wake up failed\n");
    12f6:	4837      	ldr	r0, [pc, #220]	; (13d4 <nm_clkless_wake+0xfc>)
    12f8:	4937      	ldr	r1, [pc, #220]	; (13d8 <nm_clkless_wake+0x100>)
    12fa:	224b      	movs	r2, #75	; 0x4b
    12fc:	4b37      	ldr	r3, [pc, #220]	; (13dc <nm_clkless_wake+0x104>)
    12fe:	4798      	blx	r3
    1300:	4837      	ldr	r0, [pc, #220]	; (13e0 <nm_clkless_wake+0x108>)
    1302:	4b38      	ldr	r3, [pc, #224]	; (13e4 <nm_clkless_wake+0x10c>)
    1304:	4798      	blx	r3
    1306:	200d      	movs	r0, #13
    1308:	4b37      	ldr	r3, [pc, #220]	; (13e8 <nm_clkless_wake+0x110>)
    130a:	4798      	blx	r3
		goto _WAKE_EXIT;
    130c:	e04c      	b.n	13a8 <nm_clkless_wake+0xd0>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    130e:	4b37      	ldr	r3, [pc, #220]	; (13ec <nm_clkless_wake+0x114>)
    1310:	469b      	mov	fp, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1312:	4b37      	ldr	r3, [pc, #220]	; (13f0 <nm_clkless_wake+0x118>)
    1314:	469a      	mov	sl, r3
    1316:	4b2e      	ldr	r3, [pc, #184]	; (13d0 <nm_clkless_wake+0xf8>)
    1318:	4699      	mov	r9, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    131a:	2102      	movs	r1, #2
    131c:	9b01      	ldr	r3, [sp, #4]
    131e:	4319      	orrs	r1, r3
    1320:	2001      	movs	r0, #1
    1322:	47d8      	blx	fp
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1324:	4653      	mov	r3, sl
    1326:	6818      	ldr	r0, [r3, #0]
    1328:	4669      	mov	r1, sp
    132a:	47c8      	blx	r9
    132c:	4680      	mov	r8, r0
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    132e:	2800      	cmp	r0, #0
    1330:	d106      	bne.n	1340 <nm_clkless_wake+0x68>
    1332:	9b00      	ldr	r3, [sp, #0]
    1334:	2b00      	cmp	r3, #0
    1336:	d003      	beq.n	1340 <nm_clkless_wake+0x68>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1338:	4d2e      	ldr	r5, [pc, #184]	; (13f4 <nm_clkless_wake+0x11c>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    133a:	4f2f      	ldr	r7, [pc, #188]	; (13f8 <nm_clkless_wake+0x120>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    133c:	4e2c      	ldr	r6, [pc, #176]	; (13f0 <nm_clkless_wake+0x118>)
    133e:	e029      	b.n	1394 <nm_clkless_wake+0xbc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    1340:	220e      	movs	r2, #14
    1342:	4b2b      	ldr	r3, [pc, #172]	; (13f0 <nm_clkless_wake+0x118>)
    1344:	601a      	str	r2, [r3, #0]
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1346:	200e      	movs	r0, #14
    1348:	4669      	mov	r1, sp
    134a:	4b21      	ldr	r3, [pc, #132]	; (13d0 <nm_clkless_wake+0xf8>)
    134c:	4798      	blx	r3
    134e:	4680      	mov	r8, r0
			if(ret != M2M_SUCCESS) {
    1350:	2800      	cmp	r0, #0
    1352:	d0f1      	beq.n	1338 <nm_clkless_wake+0x60>
				M2M_ERR("Bus error (2). Wake up failed\n");
    1354:	481f      	ldr	r0, [pc, #124]	; (13d4 <nm_clkless_wake+0xfc>)
    1356:	4920      	ldr	r1, [pc, #128]	; (13d8 <nm_clkless_wake+0x100>)
    1358:	2261      	movs	r2, #97	; 0x61
    135a:	4b20      	ldr	r3, [pc, #128]	; (13dc <nm_clkless_wake+0x104>)
    135c:	4798      	blx	r3
    135e:	4827      	ldr	r0, [pc, #156]	; (13fc <nm_clkless_wake+0x124>)
    1360:	4b20      	ldr	r3, [pc, #128]	; (13e4 <nm_clkless_wake+0x10c>)
    1362:	4798      	blx	r3
    1364:	200d      	movs	r0, #13
    1366:	4b20      	ldr	r3, [pc, #128]	; (13e8 <nm_clkless_wake+0x110>)
    1368:	4798      	blx	r3
				goto _WAKE_EXIT;
    136a:	e01d      	b.n	13a8 <nm_clkless_wake+0xd0>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    136c:	2001      	movs	r0, #1
    136e:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1370:	6830      	ldr	r0, [r6, #0]
    1372:	4669      	mov	r1, sp
    1374:	4b16      	ldr	r3, [pc, #88]	; (13d0 <nm_clkless_wake+0xf8>)
    1376:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    1378:	9b00      	ldr	r3, [sp, #0]
    137a:	075b      	lsls	r3, r3, #29
    137c:	d40a      	bmi.n	1394 <nm_clkless_wake+0xbc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    137e:	4815      	ldr	r0, [pc, #84]	; (13d4 <nm_clkless_wake+0xfc>)
    1380:	4915      	ldr	r1, [pc, #84]	; (13d8 <nm_clkless_wake+0x100>)
    1382:	2274      	movs	r2, #116	; 0x74
    1384:	4b15      	ldr	r3, [pc, #84]	; (13dc <nm_clkless_wake+0x104>)
    1386:	4798      	blx	r3
    1388:	481d      	ldr	r0, [pc, #116]	; (1400 <nm_clkless_wake+0x128>)
    138a:	4b16      	ldr	r3, [pc, #88]	; (13e4 <nm_clkless_wake+0x10c>)
    138c:	4798      	blx	r3
    138e:	200d      	movs	r0, #13
    1390:	4b15      	ldr	r3, [pc, #84]	; (13e8 <nm_clkless_wake+0x110>)
    1392:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1394:	9b00      	ldr	r3, [sp, #0]
    1396:	075b      	lsls	r3, r3, #29
    1398:	d406      	bmi.n	13a8 <nm_clkless_wake+0xd0>
    139a:	3401      	adds	r4, #1
    139c:	1c20      	adds	r0, r4, #0
    139e:	2103      	movs	r1, #3
    13a0:	47a8      	blx	r5
    13a2:	2900      	cmp	r1, #0
    13a4:	d0e2      	beq.n	136c <nm_clkless_wake+0x94>
    13a6:	e002      	b.n	13ae <nm_clkless_wake+0xd6>
			nm_write_reg(0x1, reg | (1 << 1));
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
    13a8:	4643      	mov	r3, r8
    13aa:	b258      	sxtb	r0, r3
    13ac:	e009      	b.n	13c2 <nm_clkless_wake+0xea>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    13ae:	2102      	movs	r1, #2
    13b0:	9b01      	ldr	r3, [sp, #4]
    13b2:	4319      	orrs	r1, r3
    13b4:	2001      	movs	r0, #1
    13b6:	4b0d      	ldr	r3, [pc, #52]	; (13ec <nm_clkless_wake+0x114>)
    13b8:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    13ba:	9b00      	ldr	r3, [sp, #0]
    13bc:	075b      	lsls	r3, r3, #29
    13be:	d5ac      	bpl.n	131a <nm_clkless_wake+0x42>
    13c0:	e7f2      	b.n	13a8 <nm_clkless_wake+0xd0>

_WAKE_EXIT:
	return ret;
}
    13c2:	b003      	add	sp, #12
    13c4:	bc3c      	pop	{r2, r3, r4, r5}
    13c6:	4690      	mov	r8, r2
    13c8:	4699      	mov	r9, r3
    13ca:	46a2      	mov	sl, r4
    13cc:	46ab      	mov	fp, r5
    13ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13d0:	0000196d 	.word	0x0000196d
    13d4:	0000835c 	.word	0x0000835c
    13d8:	00008938 	.word	0x00008938
    13dc:	000070b5 	.word	0x000070b5
    13e0:	00008824 	.word	0x00008824
    13e4:	000071d5 	.word	0x000071d5
    13e8:	000070e9 	.word	0x000070e9
    13ec:	00001979 	.word	0x00001979
    13f0:	2000000c 	.word	0x2000000c
    13f4:	00006dad 	.word	0x00006dad
    13f8:	0000018d 	.word	0x0000018d
    13fc:	00008844 	.word	0x00008844
    1400:	00008864 	.word	0x00008864

00001404 <chip_idle>:
void chip_idle(void)
{
    1404:	b500      	push	{lr}
    1406:	b083      	sub	sp, #12
	uint32 reg =0;
    1408:	2300      	movs	r3, #0
    140a:	9301      	str	r3, [sp, #4]
	nm_read_reg_with_ret(0x1, &reg);
    140c:	2001      	movs	r0, #1
    140e:	a901      	add	r1, sp, #4
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <chip_idle+0x28>)
    1412:	4798      	blx	r3
	if(reg&0x2)
    1414:	9901      	ldr	r1, [sp, #4]
    1416:	078b      	lsls	r3, r1, #30
    1418:	d505      	bpl.n	1426 <chip_idle+0x22>
	{
		reg &=~(1 << 1);
    141a:	2302      	movs	r3, #2
    141c:	4399      	bics	r1, r3
    141e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1, reg);
    1420:	2001      	movs	r0, #1
    1422:	4b03      	ldr	r3, [pc, #12]	; (1430 <chip_idle+0x2c>)
    1424:	4798      	blx	r3
	}
}
    1426:	b003      	add	sp, #12
    1428:	bd00      	pop	{pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	0000196d 	.word	0x0000196d
    1430:	00001979 	.word	0x00001979

00001434 <enable_rf_blocks>:

void enable_rf_blocks(void)
{
    1434:	b538      	push	{r3, r4, r5, lr}
	nm_write_reg(0x6, 0xdb);
    1436:	2006      	movs	r0, #6
    1438:	21db      	movs	r1, #219	; 0xdb
    143a:	4c0c      	ldr	r4, [pc, #48]	; (146c <enable_rf_blocks+0x38>)
    143c:	47a0      	blx	r4
	nm_write_reg(0x7, 0x6);
    143e:	2007      	movs	r0, #7
    1440:	2106      	movs	r1, #6
    1442:	47a0      	blx	r4
	nm_bsp_sleep(10);
    1444:	200a      	movs	r0, #10
    1446:	4d0a      	ldr	r5, [pc, #40]	; (1470 <enable_rf_blocks+0x3c>)
    1448:	47a8      	blx	r5
	nm_write_reg(0x1480, 0);
    144a:	20a4      	movs	r0, #164	; 0xa4
    144c:	0140      	lsls	r0, r0, #5
    144e:	2100      	movs	r1, #0
    1450:	47a0      	blx	r4
	nm_write_reg(0x1484, 0);
    1452:	4808      	ldr	r0, [pc, #32]	; (1474 <enable_rf_blocks+0x40>)
    1454:	2100      	movs	r1, #0
    1456:	47a0      	blx	r4
	nm_bsp_sleep(10);
    1458:	200a      	movs	r0, #10
    145a:	47a8      	blx	r5

	nm_write_reg(0x6, 0x0);
    145c:	2006      	movs	r0, #6
    145e:	2100      	movs	r1, #0
    1460:	47a0      	blx	r4
	nm_write_reg(0x7, 0x0);
    1462:	2007      	movs	r0, #7
    1464:	2100      	movs	r1, #0
    1466:	47a0      	blx	r4
}
    1468:	bd38      	pop	{r3, r4, r5, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	00001979 	.word	0x00001979
    1470:	0000018d 	.word	0x0000018d
    1474:	00001484 	.word	0x00001484

00001478 <enable_interrupts>:

sint8 enable_interrupts(void)
{
    1478:	b500      	push	{lr}
    147a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    147c:	4816      	ldr	r0, [pc, #88]	; (14d8 <enable_interrupts+0x60>)
    147e:	a901      	add	r1, sp, #4
    1480:	4b16      	ldr	r3, [pc, #88]	; (14dc <enable_interrupts+0x64>)
    1482:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1484:	2800      	cmp	r0, #0
    1486:	d11e      	bne.n	14c6 <enable_interrupts+0x4e>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    1488:	2180      	movs	r1, #128	; 0x80
    148a:	0049      	lsls	r1, r1, #1
    148c:	9b01      	ldr	r3, [sp, #4]
    148e:	4319      	orrs	r1, r3
    1490:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1492:	4811      	ldr	r0, [pc, #68]	; (14d8 <enable_interrupts+0x60>)
    1494:	4b12      	ldr	r3, [pc, #72]	; (14e0 <enable_interrupts+0x68>)
    1496:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1498:	2800      	cmp	r0, #0
    149a:	d116      	bne.n	14ca <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    149c:	20d0      	movs	r0, #208	; 0xd0
    149e:	0140      	lsls	r0, r0, #5
    14a0:	a901      	add	r1, sp, #4
    14a2:	4b0e      	ldr	r3, [pc, #56]	; (14dc <enable_interrupts+0x64>)
    14a4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    14a6:	2800      	cmp	r0, #0
    14a8:	d111      	bne.n	14ce <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    14aa:	2180      	movs	r1, #128	; 0x80
    14ac:	0249      	lsls	r1, r1, #9
    14ae:	9b01      	ldr	r3, [sp, #4]
    14b0:	4319      	orrs	r1, r3
    14b2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    14b4:	20d0      	movs	r0, #208	; 0xd0
    14b6:	0140      	lsls	r0, r0, #5
    14b8:	4b09      	ldr	r3, [pc, #36]	; (14e0 <enable_interrupts+0x68>)
    14ba:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
    14bc:	2300      	movs	r3, #0
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
    14be:	2800      	cmp	r0, #0
    14c0:	d006      	beq.n	14d0 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
    14c2:	23fa      	movs	r3, #250	; 0xfa
    14c4:	e004      	b.n	14d0 <enable_interrupts+0x58>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    14c6:	23fa      	movs	r3, #250	; 0xfa
    14c8:	e002      	b.n	14d0 <enable_interrupts+0x58>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    14ca:	23fa      	movs	r3, #250	; 0xfa
    14cc:	e000      	b.n	14d0 <enable_interrupts+0x58>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    14ce:	23fa      	movs	r3, #250	; 0xfa
    14d0:	b258      	sxtb	r0, r3
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
    14d2:	b003      	add	sp, #12
    14d4:	bd00      	pop	{pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001408 	.word	0x00001408
    14dc:	0000196d 	.word	0x0000196d
    14e0:	00001979 	.word	0x00001979

000014e4 <cpu_start>:

sint8 cpu_start(void) {
    14e4:	b510      	push	{r4, lr}
    14e6:	b082      	sub	sp, #8
	sint8 ret;

	/**
	reset regs
	*/
	nm_write_reg(BOOTROM_REG,0);
    14e8:	4825      	ldr	r0, [pc, #148]	; (1580 <cpu_start+0x9c>)
    14ea:	2100      	movs	r1, #0
    14ec:	4c25      	ldr	r4, [pc, #148]	; (1584 <cpu_start+0xa0>)
    14ee:	47a0      	blx	r4
	nm_write_reg(NMI_STATE_REG,0);
    14f0:	4825      	ldr	r0, [pc, #148]	; (1588 <cpu_start+0xa4>)
    14f2:	2100      	movs	r1, #0
    14f4:	47a0      	blx	r4
	nm_write_reg(NMI_REV_REG,0);
    14f6:	4825      	ldr	r0, [pc, #148]	; (158c <cpu_start+0xa8>)
    14f8:	2100      	movs	r1, #0
    14fa:	47a0      	blx	r4

	/**
	Go...
	**/
	ret = nm_read_reg_with_ret(0x1118, &reg);
    14fc:	4824      	ldr	r0, [pc, #144]	; (1590 <cpu_start+0xac>)
    14fe:	a901      	add	r1, sp, #4
    1500:	4b24      	ldr	r3, [pc, #144]	; (1594 <cpu_start+0xb0>)
    1502:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1504:	2800      	cmp	r0, #0
    1506:	d00a      	beq.n	151e <cpu_start+0x3a>
		ret = M2M_ERR_BUS_FAIL;
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
    1508:	4823      	ldr	r0, [pc, #140]	; (1598 <cpu_start+0xb4>)
    150a:	4924      	ldr	r1, [pc, #144]	; (159c <cpu_start+0xb8>)
    150c:	22ca      	movs	r2, #202	; 0xca
    150e:	4b24      	ldr	r3, [pc, #144]	; (15a0 <cpu_start+0xbc>)
    1510:	4798      	blx	r3
    1512:	4824      	ldr	r0, [pc, #144]	; (15a4 <cpu_start+0xc0>)
    1514:	4b24      	ldr	r3, [pc, #144]	; (15a8 <cpu_start+0xc4>)
    1516:	4798      	blx	r3
    1518:	200d      	movs	r0, #13
    151a:	4b24      	ldr	r3, [pc, #144]	; (15ac <cpu_start+0xc8>)
    151c:	4798      	blx	r3
	}
	reg |= (1 << 0);
    151e:	2101      	movs	r1, #1
    1520:	9a01      	ldr	r2, [sp, #4]
    1522:	4311      	orrs	r1, r2
    1524:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(0x1118, reg);
    1526:	481a      	ldr	r0, [pc, #104]	; (1590 <cpu_start+0xac>)
    1528:	4c16      	ldr	r4, [pc, #88]	; (1584 <cpu_start+0xa0>)
    152a:	47a0      	blx	r4
	ret = nm_write_reg(0x150014, 0x1);
    152c:	4820      	ldr	r0, [pc, #128]	; (15b0 <cpu_start+0xcc>)
    152e:	2101      	movs	r1, #1
    1530:	47a0      	blx	r4
    1532:	1c04      	adds	r4, r0, #0
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1534:	20a0      	movs	r0, #160	; 0xa0
    1536:	0140      	lsls	r0, r0, #5
    1538:	a901      	add	r1, sp, #4
    153a:	4b16      	ldr	r3, [pc, #88]	; (1594 <cpu_start+0xb0>)
    153c:	4798      	blx	r3
    153e:	1824      	adds	r4, r4, r0
    1540:	b2e4      	uxtb	r4, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
    1542:	9b01      	ldr	r3, [sp, #4]
    1544:	055a      	lsls	r2, r3, #21
    1546:	d401      	bmi.n	154c <cpu_start+0x68>
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
	}
	reg |= (1 << 0);
	ret = nm_write_reg(0x1118, reg);
	ret = nm_write_reg(0x150014, 0x1);
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1548:	b2e4      	uxtb	r4, r4
    154a:	e008      	b.n	155e <cpu_start+0x7a>
	if ((reg & (1ul << 10)) == (1ul << 10)) {
		reg &= ~(1ul << 10);
    154c:	4919      	ldr	r1, [pc, #100]	; (15b4 <cpu_start+0xd0>)
    154e:	4019      	ands	r1, r3
    1550:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    1552:	20a0      	movs	r0, #160	; 0xa0
    1554:	0140      	lsls	r0, r0, #5
    1556:	4b0b      	ldr	r3, [pc, #44]	; (1584 <cpu_start+0xa0>)
    1558:	4798      	blx	r3
    155a:	1824      	adds	r4, r4, r0
    155c:	b2e4      	uxtb	r4, r4
	}

	reg |= (1ul << 10);
    155e:	2180      	movs	r1, #128	; 0x80
    1560:	00c9      	lsls	r1, r1, #3
    1562:	9b01      	ldr	r3, [sp, #4]
    1564:	4319      	orrs	r1, r3
    1566:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    1568:	20a0      	movs	r0, #160	; 0xa0
    156a:	0140      	lsls	r0, r0, #5
    156c:	4b05      	ldr	r3, [pc, #20]	; (1584 <cpu_start+0xa0>)
    156e:	4798      	blx	r3
    1570:	1824      	adds	r4, r4, r0
    1572:	b2e4      	uxtb	r4, r4
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1574:	2001      	movs	r0, #1
    1576:	4b10      	ldr	r3, [pc, #64]	; (15b8 <cpu_start+0xd4>)
    1578:	4798      	blx	r3
	return ret;
    157a:	b260      	sxtb	r0, r4
}
    157c:	b002      	add	sp, #8
    157e:	bd10      	pop	{r4, pc}
    1580:	000c000c 	.word	0x000c000c
    1584:	00001979 	.word	0x00001979
    1588:	0000108c 	.word	0x0000108c
    158c:	000207ac 	.word	0x000207ac
    1590:	00001118 	.word	0x00001118
    1594:	0000196d 	.word	0x0000196d
    1598:	0000835c 	.word	0x0000835c
    159c:	0000880c 	.word	0x0000880c
    15a0:	000070b5 	.word	0x000070b5
    15a4:	00008888 	.word	0x00008888
    15a8:	000071d5 	.word	0x000071d5
    15ac:	000070e9 	.word	0x000070e9
    15b0:	00150014 	.word	0x00150014
    15b4:	fffffbff 	.word	0xfffffbff
    15b8:	0000018d 	.word	0x0000018d

000015bc <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
    15bc:	b500      	push	{lr}
    15be:	b083      	sub	sp, #12
	static uint32 chipid = 0;

	if (chipid == 0) {
    15c0:	4b21      	ldr	r3, [pc, #132]	; (1648 <nmi_get_chipid+0x8c>)
    15c2:	681b      	ldr	r3, [r3, #0]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d13a      	bne.n	163e <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    15c8:	2080      	movs	r0, #128	; 0x80
    15ca:	0140      	lsls	r0, r0, #5
    15cc:	491e      	ldr	r1, [pc, #120]	; (1648 <nmi_get_chipid+0x8c>)
    15ce:	4b1f      	ldr	r3, [pc, #124]	; (164c <nmi_get_chipid+0x90>)
    15d0:	4798      	blx	r3
    15d2:	2800      	cmp	r0, #0
    15d4:	d003      	beq.n	15de <nmi_get_chipid+0x22>
			chipid = 0;
    15d6:	2200      	movs	r2, #0
    15d8:	4b1b      	ldr	r3, [pc, #108]	; (1648 <nmi_get_chipid+0x8c>)
    15da:	601a      	str	r2, [r3, #0]
			return 0;
    15dc:	e02d      	b.n	163a <nmi_get_chipid+0x7e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    15de:	481c      	ldr	r0, [pc, #112]	; (1650 <nmi_get_chipid+0x94>)
    15e0:	a901      	add	r1, sp, #4
    15e2:	4b1a      	ldr	r3, [pc, #104]	; (164c <nmi_get_chipid+0x90>)
    15e4:	4798      	blx	r3
    15e6:	2800      	cmp	r0, #0
    15e8:	d003      	beq.n	15f2 <nmi_get_chipid+0x36>
			chipid = 0;
    15ea:	2200      	movs	r2, #0
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <nmi_get_chipid+0x8c>)
    15ee:	601a      	str	r2, [r3, #0]
			return 0;
    15f0:	e023      	b.n	163a <nmi_get_chipid+0x7e>
		}

		if (chipid == 0x1002a0)  {
    15f2:	4b15      	ldr	r3, [pc, #84]	; (1648 <nmi_get_chipid+0x8c>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	4a17      	ldr	r2, [pc, #92]	; (1654 <nmi_get_chipid+0x98>)
    15f8:	4293      	cmp	r3, r2
    15fa:	d106      	bne.n	160a <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    15fc:	9901      	ldr	r1, [sp, #4]
    15fe:	2901      	cmp	r1, #1
    1600:	d012      	beq.n	1628 <nmi_get_chipid+0x6c>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    1602:	4a15      	ldr	r2, [pc, #84]	; (1658 <nmi_get_chipid+0x9c>)
    1604:	4b10      	ldr	r3, [pc, #64]	; (1648 <nmi_get_chipid+0x8c>)
    1606:	601a      	str	r2, [r3, #0]
    1608:	e00e      	b.n	1628 <nmi_get_chipid+0x6c>
			}
		} else if(chipid == 0x1002b0) {
    160a:	4a14      	ldr	r2, [pc, #80]	; (165c <nmi_get_chipid+0xa0>)
    160c:	4293      	cmp	r3, r2
    160e:	d10b      	bne.n	1628 <nmi_get_chipid+0x6c>
			if(rfrevid == 3) { /* 1002B0 */
    1610:	9b01      	ldr	r3, [sp, #4]
    1612:	2b03      	cmp	r3, #3
    1614:	d008      	beq.n	1628 <nmi_get_chipid+0x6c>
			} else if(rfrevid == 4) { /* 1002B1 */
    1616:	2b04      	cmp	r3, #4
    1618:	d103      	bne.n	1622 <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    161a:	4a11      	ldr	r2, [pc, #68]	; (1660 <nmi_get_chipid+0xa4>)
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <nmi_get_chipid+0x8c>)
    161e:	601a      	str	r2, [r3, #0]
    1620:	e002      	b.n	1628 <nmi_get_chipid+0x6c>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    1622:	4a10      	ldr	r2, [pc, #64]	; (1664 <nmi_get_chipid+0xa8>)
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <nmi_get_chipid+0x8c>)
    1626:	601a      	str	r2, [r3, #0]
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    1628:	4b07      	ldr	r3, [pc, #28]	; (1648 <nmi_get_chipid+0x8c>)
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    162a:	4a0f      	ldr	r2, [pc, #60]	; (1668 <nmi_get_chipid+0xac>)
    162c:	6819      	ldr	r1, [r3, #0]
    162e:	400a      	ands	r2, r1
		chipid |= 0x050000;
    1630:	21a0      	movs	r1, #160	; 0xa0
    1632:	02c9      	lsls	r1, r1, #11
    1634:	430a      	orrs	r2, r1
    1636:	601a      	str	r2, [r3, #0]
    1638:	e001      	b.n	163e <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
			chipid = 0;
			return 0;
    163a:	2000      	movs	r0, #0
    163c:	e001      	b.n	1642 <nmi_get_chipid+0x86>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    163e:	4b02      	ldr	r3, [pc, #8]	; (1648 <nmi_get_chipid+0x8c>)
    1640:	6818      	ldr	r0, [r3, #0]
}
    1642:	b003      	add	sp, #12
    1644:	bd00      	pop	{pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	200000c0 	.word	0x200000c0
    164c:	0000196d 	.word	0x0000196d
    1650:	000013f4 	.word	0x000013f4
    1654:	001002a0 	.word	0x001002a0
    1658:	001002a1 	.word	0x001002a1
    165c:	001002b0 	.word	0x001002b0
    1660:	001002b1 	.word	0x001002b1
    1664:	001002b2 	.word	0x001002b2
    1668:	fff0ffff 	.word	0xfff0ffff

0000166c <restore_pmu_settings_after_global_reset>:
    }
    return rfrevid;
}

void restore_pmu_settings_after_global_reset(void)
{
    166c:	b508      	push	{r3, lr}
	/*
	* Must restore PMU register value after
	* global reset if PMU toggle is done at
	* least once since the last hard reset.
	*/
	if(REV(nmi_get_chipid()) >= REV_2B0) {
    166e:	4b06      	ldr	r3, [pc, #24]	; (1688 <restore_pmu_settings_after_global_reset+0x1c>)
    1670:	4798      	blx	r3
    1672:	0500      	lsls	r0, r0, #20
    1674:	0d00      	lsrs	r0, r0, #20
    1676:	4b05      	ldr	r3, [pc, #20]	; (168c <restore_pmu_settings_after_global_reset+0x20>)
    1678:	4298      	cmp	r0, r3
    167a:	d903      	bls.n	1684 <restore_pmu_settings_after_global_reset+0x18>
		nm_write_reg(0x1e48, 0xb78469ce);
    167c:	4804      	ldr	r0, [pc, #16]	; (1690 <restore_pmu_settings_after_global_reset+0x24>)
    167e:	4905      	ldr	r1, [pc, #20]	; (1694 <restore_pmu_settings_after_global_reset+0x28>)
    1680:	4b05      	ldr	r3, [pc, #20]	; (1698 <restore_pmu_settings_after_global_reset+0x2c>)
    1682:	4798      	blx	r3
	}
}
    1684:	bd08      	pop	{r3, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	000015bd 	.word	0x000015bd
    168c:	000002af 	.word	0x000002af
    1690:	00001e48 	.word	0x00001e48
    1694:	b78469ce 	.word	0xb78469ce
    1698:	00001979 	.word	0x00001979

0000169c <nmi_update_pll>:

void nmi_update_pll(void)
{
    169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32 pll;

	pll = nm_read_reg(0x1428);
    169e:	4c08      	ldr	r4, [pc, #32]	; (16c0 <nmi_update_pll+0x24>)
    16a0:	1c20      	adds	r0, r4, #0
    16a2:	4b08      	ldr	r3, [pc, #32]	; (16c4 <nmi_update_pll+0x28>)
    16a4:	4798      	blx	r3
	pll &= ~0x1ul;
    16a6:	2601      	movs	r6, #1
    16a8:	1c07      	adds	r7, r0, #0
    16aa:	43b7      	bics	r7, r6
	nm_write_reg(0x1428, pll);
    16ac:	1c20      	adds	r0, r4, #0
    16ae:	1c39      	adds	r1, r7, #0
    16b0:	4d05      	ldr	r5, [pc, #20]	; (16c8 <nmi_update_pll+0x2c>)
    16b2:	47a8      	blx	r5
	pll |= 0x1ul;
    16b4:	1c39      	adds	r1, r7, #0
    16b6:	4331      	orrs	r1, r6
	nm_write_reg(0x1428, pll);
    16b8:	1c20      	adds	r0, r4, #0
    16ba:	47a8      	blx	r5

}
    16bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	00001428 	.word	0x00001428
    16c4:	00001961 	.word	0x00001961
    16c8:	00001979 	.word	0x00001979

000016cc <nmi_set_sys_clk_src_to_xo>:
void nmi_set_sys_clk_src_to_xo(void)
{
    16cc:	b510      	push	{r4, lr}
	uint32 val32;

	/* Switch system clock source to XO. This will take effect after nmi_update_pll(). */
	val32 = nm_read_reg(0x141c);
    16ce:	4c06      	ldr	r4, [pc, #24]	; (16e8 <nmi_set_sys_clk_src_to_xo+0x1c>)
    16d0:	1c20      	adds	r0, r4, #0
    16d2:	4b06      	ldr	r3, [pc, #24]	; (16ec <nmi_set_sys_clk_src_to_xo+0x20>)
    16d4:	4798      	blx	r3
	val32 |= (1 << 2);
    16d6:	2304      	movs	r3, #4
    16d8:	1c01      	adds	r1, r0, #0
    16da:	4319      	orrs	r1, r3
	nm_write_reg(0x141c, val32);
    16dc:	1c20      	adds	r0, r4, #0
    16de:	4b04      	ldr	r3, [pc, #16]	; (16f0 <nmi_set_sys_clk_src_to_xo+0x24>)
    16e0:	4798      	blx	r3

	/* Do PLL update */
	nmi_update_pll();
    16e2:	4b04      	ldr	r3, [pc, #16]	; (16f4 <nmi_set_sys_clk_src_to_xo+0x28>)
    16e4:	4798      	blx	r3
}
    16e6:	bd10      	pop	{r4, pc}
    16e8:	0000141c 	.word	0x0000141c
    16ec:	00001961 	.word	0x00001961
    16f0:	00001979 	.word	0x00001979
    16f4:	0000169d 	.word	0x0000169d

000016f8 <chip_wake>:
sint8 chip_wake(void)
{
    16f8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	ret  = nm_clkless_wake();
    16fa:	4b04      	ldr	r3, [pc, #16]	; (170c <chip_wake+0x14>)
    16fc:	4798      	blx	r3
    16fe:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) return ret;
    1700:	d101      	bne.n	1706 <chip_wake+0xe>

	enable_rf_blocks();
    1702:	4b03      	ldr	r3, [pc, #12]	; (1710 <chip_wake+0x18>)
    1704:	4798      	blx	r3

	return ret;
}
    1706:	1c20      	adds	r0, r4, #0
    1708:	bd10      	pop	{r4, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	000012d9 	.word	0x000012d9
    1710:	00001435 	.word	0x00001435

00001714 <chip_reset>:
	nm_write_reg(NMI_REV_REG,0);
	nm_write_reg(NMI_PIN_MUX_0, 0x11111000);
	return ret;
}
sint8 chip_reset(void)
{
    1714:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifndef CONF_WINC_USE_UART
	nmi_set_sys_clk_src_to_xo();
    1716:	4b07      	ldr	r3, [pc, #28]	; (1734 <chip_reset+0x20>)
    1718:	4798      	blx	r3
#endif
	ret += nm_write_reg(NMI_GLB_RESET_0, 0);
    171a:	20a0      	movs	r0, #160	; 0xa0
    171c:	0140      	lsls	r0, r0, #5
    171e:	2100      	movs	r1, #0
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <chip_reset+0x24>)
    1722:	4798      	blx	r3
    1724:	1c04      	adds	r4, r0, #0
	nm_bsp_sleep(50);
    1726:	2032      	movs	r0, #50	; 0x32
    1728:	4b04      	ldr	r3, [pc, #16]	; (173c <chip_reset+0x28>)
    172a:	4798      	blx	r3
#ifndef CONF_WINC_USE_UART
	restore_pmu_settings_after_global_reset();
    172c:	4b04      	ldr	r3, [pc, #16]	; (1740 <chip_reset+0x2c>)
    172e:	4798      	blx	r3
#endif
	return ret;
}
    1730:	1c20      	adds	r0, r4, #0
    1732:	bd10      	pop	{r4, pc}
    1734:	000016cd 	.word	0x000016cd
    1738:	00001979 	.word	0x00001979
    173c:	0000018d 	.word	0x0000018d
    1740:	0000166d 	.word	0x0000166d

00001744 <wait_for_bootrom>:

}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(uint8 arg)
{
    1744:	b5f0      	push	{r4, r5, r6, r7, lr}
    1746:	4647      	mov	r7, r8
    1748:	b480      	push	{r7}
    174a:	4680      	mov	r8, r0
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    174c:	4d1b      	ldr	r5, [pc, #108]	; (17bc <wait_for_bootrom+0x78>)
    174e:	4c1c      	ldr	r4, [pc, #112]	; (17c0 <wait_for_bootrom+0x7c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1750:	4e1c      	ldr	r6, [pc, #112]	; (17c4 <wait_for_bootrom+0x80>)
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1752:	1c28      	adds	r0, r5, #0
    1754:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1756:	2800      	cmp	r0, #0
    1758:	db02      	blt.n	1760 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    175a:	2001      	movs	r0, #1
    175c:	47b0      	blx	r6
	}
    175e:	e7f8      	b.n	1752 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1760:	4819      	ldr	r0, [pc, #100]	; (17c8 <wait_for_bootrom+0x84>)
    1762:	4b17      	ldr	r3, [pc, #92]	; (17c0 <wait_for_bootrom+0x7c>)
    1764:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1766:	07c3      	lsls	r3, r0, #31
    1768:	d519      	bpl.n	179e <wait_for_bootrom+0x5a>
    176a:	e008      	b.n	177e <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    176c:	2001      	movs	r0, #1
    176e:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    1770:	4816      	ldr	r0, [pc, #88]	; (17cc <wait_for_bootrom+0x88>)
    1772:	47b0      	blx	r6
    1774:	3c01      	subs	r4, #1

			if(++cnt > TIMEOUT)
    1776:	2c00      	cmp	r4, #0
    1778:	d00e      	beq.n	1798 <wait_for_bootrom+0x54>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    177a:	42a8      	cmp	r0, r5
    177c:	d1f6      	bne.n	176c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}

	if(2 == arg) {
    177e:	4643      	mov	r3, r8
    1780:	2b02      	cmp	r3, #2
    1782:	d103      	bne.n	178c <wait_for_bootrom+0x48>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1784:	4812      	ldr	r0, [pc, #72]	; (17d0 <wait_for_bootrom+0x8c>)
    1786:	4913      	ldr	r1, [pc, #76]	; (17d4 <wait_for_bootrom+0x90>)
    1788:	4b13      	ldr	r3, [pc, #76]	; (17d8 <wait_for_bootrom+0x94>)
    178a:	4798      	blx	r3
	} else {
		/*bypass this step*/
	}

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    178c:	480f      	ldr	r0, [pc, #60]	; (17cc <wait_for_bootrom+0x88>)
    178e:	4913      	ldr	r1, [pc, #76]	; (17dc <wait_for_bootrom+0x98>)
    1790:	4b11      	ldr	r3, [pc, #68]	; (17d8 <wait_for_bootrom+0x94>)
    1792:	4798      	blx	r3
}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1794:	2000      	movs	r0, #0
    1796:	e000      	b.n	179a <wait_for_bootrom+0x56>
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > TIMEOUT)
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    1798:	20fb      	movs	r0, #251	; 0xfb
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    179a:	b240      	sxtb	r0, r0
    179c:	e00b      	b.n	17b6 <wait_for_bootrom+0x72>
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    179e:	2001      	movs	r0, #1
    17a0:	4b08      	ldr	r3, [pc, #32]	; (17c4 <wait_for_bootrom+0x80>)
    17a2:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    17a4:	4809      	ldr	r0, [pc, #36]	; (17cc <wait_for_bootrom+0x88>)
    17a6:	4b06      	ldr	r3, [pc, #24]	; (17c0 <wait_for_bootrom+0x7c>)
    17a8:	4798      	blx	r3
    17aa:	24fa      	movs	r4, #250	; 0xfa
    17ac:	00e4      	lsls	r4, r4, #3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    17ae:	4d0c      	ldr	r5, [pc, #48]	; (17e0 <wait_for_bootrom+0x9c>)
		{
			nm_bsp_sleep(1);
    17b0:	4f04      	ldr	r7, [pc, #16]	; (17c4 <wait_for_bootrom+0x80>)
			reg = nm_read_reg(BOOTROM_REG);
    17b2:	4e03      	ldr	r6, [pc, #12]	; (17c0 <wait_for_bootrom+0x7c>)
    17b4:	e7e1      	b.n	177a <wait_for_bootrom+0x36>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    17b6:	bc04      	pop	{r2}
    17b8:	4690      	mov	r8, r2
    17ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17bc:	00001014 	.word	0x00001014
    17c0:	00001961 	.word	0x00001961
    17c4:	0000018d 	.word	0x0000018d
    17c8:	000207bc 	.word	0x000207bc
    17cc:	000c000c 	.word	0x000c000c
    17d0:	000207ac 	.word	0x000207ac
    17d4:	3c1cd57d 	.word	0x3c1cd57d
    17d8:	00001979 	.word	0x00001979
    17dc:	ef522f61 	.word	0xef522f61
    17e0:	10add09e 	.word	0x10add09e

000017e4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	volatile uint32 regAddress = NMI_STATE_REG;
    17e8:	4b14      	ldr	r3, [pc, #80]	; (183c <wait_for_firmware_start+0x58>)
    17ea:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    17ec:	4b14      	ldr	r3, [pc, #80]	; (1840 <wait_for_firmware_start+0x5c>)
    17ee:	9300      	str	r3, [sp, #0]

	if(2 == arg) {
    17f0:	2802      	cmp	r0, #2
    17f2:	d10c      	bne.n	180e <wait_for_firmware_start+0x2a>
		regAddress = NMI_REV_REG;
    17f4:	4b13      	ldr	r3, [pc, #76]	; (1844 <wait_for_firmware_start+0x60>)
    17f6:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    17f8:	4b13      	ldr	r3, [pc, #76]	; (1848 <wait_for_firmware_start+0x64>)
    17fa:	9300      	str	r3, [sp, #0]
    17fc:	e007      	b.n	180e <wait_for_firmware_start+0x2a>
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    17fe:	2002      	movs	r0, #2
    1800:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1802:	9801      	ldr	r0, [sp, #4]
    1804:	47a8      	blx	r5
    1806:	3c01      	subs	r4, #1
		if(++cnt > TIMEOUT)
    1808:	2c00      	cmp	r4, #0
    180a:	d104      	bne.n	1816 <wait_for_firmware_start+0x32>
    180c:	e011      	b.n	1832 <wait_for_firmware_start+0x4e>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    180e:	4c0f      	ldr	r4, [pc, #60]	; (184c <wait_for_firmware_start+0x68>)
    1810:	2000      	movs	r0, #0
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1812:	4e0f      	ldr	r6, [pc, #60]	; (1850 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1814:	4d0f      	ldr	r5, [pc, #60]	; (1854 <wait_for_firmware_start+0x70>)
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg)
    1816:	9b00      	ldr	r3, [sp, #0]
    1818:	4283      	cmp	r3, r0
    181a:	d1f0      	bne.n	17fe <wait_for_firmware_start+0x1a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    181c:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    181e:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1820:	4b07      	ldr	r3, [pc, #28]	; (1840 <wait_for_firmware_start+0x5c>)
    1822:	429a      	cmp	r2, r3
    1824:	d106      	bne.n	1834 <wait_for_firmware_start+0x50>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    1826:	4805      	ldr	r0, [pc, #20]	; (183c <wait_for_firmware_start+0x58>)
    1828:	2100      	movs	r1, #0
    182a:	4b0b      	ldr	r3, [pc, #44]	; (1858 <wait_for_firmware_start+0x74>)
    182c:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    182e:	2000      	movs	r0, #0
    1830:	e000      	b.n	1834 <wait_for_firmware_start+0x50>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt > TIMEOUT)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1832:	20fb      	movs	r0, #251	; 0xfb
	if(M2M_FINISH_INIT_STATE == checkValue)
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
    1834:	b240      	sxtb	r0, r0
}
    1836:	b002      	add	sp, #8
    1838:	bd70      	pop	{r4, r5, r6, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	0000108c 	.word	0x0000108c
    1840:	02532636 	.word	0x02532636
    1844:	000207ac 	.word	0x000207ac
    1848:	d75dc1c3 	.word	0xd75dc1c3
    184c:	000007d1 	.word	0x000007d1
    1850:	0000018d 	.word	0x0000018d
    1854:	00001961 	.word	0x00001961
    1858:	00001979 	.word	0x00001979

0000185c <chip_deinit>:

sint8 chip_deinit(void)
{
    185c:	b5f0      	push	{r4, r5, r6, r7, lr}
    185e:	4647      	mov	r7, r8
    1860:	b480      	push	{r7}
    1862:	b082      	sub	sp, #8
	uint32 reg = 0;
    1864:	2300      	movs	r3, #0
    1866:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1868:	20a0      	movs	r0, #160	; 0xa0
    186a:	0140      	lsls	r0, r0, #5
    186c:	a901      	add	r1, sp, #4
    186e:	4b29      	ldr	r3, [pc, #164]	; (1914 <chip_deinit+0xb8>)
    1870:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    1872:	2800      	cmp	r0, #0
    1874:	d00a      	beq.n	188c <chip_deinit+0x30>
		M2M_ERR("failed to de-initialize\n");
    1876:	4828      	ldr	r0, [pc, #160]	; (1918 <chip_deinit+0xbc>)
    1878:	4928      	ldr	r1, [pc, #160]	; (191c <chip_deinit+0xc0>)
    187a:	4a29      	ldr	r2, [pc, #164]	; (1920 <chip_deinit+0xc4>)
    187c:	4b29      	ldr	r3, [pc, #164]	; (1924 <chip_deinit+0xc8>)
    187e:	4798      	blx	r3
    1880:	4829      	ldr	r0, [pc, #164]	; (1928 <chip_deinit+0xcc>)
    1882:	4b2a      	ldr	r3, [pc, #168]	; (192c <chip_deinit+0xd0>)
    1884:	4798      	blx	r3
    1886:	200d      	movs	r0, #13
    1888:	4b29      	ldr	r3, [pc, #164]	; (1930 <chip_deinit+0xd4>)
    188a:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    188c:	4929      	ldr	r1, [pc, #164]	; (1934 <chip_deinit+0xd8>)
    188e:	9a01      	ldr	r2, [sp, #4]
    1890:	4011      	ands	r1, r2
    1892:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1894:	20a0      	movs	r0, #160	; 0xa0
    1896:	0140      	lsls	r0, r0, #5
    1898:	4b27      	ldr	r3, [pc, #156]	; (1938 <chip_deinit+0xdc>)
    189a:	4798      	blx	r3
    189c:	1c06      	adds	r6, r0, #0

	if (ret != M2M_SUCCESS) {
    189e:	240a      	movs	r4, #10
    18a0:	2800      	cmp	r0, #0
    18a2:	d00c      	beq.n	18be <chip_deinit+0x62>
		M2M_ERR("Error while writing reg\n");
    18a4:	481c      	ldr	r0, [pc, #112]	; (1918 <chip_deinit+0xbc>)
    18a6:	491d      	ldr	r1, [pc, #116]	; (191c <chip_deinit+0xc0>)
    18a8:	4a24      	ldr	r2, [pc, #144]	; (193c <chip_deinit+0xe0>)
    18aa:	4b1e      	ldr	r3, [pc, #120]	; (1924 <chip_deinit+0xc8>)
    18ac:	4798      	blx	r3
    18ae:	4824      	ldr	r0, [pc, #144]	; (1940 <chip_deinit+0xe4>)
    18b0:	4b1e      	ldr	r3, [pc, #120]	; (192c <chip_deinit+0xd0>)
    18b2:	4798      	blx	r3
    18b4:	200d      	movs	r0, #13
    18b6:	4b1e      	ldr	r3, [pc, #120]	; (1930 <chip_deinit+0xd4>)
    18b8:	4798      	blx	r3
		return ret;
    18ba:	1c30      	adds	r0, r6, #0
    18bc:	e025      	b.n	190a <chip_deinit+0xae>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18be:	25a0      	movs	r5, #160	; 0xa0
    18c0:	016d      	lsls	r5, r5, #5
    18c2:	4f14      	ldr	r7, [pc, #80]	; (1914 <chip_deinit+0xb8>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    18c4:	4b1c      	ldr	r3, [pc, #112]	; (1938 <chip_deinit+0xdc>)
    18c6:	4698      	mov	r8, r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18c8:	1c28      	adds	r0, r5, #0
    18ca:	a901      	add	r1, sp, #4
    18cc:	47b8      	blx	r7
    18ce:	1e06      	subs	r6, r0, #0
		if (ret != M2M_SUCCESS) {
    18d0:	d00d      	beq.n	18ee <chip_deinit+0x92>
			M2M_ERR("Error while reading reg\n");
    18d2:	4811      	ldr	r0, [pc, #68]	; (1918 <chip_deinit+0xbc>)
    18d4:	4911      	ldr	r1, [pc, #68]	; (191c <chip_deinit+0xc0>)
    18d6:	228b      	movs	r2, #139	; 0x8b
    18d8:	0092      	lsls	r2, r2, #2
    18da:	4b12      	ldr	r3, [pc, #72]	; (1924 <chip_deinit+0xc8>)
    18dc:	4798      	blx	r3
    18de:	4819      	ldr	r0, [pc, #100]	; (1944 <chip_deinit+0xe8>)
    18e0:	4b12      	ldr	r3, [pc, #72]	; (192c <chip_deinit+0xd0>)
    18e2:	4798      	blx	r3
    18e4:	200d      	movs	r0, #13
    18e6:	4b12      	ldr	r3, [pc, #72]	; (1930 <chip_deinit+0xd4>)
    18e8:	4798      	blx	r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18ea:	1c30      	adds	r0, r6, #0
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
    18ec:	e00d      	b.n	190a <chip_deinit+0xae>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    18ee:	9b01      	ldr	r3, [sp, #4]
    18f0:	055a      	lsls	r2, r3, #21
    18f2:	d509      	bpl.n	1908 <chip_deinit+0xac>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    18f4:	490f      	ldr	r1, [pc, #60]	; (1934 <chip_deinit+0xd8>)
    18f6:	4019      	ands	r1, r3
    18f8:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    18fa:	1c28      	adds	r0, r5, #0
    18fc:	47c0      	blx	r8
    18fe:	3c01      	subs	r4, #1
    1900:	b2e4      	uxtb	r4, r4
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    1902:	2c00      	cmp	r4, #0
    1904:	d1e0      	bne.n	18c8 <chip_deinit+0x6c>
    1906:	e000      	b.n	190a <chip_deinit+0xae>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1908:	2000      	movs	r0, #0
    190a:	b240      	sxtb	r0, r0
		}

	} while (timeout);

	return ret;
}
    190c:	b002      	add	sp, #8
    190e:	bc04      	pop	{r2}
    1910:	4690      	mov	r8, r2
    1912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1914:	0000196d 	.word	0x0000196d
    1918:	0000835c 	.word	0x0000835c
    191c:	00008818 	.word	0x00008818
    1920:	0000021f 	.word	0x0000021f
    1924:	000070b5 	.word	0x000070b5
    1928:	000088b0 	.word	0x000088b0
    192c:	000071d5 	.word	0x000071d5
    1930:	000070e9 	.word	0x000070e9
    1934:	fffffbff 	.word	0xfffffbff
    1938:	00001979 	.word	0x00001979
    193c:	00000225 	.word	0x00000225
    1940:	000088c8 	.word	0x000088c8
    1944:	000088e0 	.word	0x000088e0

00001948 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1948:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    194a:	4b01      	ldr	r3, [pc, #4]	; (1950 <nm_bus_iface_init+0x8>)
    194c:	4798      	blx	r3

	return ret;
}
    194e:	bd08      	pop	{r3, pc}
    1950:	000002bd 	.word	0x000002bd

00001954 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1954:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <nm_bus_iface_deinit+0x8>)
    1958:	4798      	blx	r3

	return ret;
}
    195a:	bd08      	pop	{r3, pc}
    195c:	000004f1 	.word	0x000004f1

00001960 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1960:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1962:	4b01      	ldr	r3, [pc, #4]	; (1968 <nm_read_reg+0x8>)
    1964:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1966:	bd08      	pop	{r3, pc}
    1968:	00002289 	.word	0x00002289

0000196c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    196c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    196e:	4b01      	ldr	r3, [pc, #4]	; (1974 <nm_read_reg_with_ret+0x8>)
    1970:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1972:	bd08      	pop	{r3, pc}
    1974:	0000229d 	.word	0x0000229d

00001978 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1978:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    197a:	4b01      	ldr	r3, [pc, #4]	; (1980 <nm_write_reg+0x8>)
    197c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    197e:	bd08      	pop	{r3, pc}
    1980:	000022b5 	.word	0x000022b5

00001984 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1986:	465f      	mov	r7, fp
    1988:	4656      	mov	r6, sl
    198a:	464d      	mov	r5, r9
    198c:	4644      	mov	r4, r8
    198e:	b4f0      	push	{r4, r5, r6, r7}
    1990:	468b      	mov	fp, r1
    1992:	1c16      	adds	r6, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1994:	4b16      	ldr	r3, [pc, #88]	; (19f0 <nm_read_block+0x6c>)
    1996:	881b      	ldrh	r3, [r3, #0]
    1998:	3b08      	subs	r3, #8
    199a:	b29b      	uxth	r3, r3
    199c:	4698      	mov	r8, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    199e:	1c1d      	adds	r5, r3, #0
    19a0:	429a      	cmp	r2, r3
    19a2:	d808      	bhi.n	19b6 <nm_read_block+0x32>
    19a4:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    19a6:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    19a8:	465b      	mov	r3, fp
    19aa:	19d9      	adds	r1, r3, r7
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19ac:	b2b2      	uxth	r2, r6
    19ae:	1c20      	adds	r0, r4, #0
    19b0:	4b10      	ldr	r3, [pc, #64]	; (19f4 <nm_read_block+0x70>)
    19b2:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    19b4:	e014      	b.n	19e0 <nm_read_block+0x5c>
    19b6:	1ad6      	subs	r6, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19b8:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    19ba:	2700      	movs	r7, #0
    19bc:	1a0b      	subs	r3, r1, r0
    19be:	469a      	mov	sl, r3
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19c0:	4b0c      	ldr	r3, [pc, #48]	; (19f4 <nm_read_block+0x70>)
    19c2:	4699      	mov	r9, r3
    19c4:	4653      	mov	r3, sl
    19c6:	1919      	adds	r1, r3, r4
    19c8:	1c20      	adds	r0, r4, #0
    19ca:	4642      	mov	r2, r8
    19cc:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19ce:	2800      	cmp	r0, #0
    19d0:	d106      	bne.n	19e0 <nm_read_block+0x5c>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    19d2:	197f      	adds	r7, r7, r5
			u32Addr += u16MaxTrxSz;
    19d4:	1964      	adds	r4, r4, r5
    19d6:	1b73      	subs	r3, r6, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19d8:	42ae      	cmp	r6, r5
    19da:	d9e5      	bls.n	19a8 <nm_read_block+0x24>
    19dc:	1c1e      	adds	r6, r3, #0
    19de:	e7f1      	b.n	19c4 <nm_read_block+0x40>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    19e0:	b240      	sxtb	r0, r0
}
    19e2:	bc3c      	pop	{r2, r3, r4, r5}
    19e4:	4690      	mov	r8, r2
    19e6:	4699      	mov	r9, r3
    19e8:	46a2      	mov	sl, r4
    19ea:	46ab      	mov	fp, r5
    19ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	20000008 	.word	0x20000008
    19f4:	000023f1 	.word	0x000023f1

000019f8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19fa:	465f      	mov	r7, fp
    19fc:	4656      	mov	r6, sl
    19fe:	464d      	mov	r5, r9
    1a00:	4644      	mov	r4, r8
    1a02:	b4f0      	push	{r4, r5, r6, r7}
    1a04:	468b      	mov	fp, r1
    1a06:	1c16      	adds	r6, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a08:	4b16      	ldr	r3, [pc, #88]	; (1a64 <nm_write_block+0x6c>)
    1a0a:	881b      	ldrh	r3, [r3, #0]
    1a0c:	3b08      	subs	r3, #8
    1a0e:	b29b      	uxth	r3, r3
    1a10:	4698      	mov	r8, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a12:	1c1d      	adds	r5, r3, #0
    1a14:	429a      	cmp	r2, r3
    1a16:	d808      	bhi.n	1a2a <nm_write_block+0x32>
    1a18:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1a1a:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1a1c:	465b      	mov	r3, fp
    1a1e:	19d9      	adds	r1, r3, r7
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a20:	b2b2      	uxth	r2, r6
    1a22:	1c20      	adds	r0, r4, #0
    1a24:	4b10      	ldr	r3, [pc, #64]	; (1a68 <nm_write_block+0x70>)
    1a26:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1a28:	e014      	b.n	1a54 <nm_write_block+0x5c>
    1a2a:	1ad6      	subs	r6, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a2c:	1c04      	adds	r4, r0, #0
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1a2e:	2700      	movs	r7, #0
    1a30:	1a0b      	subs	r3, r1, r0
    1a32:	469a      	mov	sl, r3
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a34:	4b0c      	ldr	r3, [pc, #48]	; (1a68 <nm_write_block+0x70>)
    1a36:	4699      	mov	r9, r3
    1a38:	4653      	mov	r3, sl
    1a3a:	1919      	adds	r1, r3, r4
    1a3c:	1c20      	adds	r0, r4, #0
    1a3e:	4642      	mov	r2, r8
    1a40:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a42:	2800      	cmp	r0, #0
    1a44:	d106      	bne.n	1a54 <nm_write_block+0x5c>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    1a46:	197f      	adds	r7, r7, r5
			u32Addr += u16MaxTrxSz;
    1a48:	1964      	adds	r4, r4, r5
    1a4a:	1b73      	subs	r3, r6, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a4c:	42ae      	cmp	r6, r5
    1a4e:	d9e5      	bls.n	1a1c <nm_write_block+0x24>
    1a50:	1c1e      	adds	r6, r3, #0
    1a52:	e7f1      	b.n	1a38 <nm_write_block+0x40>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1a54:	b240      	sxtb	r0, r0
}
    1a56:	bc3c      	pop	{r2, r3, r4, r5}
    1a58:	4690      	mov	r8, r2
    1a5a:	4699      	mov	r9, r3
    1a5c:	46a2      	mov	sl, r4
    1a5e:	46ab      	mov	fp, r5
    1a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	20000008 	.word	0x20000008
    1a68:	000024cd 	.word	0x000024cd

00001a6c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6e:	465f      	mov	r7, fp
    1a70:	4656      	mov	r6, sl
    1a72:	464d      	mov	r5, r9
    1a74:	4644      	mov	r4, r8
    1a76:	b4f0      	push	{r4, r5, r6, r7}
    1a78:	b08d      	sub	sp, #52	; 0x34
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;

	if(NULL != arg) {
    1a7a:	2800      	cmp	r0, #0
    1a7c:	d005      	beq.n	1a8a <nm_drv_init+0x1e>
		if(M2M_WIFI_MODE_CONFIG == *((uint8 *)arg)) {
    1a7e:	7800      	ldrb	r0, [r0, #0]
*/
sint8 nm_drv_init(void * arg)
{
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    1a80:	3802      	subs	r0, #2
    1a82:	4243      	negs	r3, r0
    1a84:	4158      	adcs	r0, r3
    1a86:	1c45      	adds	r5, r0, #1
    1a88:	e000      	b.n	1a8c <nm_drv_init+0x20>
    1a8a:	2501      	movs	r5, #1
		}
	} else {
		/*continue running*/
	}

	ret = nm_bus_iface_init(NULL);
    1a8c:	2000      	movs	r0, #0
    1a8e:	4b5a      	ldr	r3, [pc, #360]	; (1bf8 <nm_drv_init+0x18c>)
    1a90:	4798      	blx	r3
    1a92:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1a94:	d00b      	beq.n	1aae <nm_drv_init+0x42>
		M2M_ERR("[nmi start]: fail init bus\n");
    1a96:	4859      	ldr	r0, [pc, #356]	; (1bfc <nm_drv_init+0x190>)
    1a98:	4959      	ldr	r1, [pc, #356]	; (1c00 <nm_drv_init+0x194>)
    1a9a:	22a4      	movs	r2, #164	; 0xa4
    1a9c:	4b59      	ldr	r3, [pc, #356]	; (1c04 <nm_drv_init+0x198>)
    1a9e:	4798      	blx	r3
    1aa0:	4859      	ldr	r0, [pc, #356]	; (1c08 <nm_drv_init+0x19c>)
    1aa2:	4b5a      	ldr	r3, [pc, #360]	; (1c0c <nm_drv_init+0x1a0>)
    1aa4:	4798      	blx	r3
    1aa6:	200d      	movs	r0, #13
    1aa8:	4b59      	ldr	r3, [pc, #356]	; (1c10 <nm_drv_init+0x1a4>)
    1aaa:	4798      	blx	r3
		goto ERR1;
    1aac:	e09c      	b.n	1be8 <nm_drv_init+0x17c>

#ifdef BUS_ONLY
	return;
#endif

	ret = chip_wake();
    1aae:	4b59      	ldr	r3, [pc, #356]	; (1c14 <nm_drv_init+0x1a8>)
    1ab0:	4798      	blx	r3
    1ab2:	1c04      	adds	r4, r0, #0
	nm_bsp_sleep(10);
    1ab4:	200a      	movs	r0, #10
    1ab6:	4b58      	ldr	r3, [pc, #352]	; (1c18 <nm_drv_init+0x1ac>)
    1ab8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1aba:	2c00      	cmp	r4, #0
    1abc:	d00b      	beq.n	1ad6 <nm_drv_init+0x6a>
		M2M_ERR("[nmi start]: fail chip_wakeup\n");
    1abe:	484f      	ldr	r0, [pc, #316]	; (1bfc <nm_drv_init+0x190>)
    1ac0:	494f      	ldr	r1, [pc, #316]	; (1c00 <nm_drv_init+0x194>)
    1ac2:	22af      	movs	r2, #175	; 0xaf
    1ac4:	4b4f      	ldr	r3, [pc, #316]	; (1c04 <nm_drv_init+0x198>)
    1ac6:	4798      	blx	r3
    1ac8:	4854      	ldr	r0, [pc, #336]	; (1c1c <nm_drv_init+0x1b0>)
    1aca:	4b50      	ldr	r3, [pc, #320]	; (1c0c <nm_drv_init+0x1a0>)
    1acc:	4798      	blx	r3
    1ace:	200d      	movs	r0, #13
    1ad0:	4b4f      	ldr	r3, [pc, #316]	; (1c10 <nm_drv_init+0x1a4>)
    1ad2:	4798      	blx	r3
		goto ERR2;
    1ad4:	e086      	b.n	1be4 <nm_drv_init+0x178>
	}

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1ad6:	4852      	ldr	r0, [pc, #328]	; (1c20 <nm_drv_init+0x1b4>)
    1ad8:	4c4a      	ldr	r4, [pc, #296]	; (1c04 <nm_drv_init+0x198>)
    1ada:	47a0      	blx	r4
    1adc:	4b51      	ldr	r3, [pc, #324]	; (1c24 <nm_drv_init+0x1b8>)
    1ade:	4798      	blx	r3
    1ae0:	1c01      	adds	r1, r0, #0
    1ae2:	4851      	ldr	r0, [pc, #324]	; (1c28 <nm_drv_init+0x1bc>)
    1ae4:	47a0      	blx	r4
    1ae6:	200d      	movs	r0, #13
    1ae8:	4b49      	ldr	r3, [pc, #292]	; (1c10 <nm_drv_init+0x1a4>)
    1aea:	4798      	blx	r3

	/**
	Go...
	**/
	ret = chip_reset();
    1aec:	4b4f      	ldr	r3, [pc, #316]	; (1c2c <nm_drv_init+0x1c0>)
    1aee:	4798      	blx	r3
    1af0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1af2:	d177      	bne.n	1be4 <nm_drv_init+0x178>
		goto ERR2;
	}

#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1af4:	4b4e      	ldr	r3, [pc, #312]	; (1c30 <nm_drv_init+0x1c4>)
    1af6:	4798      	blx	r3
#endif
	/*return power save to default value*/
	chip_idle();
    1af8:	4b4e      	ldr	r3, [pc, #312]	; (1c34 <nm_drv_init+0x1c8>)
    1afa:	4798      	blx	r3
	//M2M_INFO("Chip ID %x\n", (unsigned int)nmi_get_chipid());

	ret = cpu_start();
    1afc:	4b4e      	ldr	r3, [pc, #312]	; (1c38 <nm_drv_init+0x1cc>)
    1afe:	4798      	blx	r3
    1b00:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b02:	d16f      	bne.n	1be4 <nm_drv_init+0x178>
		goto ERR2;
	}

	ret = wait_for_bootrom(u8Mode);
    1b04:	1c28      	adds	r0, r5, #0
    1b06:	4b4d      	ldr	r3, [pc, #308]	; (1c3c <nm_drv_init+0x1d0>)
    1b08:	4798      	blx	r3
    1b0a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b0c:	d16a      	bne.n	1be4 <nm_drv_init+0x178>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
    1b0e:	1c28      	adds	r0, r5, #0
    1b10:	4b4b      	ldr	r3, [pc, #300]	; (1c40 <nm_drv_init+0x1d4>)
    1b12:	4798      	blx	r3
    1b14:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b16:	d165      	bne.n	1be4 <nm_drv_init+0x178>
		goto ERR2;
	}

	if(M2M_WIFI_MODE_CONFIG == u8Mode) {
    1b18:	2d02      	cmp	r5, #2
    1b1a:	d065      	beq.n	1be8 <nm_drv_init+0x17c>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
    1b1c:	4b49      	ldr	r3, [pc, #292]	; (1c44 <nm_drv_init+0x1d8>)
    1b1e:	4798      	blx	r3
    1b20:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b22:	d00b      	beq.n	1b3c <nm_drv_init+0xd0>
		M2M_ERR("failed to enable interrupts..\n");
    1b24:	4835      	ldr	r0, [pc, #212]	; (1bfc <nm_drv_init+0x190>)
    1b26:	4936      	ldr	r1, [pc, #216]	; (1c00 <nm_drv_init+0x194>)
    1b28:	22dc      	movs	r2, #220	; 0xdc
    1b2a:	4b36      	ldr	r3, [pc, #216]	; (1c04 <nm_drv_init+0x198>)
    1b2c:	4798      	blx	r3
    1b2e:	4846      	ldr	r0, [pc, #280]	; (1c48 <nm_drv_init+0x1dc>)
    1b30:	4b36      	ldr	r3, [pc, #216]	; (1c0c <nm_drv_init+0x1a0>)
    1b32:	4798      	blx	r3
    1b34:	200d      	movs	r0, #13
    1b36:	4b36      	ldr	r3, [pc, #216]	; (1c10 <nm_drv_init+0x1a4>)
    1b38:	4798      	blx	r3
		goto ERR2;
    1b3a:	e053      	b.n	1be4 <nm_drv_init+0x178>
#endif
#ifdef __ENABLE_LEGACY_RF_SETTINGS__
	val32 |= rHAVE_LEGACY_RF_SETTINGS;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1b3c:	20a5      	movs	r0, #165	; 0xa5
    1b3e:	0140      	lsls	r0, r0, #5
    1b40:	2100      	movs	r1, #0
    1b42:	4b42      	ldr	r3, [pc, #264]	; (1c4c <nm_drv_init+0x1e0>)
    1b44:	4798      	blx	r3
*	@version	1.0
*/
static sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1b46:	2100      	movs	r1, #0
    1b48:	4689      	mov	r9, r1
    1b4a:	9103      	str	r1, [sp, #12]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    1b4c:	4840      	ldr	r0, [pc, #256]	; (1c50 <nm_drv_init+0x1e4>)
    1b4e:	a903      	add	r1, sp, #12
    1b50:	4b40      	ldr	r3, [pc, #256]	; (1c54 <nm_drv_init+0x1e8>)
    1b52:	4798      	blx	r3

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    1b54:	9f03      	ldr	r7, [sp, #12]
    1b56:	0c3b      	lsrs	r3, r7, #16
    1b58:	469a      	mov	sl, r3
    1b5a:	b299      	uxth	r1, r3
    1b5c:	468b      	mov	fp, r1
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    1b5e:	b2bb      	uxth	r3, r7
    1b60:	0a1a      	lsrs	r2, r3, #8
    1b62:	9200      	str	r2, [sp, #0]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    1b64:	091b      	lsrs	r3, r3, #4
    1b66:	260f      	movs	r6, #15
    1b68:	4033      	ands	r3, r6
    1b6a:	9301      	str	r3, [sp, #4]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
    1b6c:	4b2d      	ldr	r3, [pc, #180]	; (1c24 <nm_drv_init+0x1b8>)
    1b6e:	4798      	blx	r3
	
	chip_apply_conf();

	nm_get_firmware_info(&strtmp);

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    1b70:	4b2b      	ldr	r3, [pc, #172]	; (1c20 <nm_drv_init+0x1b4>)
    1b72:	4698      	mov	r8, r3
    1b74:	1c18      	adds	r0, r3, #0
    1b76:	4d23      	ldr	r5, [pc, #140]	; (1c04 <nm_drv_init+0x198>)
    1b78:	47a8      	blx	r5
    1b7a:	1c3b      	adds	r3, r7, #0
    1b7c:	4033      	ands	r3, r6
    1b7e:	4836      	ldr	r0, [pc, #216]	; (1c58 <nm_drv_init+0x1ec>)
    1b80:	9900      	ldr	r1, [sp, #0]
    1b82:	9a01      	ldr	r2, [sp, #4]
    1b84:	47a8      	blx	r5
    1b86:	200d      	movs	r0, #13
    1b88:	4f21      	ldr	r7, [pc, #132]	; (1c10 <nm_drv_init+0x1a4>)
    1b8a:	47b8      	blx	r7
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1b8c:	4640      	mov	r0, r8
    1b8e:	47a8      	blx	r5
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    1b90:	465a      	mov	r2, fp
    1b92:	0a11      	lsrs	r1, r2, #8
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    1b94:	0912      	lsrs	r2, r2, #4
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    1b96:	4032      	ands	r2, r6
	chip_apply_conf();

	nm_get_firmware_info(&strtmp);

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1b98:	4653      	mov	r3, sl
    1b9a:	4033      	ands	r3, r6
    1b9c:	482f      	ldr	r0, [pc, #188]	; (1c5c <nm_drv_init+0x1f0>)
    1b9e:	47a8      	blx	r5
    1ba0:	200d      	movs	r0, #13
    1ba2:	47b8      	blx	r7
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    1ba4:	4640      	mov	r0, r8
    1ba6:	47a8      	blx	r5
    1ba8:	482d      	ldr	r0, [pc, #180]	; (1c60 <nm_drv_init+0x1f4>)
    1baa:	2112      	movs	r1, #18
    1bac:	2203      	movs	r2, #3
    1bae:	464b      	mov	r3, r9
    1bb0:	47a8      	blx	r5
    1bb2:	200d      	movs	r0, #13
    1bb4:	47b8      	blx	r7

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
    1bb6:	ab04      	add	r3, sp, #16
    1bb8:	9900      	ldr	r1, [sp, #0]
    1bba:	7019      	strb	r1, [r3, #0]
    1bbc:	466a      	mov	r2, sp
    1bbe:	9901      	ldr	r1, [sp, #4]
    1bc0:	7451      	strb	r1, [r2, #17]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
    1bc2:	881a      	ldrh	r2, [r3, #0]
    1bc4:	4b27      	ldr	r3, [pc, #156]	; (1c64 <nm_drv_init+0x1f8>)
    1bc6:	429a      	cmp	r2, r3
    1bc8:	d00e      	beq.n	1be8 <nm_drv_init+0x17c>
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
		M2M_ERR("Firmware version mismatch!\n");
    1bca:	480c      	ldr	r0, [pc, #48]	; (1bfc <nm_drv_init+0x190>)
    1bcc:	490c      	ldr	r1, [pc, #48]	; (1c00 <nm_drv_init+0x194>)
    1bce:	22ec      	movs	r2, #236	; 0xec
    1bd0:	4b0c      	ldr	r3, [pc, #48]	; (1c04 <nm_drv_init+0x198>)
    1bd2:	4798      	blx	r3
    1bd4:	4824      	ldr	r0, [pc, #144]	; (1c68 <nm_drv_init+0x1fc>)
    1bd6:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <nm_drv_init+0x1a0>)
    1bd8:	4798      	blx	r3
    1bda:	200d      	movs	r0, #13
    1bdc:	4b0c      	ldr	r3, [pc, #48]	; (1c10 <nm_drv_init+0x1a4>)
    1bde:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    1be0:	24f3      	movs	r4, #243	; 0xf3
    1be2:	e001      	b.n	1be8 <nm_drv_init+0x17c>
		M2M_ERR("Firmware version mismatch!\n");
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1be4:	4b21      	ldr	r3, [pc, #132]	; (1c6c <nm_drv_init+0x200>)
    1be6:	4798      	blx	r3
    1be8:	b260      	sxtb	r0, r4
ERR1:
	return ret;
}
    1bea:	b00d      	add	sp, #52	; 0x34
    1bec:	bc3c      	pop	{r2, r3, r4, r5}
    1bee:	4690      	mov	r8, r2
    1bf0:	4699      	mov	r9, r3
    1bf2:	46a2      	mov	sl, r4
    1bf4:	46ab      	mov	fp, r5
    1bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf8:	00001949 	.word	0x00001949
    1bfc:	0000835c 	.word	0x0000835c
    1c00:	00008a60 	.word	0x00008a60
    1c04:	000070b5 	.word	0x000070b5
    1c08:	00008948 	.word	0x00008948
    1c0c:	000071d5 	.word	0x000071d5
    1c10:	000070e9 	.word	0x000070e9
    1c14:	000016f9 	.word	0x000016f9
    1c18:	0000018d 	.word	0x0000018d
    1c1c:	00008974 	.word	0x00008974
    1c20:	00008620 	.word	0x00008620
    1c24:	000015bd 	.word	0x000015bd
    1c28:	00008964 	.word	0x00008964
    1c2c:	00001715 	.word	0x00001715
    1c30:	000022cd 	.word	0x000022cd
    1c34:	00001405 	.word	0x00001405
    1c38:	000014e5 	.word	0x000014e5
    1c3c:	00001745 	.word	0x00001745
    1c40:	000017e5 	.word	0x000017e5
    1c44:	00001479 	.word	0x00001479
    1c48:	00008994 	.word	0x00008994
    1c4c:	00001979 	.word	0x00001979
    1c50:	000207ac 	.word	0x000207ac
    1c54:	0000196d 	.word	0x0000196d
    1c58:	000089b4 	.word	0x000089b4
    1c5c:	000089d0 	.word	0x000089d0
    1c60:	000089ec 	.word	0x000089ec
    1c64:	00000312 	.word	0x00000312
    1c68:	00008a08 	.word	0x00008a08
    1c6c:	00001955 	.word	0x00001955

00001c70 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c70:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c72:	4b13      	ldr	r3, [pc, #76]	; (1cc0 <nm_drv_deinit+0x50>)
    1c74:	4798      	blx	r3
    1c76:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c78:	d00c      	beq.n	1c94 <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c7a:	4812      	ldr	r0, [pc, #72]	; (1cc4 <nm_drv_deinit+0x54>)
    1c7c:	4912      	ldr	r1, [pc, #72]	; (1cc8 <nm_drv_deinit+0x58>)
    1c7e:	2281      	movs	r2, #129	; 0x81
    1c80:	0052      	lsls	r2, r2, #1
    1c82:	4b12      	ldr	r3, [pc, #72]	; (1ccc <nm_drv_deinit+0x5c>)
    1c84:	4798      	blx	r3
    1c86:	4812      	ldr	r0, [pc, #72]	; (1cd0 <nm_drv_deinit+0x60>)
    1c88:	4b12      	ldr	r3, [pc, #72]	; (1cd4 <nm_drv_deinit+0x64>)
    1c8a:	4798      	blx	r3
    1c8c:	200d      	movs	r0, #13
    1c8e:	4b12      	ldr	r3, [pc, #72]	; (1cd8 <nm_drv_deinit+0x68>)
    1c90:	4798      	blx	r3
		goto ERR1;
    1c92:	e012      	b.n	1cba <nm_drv_deinit+0x4a>
	}

	ret = nm_bus_iface_deinit();
    1c94:	4b11      	ldr	r3, [pc, #68]	; (1cdc <nm_drv_deinit+0x6c>)
    1c96:	4798      	blx	r3
    1c98:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c9a:	d00c      	beq.n	1cb6 <nm_drv_deinit+0x46>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c9c:	4809      	ldr	r0, [pc, #36]	; (1cc4 <nm_drv_deinit+0x54>)
    1c9e:	490a      	ldr	r1, [pc, #40]	; (1cc8 <nm_drv_deinit+0x58>)
    1ca0:	2284      	movs	r2, #132	; 0x84
    1ca2:	0052      	lsls	r2, r2, #1
    1ca4:	4b09      	ldr	r3, [pc, #36]	; (1ccc <nm_drv_deinit+0x5c>)
    1ca6:	4798      	blx	r3
    1ca8:	480d      	ldr	r0, [pc, #52]	; (1ce0 <nm_drv_deinit+0x70>)
    1caa:	4b0a      	ldr	r3, [pc, #40]	; (1cd4 <nm_drv_deinit+0x64>)
    1cac:	4798      	blx	r3
    1cae:	200d      	movs	r0, #13
    1cb0:	4b09      	ldr	r3, [pc, #36]	; (1cd8 <nm_drv_deinit+0x68>)
    1cb2:	4798      	blx	r3
		goto ERR1;
    1cb4:	e001      	b.n	1cba <nm_drv_deinit+0x4a>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1cb6:	4b0b      	ldr	r3, [pc, #44]	; (1ce4 <nm_drv_deinit+0x74>)
    1cb8:	4798      	blx	r3
#endif

ERR1:
	return ret;
    1cba:	b260      	sxtb	r0, r4
}
    1cbc:	bd10      	pop	{r4, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	0000185d 	.word	0x0000185d
    1cc4:	0000835c 	.word	0x0000835c
    1cc8:	00008a6c 	.word	0x00008a6c
    1ccc:	000070b5 	.word	0x000070b5
    1cd0:	00008a24 	.word	0x00008a24
    1cd4:	000071d5 	.word	0x000071d5
    1cd8:	000070e9 	.word	0x000070e9
    1cdc:	00001955 	.word	0x00001955
    1ce0:	00008a44 	.word	0x00008a44
    1ce4:	00002279 	.word	0x00002279

00001ce8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1ce8:	b500      	push	{lr}
    1cea:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1cec:	ab01      	add	r3, sp, #4
    1cee:	2200      	movs	r2, #0
    1cf0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1cf2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1cf4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1cf6:	2003      	movs	r0, #3
    1cf8:	1c19      	adds	r1, r3, #0
    1cfa:	4b02      	ldr	r3, [pc, #8]	; (1d04 <nmi_spi_read+0x1c>)
    1cfc:	4798      	blx	r3
}
    1cfe:	b005      	add	sp, #20
    1d00:	bd00      	pop	{pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	000003b5 	.word	0x000003b5

00001d08 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0a:	b083      	sub	sp, #12
    1d0c:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1d0e:	2ecf      	cmp	r6, #207	; 0xcf
    1d10:	d004      	beq.n	1d1c <spi_cmd_rsp+0x14>
    1d12:	1c03      	adds	r3, r0, #0
    1d14:	333b      	adds	r3, #59	; 0x3b
    1d16:	b2db      	uxtb	r3, r3
    1d18:	2b01      	cmp	r3, #1
    1d1a:	d807      	bhi.n	1d2c <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d1c:	4668      	mov	r0, sp
    1d1e:	3007      	adds	r0, #7
    1d20:	2101      	movs	r1, #1
    1d22:	4b25      	ldr	r3, [pc, #148]	; (1db8 <spi_cmd_rsp+0xb0>)
    1d24:	4798      	blx	r3
			result = N_FAIL;
    1d26:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d28:	2800      	cmp	r0, #0
    1d2a:	d141      	bne.n	1db0 <spi_cmd_rsp+0xa8>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1d2c:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d2e:	466d      	mov	r5, sp
    1d30:	3507      	adds	r5, #7
    1d32:	4f21      	ldr	r7, [pc, #132]	; (1db8 <spi_cmd_rsp+0xb0>)
    1d34:	1c28      	adds	r0, r5, #0
    1d36:	2101      	movs	r1, #1
    1d38:	47b8      	blx	r7
    1d3a:	2800      	cmp	r0, #0
    1d3c:	d00d      	beq.n	1d5a <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1d3e:	481f      	ldr	r0, [pc, #124]	; (1dbc <spi_cmd_rsp+0xb4>)
    1d40:	491f      	ldr	r1, [pc, #124]	; (1dc0 <spi_cmd_rsp+0xb8>)
    1d42:	223c      	movs	r2, #60	; 0x3c
    1d44:	32ff      	adds	r2, #255	; 0xff
    1d46:	4b1f      	ldr	r3, [pc, #124]	; (1dc4 <spi_cmd_rsp+0xbc>)
    1d48:	4798      	blx	r3
    1d4a:	481f      	ldr	r0, [pc, #124]	; (1dc8 <spi_cmd_rsp+0xc0>)
    1d4c:	4b1f      	ldr	r3, [pc, #124]	; (1dcc <spi_cmd_rsp+0xc4>)
    1d4e:	4798      	blx	r3
    1d50:	200d      	movs	r0, #13
    1d52:	4b1f      	ldr	r3, [pc, #124]	; (1dd0 <spi_cmd_rsp+0xc8>)
    1d54:	4798      	blx	r3
			result = N_FAIL;
    1d56:	2300      	movs	r3, #0
			goto _fail_;
    1d58:	e02a      	b.n	1db0 <spi_cmd_rsp+0xa8>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1d5a:	782b      	ldrb	r3, [r5, #0]
    1d5c:	42b3      	cmp	r3, r6
    1d5e:	d104      	bne.n	1d6a <spi_cmd_rsp+0x62>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1d60:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d62:	466d      	mov	r5, sp
    1d64:	3507      	adds	r5, #7
    1d66:	4e14      	ldr	r6, [pc, #80]	; (1db8 <spi_cmd_rsp+0xb0>)
    1d68:	e004      	b.n	1d74 <spi_cmd_rsp+0x6c>
    1d6a:	3c01      	subs	r4, #1
    1d6c:	b2e4      	uxtb	r4, r4
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1d6e:	2c00      	cmp	r4, #0
    1d70:	d1e0      	bne.n	1d34 <spi_cmd_rsp+0x2c>
    1d72:	e7f5      	b.n	1d60 <spi_cmd_rsp+0x58>
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d74:	1c28      	adds	r0, r5, #0
    1d76:	2101      	movs	r1, #1
    1d78:	47b0      	blx	r6
    1d7a:	2800      	cmp	r0, #0
    1d7c:	d00d      	beq.n	1d9a <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1d7e:	480f      	ldr	r0, [pc, #60]	; (1dbc <spi_cmd_rsp+0xb4>)
    1d80:	490f      	ldr	r1, [pc, #60]	; (1dc0 <spi_cmd_rsp+0xb8>)
    1d82:	224a      	movs	r2, #74	; 0x4a
    1d84:	32ff      	adds	r2, #255	; 0xff
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <spi_cmd_rsp+0xbc>)
    1d88:	4798      	blx	r3
    1d8a:	480f      	ldr	r0, [pc, #60]	; (1dc8 <spi_cmd_rsp+0xc0>)
    1d8c:	4b0f      	ldr	r3, [pc, #60]	; (1dcc <spi_cmd_rsp+0xc4>)
    1d8e:	4798      	blx	r3
    1d90:	200d      	movs	r0, #13
    1d92:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <spi_cmd_rsp+0xc8>)
    1d94:	4798      	blx	r3
			result = N_FAIL;
    1d96:	2300      	movs	r3, #0
			goto _fail_;
    1d98:	e00a      	b.n	1db0 <spi_cmd_rsp+0xa8>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1d9a:	782b      	ldrb	r3, [r5, #0]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d004      	beq.n	1daa <spi_cmd_rsp+0xa2>
    1da0:	3c01      	subs	r4, #1
    1da2:	b2e4      	uxtb	r4, r4
    1da4:	2c00      	cmp	r4, #0
    1da6:	d1e5      	bne.n	1d74 <spi_cmd_rsp+0x6c>
    1da8:	e001      	b.n	1dae <spi_cmd_rsp+0xa6>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    1daa:	2301      	movs	r3, #1
    1dac:	e000      	b.n	1db0 <spi_cmd_rsp+0xa8>
    1dae:	2301      	movs	r3, #1
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
    1db0:	b258      	sxtb	r0, r3
}
    1db2:	b003      	add	sp, #12
    1db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00001ce9 	.word	0x00001ce9
    1dbc:	0000835c 	.word	0x0000835c
    1dc0:	00008fa0 	.word	0x00008fa0
    1dc4:	000070b5 	.word	0x000070b5
    1dc8:	00008afc 	.word	0x00008afc
    1dcc:	000071d5 	.word	0x000071d5
    1dd0:	000070e9 	.word	0x000070e9

00001dd4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd6:	465f      	mov	r7, fp
    1dd8:	4656      	mov	r6, sl
    1dda:	464d      	mov	r5, r9
    1ddc:	4644      	mov	r4, r8
    1dde:	b4f0      	push	{r4, r5, r6, r7}
    1de0:	b083      	sub	sp, #12
    1de2:	4682      	mov	sl, r0
    1de4:	1c0f      	adds	r7, r1, #0
    1de6:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1de8:	2200      	movs	r2, #0
    1dea:	4690      	mov	r8, r2
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1dec:	4e40      	ldr	r6, [pc, #256]	; (1ef0 <spi_data_read+0x11c>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    1dee:	2380      	movs	r3, #128	; 0x80
    1df0:	019b      	lsls	r3, r3, #6
    1df2:	429f      	cmp	r7, r3
    1df4:	d802      	bhi.n	1dfc <spi_data_read+0x28>
			nbytes = sz;
    1df6:	b2bb      	uxth	r3, r7
    1df8:	4699      	mov	r9, r3
    1dfa:	e002      	b.n	1e02 <spi_data_read+0x2e>
		else
			nbytes = DATA_PKT_SZ;
    1dfc:	2380      	movs	r3, #128	; 0x80
    1dfe:	019b      	lsls	r3, r3, #6
    1e00:	4699      	mov	r9, r3

		/**
			Data Respnose header
		**/
		retry = 10;
    1e02:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e04:	466d      	mov	r5, sp
    1e06:	3503      	adds	r5, #3
    1e08:	1c28      	adds	r0, r5, #0
    1e0a:	2101      	movs	r1, #1
    1e0c:	47b0      	blx	r6
    1e0e:	2800      	cmp	r0, #0
    1e10:	d00d      	beq.n	1e2e <spi_data_read+0x5a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1e12:	4838      	ldr	r0, [pc, #224]	; (1ef4 <spi_data_read+0x120>)
    1e14:	4938      	ldr	r1, [pc, #224]	; (1ef8 <spi_data_read+0x124>)
    1e16:	226c      	movs	r2, #108	; 0x6c
    1e18:	32ff      	adds	r2, #255	; 0xff
    1e1a:	4b38      	ldr	r3, [pc, #224]	; (1efc <spi_data_read+0x128>)
    1e1c:	4798      	blx	r3
    1e1e:	4838      	ldr	r0, [pc, #224]	; (1f00 <spi_data_read+0x12c>)
    1e20:	4b38      	ldr	r3, [pc, #224]	; (1f04 <spi_data_read+0x130>)
    1e22:	4798      	blx	r3
    1e24:	200d      	movs	r0, #13
    1e26:	4b38      	ldr	r3, [pc, #224]	; (1f08 <spi_data_read+0x134>)
    1e28:	4798      	blx	r3
				result = N_FAIL;
    1e2a:	2000      	movs	r0, #0
    1e2c:	e057      	b.n	1ede <spi_data_read+0x10a>
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    1e2e:	782b      	ldrb	r3, [r5, #0]
    1e30:	091b      	lsrs	r3, r3, #4
    1e32:	2b0f      	cmp	r3, #15
    1e34:	d005      	beq.n	1e42 <spi_data_read+0x6e>
				break;
		} while (retry--);
    1e36:	3c01      	subs	r4, #1
    1e38:	b2a4      	uxth	r4, r4
    1e3a:	b223      	sxth	r3, r4
    1e3c:	3301      	adds	r3, #1
    1e3e:	d1e3      	bne.n	1e08 <spi_data_read+0x34>
    1e40:	e002      	b.n	1e48 <spi_data_read+0x74>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    1e42:	b224      	sxth	r4, r4
    1e44:	2c00      	cmp	r4, #0
    1e46:	dc0e      	bgt.n	1e66 <spi_data_read+0x92>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1e48:	482a      	ldr	r0, [pc, #168]	; (1ef4 <spi_data_read+0x120>)
    1e4a:	492b      	ldr	r1, [pc, #172]	; (1ef8 <spi_data_read+0x124>)
    1e4c:	2278      	movs	r2, #120	; 0x78
    1e4e:	32ff      	adds	r2, #255	; 0xff
    1e50:	4c2a      	ldr	r4, [pc, #168]	; (1efc <spi_data_read+0x128>)
    1e52:	47a0      	blx	r4
    1e54:	466b      	mov	r3, sp
    1e56:	78d9      	ldrb	r1, [r3, #3]
    1e58:	482c      	ldr	r0, [pc, #176]	; (1f0c <spi_data_read+0x138>)
    1e5a:	47a0      	blx	r4
    1e5c:	200d      	movs	r0, #13
    1e5e:	4b2a      	ldr	r3, [pc, #168]	; (1f08 <spi_data_read+0x134>)
    1e60:	4798      	blx	r3
			result = N_FAIL;
    1e62:	2000      	movs	r0, #0
			break;
    1e64:	e03b      	b.n	1ede <spi_data_read+0x10a>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    1e66:	464a      	mov	r2, r9
    1e68:	b294      	uxth	r4, r2
    1e6a:	4643      	mov	r3, r8
    1e6c:	b218      	sxth	r0, r3
    1e6e:	4450      	add	r0, sl
    1e70:	1c21      	adds	r1, r4, #0
    1e72:	4a1f      	ldr	r2, [pc, #124]	; (1ef0 <spi_data_read+0x11c>)
    1e74:	4790      	blx	r2
    1e76:	2800      	cmp	r0, #0
    1e78:	d00d      	beq.n	1e96 <spi_data_read+0xc2>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    1e7a:	481e      	ldr	r0, [pc, #120]	; (1ef4 <spi_data_read+0x120>)
    1e7c:	491e      	ldr	r1, [pc, #120]	; (1ef8 <spi_data_read+0x124>)
    1e7e:	22c0      	movs	r2, #192	; 0xc0
    1e80:	0052      	lsls	r2, r2, #1
    1e82:	4b1e      	ldr	r3, [pc, #120]	; (1efc <spi_data_read+0x128>)
    1e84:	4798      	blx	r3
    1e86:	4822      	ldr	r0, [pc, #136]	; (1f10 <spi_data_read+0x13c>)
    1e88:	4b1e      	ldr	r3, [pc, #120]	; (1f04 <spi_data_read+0x130>)
    1e8a:	4798      	blx	r3
    1e8c:	200d      	movs	r0, #13
    1e8e:	4b1e      	ldr	r3, [pc, #120]	; (1f08 <spi_data_read+0x134>)
    1e90:	4798      	blx	r3
			result = N_FAIL;
    1e92:	2000      	movs	r0, #0
			break;
    1e94:	e023      	b.n	1ede <spi_data_read+0x10a>
		}
		if(!clockless)
    1e96:	465b      	mov	r3, fp
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d117      	bne.n	1ecc <spi_data_read+0xf8>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    1e9c:	4a1d      	ldr	r2, [pc, #116]	; (1f14 <spi_data_read+0x140>)
    1e9e:	7813      	ldrb	r3, [r2, #0]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d113      	bne.n	1ecc <spi_data_read+0xf8>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    1ea4:	a801      	add	r0, sp, #4
    1ea6:	2102      	movs	r1, #2
    1ea8:	4b11      	ldr	r3, [pc, #68]	; (1ef0 <spi_data_read+0x11c>)
    1eaa:	4798      	blx	r3
    1eac:	2800      	cmp	r0, #0
    1eae:	d00d      	beq.n	1ecc <spi_data_read+0xf8>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    1eb0:	4810      	ldr	r0, [pc, #64]	; (1ef4 <spi_data_read+0x120>)
    1eb2:	4911      	ldr	r1, [pc, #68]	; (1ef8 <spi_data_read+0x124>)
    1eb4:	228c      	movs	r2, #140	; 0x8c
    1eb6:	32ff      	adds	r2, #255	; 0xff
    1eb8:	4b10      	ldr	r3, [pc, #64]	; (1efc <spi_data_read+0x128>)
    1eba:	4798      	blx	r3
    1ebc:	4816      	ldr	r0, [pc, #88]	; (1f18 <spi_data_read+0x144>)
    1ebe:	4b11      	ldr	r3, [pc, #68]	; (1f04 <spi_data_read+0x130>)
    1ec0:	4798      	blx	r3
    1ec2:	200d      	movs	r0, #13
    1ec4:	4b10      	ldr	r3, [pc, #64]	; (1f08 <spi_data_read+0x134>)
    1ec6:	4798      	blx	r3
					result = N_FAIL;
    1ec8:	2000      	movs	r0, #0
					break;
    1eca:	e008      	b.n	1ede <spi_data_read+0x10a>
				}
			}
		}
		ix += nbytes;
    1ecc:	4642      	mov	r2, r8
    1ece:	18a3      	adds	r3, r4, r2
    1ed0:	b29b      	uxth	r3, r3
    1ed2:	4698      	mov	r8, r3
		sz -= nbytes;
    1ed4:	1b3f      	subs	r7, r7, r4
    1ed6:	b2bf      	uxth	r7, r7

	} while (sz);
    1ed8:	2f00      	cmp	r7, #0
    1eda:	d188      	bne.n	1dee <spi_data_read+0x1a>
    1edc:	2001      	movs	r0, #1

	return result;
    1ede:	b240      	sxtb	r0, r0
}
    1ee0:	b003      	add	sp, #12
    1ee2:	bc3c      	pop	{r2, r3, r4, r5}
    1ee4:	4690      	mov	r8, r2
    1ee6:	4699      	mov	r9, r3
    1ee8:	46a2      	mov	sl, r4
    1eea:	46ab      	mov	fp, r5
    1eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	00001ce9 	.word	0x00001ce9
    1ef4:	0000835c 	.word	0x0000835c
    1ef8:	000090c8 	.word	0x000090c8
    1efc:	000070b5 	.word	0x000070b5
    1f00:	00008b30 	.word	0x00008b30
    1f04:	000071d5 	.word	0x000071d5
    1f08:	000070e9 	.word	0x000070e9
    1f0c:	00008b64 	.word	0x00008b64
    1f10:	00008b94 	.word	0x00008b94
    1f14:	200000c4 	.word	0x200000c4
    1f18:	00008bc4 	.word	0x00008bc4

00001f1c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1f1c:	b500      	push	{lr}
    1f1e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1f20:	ab01      	add	r3, sp, #4
    1f22:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1f24:	2200      	movs	r2, #0
    1f26:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1f28:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1f2a:	2003      	movs	r0, #3
    1f2c:	1c19      	adds	r1, r3, #0
    1f2e:	4b02      	ldr	r3, [pc, #8]	; (1f38 <nmi_spi_write+0x1c>)
    1f30:	4798      	blx	r3
}
    1f32:	b005      	add	sp, #20
    1f34:	bd00      	pop	{pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	000003b5 	.word	0x000003b5

00001f3c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	b084      	sub	sp, #16
    1f40:	ac08      	add	r4, sp, #32
    1f42:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1f44:	ac01      	add	r4, sp, #4
    1f46:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1f48:	303f      	adds	r0, #63	; 0x3f
    1f4a:	b2c4      	uxtb	r4, r0
    1f4c:	2c0e      	cmp	r4, #14
    1f4e:	d900      	bls.n	1f52 <spi_cmd+0x16>
    1f50:	e09c      	b.n	208c <STACK_SIZE+0x8c>
    1f52:	00a0      	lsls	r0, r4, #2
    1f54:	4c52      	ldr	r4, [pc, #328]	; (20a0 <STACK_SIZE+0xa0>)
    1f56:	5820      	ldr	r0, [r4, r0]
    1f58:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1f5a:	ab01      	add	r3, sp, #4
    1f5c:	0c0a      	lsrs	r2, r1, #16
    1f5e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f60:	0a0a      	lsrs	r2, r1, #8
    1f62:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f64:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1f66:	2105      	movs	r1, #5
		break;
    1f68:	e093      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1f6a:	0a0b      	lsrs	r3, r1, #8
    1f6c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1f6e:	2d00      	cmp	r5, #0
    1f70:	d102      	bne.n	1f78 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1f72:	aa01      	add	r2, sp, #4
    1f74:	7053      	strb	r3, [r2, #1]
    1f76:	e004      	b.n	1f82 <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    1f78:	2280      	movs	r2, #128	; 0x80
    1f7a:	4252      	negs	r2, r2
    1f7c:	4313      	orrs	r3, r2
    1f7e:	aa01      	add	r2, sp, #4
    1f80:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1f82:	ab01      	add	r3, sp, #4
    1f84:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1f86:	2200      	movs	r2, #0
    1f88:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f8a:	2105      	movs	r1, #5
		break;
    1f8c:	e081      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1f8e:	ab01      	add	r3, sp, #4
    1f90:	2200      	movs	r2, #0
    1f92:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1f94:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f96:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f98:	2105      	movs	r1, #5
		break;
    1f9a:	e07a      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    1f9c:	ab01      	add	r3, sp, #4
    1f9e:	2200      	movs	r2, #0
    1fa0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1fa2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1fa4:	70da      	strb	r2, [r3, #3]
		len = 5;
    1fa6:	2105      	movs	r1, #5
		break;
    1fa8:	e073      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    1faa:	ab01      	add	r3, sp, #4
    1fac:	22ff      	movs	r2, #255	; 0xff
    1fae:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1fb0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1fb2:	70da      	strb	r2, [r3, #3]
		len = 5;
    1fb4:	2105      	movs	r1, #5
		break;
    1fb6:	e06c      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    1fb8:	aa01      	add	r2, sp, #4
    1fba:	0c08      	lsrs	r0, r1, #16
    1fbc:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1fbe:	0a08      	lsrs	r0, r1, #8
    1fc0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1fc2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1fc4:	0a19      	lsrs	r1, r3, #8
    1fc6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1fc8:	7153      	strb	r3, [r2, #5]
		len = 7;
    1fca:	2107      	movs	r1, #7
		break;
    1fcc:	e061      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    1fce:	aa01      	add	r2, sp, #4
    1fd0:	0c08      	lsrs	r0, r1, #16
    1fd2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1fd4:	0a08      	lsrs	r0, r1, #8
    1fd6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1fd8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1fda:	0c19      	lsrs	r1, r3, #16
    1fdc:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1fde:	0a19      	lsrs	r1, r3, #8
    1fe0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1fe2:	7193      	strb	r3, [r2, #6]
		len = 8;
    1fe4:	2108      	movs	r1, #8
		break;
    1fe6:	e054      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1fe8:	0a0b      	lsrs	r3, r1, #8
    1fea:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1fec:	2d00      	cmp	r5, #0
    1fee:	d102      	bne.n	1ff6 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1ff0:	a801      	add	r0, sp, #4
    1ff2:	7043      	strb	r3, [r0, #1]
    1ff4:	e004      	b.n	2000 <STACK_SIZE>
		if(clockless)  bc[1] |= (1 << 7);
    1ff6:	2080      	movs	r0, #128	; 0x80
    1ff8:	4240      	negs	r0, r0
    1ffa:	4303      	orrs	r3, r0
    1ffc:	a801      	add	r0, sp, #4
    1ffe:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2000:	ab01      	add	r3, sp, #4
    2002:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2004:	0e11      	lsrs	r1, r2, #24
    2006:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2008:	0c11      	lsrs	r1, r2, #16
    200a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    200c:	0a11      	lsrs	r1, r2, #8
    200e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2010:	719a      	strb	r2, [r3, #6]
		len = 8;
    2012:	2108      	movs	r1, #8
		break;
    2014:	e03d      	b.n	2092 <STACK_SIZE+0x92>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2016:	ab01      	add	r3, sp, #4
    2018:	0c08      	lsrs	r0, r1, #16
    201a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    201c:	0a08      	lsrs	r0, r1, #8
    201e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2020:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2022:	0e11      	lsrs	r1, r2, #24
    2024:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2026:	0c11      	lsrs	r1, r2, #16
    2028:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    202a:	0a11      	lsrs	r1, r2, #8
    202c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    202e:	71da      	strb	r2, [r3, #7]
		len = 9;
    2030:	2109      	movs	r1, #9
		break;
    2032:	e02e      	b.n	2092 <STACK_SIZE+0x92>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2034:	1e4e      	subs	r6, r1, #1
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    2036:	2e00      	cmp	r6, #0
    2038:	d00d      	beq.n	2056 <STACK_SIZE+0x56>
    203a:	ab01      	add	r3, sp, #4
    203c:	2203      	movs	r2, #3
    203e:	446a      	add	r2, sp
    2040:	1855      	adds	r5, r2, r1
    2042:	227f      	movs	r2, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    2044:	4c17      	ldr	r4, [pc, #92]	; (20a4 <STACK_SIZE+0xa4>)
    2046:	7818      	ldrb	r0, [r3, #0]
    2048:	0052      	lsls	r2, r2, #1
    204a:	4042      	eors	r2, r0
    204c:	5ca2      	ldrb	r2, [r4, r2]
    204e:	3301      	adds	r3, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    2050:	42ab      	cmp	r3, r5
    2052:	d1f8      	bne.n	2046 <STACK_SIZE+0x46>
    2054:	e000      	b.n	2058 <STACK_SIZE+0x58>
    2056:	227f      	movs	r2, #127	; 0x7f
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2058:	0052      	lsls	r2, r2, #1
    205a:	ab01      	add	r3, sp, #4
    205c:	559a      	strb	r2, [r3, r6]
    205e:	e001      	b.n	2064 <STACK_SIZE+0x64>
		else
			len-=1;
    2060:	3901      	subs	r1, #1
    2062:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2064:	a801      	add	r0, sp, #4
    2066:	4b10      	ldr	r3, [pc, #64]	; (20a8 <STACK_SIZE+0xa8>)
    2068:	4798      	blx	r3
    206a:	2301      	movs	r3, #1
    206c:	2800      	cmp	r0, #0
    206e:	d00e      	beq.n	208e <STACK_SIZE+0x8e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2070:	480e      	ldr	r0, [pc, #56]	; (20ac <STACK_SIZE+0xac>)
    2072:	490f      	ldr	r1, [pc, #60]	; (20b0 <STACK_SIZE+0xb0>)
    2074:	228e      	movs	r2, #142	; 0x8e
    2076:	0052      	lsls	r2, r2, #1
    2078:	4b0e      	ldr	r3, [pc, #56]	; (20b4 <STACK_SIZE+0xb4>)
    207a:	4798      	blx	r3
    207c:	480e      	ldr	r0, [pc, #56]	; (20b8 <STACK_SIZE+0xb8>)
    207e:	4b0f      	ldr	r3, [pc, #60]	; (20bc <STACK_SIZE+0xbc>)
    2080:	4798      	blx	r3
    2082:	200d      	movs	r0, #13
    2084:	4b0e      	ldr	r3, [pc, #56]	; (20c0 <STACK_SIZE+0xc0>)
    2086:	4798      	blx	r3
			result = N_FAIL;
    2088:	2300      	movs	r3, #0
    208a:	e000      	b.n	208e <STACK_SIZE+0x8e>
		bc[6] = (uint8)(u32data >> 8);
		bc[7] = (uint8)(u32data);
		len = 9;
		break;
	default:
		result = N_FAIL;
    208c:	2300      	movs	r3, #0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    208e:	b258      	sxtb	r0, r3
    2090:	e004      	b.n	209c <STACK_SIZE+0x9c>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2092:	4b0c      	ldr	r3, [pc, #48]	; (20c4 <STACK_SIZE+0xc4>)
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d0cc      	beq.n	2034 <STACK_SIZE+0x34>
    209a:	e7e1      	b.n	2060 <STACK_SIZE+0x60>
			result = N_FAIL;
		}
	}

	return result;
}
    209c:	b004      	add	sp, #16
    209e:	bd70      	pop	{r4, r5, r6, pc}
    20a0:	00008a7c 	.word	0x00008a7c
    20a4:	00008fc8 	.word	0x00008fc8
    20a8:	00001f1d 	.word	0x00001f1d
    20ac:	0000835c 	.word	0x0000835c
    20b0:	00008af4 	.word	0x00008af4
    20b4:	000070b5 	.word	0x000070b5
    20b8:	00008bf8 	.word	0x00008bf8
    20bc:	000071d5 	.word	0x000071d5
    20c0:	000070e9 	.word	0x000070e9
    20c4:	200000c4 	.word	0x200000c4

000020c8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	1c04      	adds	r4, r0, #0
    20ce:	1c0a      	adds	r2, r1, #0
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    20d0:	2830      	cmp	r0, #48	; 0x30
    20d2:	d802      	bhi.n	20da <spi_write_reg+0x12>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    20d4:	2301      	movs	r3, #1
	if (addr <= 0x30)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    20d6:	25c3      	movs	r5, #195	; 0xc3
    20d8:	e001      	b.n	20de <spi_write_reg+0x16>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    20da:	2300      	movs	r3, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    20dc:	25c9      	movs	r5, #201	; 0xc9
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    20de:	9300      	str	r3, [sp, #0]
    20e0:	1c28      	adds	r0, r5, #0
    20e2:	1c21      	adds	r1, r4, #0
    20e4:	2304      	movs	r3, #4
    20e6:	4e16      	ldr	r6, [pc, #88]	; (2140 <spi_write_reg+0x78>)
    20e8:	47b0      	blx	r6
	if (result != N_OK) {
    20ea:	2801      	cmp	r0, #1
    20ec:	d00c      	beq.n	2108 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    20ee:	4815      	ldr	r0, [pc, #84]	; (2144 <spi_write_reg+0x7c>)
    20f0:	4915      	ldr	r1, [pc, #84]	; (2148 <spi_write_reg+0x80>)
    20f2:	4a16      	ldr	r2, [pc, #88]	; (214c <spi_write_reg+0x84>)
    20f4:	4d16      	ldr	r5, [pc, #88]	; (2150 <spi_write_reg+0x88>)
    20f6:	47a8      	blx	r5
    20f8:	4816      	ldr	r0, [pc, #88]	; (2154 <spi_write_reg+0x8c>)
    20fa:	1c21      	adds	r1, r4, #0
    20fc:	47a8      	blx	r5
    20fe:	200d      	movs	r0, #13
    2100:	4b15      	ldr	r3, [pc, #84]	; (2158 <spi_write_reg+0x90>)
    2102:	4798      	blx	r3
		return N_FAIL;
    2104:	2300      	movs	r3, #0
    2106:	e018      	b.n	213a <spi_write_reg+0x72>
	}

	result = spi_cmd_rsp(cmd);
    2108:	1c28      	adds	r0, r5, #0
    210a:	4b14      	ldr	r3, [pc, #80]	; (215c <spi_write_reg+0x94>)
    210c:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    210e:	2301      	movs	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    2110:	2801      	cmp	r0, #1
    2112:	d012      	beq.n	213a <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2114:	480b      	ldr	r0, [pc, #44]	; (2144 <spi_write_reg+0x7c>)
    2116:	490c      	ldr	r1, [pc, #48]	; (2148 <spi_write_reg+0x80>)
    2118:	4a11      	ldr	r2, [pc, #68]	; (2160 <spi_write_reg+0x98>)
    211a:	4d0d      	ldr	r5, [pc, #52]	; (2150 <spi_write_reg+0x88>)
    211c:	47a8      	blx	r5
    211e:	4811      	ldr	r0, [pc, #68]	; (2164 <spi_write_reg+0x9c>)
    2120:	1c21      	adds	r1, r4, #0
    2122:	47a8      	blx	r5
    2124:	200d      	movs	r0, #13
    2126:	4b0c      	ldr	r3, [pc, #48]	; (2158 <spi_write_reg+0x90>)
    2128:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    212a:	2300      	movs	r3, #0
    212c:	9300      	str	r3, [sp, #0]
    212e:	20cf      	movs	r0, #207	; 0xcf
    2130:	2100      	movs	r1, #0
    2132:	2200      	movs	r2, #0
    2134:	4c02      	ldr	r4, [pc, #8]	; (2140 <spi_write_reg+0x78>)
    2136:	47a0      	blx	r4
		return N_FAIL;
    2138:	2300      	movs	r3, #0
    213a:	b258      	sxtb	r0, r3
	}

	return result;

#endif
}
    213c:	b002      	add	sp, #8
    213e:	bd70      	pop	{r4, r5, r6, pc}
    2140:	00001f3d 	.word	0x00001f3d
    2144:	0000835c 	.word	0x0000835c
    2148:	00008ad4 	.word	0x00008ad4
    214c:	000001ff 	.word	0x000001ff
    2150:	000070b5 	.word	0x000070b5
    2154:	00008c24 	.word	0x00008c24
    2158:	000070e9 	.word	0x000070e9
    215c:	00001d09 	.word	0x00001d09
    2160:	00000205 	.word	0x00000205
    2164:	00008c50 	.word	0x00008c50

00002168 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2168:	b5f0      	push	{r4, r5, r6, r7, lr}
    216a:	4647      	mov	r7, r8
    216c:	b480      	push	{r7}
    216e:	b084      	sub	sp, #16
    2170:	1c04      	adds	r4, r0, #0
    2172:	4688      	mov	r8, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    2174:	28ff      	cmp	r0, #255	; 0xff
    2176:	d802      	bhi.n	217e <spi_read_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    2178:	2601      	movs	r6, #1
	if (addr <= 0xff)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    217a:	25c4      	movs	r5, #196	; 0xc4
    217c:	e001      	b.n	2182 <spi_read_reg+0x1a>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    217e:	2600      	movs	r6, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    2180:	25ca      	movs	r5, #202	; 0xca
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2182:	9600      	str	r6, [sp, #0]
    2184:	1c28      	adds	r0, r5, #0
    2186:	1c21      	adds	r1, r4, #0
    2188:	2200      	movs	r2, #0
    218a:	2304      	movs	r3, #4
    218c:	4f2c      	ldr	r7, [pc, #176]	; (2240 <spi_read_reg+0xd8>)
    218e:	47b8      	blx	r7
	if (result != N_OK) {
    2190:	2801      	cmp	r0, #1
    2192:	d00c      	beq.n	21ae <spi_read_reg+0x46>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2194:	482b      	ldr	r0, [pc, #172]	; (2244 <spi_read_reg+0xdc>)
    2196:	492c      	ldr	r1, [pc, #176]	; (2248 <spi_read_reg+0xe0>)
    2198:	4a2c      	ldr	r2, [pc, #176]	; (224c <spi_read_reg+0xe4>)
    219a:	4d2d      	ldr	r5, [pc, #180]	; (2250 <spi_read_reg+0xe8>)
    219c:	47a8      	blx	r5
    219e:	482d      	ldr	r0, [pc, #180]	; (2254 <spi_read_reg+0xec>)
    21a0:	1c21      	adds	r1, r4, #0
    21a2:	47a8      	blx	r5
    21a4:	200d      	movs	r0, #13
    21a6:	4b2c      	ldr	r3, [pc, #176]	; (2258 <spi_read_reg+0xf0>)
    21a8:	4798      	blx	r3
		return N_FAIL;
    21aa:	2000      	movs	r0, #0
    21ac:	e042      	b.n	2234 <spi_read_reg+0xcc>
	}

	result = spi_cmd_rsp(cmd);
    21ae:	1c28      	adds	r0, r5, #0
    21b0:	4b2a      	ldr	r3, [pc, #168]	; (225c <spi_read_reg+0xf4>)
    21b2:	4798      	blx	r3
	if (result != N_OK) {
    21b4:	2801      	cmp	r0, #1
    21b6:	d013      	beq.n	21e0 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    21b8:	4822      	ldr	r0, [pc, #136]	; (2244 <spi_read_reg+0xdc>)
    21ba:	4923      	ldr	r1, [pc, #140]	; (2248 <spi_read_reg+0xe0>)
    21bc:	4a28      	ldr	r2, [pc, #160]	; (2260 <spi_read_reg+0xf8>)
    21be:	4d24      	ldr	r5, [pc, #144]	; (2250 <spi_read_reg+0xe8>)
    21c0:	47a8      	blx	r5
    21c2:	4828      	ldr	r0, [pc, #160]	; (2264 <spi_read_reg+0xfc>)
    21c4:	1c21      	adds	r1, r4, #0
    21c6:	47a8      	blx	r5
    21c8:	200d      	movs	r0, #13
    21ca:	4b23      	ldr	r3, [pc, #140]	; (2258 <spi_read_reg+0xf0>)
    21cc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    21ce:	2300      	movs	r3, #0
    21d0:	9300      	str	r3, [sp, #0]
    21d2:	20cf      	movs	r0, #207	; 0xcf
    21d4:	2100      	movs	r1, #0
    21d6:	2200      	movs	r2, #0
    21d8:	4c19      	ldr	r4, [pc, #100]	; (2240 <spi_read_reg+0xd8>)
    21da:	47a0      	blx	r4
		return N_FAIL;
    21dc:	2000      	movs	r0, #0
    21de:	e029      	b.n	2234 <spi_read_reg+0xcc>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    21e0:	a803      	add	r0, sp, #12
    21e2:	2104      	movs	r1, #4
    21e4:	1c32      	adds	r2, r6, #0
    21e6:	4b20      	ldr	r3, [pc, #128]	; (2268 <spi_read_reg+0x100>)
    21e8:	4798      	blx	r3
	if (result != N_OK) {
    21ea:	2801      	cmp	r0, #1
    21ec:	d013      	beq.n	2216 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    21ee:	4815      	ldr	r0, [pc, #84]	; (2244 <spi_read_reg+0xdc>)
    21f0:	4915      	ldr	r1, [pc, #84]	; (2248 <spi_read_reg+0xe0>)
    21f2:	4a1e      	ldr	r2, [pc, #120]	; (226c <spi_read_reg+0x104>)
    21f4:	4b16      	ldr	r3, [pc, #88]	; (2250 <spi_read_reg+0xe8>)
    21f6:	4798      	blx	r3
    21f8:	481d      	ldr	r0, [pc, #116]	; (2270 <spi_read_reg+0x108>)
    21fa:	4b1e      	ldr	r3, [pc, #120]	; (2274 <spi_read_reg+0x10c>)
    21fc:	4798      	blx	r3
    21fe:	200d      	movs	r0, #13
    2200:	4b15      	ldr	r3, [pc, #84]	; (2258 <spi_read_reg+0xf0>)
    2202:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2204:	2300      	movs	r3, #0
    2206:	9300      	str	r3, [sp, #0]
    2208:	20cf      	movs	r0, #207	; 0xcf
    220a:	2100      	movs	r1, #0
    220c:	2200      	movs	r2, #0
    220e:	4c0c      	ldr	r4, [pc, #48]	; (2240 <spi_read_reg+0xd8>)
    2210:	47a0      	blx	r4
		return N_FAIL;
    2212:	2000      	movs	r0, #0
    2214:	e00e      	b.n	2234 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2216:	ab03      	add	r3, sp, #12
    2218:	7859      	ldrb	r1, [r3, #1]
    221a:	0209      	lsls	r1, r1, #8
		((uint32)tmp[2] << 16) |
    221c:	789a      	ldrb	r2, [r3, #2]
    221e:	0412      	lsls	r2, r2, #16
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2220:	4311      	orrs	r1, r2
    2222:	781a      	ldrb	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
    2224:	4311      	orrs	r1, r2
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    2226:	78da      	ldrb	r2, [r3, #3]
    2228:	0612      	lsls	r2, r2, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    222a:	1c0b      	adds	r3, r1, #0
    222c:	4313      	orrs	r3, r2
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    222e:	4642      	mov	r2, r8
    2230:	6013      	str	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    2232:	2001      	movs	r0, #1
    2234:	b240      	sxtb	r0, r0
}
    2236:	b004      	add	sp, #16
    2238:	bc04      	pop	{r2}
    223a:	4690      	mov	r8, r2
    223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	00001f3d 	.word	0x00001f3d
    2244:	0000835c 	.word	0x0000835c
    2248:	00008fac 	.word	0x00008fac
    224c:	00000259 	.word	0x00000259
    2250:	000070b5 	.word	0x000070b5
    2254:	00008c88 	.word	0x00008c88
    2258:	000070e9 	.word	0x000070e9
    225c:	00001d09 	.word	0x00001d09
    2260:	0000025f 	.word	0x0000025f
    2264:	00008cb4 	.word	0x00008cb4
    2268:	00001dd5 	.word	0x00001dd5
    226c:	00000267 	.word	0x00000267
    2270:	00008ce8 	.word	0x00008ce8
    2274:	000071d5 	.word	0x000071d5

00002278 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2278:	2200      	movs	r2, #0
    227a:	4b02      	ldr	r3, [pc, #8]	; (2284 <nm_spi_deinit+0xc>)
    227c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    227e:	2000      	movs	r0, #0
    2280:	4770      	bx	lr
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	200000c4 	.word	0x200000c4

00002288 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2288:	b500      	push	{lr}
    228a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    228c:	a901      	add	r1, sp, #4
    228e:	4b02      	ldr	r3, [pc, #8]	; (2298 <nm_spi_read_reg+0x10>)
    2290:	4798      	blx	r3

	return u32Val;
}
    2292:	9801      	ldr	r0, [sp, #4]
    2294:	b003      	add	sp, #12
    2296:	bd00      	pop	{pc}
    2298:	00002169 	.word	0x00002169

0000229c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    229c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    229e:	4b04      	ldr	r3, [pc, #16]	; (22b0 <nm_spi_read_reg_with_ret+0x14>)
    22a0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    22a2:	2801      	cmp	r0, #1
    22a4:	d101      	bne.n	22aa <nm_spi_read_reg_with_ret+0xe>
    22a6:	2000      	movs	r0, #0
    22a8:	e000      	b.n	22ac <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    22aa:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    22ac:	b240      	sxtb	r0, r0
}
    22ae:	bd08      	pop	{r3, pc}
    22b0:	00002169 	.word	0x00002169

000022b4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    22b4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    22b6:	4b04      	ldr	r3, [pc, #16]	; (22c8 <nm_spi_write_reg+0x14>)
    22b8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    22ba:	2801      	cmp	r0, #1
    22bc:	d101      	bne.n	22c2 <nm_spi_write_reg+0xe>
    22be:	2000      	movs	r0, #0
    22c0:	e000      	b.n	22c4 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    22c2:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    22c4:	b240      	sxtb	r0, r0
}
    22c6:	bd08      	pop	{r3, pc}
    22c8:	000020c9 	.word	0x000020c9

000022cc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    22cc:	b510      	push	{r4, lr}
    22ce:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    22d0:	2300      	movs	r3, #0
    22d2:	9300      	str	r3, [sp, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    22d4:	4a35      	ldr	r2, [pc, #212]	; (23ac <nm_spi_init+0xe0>)
    22d6:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    22d8:	4835      	ldr	r0, [pc, #212]	; (23b0 <nm_spi_init+0xe4>)
    22da:	4669      	mov	r1, sp
    22dc:	4b35      	ldr	r3, [pc, #212]	; (23b4 <nm_spi_init+0xe8>)
    22de:	4798      	blx	r3
    22e0:	2800      	cmp	r0, #0
    22e2:	d120      	bne.n	2326 <nm_spi_init+0x5a>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    22e4:	2201      	movs	r2, #1
    22e6:	4b31      	ldr	r3, [pc, #196]	; (23ac <nm_spi_init+0xe0>)
    22e8:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    22ea:	4833      	ldr	r0, [pc, #204]	; (23b8 <nm_spi_init+0xec>)
    22ec:	4933      	ldr	r1, [pc, #204]	; (23bc <nm_spi_init+0xf0>)
    22ee:	4a34      	ldr	r2, [pc, #208]	; (23c0 <nm_spi_init+0xf4>)
    22f0:	4b34      	ldr	r3, [pc, #208]	; (23c4 <nm_spi_init+0xf8>)
    22f2:	4798      	blx	r3
    22f4:	4834      	ldr	r0, [pc, #208]	; (23c8 <nm_spi_init+0xfc>)
    22f6:	4b35      	ldr	r3, [pc, #212]	; (23cc <nm_spi_init+0x100>)
    22f8:	4798      	blx	r3
    22fa:	200d      	movs	r0, #13
    22fc:	4b34      	ldr	r3, [pc, #208]	; (23d0 <nm_spi_init+0x104>)
    22fe:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2300:	482b      	ldr	r0, [pc, #172]	; (23b0 <nm_spi_init+0xe4>)
    2302:	4669      	mov	r1, sp
    2304:	4b2b      	ldr	r3, [pc, #172]	; (23b4 <nm_spi_init+0xe8>)
    2306:	4798      	blx	r3
    2308:	1e04      	subs	r4, r0, #0
    230a:	d10c      	bne.n	2326 <nm_spi_init+0x5a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    230c:	482a      	ldr	r0, [pc, #168]	; (23b8 <nm_spi_init+0xec>)
    230e:	492b      	ldr	r1, [pc, #172]	; (23bc <nm_spi_init+0xf0>)
    2310:	22b7      	movs	r2, #183	; 0xb7
    2312:	0092      	lsls	r2, r2, #2
    2314:	4b2b      	ldr	r3, [pc, #172]	; (23c4 <nm_spi_init+0xf8>)
    2316:	4798      	blx	r3
    2318:	482e      	ldr	r0, [pc, #184]	; (23d4 <nm_spi_init+0x108>)
    231a:	4b2c      	ldr	r3, [pc, #176]	; (23cc <nm_spi_init+0x100>)
    231c:	4798      	blx	r3
    231e:	200d      	movs	r0, #13
    2320:	4b2b      	ldr	r3, [pc, #172]	; (23d0 <nm_spi_init+0x104>)
    2322:	4798      	blx	r3
			return 0;
    2324:	e03f      	b.n	23a6 <nm_spi_init+0xda>
		}
	}
	if(gu8Crc_off == 0)
    2326:	4b21      	ldr	r3, [pc, #132]	; (23ac <nm_spi_init+0xe0>)
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d119      	bne.n	2362 <nm_spi_init+0x96>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
    232e:	237c      	movs	r3, #124	; 0x7c
    2330:	9900      	ldr	r1, [sp, #0]
    2332:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2334:	2350      	movs	r3, #80	; 0x50
    2336:	4319      	orrs	r1, r3
    2338:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    233a:	481d      	ldr	r0, [pc, #116]	; (23b0 <nm_spi_init+0xe4>)
    233c:	4b26      	ldr	r3, [pc, #152]	; (23d8 <nm_spi_init+0x10c>)
    233e:	4798      	blx	r3
    2340:	1e04      	subs	r4, r0, #0
    2342:	d10b      	bne.n	235c <nm_spi_init+0x90>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2344:	481c      	ldr	r0, [pc, #112]	; (23b8 <nm_spi_init+0xec>)
    2346:	491d      	ldr	r1, [pc, #116]	; (23bc <nm_spi_init+0xf0>)
    2348:	4a24      	ldr	r2, [pc, #144]	; (23dc <nm_spi_init+0x110>)
    234a:	4b1e      	ldr	r3, [pc, #120]	; (23c4 <nm_spi_init+0xf8>)
    234c:	4798      	blx	r3
    234e:	4824      	ldr	r0, [pc, #144]	; (23e0 <nm_spi_init+0x114>)
    2350:	4b1e      	ldr	r3, [pc, #120]	; (23cc <nm_spi_init+0x100>)
    2352:	4798      	blx	r3
    2354:	200d      	movs	r0, #13
    2356:	4b1e      	ldr	r3, [pc, #120]	; (23d0 <nm_spi_init+0x104>)
    2358:	4798      	blx	r3
			return 0;
    235a:	e024      	b.n	23a6 <nm_spi_init+0xda>
		}
		gu8Crc_off = 1;
    235c:	2201      	movs	r2, #1
    235e:	4b13      	ldr	r3, [pc, #76]	; (23ac <nm_spi_init+0xe0>)
    2360:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2362:	2080      	movs	r0, #128	; 0x80
    2364:	0140      	lsls	r0, r0, #5
    2366:	a901      	add	r1, sp, #4
    2368:	4b12      	ldr	r3, [pc, #72]	; (23b4 <nm_spi_init+0xe8>)
    236a:	4798      	blx	r3
    236c:	2800      	cmp	r0, #0
    236e:	d10d      	bne.n	238c <nm_spi_init+0xc0>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2370:	4811      	ldr	r0, [pc, #68]	; (23b8 <nm_spi_init+0xec>)
    2372:	4912      	ldr	r1, [pc, #72]	; (23bc <nm_spi_init+0xf0>)
    2374:	22bc      	movs	r2, #188	; 0xbc
    2376:	0092      	lsls	r2, r2, #2
    2378:	4b12      	ldr	r3, [pc, #72]	; (23c4 <nm_spi_init+0xf8>)
    237a:	4798      	blx	r3
    237c:	4819      	ldr	r0, [pc, #100]	; (23e4 <nm_spi_init+0x118>)
    237e:	4b13      	ldr	r3, [pc, #76]	; (23cc <nm_spi_init+0x100>)
    2380:	4798      	blx	r3
    2382:	200d      	movs	r0, #13
    2384:	4b12      	ldr	r3, [pc, #72]	; (23d0 <nm_spi_init+0x104>)
    2386:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2388:	24fa      	movs	r4, #250	; 0xfa
    238a:	e00c      	b.n	23a6 <nm_spi_init+0xda>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    238c:	4c08      	ldr	r4, [pc, #32]	; (23b0 <nm_spi_init+0xe4>)
    238e:	1c20      	adds	r0, r4, #0
    2390:	4b15      	ldr	r3, [pc, #84]	; (23e8 <nm_spi_init+0x11c>)
    2392:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    2394:	2370      	movs	r3, #112	; 0x70
    2396:	1c01      	adds	r1, r0, #0
    2398:	4399      	bics	r1, r3
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    239a:	2350      	movs	r3, #80	; 0x50
    239c:	4319      	orrs	r1, r3

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    239e:	1c20      	adds	r0, r4, #0
    23a0:	4b12      	ldr	r3, [pc, #72]	; (23ec <nm_spi_init+0x120>)
    23a2:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    23a4:	2400      	movs	r4, #0
    23a6:	b260      	sxtb	r0, r4
}
    23a8:	b002      	add	sp, #8
    23aa:	bd10      	pop	{r4, pc}
    23ac:	200000c4 	.word	0x200000c4
    23b0:	0000e824 	.word	0x0000e824
    23b4:	00002169 	.word	0x00002169
    23b8:	0000835c 	.word	0x0000835c
    23bc:	00008ac8 	.word	0x00008ac8
    23c0:	000002d9 	.word	0x000002d9
    23c4:	000070b5 	.word	0x000070b5
    23c8:	00008d08 	.word	0x00008d08
    23cc:	000071d5 	.word	0x000071d5
    23d0:	000070e9 	.word	0x000070e9
    23d4:	00008d58 	.word	0x00008d58
    23d8:	000020c9 	.word	0x000020c9
    23dc:	000002e6 	.word	0x000002e6
    23e0:	00008d84 	.word	0x00008d84
    23e4:	00008db8 	.word	0x00008db8
    23e8:	00002289 	.word	0x00002289
    23ec:	000022b5 	.word	0x000022b5

000023f0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f2:	b083      	sub	sp, #12
    23f4:	1c04      	adds	r4, r0, #0
    23f6:	1c0f      	adds	r7, r1, #0
    23f8:	1c15      	adds	r5, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    23fa:	2300      	movs	r3, #0
    23fc:	9300      	str	r3, [sp, #0]
    23fe:	20c8      	movs	r0, #200	; 0xc8
    2400:	1c21      	adds	r1, r4, #0
    2402:	2200      	movs	r2, #0
    2404:	1c2b      	adds	r3, r5, #0
    2406:	4e25      	ldr	r6, [pc, #148]	; (249c <nm_spi_read_block+0xac>)
    2408:	47b0      	blx	r6
	if (result != N_OK) {
    240a:	2801      	cmp	r0, #1
    240c:	d00c      	beq.n	2428 <nm_spi_read_block+0x38>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    240e:	4824      	ldr	r0, [pc, #144]	; (24a0 <nm_spi_read_block+0xb0>)
    2410:	4924      	ldr	r1, [pc, #144]	; (24a4 <nm_spi_read_block+0xb4>)
    2412:	22a2      	movs	r2, #162	; 0xa2
    2414:	0092      	lsls	r2, r2, #2
    2416:	4d24      	ldr	r5, [pc, #144]	; (24a8 <nm_spi_read_block+0xb8>)
    2418:	47a8      	blx	r5
    241a:	4824      	ldr	r0, [pc, #144]	; (24ac <nm_spi_read_block+0xbc>)
    241c:	1c21      	adds	r1, r4, #0
    241e:	47a8      	blx	r5
    2420:	200d      	movs	r0, #13
    2422:	4b23      	ldr	r3, [pc, #140]	; (24b0 <nm_spi_read_block+0xc0>)
    2424:	4798      	blx	r3
    2426:	e035      	b.n	2494 <nm_spi_read_block+0xa4>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    2428:	20c8      	movs	r0, #200	; 0xc8
    242a:	4b22      	ldr	r3, [pc, #136]	; (24b4 <nm_spi_read_block+0xc4>)
    242c:	4798      	blx	r3
	if (result != N_OK) {
    242e:	2801      	cmp	r0, #1
    2430:	d012      	beq.n	2458 <nm_spi_read_block+0x68>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    2432:	481b      	ldr	r0, [pc, #108]	; (24a0 <nm_spi_read_block+0xb0>)
    2434:	491b      	ldr	r1, [pc, #108]	; (24a4 <nm_spi_read_block+0xb4>)
    2436:	4a20      	ldr	r2, [pc, #128]	; (24b8 <nm_spi_read_block+0xc8>)
    2438:	4d1b      	ldr	r5, [pc, #108]	; (24a8 <nm_spi_read_block+0xb8>)
    243a:	47a8      	blx	r5
    243c:	481f      	ldr	r0, [pc, #124]	; (24bc <nm_spi_read_block+0xcc>)
    243e:	1c21      	adds	r1, r4, #0
    2440:	47a8      	blx	r5
    2442:	200d      	movs	r0, #13
    2444:	4b1a      	ldr	r3, [pc, #104]	; (24b0 <nm_spi_read_block+0xc0>)
    2446:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2448:	2300      	movs	r3, #0
    244a:	9300      	str	r3, [sp, #0]
    244c:	20cf      	movs	r0, #207	; 0xcf
    244e:	2100      	movs	r1, #0
    2450:	2200      	movs	r2, #0
    2452:	4c12      	ldr	r4, [pc, #72]	; (249c <nm_spi_read_block+0xac>)
    2454:	47a0      	blx	r4
    2456:	e01d      	b.n	2494 <nm_spi_read_block+0xa4>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2458:	1c38      	adds	r0, r7, #0
    245a:	1c29      	adds	r1, r5, #0
    245c:	2200      	movs	r2, #0
    245e:	4b18      	ldr	r3, [pc, #96]	; (24c0 <nm_spi_read_block+0xd0>)
    2460:	4798      	blx	r3
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2462:	2300      	movs	r3, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    2464:	2801      	cmp	r0, #1
    2466:	d013      	beq.n	2490 <nm_spi_read_block+0xa0>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2468:	480d      	ldr	r0, [pc, #52]	; (24a0 <nm_spi_read_block+0xb0>)
    246a:	490e      	ldr	r1, [pc, #56]	; (24a4 <nm_spi_read_block+0xb4>)
    246c:	22a6      	movs	r2, #166	; 0xa6
    246e:	0092      	lsls	r2, r2, #2
    2470:	4b0d      	ldr	r3, [pc, #52]	; (24a8 <nm_spi_read_block+0xb8>)
    2472:	4798      	blx	r3
    2474:	4813      	ldr	r0, [pc, #76]	; (24c4 <nm_spi_read_block+0xd4>)
    2476:	4b14      	ldr	r3, [pc, #80]	; (24c8 <nm_spi_read_block+0xd8>)
    2478:	4798      	blx	r3
    247a:	200d      	movs	r0, #13
    247c:	4b0c      	ldr	r3, [pc, #48]	; (24b0 <nm_spi_read_block+0xc0>)
    247e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2480:	2300      	movs	r3, #0
    2482:	9300      	str	r3, [sp, #0]
    2484:	20cf      	movs	r0, #207	; 0xcf
    2486:	2100      	movs	r1, #0
    2488:	2200      	movs	r2, #0
    248a:	4c04      	ldr	r4, [pc, #16]	; (249c <nm_spi_read_block+0xac>)
    248c:	47a0      	blx	r4
    248e:	e001      	b.n	2494 <nm_spi_read_block+0xa4>
	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    2490:	b258      	sxtb	r0, r3
    2492:	e001      	b.n	2498 <nm_spi_read_block+0xa8>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    2494:	23fa      	movs	r3, #250	; 0xfa
    2496:	e7fb      	b.n	2490 <nm_spi_read_block+0xa0>

	return s8Ret;
}
    2498:	b003      	add	sp, #12
    249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    249c:	00001f3d 	.word	0x00001f3d
    24a0:	0000835c 	.word	0x0000835c
    24a4:	00008fbc 	.word	0x00008fbc
    24a8:	000070b5 	.word	0x000070b5
    24ac:	00008ddc 	.word	0x00008ddc
    24b0:	000070e9 	.word	0x000070e9
    24b4:	00001d09 	.word	0x00001d09
    24b8:	0000028e 	.word	0x0000028e
    24bc:	00008e0c 	.word	0x00008e0c
    24c0:	00001dd5 	.word	0x00001dd5
    24c4:	00008e44 	.word	0x00008e44
    24c8:	000071d5 	.word	0x000071d5

000024cc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    24cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ce:	4657      	mov	r7, sl
    24d0:	464e      	mov	r6, r9
    24d2:	4645      	mov	r5, r8
    24d4:	b4e0      	push	{r5, r6, r7}
    24d6:	b084      	sub	sp, #16
    24d8:	1c05      	adds	r5, r0, #0
    24da:	4688      	mov	r8, r1
    24dc:	1c14      	adds	r4, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    24de:	2300      	movs	r3, #0
    24e0:	9300      	str	r3, [sp, #0]
    24e2:	20c7      	movs	r0, #199	; 0xc7
    24e4:	1c29      	adds	r1, r5, #0
    24e6:	2200      	movs	r2, #0
    24e8:	1c23      	adds	r3, r4, #0
    24ea:	4e55      	ldr	r6, [pc, #340]	; (2640 <nm_spi_write_block+0x174>)
    24ec:	47b0      	blx	r6
	if (result != N_OK) {
    24ee:	2801      	cmp	r0, #1
    24f0:	d00b      	beq.n	250a <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    24f2:	4854      	ldr	r0, [pc, #336]	; (2644 <nm_spi_write_block+0x178>)
    24f4:	4954      	ldr	r1, [pc, #336]	; (2648 <nm_spi_write_block+0x17c>)
    24f6:	4a55      	ldr	r2, [pc, #340]	; (264c <nm_spi_write_block+0x180>)
    24f8:	4c55      	ldr	r4, [pc, #340]	; (2650 <nm_spi_write_block+0x184>)
    24fa:	47a0      	blx	r4
    24fc:	4855      	ldr	r0, [pc, #340]	; (2654 <nm_spi_write_block+0x188>)
    24fe:	1c29      	adds	r1, r5, #0
    2500:	47a0      	blx	r4
    2502:	200d      	movs	r0, #13
    2504:	4b54      	ldr	r3, [pc, #336]	; (2658 <nm_spi_write_block+0x18c>)
    2506:	4798      	blx	r3
    2508:	e08f      	b.n	262a <nm_spi_write_block+0x15e>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    250a:	20c7      	movs	r0, #199	; 0xc7
    250c:	4b53      	ldr	r3, [pc, #332]	; (265c <nm_spi_write_block+0x190>)
    250e:	4798      	blx	r3
	if (result != N_OK) {
    2510:	2801      	cmp	r0, #1
    2512:	d012      	beq.n	253a <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2514:	484b      	ldr	r0, [pc, #300]	; (2644 <nm_spi_write_block+0x178>)
    2516:	494c      	ldr	r1, [pc, #304]	; (2648 <nm_spi_write_block+0x17c>)
    2518:	4a51      	ldr	r2, [pc, #324]	; (2660 <nm_spi_write_block+0x194>)
    251a:	4c4d      	ldr	r4, [pc, #308]	; (2650 <nm_spi_write_block+0x184>)
    251c:	47a0      	blx	r4
    251e:	4851      	ldr	r0, [pc, #324]	; (2664 <nm_spi_write_block+0x198>)
    2520:	1c29      	adds	r1, r5, #0
    2522:	47a0      	blx	r4
    2524:	200d      	movs	r0, #13
    2526:	4b4c      	ldr	r3, [pc, #304]	; (2658 <nm_spi_write_block+0x18c>)
    2528:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    252a:	2300      	movs	r3, #0
    252c:	9300      	str	r3, [sp, #0]
    252e:	20cf      	movs	r0, #207	; 0xcf
    2530:	2100      	movs	r1, #0
    2532:	2200      	movs	r2, #0
    2534:	4c42      	ldr	r4, [pc, #264]	; (2640 <nm_spi_write_block+0x174>)
    2536:	47a0      	blx	r4
    2538:	e077      	b.n	262a <nm_spi_write_block+0x15e>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    253a:	2200      	movs	r2, #0
    253c:	ab03      	add	r3, sp, #12
    253e:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2540:	2500      	movs	r5, #0
    2542:	2780      	movs	r7, #128	; 0x80
    2544:	01bf      	lsls	r7, r7, #6
    2546:	46ba      	mov	sl, r7
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2548:	4b47      	ldr	r3, [pc, #284]	; (2668 <nm_spi_write_block+0x19c>)
    254a:	4699      	mov	r9, r3
    254c:	1c26      	adds	r6, r4, #0
    254e:	42bc      	cmp	r4, r7
    2550:	d900      	bls.n	2554 <nm_spi_write_block+0x88>
    2552:	4656      	mov	r6, sl
    2554:	b2b6      	uxth	r6, r6

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    2556:	2d00      	cmp	r5, #0
    2558:	d104      	bne.n	2564 <nm_spi_write_block+0x98>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
    255a:	2301      	movs	r3, #1
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    255c:	42bc      	cmp	r4, r7
    255e:	d806      	bhi.n	256e <nm_spi_write_block+0xa2>
				order = 0x3;
    2560:	2303      	movs	r3, #3
    2562:	e004      	b.n	256e <nm_spi_write_block+0xa2>
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    2564:	42a7      	cmp	r7, r4
    2566:	419b      	sbcs	r3, r3
    2568:	425b      	negs	r3, r3
    256a:	2203      	movs	r2, #3
    256c:	1ad3      	subs	r3, r2, r3
			else
				order = 0x2;
		}
		cmd |= order;
    256e:	4668      	mov	r0, sp
    2570:	300b      	adds	r0, #11
    2572:	2210      	movs	r2, #16
    2574:	4252      	negs	r2, r2
    2576:	4313      	orrs	r3, r2
    2578:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    257a:	2101      	movs	r1, #1
    257c:	47c8      	blx	r9
    257e:	2800      	cmp	r0, #0
    2580:	d00c      	beq.n	259c <nm_spi_write_block+0xd0>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2582:	4830      	ldr	r0, [pc, #192]	; (2644 <nm_spi_write_block+0x178>)
    2584:	4939      	ldr	r1, [pc, #228]	; (266c <nm_spi_write_block+0x1a0>)
    2586:	22de      	movs	r2, #222	; 0xde
    2588:	0052      	lsls	r2, r2, #1
    258a:	4b31      	ldr	r3, [pc, #196]	; (2650 <nm_spi_write_block+0x184>)
    258c:	4798      	blx	r3
    258e:	4838      	ldr	r0, [pc, #224]	; (2670 <nm_spi_write_block+0x1a4>)
    2590:	4b38      	ldr	r3, [pc, #224]	; (2674 <nm_spi_write_block+0x1a8>)
    2592:	4798      	blx	r3
    2594:	200d      	movs	r0, #13
    2596:	4b30      	ldr	r3, [pc, #192]	; (2658 <nm_spi_write_block+0x18c>)
    2598:	4798      	blx	r3
    259a:	e033      	b.n	2604 <nm_spi_write_block+0x138>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    259c:	b228      	sxth	r0, r5
    259e:	4440      	add	r0, r8
    25a0:	1c31      	adds	r1, r6, #0
    25a2:	4b31      	ldr	r3, [pc, #196]	; (2668 <nm_spi_write_block+0x19c>)
    25a4:	4798      	blx	r3
    25a6:	2800      	cmp	r0, #0
    25a8:	d00c      	beq.n	25c4 <nm_spi_write_block+0xf8>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    25aa:	4826      	ldr	r0, [pc, #152]	; (2644 <nm_spi_write_block+0x178>)
    25ac:	492f      	ldr	r1, [pc, #188]	; (266c <nm_spi_write_block+0x1a0>)
    25ae:	22c6      	movs	r2, #198	; 0xc6
    25b0:	32ff      	adds	r2, #255	; 0xff
    25b2:	4b27      	ldr	r3, [pc, #156]	; (2650 <nm_spi_write_block+0x184>)
    25b4:	4798      	blx	r3
    25b6:	4830      	ldr	r0, [pc, #192]	; (2678 <nm_spi_write_block+0x1ac>)
    25b8:	4b2e      	ldr	r3, [pc, #184]	; (2674 <nm_spi_write_block+0x1a8>)
    25ba:	4798      	blx	r3
    25bc:	200d      	movs	r0, #13
    25be:	4b26      	ldr	r3, [pc, #152]	; (2658 <nm_spi_write_block+0x18c>)
    25c0:	4798      	blx	r3
    25c2:	e01f      	b.n	2604 <nm_spi_write_block+0x138>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    25c4:	4b2d      	ldr	r3, [pc, #180]	; (267c <nm_spi_write_block+0x1b0>)
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d112      	bne.n	25f2 <nm_spi_write_block+0x126>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    25cc:	a803      	add	r0, sp, #12
    25ce:	2102      	movs	r1, #2
    25d0:	4b25      	ldr	r3, [pc, #148]	; (2668 <nm_spi_write_block+0x19c>)
    25d2:	4798      	blx	r3
    25d4:	2800      	cmp	r0, #0
    25d6:	d00c      	beq.n	25f2 <nm_spi_write_block+0x126>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    25d8:	481a      	ldr	r0, [pc, #104]	; (2644 <nm_spi_write_block+0x178>)
    25da:	4924      	ldr	r1, [pc, #144]	; (266c <nm_spi_write_block+0x1a0>)
    25dc:	22d0      	movs	r2, #208	; 0xd0
    25de:	32ff      	adds	r2, #255	; 0xff
    25e0:	4b1b      	ldr	r3, [pc, #108]	; (2650 <nm_spi_write_block+0x184>)
    25e2:	4798      	blx	r3
    25e4:	4826      	ldr	r0, [pc, #152]	; (2680 <nm_spi_write_block+0x1b4>)
    25e6:	4b23      	ldr	r3, [pc, #140]	; (2674 <nm_spi_write_block+0x1a8>)
    25e8:	4798      	blx	r3
    25ea:	200d      	movs	r0, #13
    25ec:	4b1a      	ldr	r3, [pc, #104]	; (2658 <nm_spi_write_block+0x18c>)
    25ee:	4798      	blx	r3
    25f0:	e008      	b.n	2604 <nm_spi_write_block+0x138>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    25f2:	1975      	adds	r5, r6, r5
    25f4:	b2ad      	uxth	r5, r5
		sz -= nbytes;
    25f6:	1ba4      	subs	r4, r4, r6
    25f8:	b2a4      	uxth	r4, r4
	} while (sz);
    25fa:	2c00      	cmp	r4, #0
    25fc:	d1a6      	bne.n	254c <nm_spi_write_block+0x80>
    25fe:	e016      	b.n	262e <nm_spi_write_block+0x162>
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    2600:	b240      	sxtb	r0, r0
    2602:	e016      	b.n	2632 <nm_spi_write_block+0x166>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2604:	480f      	ldr	r0, [pc, #60]	; (2644 <nm_spi_write_block+0x178>)
    2606:	4910      	ldr	r1, [pc, #64]	; (2648 <nm_spi_write_block+0x17c>)
    2608:	4a1e      	ldr	r2, [pc, #120]	; (2684 <nm_spi_write_block+0x1b8>)
    260a:	4b11      	ldr	r3, [pc, #68]	; (2650 <nm_spi_write_block+0x184>)
    260c:	4798      	blx	r3
    260e:	481e      	ldr	r0, [pc, #120]	; (2688 <nm_spi_write_block+0x1bc>)
    2610:	4b18      	ldr	r3, [pc, #96]	; (2674 <nm_spi_write_block+0x1a8>)
    2612:	4798      	blx	r3
    2614:	200d      	movs	r0, #13
    2616:	4b10      	ldr	r3, [pc, #64]	; (2658 <nm_spi_write_block+0x18c>)
    2618:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    261a:	2300      	movs	r3, #0
    261c:	9300      	str	r3, [sp, #0]
    261e:	20cf      	movs	r0, #207	; 0xcf
    2620:	2100      	movs	r1, #0
    2622:	2200      	movs	r2, #0
    2624:	4c06      	ldr	r4, [pc, #24]	; (2640 <nm_spi_write_block+0x174>)
    2626:	47a0      	blx	r4
    2628:	e001      	b.n	262e <nm_spi_write_block+0x162>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    262a:	20fa      	movs	r0, #250	; 0xfa
    262c:	e7e8      	b.n	2600 <nm_spi_write_block+0x134>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    262e:	2000      	movs	r0, #0
    2630:	e7e6      	b.n	2600 <nm_spi_write_block+0x134>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2632:	b004      	add	sp, #16
    2634:	bc1c      	pop	{r2, r3, r4}
    2636:	4690      	mov	r8, r2
    2638:	4699      	mov	r9, r3
    263a:	46a2      	mov	sl, r4
    263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	00001f3d 	.word	0x00001f3d
    2644:	0000835c 	.word	0x0000835c
    2648:	00008ae4 	.word	0x00008ae4
    264c:	00000223 	.word	0x00000223
    2650:	000070b5 	.word	0x000070b5
    2654:	00008e6c 	.word	0x00008e6c
    2658:	000070e9 	.word	0x000070e9
    265c:	00001d09 	.word	0x00001d09
    2660:	00000229 	.word	0x00000229
    2664:	00008e9c 	.word	0x00008e9c
    2668:	00001f1d 	.word	0x00001f1d
    266c:	00008ab8 	.word	0x00008ab8
    2670:	00008ed4 	.word	0x00008ed4
    2674:	000071d5 	.word	0x000071d5
    2678:	00008f0c 	.word	0x00008f0c
    267c:	200000c4 	.word	0x200000c4
    2680:	00008f40 	.word	0x00008f40
    2684:	0000023a 	.word	0x0000023a
    2688:	00008f78 	.word	0x00008f78

0000268c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    268c:	b5f0      	push	{r4, r5, r6, r7, lr}
    268e:	465f      	mov	r7, fp
    2690:	4656      	mov	r6, sl
    2692:	464d      	mov	r5, r9
    2694:	4644      	mov	r4, r8
    2696:	b4f0      	push	{r4, r5, r6, r7}
    2698:	b083      	sub	sp, #12
    269a:	1c0e      	adds	r6, r1, #0
    269c:	4692      	mov	sl, r2
    269e:	4698      	mov	r8, r3
    26a0:	ab0c      	add	r3, sp, #48	; 0x30
    26a2:	881d      	ldrh	r5, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    26a4:	2d00      	cmp	r5, #0
    26a6:	d059      	beq.n	275c <Socket_ReadSocketData+0xd0>
    26a8:	0042      	lsls	r2, r0, #1
    26aa:	1812      	adds	r2, r2, r0
    26ac:	0092      	lsls	r2, r2, #2
    26ae:	4b2f      	ldr	r3, [pc, #188]	; (276c <Socket_ReadSocketData+0xe0>)
    26b0:	58d3      	ldr	r3, [r2, r3]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d052      	beq.n	275c <Socket_ReadSocketData+0xd0>
    26b6:	1c13      	adds	r3, r2, #0
    26b8:	4a2c      	ldr	r2, [pc, #176]	; (276c <Socket_ReadSocketData+0xe0>)
    26ba:	18d3      	adds	r3, r2, r3
    26bc:	889b      	ldrh	r3, [r3, #4]
    26be:	b29b      	uxth	r3, r3
    26c0:	2b00      	cmp	r3, #0
    26c2:	d04b      	beq.n	275c <Socket_ReadSocketData+0xd0>
    26c4:	0043      	lsls	r3, r0, #1
    26c6:	181b      	adds	r3, r3, r0
    26c8:	009b      	lsls	r3, r3, #2
    26ca:	18d3      	adds	r3, r2, r3
    26cc:	799b      	ldrb	r3, [r3, #6]
    26ce:	2b01      	cmp	r3, #1
    26d0:	d144      	bne.n	275c <Socket_ReadSocketData+0xd0>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    26d2:	80f5      	strh	r5, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    26d4:	0043      	lsls	r3, r0, #1
    26d6:	1819      	adds	r1, r3, r0
    26d8:	0089      	lsls	r1, r1, #2
    26da:	4689      	mov	r9, r1
    26dc:	4693      	mov	fp, r2
    26de:	44cb      	add	fp, r9
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    26e0:	4643      	mov	r3, r8
    26e2:	4680      	mov	r8, r0
    26e4:	9301      	str	r3, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    26e6:	465a      	mov	r2, fp
    26e8:	8893      	ldrh	r3, [r2, #4]
    26ea:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    26ec:	b21b      	sxth	r3, r3
    26ee:	2b00      	cmp	r3, #0
    26f0:	dd06      	ble.n	2700 <Socket_ReadSocketData+0x74>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
    26f2:	4f1e      	ldr	r7, [pc, #120]	; (276c <Socket_ReadSocketData+0xe0>)
    26f4:	1c3b      	adds	r3, r7, #0
    26f6:	444b      	add	r3, r9
    26f8:	889c      	ldrh	r4, [r3, #4]
    26fa:	b2a4      	uxth	r4, r4
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    26fc:	2300      	movs	r3, #0
    26fe:	e001      	b.n	2704 <Socket_ReadSocketData+0x78>
    2700:	1c2c      	adds	r4, r5, #0
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    2702:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;		
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2704:	4648      	mov	r0, r9
    2706:	4f19      	ldr	r7, [pc, #100]	; (276c <Socket_ReadSocketData+0xe0>)
    2708:	59c1      	ldr	r1, [r0, r7]
    270a:	9801      	ldr	r0, [sp, #4]
    270c:	1c22      	adds	r2, r4, #0
    270e:	4f18      	ldr	r7, [pc, #96]	; (2770 <Socket_ReadSocketData+0xe4>)
    2710:	47b8      	blx	r7
    2712:	2800      	cmp	r0, #0
    2714:	d119      	bne.n	274a <Socket_ReadSocketData+0xbe>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    2716:	4b15      	ldr	r3, [pc, #84]	; (276c <Socket_ReadSocketData+0xe0>)
    2718:	4648      	mov	r0, r9
    271a:	58c3      	ldr	r3, [r0, r3]
    271c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    271e:	80b4      	strh	r4, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2720:	88f3      	ldrh	r3, [r6, #6]
    2722:	1b1b      	subs	r3, r3, r4
    2724:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    2726:	4b13      	ldr	r3, [pc, #76]	; (2774 <Socket_ReadSocketData+0xe8>)
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	2b00      	cmp	r3, #0
    272c:	d005      	beq.n	273a <Socket_ReadSocketData+0xae>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    272e:	4b11      	ldr	r3, [pc, #68]	; (2774 <Socket_ReadSocketData+0xe8>)
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	4640      	mov	r0, r8
    2734:	4651      	mov	r1, sl
    2736:	1c32      	adds	r2, r6, #0
    2738:	4798      	blx	r3

				u16ReadCount -= u16Read;
    273a:	1b2d      	subs	r5, r5, r4
    273c:	b2ad      	uxth	r5, r5
				u32Address += u16Read;
    273e:	9a01      	ldr	r2, [sp, #4]
    2740:	1912      	adds	r2, r2, r4
    2742:	9201      	str	r2, [sp, #4]
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    2744:	2d00      	cmp	r5, #0
    2746:	d1ce      	bne.n	26e6 <Socket_ReadSocketData+0x5a>
    2748:	e008      	b.n	275c <Socket_ReadSocketData+0xd0>
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    274a:	480b      	ldr	r0, [pc, #44]	; (2778 <Socket_ReadSocketData+0xec>)
    274c:	4c0b      	ldr	r4, [pc, #44]	; (277c <Socket_ReadSocketData+0xf0>)
    274e:	47a0      	blx	r4
    2750:	480b      	ldr	r0, [pc, #44]	; (2780 <Socket_ReadSocketData+0xf4>)
    2752:	1c29      	adds	r1, r5, #0
    2754:	47a0      	blx	r4
    2756:	200d      	movs	r0, #13
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <Socket_ReadSocketData+0xf8>)
    275a:	4798      	blx	r3
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    275c:	b003      	add	sp, #12
    275e:	bc3c      	pop	{r2, r3, r4, r5}
    2760:	4690      	mov	r8, r2
    2762:	4699      	mov	r9, r3
    2764:	46a2      	mov	sl, r4
    2766:	46ab      	mov	fp, r5
    2768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	20000324 	.word	0x20000324
    2770:	00000bad 	.word	0x00000bad
    2774:	200003a8 	.word	0x200003a8
    2778:	00008620 	.word	0x00008620
    277c:	000070b5 	.word	0x000070b5
    2780:	000090d8 	.word	0x000090d8
    2784:	000070e9 	.word	0x000070e9

00002788 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    2788:	b5f0      	push	{r4, r5, r6, r7, lr}
    278a:	465f      	mov	r7, fp
    278c:	4656      	mov	r6, sl
    278e:	464d      	mov	r5, r9
    2790:	4644      	mov	r4, r8
    2792:	b4f0      	push	{r4, r5, r6, r7}
    2794:	b09b      	sub	sp, #108	; 0x6c
    2796:	1c0d      	adds	r5, r1, #0
    2798:	1c14      	adds	r4, r2, #0
	if(u8OpCode == SOCKET_CMD_BIND)
    279a:	2841      	cmp	r0, #65	; 0x41
    279c:	d11a      	bne.n	27d4 <m2m_ip_cb+0x4c>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    279e:	1c10      	adds	r0, r2, #0
    27a0:	a909      	add	r1, sp, #36	; 0x24
    27a2:	2204      	movs	r2, #4
    27a4:	2300      	movs	r3, #0
    27a6:	4ca1      	ldr	r4, [pc, #644]	; (2a2c <m2m_ip_cb+0x2a4>)
    27a8:	47a0      	blx	r4
    27aa:	2800      	cmp	r0, #0
    27ac:	d000      	beq.n	27b0 <m2m_ip_cb+0x28>
    27ae:	e136      	b.n	2a1e <m2m_ip_cb+0x296>
		{
			strBind.status = strBindReply.s8Status;
    27b0:	ab09      	add	r3, sp, #36	; 0x24
    27b2:	785a      	ldrb	r2, [r3, #1]
    27b4:	ab05      	add	r3, sp, #20
    27b6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    27b8:	4b9d      	ldr	r3, [pc, #628]	; (2a30 <m2m_ip_cb+0x2a8>)
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	2b00      	cmp	r3, #0
    27be:	d100      	bne.n	27c2 <m2m_ip_cb+0x3a>
    27c0:	e12d      	b.n	2a1e <m2m_ip_cb+0x296>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    27c2:	4b9b      	ldr	r3, [pc, #620]	; (2a30 <m2m_ip_cb+0x2a8>)
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	aa09      	add	r2, sp, #36	; 0x24
    27c8:	2000      	movs	r0, #0
    27ca:	5610      	ldrsb	r0, [r2, r0]
    27cc:	2101      	movs	r1, #1
    27ce:	aa05      	add	r2, sp, #20
    27d0:	4798      	blx	r3
    27d2:	e124      	b.n	2a1e <m2m_ip_cb+0x296>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    27d4:	2842      	cmp	r0, #66	; 0x42
    27d6:	d11a      	bne.n	280e <m2m_ip_cb+0x86>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    27d8:	1c10      	adds	r0, r2, #0
    27da:	a909      	add	r1, sp, #36	; 0x24
    27dc:	2204      	movs	r2, #4
    27de:	2300      	movs	r3, #0
    27e0:	4c92      	ldr	r4, [pc, #584]	; (2a2c <m2m_ip_cb+0x2a4>)
    27e2:	47a0      	blx	r4
    27e4:	2800      	cmp	r0, #0
    27e6:	d000      	beq.n	27ea <m2m_ip_cb+0x62>
    27e8:	e119      	b.n	2a1e <m2m_ip_cb+0x296>
		{
			strListen.status = strListenReply.s8Status;
    27ea:	ab09      	add	r3, sp, #36	; 0x24
    27ec:	785a      	ldrb	r2, [r3, #1]
    27ee:	ab05      	add	r3, sp, #20
    27f0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    27f2:	4b8f      	ldr	r3, [pc, #572]	; (2a30 <m2m_ip_cb+0x2a8>)
    27f4:	681b      	ldr	r3, [r3, #0]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d100      	bne.n	27fc <m2m_ip_cb+0x74>
    27fa:	e110      	b.n	2a1e <m2m_ip_cb+0x296>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    27fc:	4b8c      	ldr	r3, [pc, #560]	; (2a30 <m2m_ip_cb+0x2a8>)
    27fe:	681b      	ldr	r3, [r3, #0]
    2800:	aa09      	add	r2, sp, #36	; 0x24
    2802:	2000      	movs	r0, #0
    2804:	5610      	ldrsb	r0, [r2, r0]
    2806:	2102      	movs	r1, #2
    2808:	aa05      	add	r2, sp, #20
    280a:	4798      	blx	r3
    280c:	e107      	b.n	2a1e <m2m_ip_cb+0x296>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    280e:	2843      	cmp	r0, #67	; 0x43
    2810:	d144      	bne.n	289c <m2m_ip_cb+0x114>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2812:	1c10      	adds	r0, r2, #0
    2814:	a905      	add	r1, sp, #20
    2816:	220c      	movs	r2, #12
    2818:	2300      	movs	r3, #0
    281a:	4c84      	ldr	r4, [pc, #528]	; (2a2c <m2m_ip_cb+0x2a4>)
    281c:	47a0      	blx	r4
    281e:	2800      	cmp	r0, #0
    2820:	d000      	beq.n	2824 <m2m_ip_cb+0x9c>
    2822:	e0fc      	b.n	2a1e <m2m_ip_cb+0x296>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    2824:	ab05      	add	r3, sp, #20
    2826:	7a5a      	ldrb	r2, [r3, #9]
    2828:	b253      	sxtb	r3, r2
    282a:	2b00      	cmp	r3, #0
    282c:	db1f      	blt.n	286e <m2m_ip_cb+0xe6>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    282e:	0059      	lsls	r1, r3, #1
    2830:	18c9      	adds	r1, r1, r3
    2832:	0089      	lsls	r1, r1, #2
    2834:	487f      	ldr	r0, [pc, #508]	; (2a34 <m2m_ip_cb+0x2ac>)
    2836:	1841      	adds	r1, r0, r1
    2838:	2000      	movs	r0, #0
    283a:	71c8      	strb	r0, [r1, #7]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    283c:	2001      	movs	r0, #1
    283e:	7188      	strb	r0, [r1, #6]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2840:	497d      	ldr	r1, [pc, #500]	; (2a38 <m2m_ip_cb+0x2b0>)
    2842:	8808      	ldrh	r0, [r1, #0]
    2844:	3001      	adds	r0, #1
    2846:	b280      	uxth	r0, r0
    2848:	8008      	strh	r0, [r1, #0]
				if(gu16SessionID == 0)
    284a:	8809      	ldrh	r1, [r1, #0]
    284c:	b289      	uxth	r1, r1
    284e:	2900      	cmp	r1, #0
    2850:	d104      	bne.n	285c <m2m_ip_cb+0xd4>
					++gu16SessionID;
    2852:	4979      	ldr	r1, [pc, #484]	; (2a38 <m2m_ip_cb+0x2b0>)
    2854:	8808      	ldrh	r0, [r1, #0]
    2856:	3001      	adds	r0, #1
    2858:	b280      	uxth	r0, r0
    285a:	8008      	strh	r0, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    285c:	4976      	ldr	r1, [pc, #472]	; (2a38 <m2m_ip_cb+0x2b0>)
    285e:	8809      	ldrh	r1, [r1, #0]
    2860:	b289      	uxth	r1, r1
    2862:	0058      	lsls	r0, r3, #1
    2864:	18c3      	adds	r3, r0, r3
    2866:	009b      	lsls	r3, r3, #2
    2868:	4872      	ldr	r0, [pc, #456]	; (2a34 <m2m_ip_cb+0x2ac>)
    286a:	18c3      	adds	r3, r0, r3
    286c:	8159      	strh	r1, [r3, #10]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    286e:	ab09      	add	r3, sp, #36	; 0x24
    2870:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2872:	2202      	movs	r2, #2
    2874:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2876:	aa05      	add	r2, sp, #20
    2878:	8851      	ldrh	r1, [r2, #2]
    287a:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    287c:	9a06      	ldr	r2, [sp, #24]
    287e:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2880:	4b6b      	ldr	r3, [pc, #428]	; (2a30 <m2m_ip_cb+0x2a8>)
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	2b00      	cmp	r3, #0
    2886:	d100      	bne.n	288a <m2m_ip_cb+0x102>
    2888:	e0c9      	b.n	2a1e <m2m_ip_cb+0x296>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    288a:	4b69      	ldr	r3, [pc, #420]	; (2a30 <m2m_ip_cb+0x2a8>)
    288c:	681b      	ldr	r3, [r3, #0]
    288e:	aa05      	add	r2, sp, #20
    2890:	2008      	movs	r0, #8
    2892:	5610      	ldrsb	r0, [r2, r0]
    2894:	2104      	movs	r1, #4
    2896:	aa09      	add	r2, sp, #36	; 0x24
    2898:	4798      	blx	r3
    289a:	e0c0      	b.n	2a1e <m2m_ip_cb+0x296>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    289c:	2844      	cmp	r0, #68	; 0x44
    289e:	d001      	beq.n	28a4 <m2m_ip_cb+0x11c>
    28a0:	284b      	cmp	r0, #75	; 0x4b
    28a2:	d11a      	bne.n	28da <m2m_ip_cb+0x152>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    28a4:	1c20      	adds	r0, r4, #0
    28a6:	a909      	add	r1, sp, #36	; 0x24
    28a8:	2204      	movs	r2, #4
    28aa:	2300      	movs	r3, #0
    28ac:	4c5f      	ldr	r4, [pc, #380]	; (2a2c <m2m_ip_cb+0x2a4>)
    28ae:	47a0      	blx	r4
    28b0:	2800      	cmp	r0, #0
    28b2:	d000      	beq.n	28b6 <m2m_ip_cb+0x12e>
    28b4:	e0b3      	b.n	2a1e <m2m_ip_cb+0x296>
		{
			strConnMsg.sock		= strConnectReply.sock;
    28b6:	aa09      	add	r2, sp, #36	; 0x24
    28b8:	7810      	ldrb	r0, [r2, #0]
    28ba:	ab05      	add	r3, sp, #20
    28bc:	7018      	strb	r0, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    28be:	7852      	ldrb	r2, [r2, #1]
    28c0:	705a      	strb	r2, [r3, #1]
			if(gpfAppSocketCb)
    28c2:	4b5b      	ldr	r3, [pc, #364]	; (2a30 <m2m_ip_cb+0x2a8>)
    28c4:	681b      	ldr	r3, [r3, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d100      	bne.n	28cc <m2m_ip_cb+0x144>
    28ca:	e0a8      	b.n	2a1e <m2m_ip_cb+0x296>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    28cc:	4b58      	ldr	r3, [pc, #352]	; (2a30 <m2m_ip_cb+0x2a8>)
    28ce:	681b      	ldr	r3, [r3, #0]
    28d0:	b240      	sxtb	r0, r0
    28d2:	2105      	movs	r1, #5
    28d4:	aa05      	add	r2, sp, #20
    28d6:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    28d8:	e0a1      	b.n	2a1e <m2m_ip_cb+0x296>
			strConnMsg.s8Error	= strConnectReply.s8Error;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    28da:	284a      	cmp	r0, #74	; 0x4a
    28dc:	d113      	bne.n	2906 <m2m_ip_cb+0x17e>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    28de:	1c10      	adds	r0, r2, #0
    28e0:	a909      	add	r1, sp, #36	; 0x24
    28e2:	2244      	movs	r2, #68	; 0x44
    28e4:	2300      	movs	r3, #0
    28e6:	4c51      	ldr	r4, [pc, #324]	; (2a2c <m2m_ip_cb+0x2a4>)
    28e8:	47a0      	blx	r4
    28ea:	2800      	cmp	r0, #0
    28ec:	d000      	beq.n	28f0 <m2m_ip_cb+0x168>
    28ee:	e096      	b.n	2a1e <m2m_ip_cb+0x296>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    28f0:	9919      	ldr	r1, [sp, #100]	; 0x64
			if(gpfAppResolveCb)
    28f2:	4b52      	ldr	r3, [pc, #328]	; (2a3c <m2m_ip_cb+0x2b4>)
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d100      	bne.n	28fc <m2m_ip_cb+0x174>
    28fa:	e090      	b.n	2a1e <m2m_ip_cb+0x296>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    28fc:	4b4f      	ldr	r3, [pc, #316]	; (2a3c <m2m_ip_cb+0x2b4>)
    28fe:	681b      	ldr	r3, [r3, #0]
    2900:	a809      	add	r0, sp, #36	; 0x24
    2902:	4798      	blx	r3
    2904:	e08b      	b.n	2a1e <m2m_ip_cb+0x296>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2906:	2846      	cmp	r0, #70	; 0x46
    2908:	d006      	beq.n	2918 <m2m_ip_cb+0x190>
    290a:	2848      	cmp	r0, #72	; 0x48
    290c:	d007      	beq.n	291e <m2m_ip_cb+0x196>
    290e:	284d      	cmp	r0, #77	; 0x4d
    2910:	d157      	bne.n	29c2 <m2m_ip_cb+0x23a>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2912:	2006      	movs	r0, #6
    2914:	4680      	mov	r8, r0
    2916:	e004      	b.n	2922 <m2m_ip_cb+0x19a>
    2918:	2106      	movs	r1, #6
    291a:	4688      	mov	r8, r1
    291c:	e001      	b.n	2922 <m2m_ip_cb+0x19a>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    291e:	2209      	movs	r2, #9
    2920:	4690      	mov	r8, r2
		
		/* Read RECV REPLY data structure. 
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2922:	1c20      	adds	r0, r4, #0
    2924:	a905      	add	r1, sp, #20
    2926:	2210      	movs	r2, #16
    2928:	2300      	movs	r3, #0
    292a:	4e40      	ldr	r6, [pc, #256]	; (2a2c <m2m_ip_cb+0x2a4>)
    292c:	47b0      	blx	r6
    292e:	2800      	cmp	r0, #0
    2930:	d175      	bne.n	2a1e <m2m_ip_cb+0x296>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    2932:	ae05      	add	r6, sp, #20
    2934:	7b33      	ldrb	r3, [r6, #12]
    2936:	9303      	str	r3, [sp, #12]
			u16SessionID = strRecvReply.u16SessionID;
    2938:	89f0      	ldrh	r0, [r6, #14]
    293a:	4684      	mov	ip, r0
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/ 
			gastrSockets[sock].bIsRecvPending = 0;
    293c:	b25f      	sxtb	r7, r3
    293e:	4b3d      	ldr	r3, [pc, #244]	; (2a34 <m2m_ip_cb+0x2ac>)
    2940:	007a      	lsls	r2, r7, #1
    2942:	19d1      	adds	r1, r2, r7
    2944:	0089      	lsls	r1, r1, #2
    2946:	1858      	adds	r0, r3, r1
    2948:	2100      	movs	r1, #0
    294a:	7201      	strb	r1, [r0, #8]
	
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    294c:	8930      	ldrh	r0, [r6, #8]
    294e:	4681      	mov	r9, r0
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2950:	8971      	ldrh	r1, [r6, #10]
    2952:	468a      	mov	sl, r1
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2954:	a909      	add	r1, sp, #36	; 0x24
    2956:	8870      	ldrh	r0, [r6, #2]
    2958:	8148      	strh	r0, [r1, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    295a:	9e06      	ldr	r6, [sp, #24]
    295c:	960c      	str	r6, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    295e:	19d2      	adds	r2, r2, r7
    2960:	0092      	lsls	r2, r2, #2
    2962:	189b      	adds	r3, r3, r2
    2964:	895a      	ldrh	r2, [r3, #10]
    2966:	b292      	uxth	r2, r2
    2968:	4562      	cmp	r2, ip
    296a:	d121      	bne.n	29b0 <m2m_ip_cb+0x228>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    296c:	4649      	mov	r1, r9
    296e:	b20b      	sxth	r3, r1
    2970:	2b00      	cmp	r3, #0
    2972:	dd0c      	ble.n	298e <m2m_ip_cb+0x206>
    2974:	42ab      	cmp	r3, r5
    2976:	da0a      	bge.n	298e <m2m_ip_cb+0x206>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2978:	9a03      	ldr	r2, [sp, #12]
    297a:	b250      	sxtb	r0, r2
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    297c:	4651      	mov	r1, sl
    297e:	1863      	adds	r3, r4, r1
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2980:	464a      	mov	r2, r9
    2982:	9200      	str	r2, [sp, #0]
    2984:	a909      	add	r1, sp, #36	; 0x24
    2986:	4642      	mov	r2, r8
    2988:	4c2d      	ldr	r4, [pc, #180]	; (2a40 <m2m_ip_cb+0x2b8>)
    298a:	47a0      	blx	r4
    298c:	e047      	b.n	2a1e <m2m_ip_cb+0x296>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    298e:	ab09      	add	r3, sp, #36	; 0x24
    2990:	4648      	mov	r0, r9
    2992:	8098      	strh	r0, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2994:	2300      	movs	r3, #0
    2996:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2998:	4b25      	ldr	r3, [pc, #148]	; (2a30 <m2m_ip_cb+0x2a8>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	2b00      	cmp	r3, #0
    299e:	d03e      	beq.n	2a1e <m2m_ip_cb+0x296>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    29a0:	4b23      	ldr	r3, [pc, #140]	; (2a30 <m2m_ip_cb+0x2a8>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	9903      	ldr	r1, [sp, #12]
    29a6:	b248      	sxtb	r0, r1
    29a8:	4641      	mov	r1, r8
    29aa:	aa09      	add	r2, sp, #36	; 0x24
    29ac:	4798      	blx	r3
    29ae:	e036      	b.n	2a1e <m2m_ip_cb+0x296>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    29b0:	2d10      	cmp	r5, #16
    29b2:	d934      	bls.n	2a1e <m2m_ip_cb+0x296>
					hif_receive(0, NULL, 0, 1);
    29b4:	2000      	movs	r0, #0
    29b6:	2100      	movs	r1, #0
    29b8:	2200      	movs	r2, #0
    29ba:	2301      	movs	r3, #1
    29bc:	4c1b      	ldr	r4, [pc, #108]	; (2a2c <m2m_ip_cb+0x2a4>)
    29be:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    29c0:	e02d      	b.n	2a1e <m2m_ip_cb+0x296>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    29c2:	2845      	cmp	r0, #69	; 0x45
    29c4:	d005      	beq.n	29d2 <m2m_ip_cb+0x24a>
    29c6:	2847      	cmp	r0, #71	; 0x47
    29c8:	d005      	beq.n	29d6 <m2m_ip_cb+0x24e>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    29ca:	2507      	movs	r5, #7
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    29cc:	284c      	cmp	r0, #76	; 0x4c
    29ce:	d003      	beq.n	29d8 <m2m_ip_cb+0x250>
    29d0:	e025      	b.n	2a1e <m2m_ip_cb+0x296>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    29d2:	2507      	movs	r5, #7
    29d4:	e000      	b.n	29d8 <m2m_ip_cb+0x250>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    29d6:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    29d8:	1c20      	adds	r0, r4, #0
    29da:	a909      	add	r1, sp, #36	; 0x24
    29dc:	2208      	movs	r2, #8
    29de:	2300      	movs	r3, #0
    29e0:	4c12      	ldr	r4, [pc, #72]	; (2a2c <m2m_ip_cb+0x2a4>)
    29e2:	47a0      	blx	r4
    29e4:	2800      	cmp	r0, #0
    29e6:	d11a      	bne.n	2a1e <m2m_ip_cb+0x296>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    29e8:	ab09      	add	r3, sp, #36	; 0x24
    29ea:	7818      	ldrb	r0, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    29ec:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    29ee:	8859      	ldrh	r1, [r3, #2]
    29f0:	ab05      	add	r3, sp, #20
    29f2:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    29f4:	b243      	sxtb	r3, r0
    29f6:	0059      	lsls	r1, r3, #1
    29f8:	18cb      	adds	r3, r1, r3
    29fa:	009b      	lsls	r3, r3, #2
    29fc:	490d      	ldr	r1, [pc, #52]	; (2a34 <m2m_ip_cb+0x2ac>)
    29fe:	18cb      	adds	r3, r1, r3
    2a00:	3308      	adds	r3, #8
    2a02:	885b      	ldrh	r3, [r3, #2]
    2a04:	b29b      	uxth	r3, r3
    2a06:	4293      	cmp	r3, r2
    2a08:	d109      	bne.n	2a1e <m2m_ip_cb+0x296>
			{
				if(gpfAppSocketCb)
    2a0a:	4b09      	ldr	r3, [pc, #36]	; (2a30 <m2m_ip_cb+0x2a8>)
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d005      	beq.n	2a1e <m2m_ip_cb+0x296>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2a12:	4b07      	ldr	r3, [pc, #28]	; (2a30 <m2m_ip_cb+0x2a8>)
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	b240      	sxtb	r0, r0
    2a18:	1c29      	adds	r1, r5, #0
    2a1a:	aa05      	add	r2, sp, #20
    2a1c:	4798      	blx	r3
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}	
}
    2a1e:	b01b      	add	sp, #108	; 0x6c
    2a20:	bc3c      	pop	{r2, r3, r4, r5}
    2a22:	4690      	mov	r8, r2
    2a24:	4699      	mov	r9, r3
    2a26:	46a2      	mov	sl, r4
    2a28:	46ab      	mov	fp, r5
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a2c:	00000bad 	.word	0x00000bad
    2a30:	200003a8 	.word	0x200003a8
    2a34:	20000324 	.word	0x20000324
    2a38:	200000c6 	.word	0x200000c6
    2a3c:	200003ac 	.word	0x200003ac
    2a40:	0000268d 	.word	0x0000268d

00002a44 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2a44:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
    2a46:	4b0a      	ldr	r3, [pc, #40]	; (2a70 <socketInit+0x2c>)
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d10e      	bne.n	2a6c <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2a4e:	4809      	ldr	r0, [pc, #36]	; (2a74 <socketInit+0x30>)
    2a50:	2100      	movs	r1, #0
    2a52:	2284      	movs	r2, #132	; 0x84
    2a54:	4b08      	ldr	r3, [pc, #32]	; (2a78 <socketInit+0x34>)
    2a56:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GRP_IP,m2m_ip_cb);
    2a58:	2002      	movs	r0, #2
    2a5a:	4908      	ldr	r1, [pc, #32]	; (2a7c <socketInit+0x38>)
    2a5c:	4b08      	ldr	r3, [pc, #32]	; (2a80 <socketInit+0x3c>)
    2a5e:	4798      	blx	r3
		gbSocketInit=1;
    2a60:	2201      	movs	r2, #1
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <socketInit+0x2c>)
    2a64:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    2a66:	2200      	movs	r2, #0
    2a68:	4b06      	ldr	r3, [pc, #24]	; (2a84 <socketInit+0x40>)
    2a6a:	801a      	strh	r2, [r3, #0]
	}
}
    2a6c:	bd08      	pop	{r3, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	200000c5 	.word	0x200000c5
    2a74:	20000324 	.word	0x20000324
    2a78:	00000541 	.word	0x00000541
    2a7c:	00002789 	.word	0x00002789
    2a80:	00000cd5 	.word	0x00000cd5
    2a84:	200000c6 	.word	0x200000c6

00002a88 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2a88:	4b02      	ldr	r3, [pc, #8]	; (2a94 <registerSocketCallback+0xc>)
    2a8a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2a8c:	4b02      	ldr	r3, [pc, #8]	; (2a98 <registerSocketCallback+0x10>)
    2a8e:	6019      	str	r1, [r3, #0]
}
    2a90:	4770      	bx	lr
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	200003a8 	.word	0x200003a8
    2a98:	200003ac 	.word	0x200003ac

00002a9c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2a9c:	b530      	push	{r4, r5, lr}
    2a9e:	b087      	sub	sp, #28
	SOCKET	sock = -1;
    2aa0:	24ff      	movs	r4, #255	; 0xff
	uint8	u8Count,u8SocketCount = MAX_SOCKET;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2aa2:	2802      	cmp	r0, #2
    2aa4:	d147      	bne.n	2b36 <socket+0x9a>
	{
		if(u8Type == SOCK_STREAM)
    2aa6:	2901      	cmp	r1, #1
    2aa8:	d047      	beq.n	2b3a <socket+0x9e>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2aaa:	240b      	movs	r4, #11
			u8Count = TCP_SOCK_MAX;
    2aac:	2007      	movs	r0, #7
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    2aae:	2902      	cmp	r1, #2
    2ab0:	d045      	beq.n	2b3e <socket+0xa2>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
    2ab2:	24ff      	movs	r4, #255	; 0xff
    2ab4:	e03f      	b.n	2b36 <socket+0x9a>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    2ab6:	1c01      	adds	r1, r0, #0
    2ab8:	0043      	lsls	r3, r0, #1
    2aba:	181b      	adds	r3, r3, r0
    2abc:	009b      	lsls	r3, r3, #2
    2abe:	18eb      	adds	r3, r5, r3
    2ac0:	799b      	ldrb	r3, [r3, #6]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d132      	bne.n	2b2c <socket+0x90>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    2ac6:	004b      	lsls	r3, r1, #1
    2ac8:	185b      	adds	r3, r3, r1
    2aca:	009b      	lsls	r3, r3, #2
    2acc:	4c22      	ldr	r4, [pc, #136]	; (2b58 <socket+0xbc>)
    2ace:	18e3      	adds	r3, r4, r3
    2ad0:	2401      	movs	r4, #1
    2ad2:	719c      	strb	r4, [r3, #6]
				
				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2ad4:	4b21      	ldr	r3, [pc, #132]	; (2b5c <socket+0xc0>)
    2ad6:	881c      	ldrh	r4, [r3, #0]
    2ad8:	3401      	adds	r4, #1
    2ada:	b2a4      	uxth	r4, r4
    2adc:	801c      	strh	r4, [r3, #0]
				if(gu16SessionID == 0)
    2ade:	881b      	ldrh	r3, [r3, #0]
    2ae0:	b29b      	uxth	r3, r3
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d104      	bne.n	2af0 <socket+0x54>
					++gu16SessionID;
    2ae6:	4b1d      	ldr	r3, [pc, #116]	; (2b5c <socket+0xc0>)
    2ae8:	881c      	ldrh	r4, [r3, #0]
    2aea:	3401      	adds	r4, #1
    2aec:	b2a4      	uxth	r4, r4
    2aee:	801c      	strh	r4, [r3, #0]
				
				gastrSockets[u8Count].u16SessionID = gu16SessionID;
    2af0:	4b1a      	ldr	r3, [pc, #104]	; (2b5c <socket+0xc0>)
    2af2:	881c      	ldrh	r4, [r3, #0]
    2af4:	b2a4      	uxth	r4, r4
    2af6:	004b      	lsls	r3, r1, #1
    2af8:	185b      	adds	r3, r3, r1
    2afa:	009b      	lsls	r3, r3, #2
    2afc:	4d16      	ldr	r5, [pc, #88]	; (2b58 <socket+0xbc>)
    2afe:	18eb      	adds	r3, r5, r3
    2b00:	815c      	strh	r4, [r3, #10]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2b02:	b2c4      	uxtb	r4, r0

				if(u8Flags & SOCKET_FLAGS_SSL)
    2b04:	07d3      	lsls	r3, r2, #31
    2b06:	d516      	bpl.n	2b36 <socket+0x9a>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2b08:	aa05      	add	r2, sp, #20
    2b0a:	7014      	strb	r4, [r2, #0]
					gastrSockets[u8Count].u8SSLFlags = SSL_FLAGS_ACTIVE;
    2b0c:	004b      	lsls	r3, r1, #1
    2b0e:	1859      	adds	r1, r3, r1
    2b10:	0089      	lsls	r1, r1, #2
    2b12:	186b      	adds	r3, r5, r1
    2b14:	2101      	movs	r1, #1
    2b16:	71d9      	strb	r1, [r3, #7]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2b18:	2300      	movs	r3, #0
    2b1a:	9300      	str	r3, [sp, #0]
    2b1c:	9301      	str	r3, [sp, #4]
    2b1e:	9302      	str	r3, [sp, #8]
    2b20:	2002      	movs	r0, #2
    2b22:	2150      	movs	r1, #80	; 0x50
    2b24:	2304      	movs	r3, #4
    2b26:	4d0e      	ldr	r5, [pc, #56]	; (2b60 <socket+0xc4>)
    2b28:	47a8      	blx	r5
    2b2a:	e004      	b.n	2b36 <socket+0x9a>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2b2c:	3001      	adds	r0, #1
    2b2e:	b2c0      	uxtb	r0, r0
    2b30:	4284      	cmp	r4, r0
    2b32:	d8c0      	bhi.n	2ab6 <socket+0x1a>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET	sock = -1;
    2b34:	24ff      	movs	r4, #255	; 0xff
    2b36:	b260      	sxtb	r0, r4
    2b38:	e00b      	b.n	2b52 <socket+0xb6>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    2b3a:	2407      	movs	r4, #7
			u8Count = 0;
    2b3c:	2000      	movs	r0, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    2b3e:	1c01      	adds	r1, r0, #0
    2b40:	0043      	lsls	r3, r0, #1
    2b42:	181b      	adds	r3, r3, r0
    2b44:	009b      	lsls	r3, r3, #2
    2b46:	4d04      	ldr	r5, [pc, #16]	; (2b58 <socket+0xbc>)
    2b48:	18eb      	adds	r3, r5, r3
    2b4a:	799b      	ldrb	r3, [r3, #6]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d0ba      	beq.n	2ac6 <socket+0x2a>
    2b50:	e7ec      	b.n	2b2c <socket+0x90>
				break;
			}
		}
	}
	return sock;
}
    2b52:	b007      	add	sp, #28
    2b54:	bd30      	pop	{r4, r5, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	20000324 	.word	0x20000324
    2b5c:	200000c6 	.word	0x200000c6
    2b60:	000006a1 	.word	0x000006a1

00002b64 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2b64:	b570      	push	{r4, r5, r6, lr}
    2b66:	b088      	sub	sp, #32
    2b68:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2b6a:	db36      	blt.n	2bda <connect+0x76>
    2b6c:	2900      	cmp	r1, #0
    2b6e:	d036      	beq.n	2bde <connect+0x7a>
    2b70:	0043      	lsls	r3, r0, #1
    2b72:	181b      	adds	r3, r3, r0
    2b74:	009b      	lsls	r3, r3, #2
    2b76:	481e      	ldr	r0, [pc, #120]	; (2bf0 <connect+0x8c>)
    2b78:	18c3      	adds	r3, r0, r3
    2b7a:	799b      	ldrb	r3, [r3, #6]
    2b7c:	2b01      	cmp	r3, #1
    2b7e:	d130      	bne.n	2be2 <connect+0x7e>
    2b80:	2a00      	cmp	r2, #0
    2b82:	d030      	beq.n	2be6 <connect+0x82>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2b84:	0063      	lsls	r3, r4, #1
    2b86:	191b      	adds	r3, r3, r4
    2b88:	009b      	lsls	r3, r3, #2
    2b8a:	18c3      	adds	r3, r0, r3
    2b8c:	79db      	ldrb	r3, [r3, #7]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2b8e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2b90:	07da      	lsls	r2, r3, #31
    2b92:	d507      	bpl.n	2ba4 <connect+0x40>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2b94:	0063      	lsls	r3, r4, #1
    2b96:	191b      	adds	r3, r3, r4
    2b98:	009b      	lsls	r3, r3, #2
    2b9a:	18c3      	adds	r3, r0, r3
    2b9c:	79da      	ldrb	r2, [r3, #7]
    2b9e:	ab05      	add	r3, sp, #20
    2ba0:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2ba2:	264b      	movs	r6, #75	; 0x4b
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    2ba4:	ad05      	add	r5, sp, #20
    2ba6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2ba8:	1c28      	adds	r0, r5, #0
    2baa:	2208      	movs	r2, #8
    2bac:	4b11      	ldr	r3, [pc, #68]	; (2bf4 <connect+0x90>)
    2bae:	4798      	blx	r3

		strConnect.strAddr.u16Family	= strConnect.strAddr.u16Family;
		strConnect.strAddr.u16Port		= strConnect.strAddr.u16Port;
		strConnect.strAddr.u32IPAddr	= strConnect.strAddr.u32IPAddr;
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2bb0:	0063      	lsls	r3, r4, #1
    2bb2:	191c      	adds	r4, r3, r4
    2bb4:	00a4      	lsls	r4, r4, #2
    2bb6:	4b0e      	ldr	r3, [pc, #56]	; (2bf0 <connect+0x8c>)
    2bb8:	191c      	adds	r4, r3, r4
    2bba:	8963      	ldrh	r3, [r4, #10]
    2bbc:	816b      	strh	r3, [r5, #10]
		
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2bbe:	2300      	movs	r3, #0
    2bc0:	9300      	str	r3, [sp, #0]
    2bc2:	9301      	str	r3, [sp, #4]
    2bc4:	9302      	str	r3, [sp, #8]
    2bc6:	2002      	movs	r0, #2
    2bc8:	1c31      	adds	r1, r6, #0
    2bca:	1c2a      	adds	r2, r5, #0
    2bcc:	230c      	movs	r3, #12
    2bce:	4c0a      	ldr	r4, [pc, #40]	; (2bf8 <connect+0x94>)
    2bd0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR) 
    2bd2:	2800      	cmp	r0, #0
    2bd4:	d008      	beq.n	2be8 <connect+0x84>
		{
			s8Ret = SOCK_ERR_INVALID;
    2bd6:	20f7      	movs	r0, #247	; 0xf7
    2bd8:	e006      	b.n	2be8 <connect+0x84>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2bda:	20fa      	movs	r0, #250	; 0xfa
    2bdc:	e004      	b.n	2be8 <connect+0x84>
    2bde:	20fa      	movs	r0, #250	; 0xfa
    2be0:	e002      	b.n	2be8 <connect+0x84>
    2be2:	20fa      	movs	r0, #250	; 0xfa
    2be4:	e000      	b.n	2be8 <connect+0x84>
    2be6:	20fa      	movs	r0, #250	; 0xfa
		if(s8Ret != SOCK_ERR_NO_ERROR) 
		{
			s8Ret = SOCK_ERR_INVALID;
		} 
	}
	return s8Ret;
    2be8:	b240      	sxtb	r0, r0
}
    2bea:	b008      	add	sp, #32
    2bec:	bd70      	pop	{r4, r5, r6, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	20000324 	.word	0x20000324
    2bf4:	0000052d 	.word	0x0000052d
    2bf8:	000006a1 	.word	0x000006a1

00002bfc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2bfc:	b530      	push	{r4, r5, lr}
    2bfe:	b089      	sub	sp, #36	; 0x24
    2c00:	1c0c      	adds	r4, r1, #0
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2c02:	2800      	cmp	r0, #0
    2c04:	db36      	blt.n	2c74 <send+0x78>
    2c06:	2900      	cmp	r1, #0
    2c08:	d036      	beq.n	2c78 <send+0x7c>
    2c0a:	23af      	movs	r3, #175	; 0xaf
    2c0c:	00db      	lsls	r3, r3, #3
    2c0e:	429a      	cmp	r2, r3
    2c10:	d834      	bhi.n	2c7c <send+0x80>
    2c12:	0043      	lsls	r3, r0, #1
    2c14:	181b      	adds	r3, r3, r0
    2c16:	009b      	lsls	r3, r3, #2
    2c18:	491b      	ldr	r1, [pc, #108]	; (2c88 <send+0x8c>)
    2c1a:	18cb      	adds	r3, r1, r3
    2c1c:	799b      	ldrb	r3, [r3, #6]
    2c1e:	2b01      	cmp	r3, #1
    2c20:	d12e      	bne.n	2c80 <send+0x84>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock		= sock;
    2c22:	ab04      	add	r3, sp, #16
    2c24:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    2c26:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;
    2c28:	0041      	lsls	r1, r0, #1
    2c2a:	1809      	adds	r1, r1, r0
    2c2c:	0089      	lsls	r1, r1, #2
    2c2e:	4d16      	ldr	r5, [pc, #88]	; (2c88 <send+0x8c>)
    2c30:	1869      	adds	r1, r5, r1
    2c32:	3108      	adds	r1, #8
    2c34:	8849      	ldrh	r1, [r1, #2]
    2c36:	8199      	strh	r1, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2c38:	2344      	movs	r3, #68	; 0x44

		strSend.sock		= sock;
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    2c3a:	2806      	cmp	r0, #6
    2c3c:	dc00      	bgt.n	2c40 <send+0x44>
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2c3e:	2350      	movs	r3, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2c40:	0041      	lsls	r1, r0, #1
    2c42:	1808      	adds	r0, r1, r0
    2c44:	0080      	lsls	r0, r0, #2
    2c46:	4910      	ldr	r1, [pc, #64]	; (2c88 <send+0x8c>)
    2c48:	1808      	adds	r0, r1, r0
    2c4a:	79c1      	ldrb	r1, [r0, #7]
    2c4c:	07c8      	lsls	r0, r1, #31
    2c4e:	d401      	bmi.n	2c54 <send+0x58>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    2c50:	2045      	movs	r0, #69	; 0x45
    2c52:	e001      	b.n	2c58 <send+0x5c>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    2c54:	204c      	movs	r0, #76	; 0x4c
			u16DataOffset	= SSL_TX_PACKET_OFFSET;
    2c56:	2355      	movs	r3, #85	; 0x55
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    2c58:	2180      	movs	r1, #128	; 0x80
    2c5a:	4301      	orrs	r1, r0
    2c5c:	9400      	str	r4, [sp, #0]
    2c5e:	9201      	str	r2, [sp, #4]
    2c60:	9302      	str	r3, [sp, #8]
    2c62:	2002      	movs	r0, #2
    2c64:	aa04      	add	r2, sp, #16
    2c66:	2310      	movs	r3, #16
    2c68:	4c08      	ldr	r4, [pc, #32]	; (2c8c <send+0x90>)
    2c6a:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d008      	beq.n	2c82 <send+0x86>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    2c70:	4807      	ldr	r0, [pc, #28]	; (2c90 <send+0x94>)
    2c72:	e006      	b.n	2c82 <send+0x86>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    2c74:	4807      	ldr	r0, [pc, #28]	; (2c94 <send+0x98>)
    2c76:	e004      	b.n	2c82 <send+0x86>
    2c78:	4806      	ldr	r0, [pc, #24]	; (2c94 <send+0x98>)
    2c7a:	e002      	b.n	2c82 <send+0x86>
    2c7c:	4805      	ldr	r0, [pc, #20]	; (2c94 <send+0x98>)
    2c7e:	e000      	b.n	2c82 <send+0x86>
    2c80:	4804      	ldr	r0, [pc, #16]	; (2c94 <send+0x98>)
		if(s16Ret != SOCK_ERR_NO_ERROR)
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
    2c82:	b200      	sxth	r0, r0
}
    2c84:	b009      	add	sp, #36	; 0x24
    2c86:	bd30      	pop	{r4, r5, pc}
    2c88:	20000324 	.word	0x20000324
    2c8c:	000006a1 	.word	0x000006a1
    2c90:	0000fff2 	.word	0x0000fff2
    2c94:	0000fffa 	.word	0x0000fffa

00002c98 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    2c98:	b570      	push	{r4, r5, r6, lr}
    2c9a:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    2c9c:	2800      	cmp	r0, #0
    2c9e:	db3b      	blt.n	2d18 <recv+0x80>
    2ca0:	2900      	cmp	r1, #0
    2ca2:	d03b      	beq.n	2d1c <recv+0x84>
    2ca4:	2a00      	cmp	r2, #0
    2ca6:	d03b      	beq.n	2d20 <recv+0x88>
    2ca8:	0044      	lsls	r4, r0, #1
    2caa:	1824      	adds	r4, r4, r0
    2cac:	00a4      	lsls	r4, r4, #2
    2cae:	4d1f      	ldr	r5, [pc, #124]	; (2d2c <recv+0x94>)
    2cb0:	192c      	adds	r4, r5, r4
    2cb2:	79a4      	ldrb	r4, [r4, #6]
    2cb4:	2c01      	cmp	r4, #1
    2cb6:	d135      	bne.n	2d24 <recv+0x8c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    2cb8:	1c2c      	adds	r4, r5, #0
    2cba:	0045      	lsls	r5, r0, #1
    2cbc:	182e      	adds	r6, r5, r0
    2cbe:	00b6      	lsls	r6, r6, #2
    2cc0:	5131      	str	r1, [r6, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    2cc2:	19a1      	adds	r1, r4, r6
    2cc4:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    2cc6:	7a09      	ldrb	r1, [r1, #8]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    2cc8:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    2cca:	2900      	cmp	r1, #0
    2ccc:	d12b      	bne.n	2d26 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
    2cce:	19a2      	adds	r2, r4, r6
    2cd0:	2101      	movs	r1, #1
    2cd2:	7211      	strb	r1, [r2, #8]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2cd4:	79d2      	ldrb	r2, [r2, #7]
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    2cd6:	214d      	movs	r1, #77	; 0x4d
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2cd8:	07d4      	lsls	r4, r2, #31
    2cda:	d400      	bmi.n	2cde <recv+0x46>
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    2cdc:	2146      	movs	r1, #70	; 0x46
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d103      	bne.n	2cea <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    2ce2:	2301      	movs	r3, #1
    2ce4:	425b      	negs	r3, r3
    2ce6:	9304      	str	r3, [sp, #16]
    2ce8:	e000      	b.n	2cec <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    2cea:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    2cec:	aa04      	add	r2, sp, #16
    2cee:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    2cf0:	0043      	lsls	r3, r0, #1
    2cf2:	1818      	adds	r0, r3, r0
    2cf4:	0080      	lsls	r0, r0, #2
    2cf6:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <recv+0x94>)
    2cf8:	1818      	adds	r0, r3, r0
    2cfa:	8943      	ldrh	r3, [r0, #10]
    2cfc:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    2cfe:	2300      	movs	r3, #0
    2d00:	9300      	str	r3, [sp, #0]
    2d02:	9301      	str	r3, [sp, #4]
    2d04:	9302      	str	r3, [sp, #8]
    2d06:	2002      	movs	r0, #2
    2d08:	2308      	movs	r3, #8
    2d0a:	4c09      	ldr	r4, [pc, #36]	; (2d30 <recv+0x98>)
    2d0c:	47a0      	blx	r4
    2d0e:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    2d10:	2800      	cmp	r0, #0
    2d12:	d008      	beq.n	2d26 <recv+0x8e>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    2d14:	4a07      	ldr	r2, [pc, #28]	; (2d34 <recv+0x9c>)
    2d16:	e006      	b.n	2d26 <recv+0x8e>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    2d18:	4a07      	ldr	r2, [pc, #28]	; (2d38 <recv+0xa0>)
    2d1a:	e004      	b.n	2d26 <recv+0x8e>
    2d1c:	4a06      	ldr	r2, [pc, #24]	; (2d38 <recv+0xa0>)
    2d1e:	e002      	b.n	2d26 <recv+0x8e>
    2d20:	4a05      	ldr	r2, [pc, #20]	; (2d38 <recv+0xa0>)
    2d22:	e000      	b.n	2d26 <recv+0x8e>
    2d24:	4a04      	ldr	r2, [pc, #16]	; (2d38 <recv+0xa0>)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
    2d26:	b210      	sxth	r0, r2
}
    2d28:	b006      	add	sp, #24
    2d2a:	bd70      	pop	{r4, r5, r6, pc}
    2d2c:	20000324 	.word	0x20000324
    2d30:	000006a1 	.word	0x000006a1
    2d34:	0000fff2 	.word	0x0000fff2
    2d38:	0000fffa 	.word	0x0000fffa

00002d3c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    2d3c:	b530      	push	{r4, r5, lr}
    2d3e:	b087      	sub	sp, #28
    2d40:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    2d42:	db2e      	blt.n	2da2 <close+0x66>
    2d44:	0043      	lsls	r3, r0, #1
    2d46:	181b      	adds	r3, r3, r0
    2d48:	009b      	lsls	r3, r3, #2
    2d4a:	4a19      	ldr	r2, [pc, #100]	; (2db0 <close+0x74>)
    2d4c:	18d3      	adds	r3, r2, r3
    2d4e:	799b      	ldrb	r3, [r3, #6]
    2d50:	2b01      	cmp	r3, #1
    2d52:	d128      	bne.n	2da6 <close+0x6a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    2d54:	aa05      	add	r2, sp, #20
    2d56:	7010      	strb	r0, [r2, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    2d58:	0043      	lsls	r3, r0, #1
    2d5a:	181b      	adds	r3, r3, r0
    2d5c:	009b      	lsls	r3, r3, #2
    2d5e:	4914      	ldr	r1, [pc, #80]	; (2db0 <close+0x74>)
    2d60:	18cb      	adds	r3, r1, r3
    2d62:	8958      	ldrh	r0, [r3, #10]
    2d64:	8050      	strh	r0, [r2, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    2d66:	2200      	movs	r2, #0
    2d68:	719a      	strb	r2, [r3, #6]
		gastrSockets[sock].u16SessionID =0;
    2d6a:	815a      	strh	r2, [r3, #10]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2d6c:	79db      	ldrb	r3, [r3, #7]
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    2d6e:	214e      	movs	r1, #78	; 0x4e
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2d70:	07da      	lsls	r2, r3, #31
    2d72:	d400      	bmi.n	2d76 <close+0x3a>
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    2d74:	2149      	movs	r1, #73	; 0x49
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    2d76:	2300      	movs	r3, #0
    2d78:	9300      	str	r3, [sp, #0]
    2d7a:	9301      	str	r3, [sp, #4]
    2d7c:	9302      	str	r3, [sp, #8]
    2d7e:	2002      	movs	r0, #2
    2d80:	aa05      	add	r2, sp, #20
    2d82:	2304      	movs	r3, #4
    2d84:	4d0b      	ldr	r5, [pc, #44]	; (2db4 <close+0x78>)
    2d86:	47a8      	blx	r5
    2d88:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2d8a:	d000      	beq.n	2d8e <close+0x52>
		{
			s8Ret = SOCK_ERR_INVALID;
    2d8c:	25f7      	movs	r5, #247	; 0xf7
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    2d8e:	0060      	lsls	r0, r4, #1
    2d90:	1900      	adds	r0, r0, r4
    2d92:	0080      	lsls	r0, r0, #2
    2d94:	4b06      	ldr	r3, [pc, #24]	; (2db0 <close+0x74>)
    2d96:	18c0      	adds	r0, r0, r3
    2d98:	2100      	movs	r1, #0
    2d9a:	220c      	movs	r2, #12
    2d9c:	4b06      	ldr	r3, [pc, #24]	; (2db8 <close+0x7c>)
    2d9e:	4798      	blx	r3
    2da0:	e002      	b.n	2da8 <close+0x6c>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2da2:	25fa      	movs	r5, #250	; 0xfa
    2da4:	e000      	b.n	2da8 <close+0x6c>
    2da6:	25fa      	movs	r5, #250	; 0xfa
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
    2da8:	b268      	sxtb	r0, r5
}
    2daa:	b007      	add	sp, #28
    2dac:	bd30      	pop	{r4, r5, pc}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	20000324 	.word	0x20000324
    2db4:	000006a1 	.word	0x000006a1
    2db8:	00000541 	.word	0x00000541

00002dbc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    2dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dbe:	b083      	sub	sp, #12
	uint8	tmp;
	uint32	u32IP = 0;
    2dc0:	2300      	movs	r3, #0
    2dc2:	9301      	str	r3, [sp, #4]
    2dc4:	2400      	movs	r4, #0
	for(i = 0; i < 4; ++i) 
	{
		j = 0;
		do 
		{
			c = *pcIpAddr;
    2dc6:	2604      	movs	r6, #4
    2dc8:	2500      	movs	r5, #0
    2dca:	7803      	ldrb	r3, [r0, #0]
    2dcc:	3001      	adds	r0, #1
    2dce:	1c31      	adds	r1, r6, #0
    2dd0:	1c2a      	adds	r2, r5, #0
			++j;
			if(j > 4) 
			{
				return 0;
			}
			if(c == '.' || c == 0) 
    2dd2:	2b2e      	cmp	r3, #46	; 0x2e
    2dd4:	d01f      	beq.n	2e16 <nmi_inet_addr+0x5a>
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d020      	beq.n	2e1c <nmi_inet_addr+0x60>
			{
				au8IP[i] = tmp;
				tmp = 0;
			} 
			else if(c >= '0' && c <= '9') 
    2dda:	3b30      	subs	r3, #48	; 0x30
    2ddc:	b2db      	uxtb	r3, r3
    2dde:	2b09      	cmp	r3, #9
    2de0:	d815      	bhi.n	2e0e <nmi_inet_addr+0x52>
			{
				tmp = (tmp * 10) + (c - '0');
    2de2:	0097      	lsls	r7, r2, #2
    2de4:	19d2      	adds	r2, r2, r7
    2de6:	0052      	lsls	r2, r2, #1
    2de8:	18d2      	adds	r2, r2, r3
    2dea:	b2d2      	uxtb	r2, r2
	for(i = 0; i < 4; ++i) 
	{
		j = 0;
		do 
		{
			c = *pcIpAddr;
    2dec:	7803      	ldrb	r3, [r0, #0]
    2dee:	3901      	subs	r1, #1
    2df0:	b2c9      	uxtb	r1, r1
    2df2:	3001      	adds	r0, #1
			++j;
			if(j > 4) 
    2df4:	2900      	cmp	r1, #0
    2df6:	d1ec      	bne.n	2dd2 <nmi_inet_addr+0x16>
    2df8:	e00b      	b.n	2e12 <nmi_inet_addr+0x56>
    2dfa:	3401      	adds	r4, #1
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i) 
    2dfc:	2c04      	cmp	r4, #4
    2dfe:	d1e4      	bne.n	2dca <nmi_inet_addr+0xe>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    2e00:	a801      	add	r0, sp, #4
    2e02:	4669      	mov	r1, sp
    2e04:	2204      	movs	r2, #4
    2e06:	4b08      	ldr	r3, [pc, #32]	; (2e28 <nmi_inet_addr+0x6c>)
    2e08:	4798      	blx	r3
	return u32IP;
    2e0a:	9801      	ldr	r0, [sp, #4]
    2e0c:	e009      	b.n	2e22 <nmi_inet_addr+0x66>
			{
				tmp = (tmp * 10) + (c - '0');
			} 
			else 
			{
				return 0;
    2e0e:	2000      	movs	r0, #0
    2e10:	e007      	b.n	2e22 <nmi_inet_addr+0x66>
		{
			c = *pcIpAddr;
			++j;
			if(j > 4) 
			{
				return 0;
    2e12:	2000      	movs	r0, #0
    2e14:	e005      	b.n	2e22 <nmi_inet_addr+0x66>
			}
			if(c == '.' || c == 0) 
			{
				au8IP[i] = tmp;
    2e16:	466b      	mov	r3, sp
    2e18:	54e2      	strb	r2, [r4, r3]
    2e1a:	e7ee      	b.n	2dfa <nmi_inet_addr+0x3e>
    2e1c:	466b      	mov	r3, sp
    2e1e:	54e2      	strb	r2, [r4, r3]
    2e20:	e7eb      	b.n	2dfa <nmi_inet_addr+0x3e>
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    2e22:	b003      	add	sp, #12
    2e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	0000052d 	.word	0x0000052d

00002e2c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    2e2c:	b510      	push	{r4, lr}
    2e2e:	b084      	sub	sp, #16
    2e30:	1c04      	adds	r4, r0, #0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    2e32:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <gethostbyname+0x3c>)
    2e34:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    2e36:	b2c3      	uxtb	r3, r0
    2e38:	2b40      	cmp	r3, #64	; 0x40
    2e3a:	d80e      	bhi.n	2e5a <gethostbyname+0x2e>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    2e3c:	23ff      	movs	r3, #255	; 0xff
    2e3e:	4018      	ands	r0, r3
    2e40:	1c43      	adds	r3, r0, #1
    2e42:	2100      	movs	r1, #0
    2e44:	9100      	str	r1, [sp, #0]
    2e46:	9101      	str	r1, [sp, #4]
    2e48:	9102      	str	r1, [sp, #8]
    2e4a:	2002      	movs	r0, #2
    2e4c:	21ca      	movs	r1, #202	; 0xca
    2e4e:	1c22      	adds	r2, r4, #0
    2e50:	4c06      	ldr	r4, [pc, #24]	; (2e6c <gethostbyname+0x40>)
    2e52:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    2e54:	2800      	cmp	r0, #0
    2e56:	d003      	beq.n	2e60 <gethostbyname+0x34>
    2e58:	e001      	b.n	2e5e <gethostbyname+0x32>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    2e5a:	20fa      	movs	r0, #250	; 0xfa
    2e5c:	e000      	b.n	2e60 <gethostbyname+0x34>
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
		if(s8Err != SOCK_ERR_NO_ERROR)
		{
			s8Err = SOCK_ERR_INVALID;
    2e5e:	20f7      	movs	r0, #247	; 0xf7
		}
	}
	return s8Err;
    2e60:	b240      	sxtb	r0, r0
}
    2e62:	b004      	add	sp, #16
    2e64:	bd10      	pop	{r4, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	00000551 	.word	0x00000551
    2e6c:	000006a1 	.word	0x000006a1

00002e70 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e70:	4b0c      	ldr	r3, [pc, #48]	; (2ea4 <cpu_irq_enter_critical+0x34>)
    2e72:	681b      	ldr	r3, [r3, #0]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d110      	bne.n	2e9a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e78:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d109      	bne.n	2e94 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e80:	b672      	cpsid	i
    2e82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e86:	2200      	movs	r2, #0
    2e88:	4b07      	ldr	r3, [pc, #28]	; (2ea8 <cpu_irq_enter_critical+0x38>)
    2e8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e8c:	2201      	movs	r2, #1
    2e8e:	4b07      	ldr	r3, [pc, #28]	; (2eac <cpu_irq_enter_critical+0x3c>)
    2e90:	701a      	strb	r2, [r3, #0]
    2e92:	e002      	b.n	2e9a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e94:	2200      	movs	r2, #0
    2e96:	4b05      	ldr	r3, [pc, #20]	; (2eac <cpu_irq_enter_critical+0x3c>)
    2e98:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e9a:	4b02      	ldr	r3, [pc, #8]	; (2ea4 <cpu_irq_enter_critical+0x34>)
    2e9c:	681a      	ldr	r2, [r3, #0]
    2e9e:	3201      	adds	r2, #1
    2ea0:	601a      	str	r2, [r3, #0]
}
    2ea2:	4770      	bx	lr
    2ea4:	200000c8 	.word	0x200000c8
    2ea8:	20000010 	.word	0x20000010
    2eac:	200000cc 	.word	0x200000cc

00002eb0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2eb0:	4b08      	ldr	r3, [pc, #32]	; (2ed4 <cpu_irq_leave_critical+0x24>)
    2eb2:	681a      	ldr	r2, [r3, #0]
    2eb4:	3a01      	subs	r2, #1
    2eb6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d109      	bne.n	2ed2 <cpu_irq_leave_critical+0x22>
    2ebe:	4b06      	ldr	r3, [pc, #24]	; (2ed8 <cpu_irq_leave_critical+0x28>)
    2ec0:	781b      	ldrb	r3, [r3, #0]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d005      	beq.n	2ed2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2ec6:	2201      	movs	r2, #1
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <cpu_irq_leave_critical+0x2c>)
    2eca:	701a      	strb	r2, [r3, #0]
    2ecc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2ed0:	b662      	cpsie	i
	}
}
    2ed2:	4770      	bx	lr
    2ed4:	200000c8 	.word	0x200000c8
    2ed8:	200000cc 	.word	0x200000cc
    2edc:	20000010 	.word	0x20000010

00002ee0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2ee4:	ac01      	add	r4, sp, #4
    2ee6:	2501      	movs	r5, #1
    2ee8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2eea:	2700      	movs	r7, #0
    2eec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2eee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2ef0:	2017      	movs	r0, #23
    2ef2:	1c21      	adds	r1, r4, #0
    2ef4:	4e06      	ldr	r6, [pc, #24]	; (2f10 <system_board_init+0x30>)
    2ef6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2ef8:	2280      	movs	r2, #128	; 0x80
    2efa:	0412      	lsls	r2, r2, #16
    2efc:	4b05      	ldr	r3, [pc, #20]	; (2f14 <system_board_init+0x34>)
    2efe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2f00:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2f02:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2f04:	2037      	movs	r0, #55	; 0x37
    2f06:	1c21      	adds	r1, r4, #0
    2f08:	47b0      	blx	r6
}
    2f0a:	b003      	add	sp, #12
    2f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	00003165 	.word	0x00003165
    2f14:	41004400 	.word	0x41004400

00002f18 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    2f18:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    2f1a:	0080      	lsls	r0, r0, #2
    2f1c:	4b10      	ldr	r3, [pc, #64]	; (2f60 <_ac_interrupt_handler+0x48>)
    2f1e:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    2f20:	6822      	ldr	r2, [r4, #0]
    2f22:	7995      	ldrb	r5, [r2, #6]
	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
    2f24:	7e23      	ldrb	r3, [r4, #24]
    2f26:	401d      	ands	r5, r3
    2f28:	7e63      	ldrb	r3, [r4, #25]
    2f2a:	401d      	ands	r5, r3
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    2f2c:	07eb      	lsls	r3, r5, #31
    2f2e:	d505      	bpl.n	2f3c <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    2f30:	1c20      	adds	r0, r4, #0
    2f32:	6862      	ldr	r2, [r4, #4]
    2f34:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    2f36:	2301      	movs	r3, #1
    2f38:	6822      	ldr	r2, [r4, #0]
    2f3a:	7193      	strb	r3, [r2, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    2f3c:	07ab      	lsls	r3, r5, #30
    2f3e:	d505      	bpl.n	2f4c <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    2f40:	1c20      	adds	r0, r4, #0
    2f42:	68a2      	ldr	r2, [r4, #8]
    2f44:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    2f46:	2302      	movs	r3, #2
    2f48:	6822      	ldr	r2, [r4, #0]
    2f4a:	7193      	strb	r3, [r2, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    2f4c:	06eb      	lsls	r3, r5, #27
    2f4e:	d505      	bpl.n	2f5c <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    2f50:	1c20      	adds	r0, r4, #0
    2f52:	6962      	ldr	r2, [r4, #20]
    2f54:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    2f56:	6823      	ldr	r3, [r4, #0]
    2f58:	2210      	movs	r2, #16
    2f5a:	719a      	strb	r2, [r3, #6]
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#endif /* (AC_NUM_CMP > 2) */
}
    2f5c:	bd38      	pop	{r3, r4, r5, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	200003b0 	.word	0x200003b0

00002f64 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
    2f64:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
    2f66:	2000      	movs	r0, #0
    2f68:	4b01      	ldr	r3, [pc, #4]	; (2f70 <AC_Handler+0xc>)
    2f6a:	4798      	blx	r3
}
    2f6c:	bd08      	pop	{r3, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00002f19 	.word	0x00002f19

00002f74 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f74:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2f76:	2a00      	cmp	r2, #0
    2f78:	d10f      	bne.n	2f9a <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    2f7a:	008b      	lsls	r3, r1, #2
    2f7c:	4a08      	ldr	r2, [pc, #32]	; (2fa0 <extint_register_callback+0x2c>)
    2f7e:	589a      	ldr	r2, [r3, r2]
    2f80:	2a00      	cmp	r2, #0
    2f82:	d104      	bne.n	2f8e <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    2f84:	1c19      	adds	r1, r3, #0
    2f86:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <extint_register_callback+0x2c>)
    2f88:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    2f8a:	2300      	movs	r3, #0
    2f8c:	e005      	b.n	2f9a <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    2f8e:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    2f90:	1a12      	subs	r2, r2, r0
    2f92:	1e50      	subs	r0, r2, #1
    2f94:	4182      	sbcs	r2, r0
    2f96:	4252      	negs	r2, r2
    2f98:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2f9a:	1c18      	adds	r0, r3, #0
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	200003b8 	.word	0x200003b8

00002fa4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2fa4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2fa6:	2900      	cmp	r1, #0
    2fa8:	d107      	bne.n	2fba <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2faa:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2fac:	281f      	cmp	r0, #31
    2fae:	d800      	bhi.n	2fb2 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2fb0:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    2fb2:	2201      	movs	r2, #1
    2fb4:	4082      	lsls	r2, r0
    2fb6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2fb8:	2300      	movs	r3, #0
}
    2fba:	1c18      	adds	r0, r3, #0
    2fbc:	4770      	bx	lr
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	40001800 	.word	0x40001800

00002fc4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2fc4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2fc6:	2900      	cmp	r1, #0
    2fc8:	d107      	bne.n	2fda <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    2fca:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2fcc:	281f      	cmp	r0, #31
    2fce:	d800      	bhi.n	2fd2 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2fd0:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    2fd2:	2201      	movs	r2, #1
    2fd4:	4082      	lsls	r2, r0
    2fd6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2fd8:	2300      	movs	r3, #0
}
    2fda:	1c18      	adds	r0, r3, #0
    2fdc:	4770      	bx	lr
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	40001800 	.word	0x40001800

00002fe4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2fe4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2fe6:	2200      	movs	r2, #0
    2fe8:	4b16      	ldr	r3, [pc, #88]	; (3044 <EIC_Handler+0x60>)
    2fea:	701a      	strb	r2, [r3, #0]
    2fec:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2fee:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2ff0:	4d15      	ldr	r5, [pc, #84]	; (3048 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2ff2:	4c14      	ldr	r4, [pc, #80]	; (3044 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2ff4:	2b1f      	cmp	r3, #31
    2ff6:	d910      	bls.n	301a <EIC_Handler+0x36>
    2ff8:	e019      	b.n	302e <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2ffa:	4914      	ldr	r1, [pc, #80]	; (304c <EIC_Handler+0x68>)
    2ffc:	e000      	b.n	3000 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    2ffe:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3000:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3002:	009b      	lsls	r3, r3, #2
    3004:	595b      	ldr	r3, [r3, r5]
    3006:	2b00      	cmp	r3, #0
    3008:	d000      	beq.n	300c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    300a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    300c:	7823      	ldrb	r3, [r4, #0]
    300e:	3301      	adds	r3, #1
    3010:	b2db      	uxtb	r3, r3
    3012:	7023      	strb	r3, [r4, #0]
    3014:	2b0f      	cmp	r3, #15
    3016:	d814      	bhi.n	3042 <EIC_Handler+0x5e>
    3018:	e7ec      	b.n	2ff4 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    301a:	1c32      	adds	r2, r6, #0
    301c:	401a      	ands	r2, r3
    301e:	2101      	movs	r1, #1
    3020:	4091      	lsls	r1, r2
    3022:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    3024:	4909      	ldr	r1, [pc, #36]	; (304c <EIC_Handler+0x68>)
    3026:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3028:	4211      	tst	r1, r2
    302a:	d1e6      	bne.n	2ffa <EIC_Handler+0x16>
    302c:	e7ee      	b.n	300c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    302e:	1c32      	adds	r2, r6, #0
    3030:	401a      	ands	r2, r3
    3032:	2101      	movs	r1, #1
    3034:	4091      	lsls	r1, r2
    3036:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    3038:	2100      	movs	r1, #0
    303a:	6909      	ldr	r1, [r1, #16]
    303c:	4211      	tst	r1, r2
    303e:	d1de      	bne.n	2ffe <EIC_Handler+0x1a>
    3040:	e7e4      	b.n	300c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3042:	bd70      	pop	{r4, r5, r6, pc}
    3044:	200003b4 	.word	0x200003b4
    3048:	200003b8 	.word	0x200003b8
    304c:	40001800 	.word	0x40001800

00003050 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3050:	4b05      	ldr	r3, [pc, #20]	; (3068 <_extint_enable+0x18>)
    3052:	7819      	ldrb	r1, [r3, #0]
    3054:	2202      	movs	r2, #2
    3056:	430a      	orrs	r2, r1
    3058:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    305a:	1c1a      	adds	r2, r3, #0
    305c:	7853      	ldrb	r3, [r2, #1]
    305e:	b25b      	sxtb	r3, r3
    3060:	2b00      	cmp	r3, #0
    3062:	dbfb      	blt.n	305c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3064:	4770      	bx	lr
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	40001800 	.word	0x40001800

0000306c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    306c:	b500      	push	{lr}
    306e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3070:	4b12      	ldr	r3, [pc, #72]	; (30bc <_system_extint_init+0x50>)
    3072:	6999      	ldr	r1, [r3, #24]
    3074:	2240      	movs	r2, #64	; 0x40
    3076:	430a      	orrs	r2, r1
    3078:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    307a:	a901      	add	r1, sp, #4
    307c:	2300      	movs	r3, #0
    307e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3080:	2005      	movs	r0, #5
    3082:	4b0f      	ldr	r3, [pc, #60]	; (30c0 <_system_extint_init+0x54>)
    3084:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3086:	2005      	movs	r0, #5
    3088:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <_system_extint_init+0x58>)
    308a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    308c:	4b0e      	ldr	r3, [pc, #56]	; (30c8 <_system_extint_init+0x5c>)
    308e:	7819      	ldrb	r1, [r3, #0]
    3090:	2201      	movs	r2, #1
    3092:	430a      	orrs	r2, r1
    3094:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3096:	1c1a      	adds	r2, r3, #0
    3098:	7853      	ldrb	r3, [r2, #1]
    309a:	b25b      	sxtb	r3, r3
    309c:	2b00      	cmp	r3, #0
    309e:	dbfb      	blt.n	3098 <_system_extint_init+0x2c>
    30a0:	4b0a      	ldr	r3, [pc, #40]	; (30cc <_system_extint_init+0x60>)
    30a2:	1c19      	adds	r1, r3, #0
    30a4:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    30a6:	2200      	movs	r2, #0
    30a8:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    30aa:	428b      	cmp	r3, r1
    30ac:	d1fc      	bne.n	30a8 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    30ae:	2210      	movs	r2, #16
    30b0:	4b07      	ldr	r3, [pc, #28]	; (30d0 <_system_extint_init+0x64>)
    30b2:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    30b4:	4b07      	ldr	r3, [pc, #28]	; (30d4 <_system_extint_init+0x68>)
    30b6:	4798      	blx	r3
}
    30b8:	b003      	add	sp, #12
    30ba:	bd00      	pop	{pc}
    30bc:	40000400 	.word	0x40000400
    30c0:	00004ad5 	.word	0x00004ad5
    30c4:	00004a49 	.word	0x00004a49
    30c8:	40001800 	.word	0x40001800
    30cc:	200003b8 	.word	0x200003b8
    30d0:	e000e100 	.word	0xe000e100
    30d4:	00003051 	.word	0x00003051

000030d8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    30d8:	2300      	movs	r3, #0
    30da:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    30dc:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    30de:	2201      	movs	r2, #1
    30e0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    30e2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    30e4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    30e6:	2302      	movs	r3, #2
    30e8:	72c3      	strb	r3, [r0, #11]
}
    30ea:	4770      	bx	lr

000030ec <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    30ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ee:	b083      	sub	sp, #12
    30f0:	1c05      	adds	r5, r0, #0
    30f2:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    30f4:	a901      	add	r1, sp, #4
    30f6:	2300      	movs	r3, #0
    30f8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    30fa:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    30fc:	6863      	ldr	r3, [r4, #4]
    30fe:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3100:	7a23      	ldrb	r3, [r4, #8]
    3102:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3104:	7820      	ldrb	r0, [r4, #0]
    3106:	4b15      	ldr	r3, [pc, #84]	; (315c <extint_chan_set_config+0x70>)
    3108:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    310a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    310c:	2d1f      	cmp	r5, #31
    310e:	d800      	bhi.n	3112 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3110:	4b13      	ldr	r3, [pc, #76]	; (3160 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    3112:	2107      	movs	r1, #7
    3114:	4029      	ands	r1, r5
    3116:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3118:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    311a:	7aa2      	ldrb	r2, [r4, #10]
    311c:	2a00      	cmp	r2, #0
    311e:	d001      	beq.n	3124 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    3120:	2208      	movs	r2, #8
    3122:	4310      	orrs	r0, r2
    3124:	08ea      	lsrs	r2, r5, #3
    3126:	0092      	lsls	r2, r2, #2
    3128:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    312a:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    312c:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    312e:	270f      	movs	r7, #15
    3130:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3132:	43be      	bics	r6, r7
    3134:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3136:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3138:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    313a:	7a62      	ldrb	r2, [r4, #9]
    313c:	2a00      	cmp	r2, #0
    313e:	d006      	beq.n	314e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3140:	695a      	ldr	r2, [r3, #20]
    3142:	2101      	movs	r1, #1
    3144:	40a9      	lsls	r1, r5
    3146:	1c0d      	adds	r5, r1, #0
    3148:	4315      	orrs	r5, r2
    314a:	615d      	str	r5, [r3, #20]
    314c:	e004      	b.n	3158 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    314e:	695a      	ldr	r2, [r3, #20]
    3150:	2101      	movs	r1, #1
    3152:	40a9      	lsls	r1, r5
    3154:	438a      	bics	r2, r1
    3156:	615a      	str	r2, [r3, #20]
	}
}
    3158:	b003      	add	sp, #12
    315a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    315c:	00004bb1 	.word	0x00004bb1
    3160:	40001800 	.word	0x40001800

00003164 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3164:	b500      	push	{lr}
    3166:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3168:	ab01      	add	r3, sp, #4
    316a:	2280      	movs	r2, #128	; 0x80
    316c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    316e:	780a      	ldrb	r2, [r1, #0]
    3170:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3172:	784a      	ldrb	r2, [r1, #1]
    3174:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3176:	788a      	ldrb	r2, [r1, #2]
    3178:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    317a:	1c19      	adds	r1, r3, #0
    317c:	4b01      	ldr	r3, [pc, #4]	; (3184 <port_pin_set_config+0x20>)
    317e:	4798      	blx	r3
}
    3180:	b003      	add	sp, #12
    3182:	bd00      	pop	{pc}
    3184:	00004bb1 	.word	0x00004bb1

00003188 <_rtc_calendar_time_to_register_value>:
 * \internal Convert time structure to register_value.
 */
static uint32_t _rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    3188:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    318a:	88ca      	ldrh	r2, [r1, #6]
    318c:	88c3      	ldrh	r3, [r0, #6]
    318e:	1ad2      	subs	r2, r2, r3
    3190:	0692      	lsls	r2, r2, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3192:	790c      	ldrb	r4, [r1, #4]
    3194:	0464      	lsls	r4, r4, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3196:	794b      	ldrb	r3, [r1, #5]
    3198:	059b      	lsls	r3, r3, #22
    319a:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    319c:	788c      	ldrb	r4, [r1, #2]
    319e:	0324      	lsls	r4, r4, #12

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    31a0:	4323      	orrs	r3, r4

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    31a2:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    31a4:	7902      	ldrb	r2, [r0, #4]
    31a6:	2a00      	cmp	r2, #0
    31a8:	d105      	bne.n	31b6 <_rtc_calendar_time_to_register_value+0x2e>
    31aa:	78ca      	ldrb	r2, [r1, #3]
    31ac:	2a00      	cmp	r2, #0
    31ae:	d002      	beq.n	31b6 <_rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    31b0:	2280      	movs	r2, #128	; 0x80
    31b2:	0252      	lsls	r2, r2, #9
    31b4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    31b6:	7848      	ldrb	r0, [r1, #1]
    31b8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    31ba:	780a      	ldrb	r2, [r1, #0]
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    31bc:	4310      	orrs	r0, r2

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    31be:	4318      	orrs	r0, r3

	return register_value;
}
    31c0:	bd10      	pop	{r4, pc}
    31c2:	46c0      	nop			; (mov r8, r8)

000031c4 <_rtc_calendar_register_value_to_time>:
 */
static void _rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    31c4:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    31c6:	0e8c      	lsrs	r4, r1, #26
    31c8:	88c3      	ldrh	r3, [r0, #6]
    31ca:	18e3      	adds	r3, r4, r3
    31cc:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    31ce:	018b      	lsls	r3, r1, #6
    31d0:	0f1b      	lsrs	r3, r3, #28
    31d2:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    31d4:	028b      	lsls	r3, r1, #10
    31d6:	0edb      	lsrs	r3, r3, #27
    31d8:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    31da:	7903      	ldrb	r3, [r0, #4]
    31dc:	2b00      	cmp	r3, #0
    31de:	d003      	beq.n	31e8 <_rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    31e0:	03cb      	lsls	r3, r1, #15
    31e2:	0edb      	lsrs	r3, r3, #27
    31e4:	7093      	strb	r3, [r2, #2]
    31e6:	e005      	b.n	31f4 <_rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    31e8:	040b      	lsls	r3, r1, #16
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    31ea:	0f1b      	lsrs	r3, r3, #28
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    31ec:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    31ee:	03cb      	lsls	r3, r1, #15
    31f0:	0fdb      	lsrs	r3, r3, #31
    31f2:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    31f4:	050b      	lsls	r3, r1, #20
    31f6:	0e9b      	lsrs	r3, r3, #26
    31f8:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    31fa:	233f      	movs	r3, #63	; 0x3f
    31fc:	4019      	ands	r1, r3
    31fe:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3200:	bd10      	pop	{r4, pc}
    3202:	46c0      	nop			; (mov r8, r8)

00003204 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3204:	6801      	ldr	r1, [r0, #0]
    3206:	2208      	movs	r2, #8
    3208:	4b05      	ldr	r3, [pc, #20]	; (3220 <rtc_calendar_enable+0x1c>)
    320a:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    320c:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    320e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3210:	b25b      	sxtb	r3, r3
    3212:	2b00      	cmp	r3, #0
    3214:	dbfb      	blt.n	320e <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3216:	880a      	ldrh	r2, [r1, #0]
    3218:	2302      	movs	r3, #2
    321a:	4313      	orrs	r3, r2
    321c:	800b      	strh	r3, [r1, #0]
}
    321e:	4770      	bx	lr
    3220:	e000e100 	.word	0xe000e100

00003224 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    3224:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3226:	6801      	ldr	r1, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3228:	2408      	movs	r4, #8
    322a:	2380      	movs	r3, #128	; 0x80
    322c:	4a05      	ldr	r2, [pc, #20]	; (3244 <rtc_calendar_disable+0x20>)
    322e:	50d4      	str	r4, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3230:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3232:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3234:	b25b      	sxtb	r3, r3
    3236:	2b00      	cmp	r3, #0
    3238:	dbfb      	blt.n	3232 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    323a:	880b      	ldrh	r3, [r1, #0]
    323c:	2202      	movs	r2, #2
    323e:	4393      	bics	r3, r2
    3240:	800b      	strh	r3, [r1, #0]
}
    3242:	bd10      	pop	{r4, pc}
    3244:	e000e100 	.word	0xe000e100

00003248 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3248:	b538      	push	{r3, r4, r5, lr}
    324a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    324c:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    324e:	4b07      	ldr	r3, [pc, #28]	; (326c <rtc_calendar_reset+0x24>)
    3250:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    3252:	2300      	movs	r3, #0
    3254:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    3256:	8263      	strh	r3, [r4, #18]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3258:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    325a:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    325c:	b25b      	sxtb	r3, r3
    325e:	2b00      	cmp	r3, #0
    3260:	dbfb      	blt.n	325a <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    3262:	882a      	ldrh	r2, [r5, #0]
    3264:	2301      	movs	r3, #1
    3266:	4313      	orrs	r3, r2
    3268:	802b      	strh	r3, [r5, #0]
}
    326a:	bd38      	pop	{r3, r4, r5, pc}
    326c:	00003225 	.word	0x00003225

00003270 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    3270:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3272:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = _rtc_calendar_time_to_register_value(module, time);
    3274:	4b03      	ldr	r3, [pc, #12]	; (3284 <rtc_calendar_set_time+0x14>)
    3276:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3278:	7aa3      	ldrb	r3, [r4, #10]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = _rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
    327a:	b25b      	sxtb	r3, r3
    327c:	2b00      	cmp	r3, #0
    327e:	dbfb      	blt.n	3278 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    3280:	6120      	str	r0, [r4, #16]
}
    3282:	bd10      	pop	{r4, pc}
    3284:	00003189 	.word	0x00003189

00003288 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3288:	b510      	push	{r4, lr}
    328a:	1c0a      	adds	r2, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    328c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    328e:	7941      	ldrb	r1, [r0, #5]
    3290:	2900      	cmp	r1, #0
    3292:	d106      	bne.n	32a2 <rtc_calendar_get_time+0x1a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    3294:	4905      	ldr	r1, [pc, #20]	; (32ac <rtc_calendar_get_time+0x24>)
    3296:	8059      	strh	r1, [r3, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3298:	6804      	ldr	r4, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    329a:	7aa1      	ldrb	r1, [r4, #10]
	 * the configuration structure. */
	if (!(module->continuously_update)) {
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
    329c:	b249      	sxtb	r1, r1
    329e:	2900      	cmp	r1, #0
    32a0:	dbfb      	blt.n	329a <rtc_calendar_get_time+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    32a2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	_rtc_calendar_register_value_to_time(module, register_value, time);
    32a4:	4b02      	ldr	r3, [pc, #8]	; (32b0 <rtc_calendar_get_time+0x28>)
    32a6:	4798      	blx	r3
}
    32a8:	bd10      	pop	{r4, pc}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	ffff8000 	.word	0xffff8000
    32b0:	000031c5 	.word	0x000031c5

000032b4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    32b4:	b570      	push	{r4, r5, r6, lr}
    32b6:	1c0e      	adds	r6, r1, #0
    32b8:	1c14      	adds	r4, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    32ba:	6805      	ldr	r5, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    32bc:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    32be:	2a01      	cmp	r2, #1
    32c0:	d80b      	bhi.n	32da <rtc_calendar_set_alarm+0x26>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(module, &(alarm->time));
    32c2:	4b07      	ldr	r3, [pc, #28]	; (32e0 <rtc_calendar_set_alarm+0x2c>)
    32c4:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    32c6:	7aab      	ldrb	r3, [r5, #10]
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
    32c8:	b25b      	sxtb	r3, r3
    32ca:	2b00      	cmp	r3, #0
    32cc:	dbfb      	blt.n	32c6 <rtc_calendar_set_alarm+0x12>
    32ce:	00e4      	lsls	r4, r4, #3
    32d0:	192d      	adds	r5, r5, r4
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    32d2:	61a8      	str	r0, [r5, #24]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    32d4:	7a33      	ldrb	r3, [r6, #8]
    32d6:	772b      	strb	r3, [r5, #28]

	return STATUS_OK;
    32d8:	2300      	movs	r3, #0
}
    32da:	1c18      	adds	r0, r3, #0
    32dc:	bd70      	pop	{r4, r5, r6, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00003189 	.word	0x00003189

000032e4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    32e4:	b530      	push	{r4, r5, lr}
    32e6:	b083      	sub	sp, #12
    32e8:	1c04      	adds	r4, r0, #0
    32ea:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    32ec:	6001      	str	r1, [r0, #0]
    32ee:	4b1c      	ldr	r3, [pc, #112]	; (3360 <rtc_calendar_init+0x7c>)
    32f0:	6999      	ldr	r1, [r3, #24]
    32f2:	2220      	movs	r2, #32
    32f4:	430a      	orrs	r2, r1
    32f6:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    32f8:	a901      	add	r1, sp, #4
    32fa:	2302      	movs	r3, #2
    32fc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    32fe:	2004      	movs	r0, #4
    3300:	4b18      	ldr	r3, [pc, #96]	; (3364 <rtc_calendar_init+0x80>)
    3302:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3304:	2004      	movs	r0, #4
    3306:	4b18      	ldr	r3, [pc, #96]	; (3368 <rtc_calendar_init+0x84>)
    3308:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    330a:	1c20      	adds	r0, r4, #0
    330c:	4b17      	ldr	r3, [pc, #92]	; (336c <rtc_calendar_init+0x88>)
    330e:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3310:	792b      	ldrb	r3, [r5, #4]
    3312:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    3314:	78eb      	ldrb	r3, [r5, #3]
    3316:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
    3318:	88eb      	ldrh	r3, [r5, #6]
    331a:	80e3      	strh	r3, [r4, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    331c:	4b14      	ldr	r3, [pc, #80]	; (3370 <rtc_calendar_init+0x8c>)
    331e:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3320:	6823      	ldr	r3, [r4, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3322:	882a      	ldrh	r2, [r5, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3324:	7929      	ldrb	r1, [r5, #4]
    3326:	2900      	cmp	r1, #0
    3328:	d002      	beq.n	3330 <rtc_calendar_init+0x4c>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    332a:	2108      	movs	r1, #8
    332c:	430a      	orrs	r2, r1
    332e:	e001      	b.n	3334 <rtc_calendar_init+0x50>

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3330:	2148      	movs	r1, #72	; 0x48
    3332:	430a      	orrs	r2, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3334:	78a9      	ldrb	r1, [r5, #2]
    3336:	2900      	cmp	r1, #0
    3338:	d001      	beq.n	333e <rtc_calendar_init+0x5a>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    333a:	2180      	movs	r1, #128	; 0x80
    333c:	430a      	orrs	r2, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    333e:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    3340:	78ea      	ldrb	r2, [r5, #3]
    3342:	2a00      	cmp	r2, #0
    3344:	d004      	beq.n	3350 <rtc_calendar_init+0x6c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    3346:	8859      	ldrh	r1, [r3, #2]
    3348:	2280      	movs	r2, #128	; 0x80
    334a:	01d2      	lsls	r2, r2, #7
    334c:	430a      	orrs	r2, r1
    334e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    3350:	1c29      	adds	r1, r5, #0
    3352:	3108      	adds	r1, #8
    3354:	1c20      	adds	r0, r4, #0
    3356:	2200      	movs	r2, #0
    3358:	4b06      	ldr	r3, [pc, #24]	; (3374 <rtc_calendar_init+0x90>)
    335a:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
    335c:	b003      	add	sp, #12
    335e:	bd30      	pop	{r4, r5, pc}
    3360:	40000400 	.word	0x40000400
    3364:	00004ad5 	.word	0x00004ad5
    3368:	00004a49 	.word	0x00004a49
    336c:	00003249 	.word	0x00003249
    3370:	200003f8 	.word	0x200003f8
    3374:	000032b5 	.word	0x000032b5

00003378 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3378:	b538      	push	{r3, r4, r5, lr}
    337a:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    337c:	6801      	ldr	r1, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    337e:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3380:	2a01      	cmp	r2, #1
    3382:	d808      	bhi.n	3396 <rtc_calendar_get_alarm+0x1e>
    3384:	00d2      	lsls	r2, r2, #3
    3386:	188d      	adds	r5, r1, r2
		return STATUS_ERR_INVALID_ARG;
	}

	/* Read alarm value. */
	uint32_t register_value =
    3388:	69a9      	ldr	r1, [r5, #24]
			rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg;

	/* Convert to time structure. */
	_rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    338a:	1c22      	adds	r2, r4, #0
    338c:	4b03      	ldr	r3, [pc, #12]	; (339c <rtc_calendar_get_alarm+0x24>)
    338e:	4798      	blx	r3

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    3390:	7f2b      	ldrb	r3, [r5, #28]
    3392:	7223      	strb	r3, [r4, #8]

	return STATUS_OK;
    3394:	2300      	movs	r3, #0
}
    3396:	1c18      	adds	r0, r3, #0
    3398:	bd38      	pop	{r3, r4, r5, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	000031c5 	.word	0x000031c5

000033a0 <rtc_calendar_swap_time_mode>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
    33a0:	b570      	push	{r4, r5, r6, lr}
    33a2:	b086      	sub	sp, #24
    33a4:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33a6:	6806      	ldr	r6, [r0, #0]
	/* Initialize time structure. */
	struct rtc_calendar_time time;
	struct rtc_calendar_alarm_time alarm;

	/* Get current time. */
	rtc_calendar_get_time(module, &time);
    33a8:	a904      	add	r1, sp, #16
    33aa:	4b3e      	ldr	r3, [pc, #248]	; (34a4 <rtc_calendar_swap_time_mode+0x104>)
    33ac:	4798      	blx	r3

	/* Check current mode. */
	if (module->clock_24h) {
    33ae:	7923      	ldrb	r3, [r4, #4]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d01c      	beq.n	33ee <rtc_calendar_swap_time_mode+0x4e>
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
    33b4:	ab04      	add	r3, sp, #16
    33b6:	7898      	ldrb	r0, [r3, #2]
    33b8:	220b      	movs	r2, #11
    33ba:	4282      	cmp	r2, r0
    33bc:	4192      	sbcs	r2, r2
    33be:	4252      	negs	r2, r2
    33c0:	70da      	strb	r2, [r3, #3]

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
    33c2:	210c      	movs	r1, #12
    33c4:	4b38      	ldr	r3, [pc, #224]	; (34a8 <rtc_calendar_swap_time_mode+0x108>)
    33c6:	4798      	blx	r3
    33c8:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    33ca:	2900      	cmp	r1, #0
    33cc:	d147      	bne.n	345e <rtc_calendar_swap_time_mode+0xbe>
			time.hour = 12;
    33ce:	220c      	movs	r2, #12
    33d0:	ab04      	add	r3, sp, #16
    33d2:	709a      	strb	r2, [r3, #2]
    33d4:	e045      	b.n	3462 <rtc_calendar_swap_time_mode+0xc2>
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
    33d6:	220c      	movs	r2, #12
    33d8:	ab01      	add	r3, sp, #4
    33da:	709a      	strb	r2, [r3, #2]
			}
			module->clock_24h = false;
    33dc:	2500      	movs	r5, #0
    33de:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    33e0:	1c20      	adds	r0, r4, #0
    33e2:	a901      	add	r1, sp, #4
    33e4:	2200      	movs	r2, #0
    33e6:	4b31      	ldr	r3, [pc, #196]	; (34ac <rtc_calendar_swap_time_mode+0x10c>)
    33e8:	4798      	blx	r3
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
    33ea:	7125      	strb	r5, [r4, #4]
    33ec:	e028      	b.n	3440 <rtc_calendar_swap_time_mode+0xa0>
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
    33ee:	ab04      	add	r3, sp, #16
    33f0:	78db      	ldrb	r3, [r3, #3]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d006      	beq.n	3404 <rtc_calendar_swap_time_mode+0x64>
			time.hour = time.hour + 12;
    33f6:	ab04      	add	r3, sp, #16
    33f8:	789a      	ldrb	r2, [r3, #2]
    33fa:	320c      	adds	r2, #12
    33fc:	709a      	strb	r2, [r3, #2]

			time.pm = 0;
    33fe:	2200      	movs	r2, #0
    3400:	70da      	strb	r2, [r3, #3]
    3402:	e043      	b.n	348c <rtc_calendar_swap_time_mode+0xec>
		} else if (time.hour == 12) {
    3404:	ab04      	add	r3, sp, #16
    3406:	789b      	ldrb	r3, [r3, #2]
    3408:	2b0c      	cmp	r3, #12
    340a:	d13f      	bne.n	348c <rtc_calendar_swap_time_mode+0xec>
			time.hour = 0;
    340c:	2200      	movs	r2, #0
    340e:	ab04      	add	r3, sp, #16
    3410:	709a      	strb	r2, [r3, #2]
    3412:	e03b      	b.n	348c <rtc_calendar_swap_time_mode+0xec>

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			if (alarm.time.pm == 1) {
				alarm.time.hour = alarm.time.hour + 12;
    3414:	a901      	add	r1, sp, #4
    3416:	788b      	ldrb	r3, [r1, #2]
    3418:	330c      	adds	r3, #12
    341a:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    341c:	2300      	movs	r3, #0
    341e:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    3420:	2301      	movs	r3, #1
    3422:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    3424:	1c20      	adds	r0, r4, #0
    3426:	2200      	movs	r2, #0
    3428:	4b20      	ldr	r3, [pc, #128]	; (34ac <rtc_calendar_swap_time_mode+0x10c>)
    342a:	4798      	blx	r3
    342c:	e006      	b.n	343c <rtc_calendar_swap_time_mode+0x9c>
				module->clock_24h = false;
			} else if (alarm.time.hour == 12) {
    342e:	ab01      	add	r3, sp, #4
    3430:	789b      	ldrb	r3, [r3, #2]
    3432:	2b0c      	cmp	r3, #12
    3434:	d102      	bne.n	343c <rtc_calendar_swap_time_mode+0x9c>
				alarm.time.hour = 0;
    3436:	2200      	movs	r2, #0
    3438:	ab01      	add	r3, sp, #4
    343a:	709a      	strb	r2, [r3, #2]
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
    343c:	2301      	movs	r3, #1
    343e:	7123      	strb	r3, [r4, #4]
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
    3440:	1c20      	adds	r0, r4, #0
    3442:	4b1b      	ldr	r3, [pc, #108]	; (34b0 <rtc_calendar_swap_time_mode+0x110>)
    3444:	4798      	blx	r3

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    3446:	8832      	ldrh	r2, [r6, #0]
    3448:	2340      	movs	r3, #64	; 0x40
    344a:	4053      	eors	r3, r2
    344c:	8033      	strh	r3, [r6, #0]

	/* Enable RTC. */
	rtc_calendar_enable(module);
    344e:	1c20      	adds	r0, r4, #0
    3450:	4b18      	ldr	r3, [pc, #96]	; (34b4 <rtc_calendar_swap_time_mode+0x114>)
    3452:	4798      	blx	r3

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
    3454:	1c20      	adds	r0, r4, #0
    3456:	a904      	add	r1, sp, #16
    3458:	4b17      	ldr	r3, [pc, #92]	; (34b8 <rtc_calendar_swap_time_mode+0x118>)
    345a:	4798      	blx	r3
    345c:	e020      	b.n	34a0 <rtc_calendar_swap_time_mode+0x100>
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
    345e:	ab04      	add	r3, sp, #16
    3460:	7099      	strb	r1, [r3, #2]
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    3462:	ad01      	add	r5, sp, #4
    3464:	1c20      	adds	r0, r4, #0
    3466:	1c29      	adds	r1, r5, #0
    3468:	2200      	movs	r2, #0
    346a:	4b14      	ldr	r3, [pc, #80]	; (34bc <rtc_calendar_swap_time_mode+0x11c>)
    346c:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    346e:	78a8      	ldrb	r0, [r5, #2]
    3470:	230b      	movs	r3, #11
    3472:	4283      	cmp	r3, r0
    3474:	419b      	sbcs	r3, r3
    3476:	425b      	negs	r3, r3
    3478:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    347a:	210c      	movs	r1, #12
    347c:	4b0a      	ldr	r3, [pc, #40]	; (34a8 <rtc_calendar_swap_time_mode+0x108>)
    347e:	4798      	blx	r3
    3480:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    3482:	2900      	cmp	r1, #0
    3484:	d0a7      	beq.n	33d6 <rtc_calendar_swap_time_mode+0x36>

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
    3486:	ab01      	add	r3, sp, #4
    3488:	7099      	strb	r1, [r3, #2]
    348a:	e7a7      	b.n	33dc <rtc_calendar_swap_time_mode+0x3c>
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    348c:	ad01      	add	r5, sp, #4
    348e:	1c20      	adds	r0, r4, #0
    3490:	1c29      	adds	r1, r5, #0
    3492:	2200      	movs	r2, #0
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <rtc_calendar_swap_time_mode+0x11c>)
    3496:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    3498:	78eb      	ldrb	r3, [r5, #3]
    349a:	2b00      	cmp	r3, #0
    349c:	d0c7      	beq.n	342e <rtc_calendar_swap_time_mode+0x8e>
    349e:	e7b9      	b.n	3414 <rtc_calendar_swap_time_mode+0x74>
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
    34a0:	b006      	add	sp, #24
    34a2:	bd70      	pop	{r4, r5, r6, pc}
    34a4:	00003289 	.word	0x00003289
    34a8:	00006dad 	.word	0x00006dad
    34ac:	000032b5 	.word	0x000032b5
    34b0:	00003225 	.word	0x00003225
    34b4:	00003205 	.word	0x00003205
    34b8:	00003271 	.word	0x00003271
    34bc:	00003379 	.word	0x00003379

000034c0 <rtc_calendar_register_callback>:
	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
    34c0:	2a01      	cmp	r2, #1
    34c2:	d901      	bls.n	34c8 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
    34c4:	2017      	movs	r0, #23
    34c6:	e00a      	b.n	34de <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    34c8:	1c93      	adds	r3, r2, #2
    34ca:	009b      	lsls	r3, r3, #2
    34cc:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    34ce:	8a03      	ldrh	r3, [r0, #16]
    34d0:	2101      	movs	r1, #1
    34d2:	4091      	lsls	r1, r2
    34d4:	1c0a      	adds	r2, r1, #0
    34d6:	431a      	orrs	r2, r3
    34d8:	b292      	uxth	r2, r2
    34da:	8202      	strh	r2, [r0, #16]
		struct rtc_module *const module,
		rtc_calendar_callback_t callback,
		enum rtc_calendar_callback callback_type)
{

	enum status_code status = STATUS_OK;
    34dc:	2000      	movs	r0, #0
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
    34de:	4770      	bx	lr

000034e0 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
    34e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    34e2:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
    34e4:	2901      	cmp	r1, #1
    34e6:	d102      	bne.n	34ee <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
    34e8:	2280      	movs	r2, #128	; 0x80
    34ea:	71da      	strb	r2, [r3, #7]
    34ec:	e004      	b.n	34f8 <rtc_calendar_enable_callback+0x18>
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
    34ee:	2201      	movs	r2, #1
    34f0:	408a      	lsls	r2, r1
    34f2:	2401      	movs	r4, #1
    34f4:	4022      	ands	r2, r4
    34f6:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    34f8:	8a43      	ldrh	r3, [r0, #18]
    34fa:	2201      	movs	r2, #1
    34fc:	408a      	lsls	r2, r1
    34fe:	1c11      	adds	r1, r2, #0
    3500:	4319      	orrs	r1, r3
    3502:	b289      	uxth	r1, r1
    3504:	8241      	strh	r1, [r0, #18]
}
    3506:	bd10      	pop	{r4, pc}

00003508 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    3508:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    350a:	4b0e      	ldr	r3, [pc, #56]	; (3544 <RTC_Handler+0x3c>)
    350c:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
    350e:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    3510:	8a5a      	ldrh	r2, [r3, #18]
	callback_mask &= module->registered_callback;
    3512:	8a19      	ldrh	r1, [r3, #16]
    3514:	1c08      	adds	r0, r1, #0
    3516:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    3518:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    351a:	79e1      	ldrb	r1, [r4, #7]
    351c:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    351e:	09d1      	lsrs	r1, r2, #7
    3520:	d006      	beq.n	3530 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    3522:	0781      	lsls	r1, r0, #30
    3524:	d501      	bpl.n	352a <RTC_Handler+0x22>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    3526:	68db      	ldr	r3, [r3, #12]
    3528:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    352a:	2380      	movs	r3, #128	; 0x80
    352c:	7223      	strb	r3, [r4, #8]
    352e:	e007      	b.n	3540 <RTC_Handler+0x38>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    3530:	07d1      	lsls	r1, r2, #31
    3532:	d505      	bpl.n	3540 <RTC_Handler+0x38>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    3534:	07c2      	lsls	r2, r0, #31
    3536:	d501      	bpl.n	353c <RTC_Handler+0x34>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    3538:	689b      	ldr	r3, [r3, #8]
    353a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    353c:	2301      	movs	r3, #1
    353e:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    3540:	bd10      	pop	{r4, pc}
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	200003f8 	.word	0x200003f8

00003548 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3548:	b510      	push	{r4, lr}
    354a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    354c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    354e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    3550:	4299      	cmp	r1, r3
    3552:	d30c      	bcc.n	356e <_sercom_get_sync_baud_val+0x26>
    3554:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    3556:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
    3558:	1c60      	adds	r0, r4, #1
    355a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    355c:	428b      	cmp	r3, r1
    355e:	d801      	bhi.n	3564 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
    3560:	1c04      	adds	r4, r0, #0
    3562:	e7f8      	b.n	3556 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3564:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3566:	2cff      	cmp	r4, #255	; 0xff
    3568:	d801      	bhi.n	356e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    356a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    356c:	2000      	movs	r0, #0
	}
}
    356e:	bd10      	pop	{r4, pc}

00003570 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3570:	b5f0      	push	{r4, r5, r6, r7, lr}
    3572:	465f      	mov	r7, fp
    3574:	4656      	mov	r6, sl
    3576:	464d      	mov	r5, r9
    3578:	4644      	mov	r4, r8
    357a:	b4f0      	push	{r4, r5, r6, r7}
    357c:	b087      	sub	sp, #28
    357e:	1c06      	adds	r6, r0, #0
    3580:	1c0d      	adds	r5, r1, #0
    3582:	9204      	str	r2, [sp, #16]
    3584:	aa10      	add	r2, sp, #64	; 0x40
    3586:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3588:	1c32      	adds	r2, r6, #0
    358a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    358c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    358e:	428a      	cmp	r2, r1
    3590:	d900      	bls.n	3594 <_sercom_get_async_baud_val+0x24>
    3592:	e0b3      	b.n	36fc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3594:	2b00      	cmp	r3, #0
    3596:	d14b      	bne.n	3630 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3598:	2100      	movs	r1, #0
    359a:	1c32      	adds	r2, r6, #0
    359c:	4c5e      	ldr	r4, [pc, #376]	; (3718 <_sercom_get_async_baud_val+0x1a8>)
    359e:	47a0      	blx	r4
    35a0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    35a2:	1c2e      	adds	r6, r5, #0
    35a4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    35a6:	2000      	movs	r0, #0
    35a8:	2100      	movs	r1, #0
    35aa:	2200      	movs	r2, #0
    35ac:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    35ae:	243f      	movs	r4, #63	; 0x3f
    35b0:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
    35b2:	2501      	movs	r5, #1
    35b4:	46a8      	mov	r8, r5
    35b6:	9002      	str	r0, [sp, #8]
    35b8:	9103      	str	r1, [sp, #12]
    35ba:	4661      	mov	r1, ip
    35bc:	3920      	subs	r1, #32
    35be:	d403      	bmi.n	35c8 <_sercom_get_async_baud_val+0x58>
    35c0:	4640      	mov	r0, r8
    35c2:	4088      	lsls	r0, r1
    35c4:	4681      	mov	r9, r0
    35c6:	e005      	b.n	35d4 <_sercom_get_async_baud_val+0x64>
    35c8:	2120      	movs	r1, #32
    35ca:	4665      	mov	r5, ip
    35cc:	1b4c      	subs	r4, r1, r5
    35ce:	4640      	mov	r0, r8
    35d0:	40e0      	lsrs	r0, r4
    35d2:	4681      	mov	r9, r0
    35d4:	4641      	mov	r1, r8
    35d6:	4664      	mov	r4, ip
    35d8:	40a1      	lsls	r1, r4
    35da:	468a      	mov	sl, r1

		r = r << 1;
    35dc:	1c10      	adds	r0, r2, #0
    35de:	1c19      	adds	r1, r3, #0
    35e0:	1880      	adds	r0, r0, r2
    35e2:	4159      	adcs	r1, r3
    35e4:	1c02      	adds	r2, r0, #0
    35e6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    35e8:	465d      	mov	r5, fp
    35ea:	464c      	mov	r4, r9
    35ec:	4225      	tst	r5, r4
    35ee:	d002      	beq.n	35f6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
    35f0:	4642      	mov	r2, r8
    35f2:	4302      	orrs	r2, r0
    35f4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    35f6:	429f      	cmp	r7, r3
    35f8:	d80c      	bhi.n	3614 <_sercom_get_async_baud_val+0xa4>
    35fa:	d101      	bne.n	3600 <_sercom_get_async_baud_val+0x90>
    35fc:	4296      	cmp	r6, r2
    35fe:	d809      	bhi.n	3614 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
    3600:	1b92      	subs	r2, r2, r6
    3602:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    3604:	4650      	mov	r0, sl
    3606:	9d02      	ldr	r5, [sp, #8]
    3608:	4328      	orrs	r0, r5
    360a:	4649      	mov	r1, r9
    360c:	9c03      	ldr	r4, [sp, #12]
    360e:	4321      	orrs	r1, r4
    3610:	9002      	str	r0, [sp, #8]
    3612:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3614:	4665      	mov	r5, ip
    3616:	3d01      	subs	r5, #1
    3618:	46ac      	mov	ip, r5
    361a:	d2ce      	bcs.n	35ba <_sercom_get_async_baud_val+0x4a>
    361c:	9802      	ldr	r0, [sp, #8]
    361e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3620:	4b3c      	ldr	r3, [pc, #240]	; (3714 <_sercom_get_async_baud_val+0x1a4>)
    3622:	4a3b      	ldr	r2, [pc, #236]	; (3710 <_sercom_get_async_baud_val+0x1a0>)
    3624:	1a12      	subs	r2, r2, r0
    3626:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3628:	0c12      	lsrs	r2, r2, #16
    362a:	041b      	lsls	r3, r3, #16
    362c:	431a      	orrs	r2, r3
    362e:	e062      	b.n	36f6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    3630:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3632:	2b01      	cmp	r3, #1
    3634:	d15f      	bne.n	36f6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    3636:	0f4f      	lsrs	r7, r1, #29
    3638:	46b9      	mov	r9, r7
    363a:	00cd      	lsls	r5, r1, #3
    363c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
    363e:	2100      	movs	r1, #0
    3640:	1c32      	adds	r2, r6, #0
    3642:	2300      	movs	r3, #0
    3644:	4c34      	ldr	r4, [pc, #208]	; (3718 <_sercom_get_async_baud_val+0x1a8>)
    3646:	47a0      	blx	r4
    3648:	1c06      	adds	r6, r0, #0
    364a:	1c0f      	adds	r7, r1, #0
    364c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    364e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    3650:	9602      	str	r6, [sp, #8]
    3652:	9703      	str	r7, [sp, #12]
    3654:	469a      	mov	sl, r3
    3656:	4650      	mov	r0, sl
    3658:	b2c0      	uxtb	r0, r0
    365a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    365c:	2100      	movs	r1, #0
    365e:	4688      	mov	r8, r1
    3660:	2200      	movs	r2, #0
    3662:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3664:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3666:	1c27      	adds	r7, r4, #0
    3668:	3f20      	subs	r7, #32
    366a:	d403      	bmi.n	3674 <_sercom_get_async_baud_val+0x104>
    366c:	1c2e      	adds	r6, r5, #0
    366e:	40be      	lsls	r6, r7
    3670:	9601      	str	r6, [sp, #4]
    3672:	e004      	b.n	367e <_sercom_get_async_baud_val+0x10e>
    3674:	2020      	movs	r0, #32
    3676:	1b07      	subs	r7, r0, r4
    3678:	1c29      	adds	r1, r5, #0
    367a:	40f9      	lsrs	r1, r7
    367c:	9101      	str	r1, [sp, #4]
    367e:	1c2e      	adds	r6, r5, #0
    3680:	40a6      	lsls	r6, r4
    3682:	9600      	str	r6, [sp, #0]

		r = r << 1;
    3684:	1c10      	adds	r0, r2, #0
    3686:	1c19      	adds	r1, r3, #0
    3688:	1880      	adds	r0, r0, r2
    368a:	4159      	adcs	r1, r3
    368c:	1c02      	adds	r2, r0, #0
    368e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    3690:	465f      	mov	r7, fp
    3692:	4037      	ands	r7, r6
    3694:	46bc      	mov	ip, r7
    3696:	9e01      	ldr	r6, [sp, #4]
    3698:	464f      	mov	r7, r9
    369a:	403e      	ands	r6, r7
    369c:	4667      	mov	r7, ip
    369e:	433e      	orrs	r6, r7
    36a0:	d002      	beq.n	36a8 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
    36a2:	1c2a      	adds	r2, r5, #0
    36a4:	4302      	orrs	r2, r0
    36a6:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    36a8:	9803      	ldr	r0, [sp, #12]
    36aa:	4298      	cmp	r0, r3
    36ac:	d80b      	bhi.n	36c6 <_sercom_get_async_baud_val+0x156>
    36ae:	d102      	bne.n	36b6 <_sercom_get_async_baud_val+0x146>
    36b0:	9902      	ldr	r1, [sp, #8]
    36b2:	4291      	cmp	r1, r2
    36b4:	d807      	bhi.n	36c6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
    36b6:	9e02      	ldr	r6, [sp, #8]
    36b8:	9f03      	ldr	r7, [sp, #12]
    36ba:	1b92      	subs	r2, r2, r6
    36bc:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    36be:	4647      	mov	r7, r8
    36c0:	9800      	ldr	r0, [sp, #0]
    36c2:	4307      	orrs	r7, r0
    36c4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    36c6:	3c01      	subs	r4, #1
    36c8:	d2cd      	bcs.n	3666 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    36ca:	4641      	mov	r1, r8
    36cc:	4652      	mov	r2, sl
    36ce:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    36d0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    36d2:	4c12      	ldr	r4, [pc, #72]	; (371c <_sercom_get_async_baud_val+0x1ac>)
    36d4:	42a3      	cmp	r3, r4
    36d6:	d908      	bls.n	36ea <_sercom_get_async_baud_val+0x17a>
    36d8:	9a05      	ldr	r2, [sp, #20]
    36da:	3201      	adds	r2, #1
    36dc:	b2d2      	uxtb	r2, r2
    36de:	9205      	str	r2, [sp, #20]
    36e0:	2601      	movs	r6, #1
    36e2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    36e4:	4657      	mov	r7, sl
    36e6:	2f08      	cmp	r7, #8
    36e8:	d1b5      	bne.n	3656 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36ea:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    36ec:	9805      	ldr	r0, [sp, #20]
    36ee:	2808      	cmp	r0, #8
    36f0:	d004      	beq.n	36fc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    36f2:	0342      	lsls	r2, r0, #13
    36f4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    36f6:	9c04      	ldr	r4, [sp, #16]
    36f8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
    36fa:	2400      	movs	r4, #0
}
    36fc:	1c20      	adds	r0, r4, #0
    36fe:	b007      	add	sp, #28
    3700:	bc3c      	pop	{r2, r3, r4, r5}
    3702:	4690      	mov	r8, r2
    3704:	4699      	mov	r9, r3
    3706:	46a2      	mov	sl, r4
    3708:	46ab      	mov	fp, r5
    370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    370c:	46c0      	nop			; (mov r8, r8)
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	00000000 	.word	0x00000000
    3714:	00000001 	.word	0x00000001
    3718:	00006e85 	.word	0x00006e85
    371c:	00001fff 	.word	0x00001fff

00003720 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3720:	b510      	push	{r4, lr}
    3722:	b082      	sub	sp, #8
    3724:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    3726:	4b0f      	ldr	r3, [pc, #60]	; (3764 <sercom_set_gclk_generator+0x44>)
    3728:	781b      	ldrb	r3, [r3, #0]
    372a:	2b00      	cmp	r3, #0
    372c:	d001      	beq.n	3732 <sercom_set_gclk_generator+0x12>
    372e:	2900      	cmp	r1, #0
    3730:	d00d      	beq.n	374e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    3732:	a901      	add	r1, sp, #4
    3734:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3736:	2013      	movs	r0, #19
    3738:	4b0b      	ldr	r3, [pc, #44]	; (3768 <sercom_set_gclk_generator+0x48>)
    373a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    373c:	2013      	movs	r0, #19
    373e:	4b0b      	ldr	r3, [pc, #44]	; (376c <sercom_set_gclk_generator+0x4c>)
    3740:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    3742:	4b08      	ldr	r3, [pc, #32]	; (3764 <sercom_set_gclk_generator+0x44>)
    3744:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3746:	2201      	movs	r2, #1
    3748:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    374a:	2000      	movs	r0, #0
    374c:	e007      	b.n	375e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
    374e:	4b05      	ldr	r3, [pc, #20]	; (3764 <sercom_set_gclk_generator+0x44>)
    3750:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3752:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
    3754:	1b14      	subs	r4, r2, r4
    3756:	1e62      	subs	r2, r4, #1
    3758:	4194      	sbcs	r4, r2
    375a:	4264      	negs	r4, r4
    375c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    375e:	b002      	add	sp, #8
    3760:	bd10      	pop	{r4, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	200000d0 	.word	0x200000d0
    3768:	00004ad5 	.word	0x00004ad5
    376c:	00004a49 	.word	0x00004a49

00003770 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3770:	4b44      	ldr	r3, [pc, #272]	; (3884 <_sercom_get_default_pad+0x114>)
    3772:	4298      	cmp	r0, r3
    3774:	d033      	beq.n	37de <_sercom_get_default_pad+0x6e>
    3776:	d806      	bhi.n	3786 <_sercom_get_default_pad+0x16>
    3778:	4b43      	ldr	r3, [pc, #268]	; (3888 <_sercom_get_default_pad+0x118>)
    377a:	4298      	cmp	r0, r3
    377c:	d00d      	beq.n	379a <_sercom_get_default_pad+0x2a>
    377e:	4b43      	ldr	r3, [pc, #268]	; (388c <_sercom_get_default_pad+0x11c>)
    3780:	4298      	cmp	r0, r3
    3782:	d01b      	beq.n	37bc <_sercom_get_default_pad+0x4c>
    3784:	e06f      	b.n	3866 <_sercom_get_default_pad+0xf6>
    3786:	4b42      	ldr	r3, [pc, #264]	; (3890 <_sercom_get_default_pad+0x120>)
    3788:	4298      	cmp	r0, r3
    378a:	d04a      	beq.n	3822 <_sercom_get_default_pad+0xb2>
    378c:	4b41      	ldr	r3, [pc, #260]	; (3894 <_sercom_get_default_pad+0x124>)
    378e:	4298      	cmp	r0, r3
    3790:	d058      	beq.n	3844 <_sercom_get_default_pad+0xd4>
    3792:	4b41      	ldr	r3, [pc, #260]	; (3898 <_sercom_get_default_pad+0x128>)
    3794:	4298      	cmp	r0, r3
    3796:	d166      	bne.n	3866 <_sercom_get_default_pad+0xf6>
    3798:	e032      	b.n	3800 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    379a:	2901      	cmp	r1, #1
    379c:	d065      	beq.n	386a <_sercom_get_default_pad+0xfa>
    379e:	2900      	cmp	r1, #0
    37a0:	d004      	beq.n	37ac <_sercom_get_default_pad+0x3c>
    37a2:	2902      	cmp	r1, #2
    37a4:	d006      	beq.n	37b4 <_sercom_get_default_pad+0x44>
    37a6:	2903      	cmp	r1, #3
    37a8:	d006      	beq.n	37b8 <_sercom_get_default_pad+0x48>
    37aa:	e001      	b.n	37b0 <_sercom_get_default_pad+0x40>
    37ac:	483b      	ldr	r0, [pc, #236]	; (389c <_sercom_get_default_pad+0x12c>)
    37ae:	e067      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    37b0:	2000      	movs	r0, #0
    37b2:	e065      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37b4:	483a      	ldr	r0, [pc, #232]	; (38a0 <_sercom_get_default_pad+0x130>)
    37b6:	e063      	b.n	3880 <_sercom_get_default_pad+0x110>
    37b8:	483a      	ldr	r0, [pc, #232]	; (38a4 <_sercom_get_default_pad+0x134>)
    37ba:	e061      	b.n	3880 <_sercom_get_default_pad+0x110>
    37bc:	2901      	cmp	r1, #1
    37be:	d056      	beq.n	386e <_sercom_get_default_pad+0xfe>
    37c0:	2900      	cmp	r1, #0
    37c2:	d004      	beq.n	37ce <_sercom_get_default_pad+0x5e>
    37c4:	2902      	cmp	r1, #2
    37c6:	d006      	beq.n	37d6 <_sercom_get_default_pad+0x66>
    37c8:	2903      	cmp	r1, #3
    37ca:	d006      	beq.n	37da <_sercom_get_default_pad+0x6a>
    37cc:	e001      	b.n	37d2 <_sercom_get_default_pad+0x62>
    37ce:	2003      	movs	r0, #3
    37d0:	e056      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    37d2:	2000      	movs	r0, #0
    37d4:	e054      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37d6:	4834      	ldr	r0, [pc, #208]	; (38a8 <_sercom_get_default_pad+0x138>)
    37d8:	e052      	b.n	3880 <_sercom_get_default_pad+0x110>
    37da:	4834      	ldr	r0, [pc, #208]	; (38ac <_sercom_get_default_pad+0x13c>)
    37dc:	e050      	b.n	3880 <_sercom_get_default_pad+0x110>
    37de:	2901      	cmp	r1, #1
    37e0:	d047      	beq.n	3872 <_sercom_get_default_pad+0x102>
    37e2:	2900      	cmp	r1, #0
    37e4:	d004      	beq.n	37f0 <_sercom_get_default_pad+0x80>
    37e6:	2902      	cmp	r1, #2
    37e8:	d006      	beq.n	37f8 <_sercom_get_default_pad+0x88>
    37ea:	2903      	cmp	r1, #3
    37ec:	d006      	beq.n	37fc <_sercom_get_default_pad+0x8c>
    37ee:	e001      	b.n	37f4 <_sercom_get_default_pad+0x84>
    37f0:	482f      	ldr	r0, [pc, #188]	; (38b0 <_sercom_get_default_pad+0x140>)
    37f2:	e045      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    37f4:	2000      	movs	r0, #0
    37f6:	e043      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37f8:	482e      	ldr	r0, [pc, #184]	; (38b4 <_sercom_get_default_pad+0x144>)
    37fa:	e041      	b.n	3880 <_sercom_get_default_pad+0x110>
    37fc:	482e      	ldr	r0, [pc, #184]	; (38b8 <_sercom_get_default_pad+0x148>)
    37fe:	e03f      	b.n	3880 <_sercom_get_default_pad+0x110>
    3800:	2901      	cmp	r1, #1
    3802:	d038      	beq.n	3876 <_sercom_get_default_pad+0x106>
    3804:	2900      	cmp	r1, #0
    3806:	d004      	beq.n	3812 <_sercom_get_default_pad+0xa2>
    3808:	2902      	cmp	r1, #2
    380a:	d006      	beq.n	381a <_sercom_get_default_pad+0xaa>
    380c:	2903      	cmp	r1, #3
    380e:	d006      	beq.n	381e <_sercom_get_default_pad+0xae>
    3810:	e001      	b.n	3816 <_sercom_get_default_pad+0xa6>
    3812:	482a      	ldr	r0, [pc, #168]	; (38bc <_sercom_get_default_pad+0x14c>)
    3814:	e034      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3816:	2000      	movs	r0, #0
    3818:	e032      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    381a:	4829      	ldr	r0, [pc, #164]	; (38c0 <_sercom_get_default_pad+0x150>)
    381c:	e030      	b.n	3880 <_sercom_get_default_pad+0x110>
    381e:	4829      	ldr	r0, [pc, #164]	; (38c4 <_sercom_get_default_pad+0x154>)
    3820:	e02e      	b.n	3880 <_sercom_get_default_pad+0x110>
    3822:	2901      	cmp	r1, #1
    3824:	d029      	beq.n	387a <_sercom_get_default_pad+0x10a>
    3826:	2900      	cmp	r1, #0
    3828:	d004      	beq.n	3834 <_sercom_get_default_pad+0xc4>
    382a:	2902      	cmp	r1, #2
    382c:	d006      	beq.n	383c <_sercom_get_default_pad+0xcc>
    382e:	2903      	cmp	r1, #3
    3830:	d006      	beq.n	3840 <_sercom_get_default_pad+0xd0>
    3832:	e001      	b.n	3838 <_sercom_get_default_pad+0xc8>
    3834:	4824      	ldr	r0, [pc, #144]	; (38c8 <_sercom_get_default_pad+0x158>)
    3836:	e023      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3838:	2000      	movs	r0, #0
    383a:	e021      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    383c:	4823      	ldr	r0, [pc, #140]	; (38cc <_sercom_get_default_pad+0x15c>)
    383e:	e01f      	b.n	3880 <_sercom_get_default_pad+0x110>
    3840:	4823      	ldr	r0, [pc, #140]	; (38d0 <_sercom_get_default_pad+0x160>)
    3842:	e01d      	b.n	3880 <_sercom_get_default_pad+0x110>
    3844:	2901      	cmp	r1, #1
    3846:	d01a      	beq.n	387e <_sercom_get_default_pad+0x10e>
    3848:	2900      	cmp	r1, #0
    384a:	d004      	beq.n	3856 <_sercom_get_default_pad+0xe6>
    384c:	2902      	cmp	r1, #2
    384e:	d006      	beq.n	385e <_sercom_get_default_pad+0xee>
    3850:	2903      	cmp	r1, #3
    3852:	d006      	beq.n	3862 <_sercom_get_default_pad+0xf2>
    3854:	e001      	b.n	385a <_sercom_get_default_pad+0xea>
    3856:	481f      	ldr	r0, [pc, #124]	; (38d4 <_sercom_get_default_pad+0x164>)
    3858:	e012      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    385a:	2000      	movs	r0, #0
    385c:	e010      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    385e:	481e      	ldr	r0, [pc, #120]	; (38d8 <_sercom_get_default_pad+0x168>)
    3860:	e00e      	b.n	3880 <_sercom_get_default_pad+0x110>
    3862:	481e      	ldr	r0, [pc, #120]	; (38dc <_sercom_get_default_pad+0x16c>)
    3864:	e00c      	b.n	3880 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3866:	2000      	movs	r0, #0
    3868:	e00a      	b.n	3880 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    386a:	481d      	ldr	r0, [pc, #116]	; (38e0 <_sercom_get_default_pad+0x170>)
    386c:	e008      	b.n	3880 <_sercom_get_default_pad+0x110>
    386e:	481d      	ldr	r0, [pc, #116]	; (38e4 <_sercom_get_default_pad+0x174>)
    3870:	e006      	b.n	3880 <_sercom_get_default_pad+0x110>
    3872:	481d      	ldr	r0, [pc, #116]	; (38e8 <_sercom_get_default_pad+0x178>)
    3874:	e004      	b.n	3880 <_sercom_get_default_pad+0x110>
    3876:	481d      	ldr	r0, [pc, #116]	; (38ec <_sercom_get_default_pad+0x17c>)
    3878:	e002      	b.n	3880 <_sercom_get_default_pad+0x110>
    387a:	481d      	ldr	r0, [pc, #116]	; (38f0 <_sercom_get_default_pad+0x180>)
    387c:	e000      	b.n	3880 <_sercom_get_default_pad+0x110>
    387e:	481d      	ldr	r0, [pc, #116]	; (38f4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    3880:	4770      	bx	lr
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	42001000 	.word	0x42001000
    3888:	42000800 	.word	0x42000800
    388c:	42000c00 	.word	0x42000c00
    3890:	42001800 	.word	0x42001800
    3894:	42001c00 	.word	0x42001c00
    3898:	42001400 	.word	0x42001400
    389c:	00040003 	.word	0x00040003
    38a0:	00060003 	.word	0x00060003
    38a4:	00070003 	.word	0x00070003
    38a8:	001e0003 	.word	0x001e0003
    38ac:	001f0003 	.word	0x001f0003
    38b0:	00080003 	.word	0x00080003
    38b4:	000a0003 	.word	0x000a0003
    38b8:	000b0003 	.word	0x000b0003
    38bc:	00100003 	.word	0x00100003
    38c0:	00120003 	.word	0x00120003
    38c4:	00130003 	.word	0x00130003
    38c8:	000c0003 	.word	0x000c0003
    38cc:	000e0003 	.word	0x000e0003
    38d0:	000f0003 	.word	0x000f0003
    38d4:	00160003 	.word	0x00160003
    38d8:	00180003 	.word	0x00180003
    38dc:	00190003 	.word	0x00190003
    38e0:	00050003 	.word	0x00050003
    38e4:	00010003 	.word	0x00010003
    38e8:	00090003 	.word	0x00090003
    38ec:	00110003 	.word	0x00110003
    38f0:	000d0003 	.word	0x000d0003
    38f4:	00170003 	.word	0x00170003

000038f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    38f8:	b570      	push	{r4, r5, r6, lr}
    38fa:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    38fc:	4a0c      	ldr	r2, [pc, #48]	; (3930 <_sercom_get_sercom_inst_index+0x38>)
    38fe:	466b      	mov	r3, sp
    3900:	ca70      	ldmia	r2!, {r4, r5, r6}
    3902:	c370      	stmia	r3!, {r4, r5, r6}
    3904:	ca32      	ldmia	r2!, {r1, r4, r5}
    3906:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3908:	9e00      	ldr	r6, [sp, #0]
    390a:	4286      	cmp	r6, r0
    390c:	d006      	beq.n	391c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    390e:	2301      	movs	r3, #1
    3910:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3912:	4669      	mov	r1, sp
    3914:	5852      	ldr	r2, [r2, r1]
    3916:	4282      	cmp	r2, r0
    3918:	d103      	bne.n	3922 <_sercom_get_sercom_inst_index+0x2a>
    391a:	e000      	b.n	391e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    391c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    391e:	b2d8      	uxtb	r0, r3
    3920:	e003      	b.n	392a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3922:	3301      	adds	r3, #1
    3924:	2b06      	cmp	r3, #6
    3926:	d1f3      	bne.n	3910 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3928:	2000      	movs	r0, #0
}
    392a:	b006      	add	sp, #24
    392c:	bd70      	pop	{r4, r5, r6, pc}
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	00009134 	.word	0x00009134

00003934 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3934:	4770      	bx	lr
    3936:	46c0      	nop			; (mov r8, r8)

00003938 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3938:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    393a:	4b0a      	ldr	r3, [pc, #40]	; (3964 <_sercom_set_handler+0x2c>)
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	2b00      	cmp	r3, #0
    3940:	d10c      	bne.n	395c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3942:	4f09      	ldr	r7, [pc, #36]	; (3968 <_sercom_set_handler+0x30>)
    3944:	4e09      	ldr	r6, [pc, #36]	; (396c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3946:	4d0a      	ldr	r5, [pc, #40]	; (3970 <_sercom_set_handler+0x38>)
    3948:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    394a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    394c:	195a      	adds	r2, r3, r5
    394e:	6014      	str	r4, [r2, #0]
    3950:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3952:	2b18      	cmp	r3, #24
    3954:	d1f9      	bne.n	394a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3956:	2201      	movs	r2, #1
    3958:	4b02      	ldr	r3, [pc, #8]	; (3964 <_sercom_set_handler+0x2c>)
    395a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    395c:	0080      	lsls	r0, r0, #2
    395e:	4b02      	ldr	r3, [pc, #8]	; (3968 <_sercom_set_handler+0x30>)
    3960:	50c1      	str	r1, [r0, r3]
}
    3962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3964:	200000d4 	.word	0x200000d4
    3968:	200000d8 	.word	0x200000d8
    396c:	00003935 	.word	0x00003935
    3970:	200003fc 	.word	0x200003fc

00003974 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3974:	b510      	push	{r4, lr}
    3976:	b082      	sub	sp, #8
    3978:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    397a:	4668      	mov	r0, sp
    397c:	4905      	ldr	r1, [pc, #20]	; (3994 <_sercom_get_interrupt_vector+0x20>)
    397e:	2206      	movs	r2, #6
    3980:	4b05      	ldr	r3, [pc, #20]	; (3998 <_sercom_get_interrupt_vector+0x24>)
    3982:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3984:	1c20      	adds	r0, r4, #0
    3986:	4b05      	ldr	r3, [pc, #20]	; (399c <_sercom_get_interrupt_vector+0x28>)
    3988:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    398a:	466b      	mov	r3, sp
    398c:	5618      	ldrsb	r0, [r3, r0]
}
    398e:	b002      	add	sp, #8
    3990:	bd10      	pop	{r4, pc}
    3992:	46c0      	nop			; (mov r8, r8)
    3994:	0000914c 	.word	0x0000914c
    3998:	00006f29 	.word	0x00006f29
    399c:	000038f9 	.word	0x000038f9

000039a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39a0:	b508      	push	{r3, lr}
    39a2:	4b02      	ldr	r3, [pc, #8]	; (39ac <SERCOM0_Handler+0xc>)
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	2000      	movs	r0, #0
    39a8:	4798      	blx	r3
    39aa:	bd08      	pop	{r3, pc}
    39ac:	200000d8 	.word	0x200000d8

000039b0 <SERCOM1_Handler>:
    39b0:	b508      	push	{r3, lr}
    39b2:	4b02      	ldr	r3, [pc, #8]	; (39bc <SERCOM1_Handler+0xc>)
    39b4:	685b      	ldr	r3, [r3, #4]
    39b6:	2001      	movs	r0, #1
    39b8:	4798      	blx	r3
    39ba:	bd08      	pop	{r3, pc}
    39bc:	200000d8 	.word	0x200000d8

000039c0 <SERCOM2_Handler>:
    39c0:	b508      	push	{r3, lr}
    39c2:	4b02      	ldr	r3, [pc, #8]	; (39cc <SERCOM2_Handler+0xc>)
    39c4:	689b      	ldr	r3, [r3, #8]
    39c6:	2002      	movs	r0, #2
    39c8:	4798      	blx	r3
    39ca:	bd08      	pop	{r3, pc}
    39cc:	200000d8 	.word	0x200000d8

000039d0 <SERCOM3_Handler>:
    39d0:	b508      	push	{r3, lr}
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <SERCOM3_Handler+0xc>)
    39d4:	68db      	ldr	r3, [r3, #12]
    39d6:	2003      	movs	r0, #3
    39d8:	4798      	blx	r3
    39da:	bd08      	pop	{r3, pc}
    39dc:	200000d8 	.word	0x200000d8

000039e0 <SERCOM4_Handler>:
    39e0:	b508      	push	{r3, lr}
    39e2:	4b02      	ldr	r3, [pc, #8]	; (39ec <SERCOM4_Handler+0xc>)
    39e4:	691b      	ldr	r3, [r3, #16]
    39e6:	2004      	movs	r0, #4
    39e8:	4798      	blx	r3
    39ea:	bd08      	pop	{r3, pc}
    39ec:	200000d8 	.word	0x200000d8

000039f0 <SERCOM5_Handler>:
    39f0:	b508      	push	{r3, lr}
    39f2:	4b02      	ldr	r3, [pc, #8]	; (39fc <SERCOM5_Handler+0xc>)
    39f4:	695b      	ldr	r3, [r3, #20]
    39f6:	2005      	movs	r0, #5
    39f8:	4798      	blx	r3
    39fa:	bd08      	pop	{r3, pc}
    39fc:	200000d8 	.word	0x200000d8

00003a00 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a02:	4647      	mov	r7, r8
    3a04:	b480      	push	{r7}
    3a06:	b088      	sub	sp, #32
    3a08:	1c05      	adds	r5, r0, #0
    3a0a:	1c0c      	adds	r4, r1, #0
    3a0c:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3a0e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a10:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3a12:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a14:	079a      	lsls	r2, r3, #30
    3a16:	d500      	bpl.n	3a1a <spi_init+0x1a>
    3a18:	e0c1      	b.n	3b9e <spi_init+0x19e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a1a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3a1c:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a1e:	07da      	lsls	r2, r3, #31
    3a20:	d500      	bpl.n	3a24 <spi_init+0x24>
    3a22:	e0bc      	b.n	3b9e <spi_init+0x19e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a24:	1c08      	adds	r0, r1, #0
    3a26:	4b60      	ldr	r3, [pc, #384]	; (3ba8 <spi_init+0x1a8>)
    3a28:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a2a:	4b60      	ldr	r3, [pc, #384]	; (3bac <spi_init+0x1ac>)
    3a2c:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3a2e:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3a30:	2701      	movs	r7, #1
    3a32:	4097      	lsls	r7, r2
    3a34:	1c3a      	adds	r2, r7, #0
    3a36:	430a      	orrs	r2, r1
    3a38:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3a3a:	a907      	add	r1, sp, #28
    3a3c:	2724      	movs	r7, #36	; 0x24
    3a3e:	5df3      	ldrb	r3, [r6, r7]
    3a40:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3a42:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3a44:	b2c0      	uxtb	r0, r0
    3a46:	4680      	mov	r8, r0
    3a48:	4b59      	ldr	r3, [pc, #356]	; (3bb0 <spi_init+0x1b0>)
    3a4a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3a4c:	4640      	mov	r0, r8
    3a4e:	4b59      	ldr	r3, [pc, #356]	; (3bb4 <spi_init+0x1b4>)
    3a50:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3a52:	5df0      	ldrb	r0, [r6, r7]
    3a54:	2100      	movs	r1, #0
    3a56:	4b58      	ldr	r3, [pc, #352]	; (3bb8 <spi_init+0x1b8>)
    3a58:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3a5a:	7833      	ldrb	r3, [r6, #0]
    3a5c:	2b01      	cmp	r3, #1
    3a5e:	d000      	beq.n	3a62 <spi_init+0x62>
    3a60:	e09a      	b.n	3b98 <spi_init+0x198>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3a62:	6822      	ldr	r2, [r4, #0]
    3a64:	230c      	movs	r3, #12
    3a66:	4313      	orrs	r3, r2
    3a68:	6023      	str	r3, [r4, #0]
    3a6a:	e095      	b.n	3b98 <spi_init+0x198>
    3a6c:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3a6e:	60d1      	str	r1, [r2, #12]
    3a70:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3a72:	2b1c      	cmp	r3, #28
    3a74:	d1fa      	bne.n	3a6c <spi_init+0x6c>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3a76:	2300      	movs	r3, #0
    3a78:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3a7a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3a7c:	2400      	movs	r4, #0
    3a7e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3a80:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3a82:	2336      	movs	r3, #54	; 0x36
    3a84:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3a86:	2337      	movs	r3, #55	; 0x37
    3a88:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3a8a:	2338      	movs	r3, #56	; 0x38
    3a8c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3a8e:	2303      	movs	r3, #3
    3a90:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3a92:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3a94:	6828      	ldr	r0, [r5, #0]
    3a96:	4b44      	ldr	r3, [pc, #272]	; (3ba8 <spi_init+0x1a8>)
    3a98:	4798      	blx	r3
    3a9a:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3a9c:	4947      	ldr	r1, [pc, #284]	; (3bbc <spi_init+0x1bc>)
    3a9e:	4b48      	ldr	r3, [pc, #288]	; (3bc0 <spi_init+0x1c0>)
    3aa0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3aa2:	00bf      	lsls	r7, r7, #2
    3aa4:	4b47      	ldr	r3, [pc, #284]	; (3bc4 <spi_init+0x1c4>)
    3aa6:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3aa8:	682f      	ldr	r7, [r5, #0]
    3aaa:	ab02      	add	r3, sp, #8
    3aac:	2280      	movs	r2, #128	; 0x80
    3aae:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ab0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ab2:	2201      	movs	r2, #1
    3ab4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3ab6:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    3ab8:	7833      	ldrb	r3, [r6, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d102      	bne.n	3ac4 <spi_init+0xc4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3abe:	2200      	movs	r2, #0
    3ac0:	ab02      	add	r3, sp, #8
    3ac2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    3ac4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3ac6:	9303      	str	r3, [sp, #12]
    3ac8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    3aca:	9004      	str	r0, [sp, #16]
    3acc:	6b32      	ldr	r2, [r6, #48]	; 0x30
    3ace:	9205      	str	r2, [sp, #20]
    3ad0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3ad2:	9306      	str	r3, [sp, #24]
    3ad4:	2400      	movs	r4, #0
    3ad6:	b2e1      	uxtb	r1, r4
    3ad8:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ada:	aa03      	add	r2, sp, #12
    3adc:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3ade:	2800      	cmp	r0, #0
    3ae0:	d102      	bne.n	3ae8 <spi_init+0xe8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3ae2:	1c38      	adds	r0, r7, #0
    3ae4:	4a38      	ldr	r2, [pc, #224]	; (3bc8 <spi_init+0x1c8>)
    3ae6:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3ae8:	1c43      	adds	r3, r0, #1
    3aea:	d006      	beq.n	3afa <spi_init+0xfa>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3aec:	466a      	mov	r2, sp
    3aee:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3af0:	0c00      	lsrs	r0, r0, #16
    3af2:	b2c0      	uxtb	r0, r0
    3af4:	a902      	add	r1, sp, #8
    3af6:	4b35      	ldr	r3, [pc, #212]	; (3bcc <spi_init+0x1cc>)
    3af8:	4798      	blx	r3
    3afa:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3afc:	2c04      	cmp	r4, #4
    3afe:	d1ea      	bne.n	3ad6 <spi_init+0xd6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    3b00:	7833      	ldrb	r3, [r6, #0]
    3b02:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3b04:	7c33      	ldrb	r3, [r6, #16]
    3b06:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3b08:	7cb3      	ldrb	r3, [r6, #18]
    3b0a:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3b0c:	7d33      	ldrb	r3, [r6, #20]
    3b0e:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3b10:	2200      	movs	r2, #0
    3b12:	466b      	mov	r3, sp
    3b14:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3b16:	7833      	ldrb	r3, [r6, #0]
    3b18:	2b01      	cmp	r3, #1
    3b1a:	d114      	bne.n	3b46 <spi_init+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b1c:	6828      	ldr	r0, [r5, #0]
    3b1e:	4b22      	ldr	r3, [pc, #136]	; (3ba8 <spi_init+0x1a8>)
    3b20:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b22:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3b24:	b2c0      	uxtb	r0, r0
    3b26:	4b2a      	ldr	r3, [pc, #168]	; (3bd0 <spi_init+0x1d0>)
    3b28:	4798      	blx	r3
    3b2a:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3b2c:	69b0      	ldr	r0, [r6, #24]
    3b2e:	466a      	mov	r2, sp
    3b30:	3206      	adds	r2, #6
    3b32:	4b28      	ldr	r3, [pc, #160]	; (3bd4 <spi_init+0x1d4>)
    3b34:	4798      	blx	r3
    3b36:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3b38:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d12f      	bne.n	3b9e <spi_init+0x19e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3b3e:	466b      	mov	r3, sp
    3b40:	3306      	adds	r3, #6
    3b42:	781b      	ldrb	r3, [r3, #0]
    3b44:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3b46:	68b2      	ldr	r2, [r6, #8]
    3b48:	6870      	ldr	r0, [r6, #4]
    3b4a:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3b4c:	68f3      	ldr	r3, [r6, #12]
    3b4e:	431a      	orrs	r2, r3

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3b50:	7c33      	ldrb	r3, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3b52:	7c71      	ldrb	r1, [r6, #17]
    3b54:	2900      	cmp	r1, #0
    3b56:	d103      	bne.n	3b60 <spi_init+0x160>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3b58:	491f      	ldr	r1, [pc, #124]	; (3bd8 <spi_init+0x1d8>)
    3b5a:	7889      	ldrb	r1, [r1, #2]
    3b5c:	0788      	lsls	r0, r1, #30
    3b5e:	d501      	bpl.n	3b64 <spi_init+0x164>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3b60:	2180      	movs	r1, #128	; 0x80
    3b62:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    3b64:	7cb1      	ldrb	r1, [r6, #18]
    3b66:	2900      	cmp	r1, #0
    3b68:	d002      	beq.n	3b70 <spi_init+0x170>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3b6a:	2180      	movs	r1, #128	; 0x80
    3b6c:	0289      	lsls	r1, r1, #10
    3b6e:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3b70:	7cf1      	ldrb	r1, [r6, #19]
    3b72:	2900      	cmp	r1, #0
    3b74:	d002      	beq.n	3b7c <spi_init+0x17c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3b76:	2180      	movs	r1, #128	; 0x80
    3b78:	0089      	lsls	r1, r1, #2
    3b7a:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3b7c:	7d31      	ldrb	r1, [r6, #20]
    3b7e:	2900      	cmp	r1, #0
    3b80:	d002      	beq.n	3b88 <spi_init+0x188>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3b82:	2180      	movs	r1, #128	; 0x80
    3b84:	0189      	lsls	r1, r1, #6
    3b86:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3b88:	6839      	ldr	r1, [r7, #0]
    3b8a:	430a      	orrs	r2, r1
    3b8c:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3b8e:	687a      	ldr	r2, [r7, #4]
    3b90:	4313      	orrs	r3, r2
    3b92:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    3b94:	2000      	movs	r0, #0
    3b96:	e002      	b.n	3b9e <spi_init+0x19e>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3b98:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3b9a:	2100      	movs	r1, #0
    3b9c:	e766      	b.n	3a6c <spi_init+0x6c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3b9e:	b008      	add	sp, #32
    3ba0:	bc04      	pop	{r2}
    3ba2:	4690      	mov	r8, r2
    3ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	000038f9 	.word	0x000038f9
    3bac:	40000400 	.word	0x40000400
    3bb0:	00004ad5 	.word	0x00004ad5
    3bb4:	00004a49 	.word	0x00004a49
    3bb8:	00003721 	.word	0x00003721
    3bbc:	00003cc9 	.word	0x00003cc9
    3bc0:	00003939 	.word	0x00003939
    3bc4:	200003fc 	.word	0x200003fc
    3bc8:	00003771 	.word	0x00003771
    3bcc:	00004bb1 	.word	0x00004bb1
    3bd0:	00004af1 	.word	0x00004af1
    3bd4:	00003549 	.word	0x00003549
    3bd8:	41002000 	.word	0x41002000

00003bdc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3bdc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3bde:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3be0:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3be2:	2c01      	cmp	r4, #1
    3be4:	d16c      	bne.n	3cc0 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3be6:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3be8:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3bea:	2c00      	cmp	r4, #0
    3bec:	d168      	bne.n	3cc0 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d057      	beq.n	3ca2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3bf2:	784b      	ldrb	r3, [r1, #1]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d044      	beq.n	3c82 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bf8:	6802      	ldr	r2, [r0, #0]
    3bfa:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3bfc:	07dc      	lsls	r4, r3, #31
    3bfe:	d40f      	bmi.n	3c20 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3c00:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c02:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c04:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c06:	2900      	cmp	r1, #0
    3c08:	d103      	bne.n	3c12 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    3c0a:	095a      	lsrs	r2, r3, #5
    3c0c:	01d2      	lsls	r2, r2, #7
    3c0e:	492d      	ldr	r1, [pc, #180]	; (3cc4 <spi_select_slave+0xe8>)
    3c10:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c12:	211f      	movs	r1, #31
    3c14:	400b      	ands	r3, r1
    3c16:	2101      	movs	r1, #1
    3c18:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c1a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    3c1c:	2305      	movs	r3, #5
    3c1e:	e04f      	b.n	3cc0 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3c20:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c22:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c24:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c26:	2c00      	cmp	r4, #0
    3c28:	d103      	bne.n	3c32 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    3c2a:	095a      	lsrs	r2, r3, #5
    3c2c:	01d2      	lsls	r2, r2, #7
    3c2e:	4c25      	ldr	r4, [pc, #148]	; (3cc4 <spi_select_slave+0xe8>)
    3c30:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c32:	241f      	movs	r4, #31
    3c34:	4023      	ands	r3, r4
    3c36:	2401      	movs	r4, #1
    3c38:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c3a:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    3c3c:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c3e:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c40:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c42:	07d4      	lsls	r4, r2, #31
    3c44:	d500      	bpl.n	3c48 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c46:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    3c48:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c4a:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3c4c:	2a00      	cmp	r2, #0
    3c4e:	d137      	bne.n	3cc0 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c50:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c52:	2104      	movs	r1, #4
    3c54:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3c56:	420b      	tst	r3, r1
    3c58:	d0fc      	beq.n	3c54 <spi_select_slave+0x78>
    3c5a:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c5c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c5e:	074c      	lsls	r4, r1, #29
    3c60:	d52e      	bpl.n	3cc0 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c62:	8b53      	ldrh	r3, [r2, #26]
    3c64:	0759      	lsls	r1, r3, #29
    3c66:	d503      	bpl.n	3c70 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3c68:	8b51      	ldrh	r1, [r2, #26]
    3c6a:	2304      	movs	r3, #4
    3c6c:	430b      	orrs	r3, r1
    3c6e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c70:	7983      	ldrb	r3, [r0, #6]
    3c72:	2b01      	cmp	r3, #1
    3c74:	d102      	bne.n	3c7c <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c78:	2300      	movs	r3, #0
    3c7a:	e021      	b.n	3cc0 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c7e:	2300      	movs	r3, #0
    3c80:	e01e      	b.n	3cc0 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3c82:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c84:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c86:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c88:	2900      	cmp	r1, #0
    3c8a:	d103      	bne.n	3c94 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    3c8c:	095a      	lsrs	r2, r3, #5
    3c8e:	01d2      	lsls	r2, r2, #7
    3c90:	4c0c      	ldr	r4, [pc, #48]	; (3cc4 <spi_select_slave+0xe8>)
    3c92:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c94:	211f      	movs	r1, #31
    3c96:	400b      	ands	r3, r1
    3c98:	2101      	movs	r1, #1
    3c9a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c9c:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3c9e:	2300      	movs	r3, #0
    3ca0:	e00e      	b.n	3cc0 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3ca2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ca4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3ca6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ca8:	2900      	cmp	r1, #0
    3caa:	d103      	bne.n	3cb4 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    3cac:	095a      	lsrs	r2, r3, #5
    3cae:	01d2      	lsls	r2, r2, #7
    3cb0:	4904      	ldr	r1, [pc, #16]	; (3cc4 <spi_select_slave+0xe8>)
    3cb2:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cb4:	211f      	movs	r1, #31
    3cb6:	400b      	ands	r3, r1
    3cb8:	2101      	movs	r1, #1
    3cba:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3cbc:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    3cbe:	2300      	movs	r3, #0
}
    3cc0:	1c18      	adds	r0, r3, #0
    3cc2:	bd10      	pop	{r4, pc}
    3cc4:	41004400 	.word	0x41004400

00003cc8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3cca:	0080      	lsls	r0, r0, #2
    3ccc:	4b67      	ldr	r3, [pc, #412]	; (3e6c <_spi_interrupt_handler+0x1a4>)
    3cce:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3cd0:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3cd2:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    3cd4:	5ce3      	ldrb	r3, [r4, r3]
    3cd6:	2237      	movs	r2, #55	; 0x37
    3cd8:	5ca2      	ldrb	r2, [r4, r2]
    3cda:	1c17      	adds	r7, r2, #0
    3cdc:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3cde:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3ce0:	7dae      	ldrb	r6, [r5, #22]
    3ce2:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3ce4:	07f1      	lsls	r1, r6, #31
    3ce6:	d53b      	bpl.n	3d60 <_spi_interrupt_handler+0x98>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3ce8:	7963      	ldrb	r3, [r4, #5]
    3cea:	2b01      	cmp	r3, #1
    3cec:	d138      	bne.n	3d60 <_spi_interrupt_handler+0x98>
			(module->dir == SPI_DIRECTION_READ)) {
    3cee:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d10f      	bne.n	3d14 <_spi_interrupt_handler+0x4c>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    3cf4:	4b5e      	ldr	r3, [pc, #376]	; (3e70 <_spi_interrupt_handler+0x1a8>)
    3cf6:	881b      	ldrh	r3, [r3, #0]
    3cf8:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3cfa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3cfc:	3b01      	subs	r3, #1
    3cfe:	b29b      	uxth	r3, r3
    3d00:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    3d02:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d04:	b29b      	uxth	r3, r3
    3d06:	2b00      	cmp	r3, #0
    3d08:	d101      	bne.n	3d0e <_spi_interrupt_handler+0x46>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d0a:	2301      	movs	r3, #1
    3d0c:	752b      	strb	r3, [r5, #20]
			}
		}
#  endif

		if (0
    3d0e:	7963      	ldrb	r3, [r4, #5]
    3d10:	2b01      	cmp	r3, #1
    3d12:	d125      	bne.n	3d60 <_spi_interrupt_handler+0x98>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3d14:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    3d16:	2b00      	cmp	r3, #0
    3d18:	d022      	beq.n	3d60 <_spi_interrupt_handler+0x98>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d1a:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3d1e:	7819      	ldrb	r1, [r3, #0]
    3d20:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3d22:	1c58      	adds	r0, r3, #1
    3d24:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d26:	79a0      	ldrb	r0, [r4, #6]
    3d28:	2801      	cmp	r0, #1
    3d2a:	d104      	bne.n	3d36 <_spi_interrupt_handler+0x6e>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3d2c:	7858      	ldrb	r0, [r3, #1]
    3d2e:	0200      	lsls	r0, r0, #8
    3d30:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3d32:	3302      	adds	r3, #2
    3d34:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3d36:	05cb      	lsls	r3, r1, #23
    3d38:	0ddb      	lsrs	r3, r3, #23
    3d3a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3d3c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d3e:	3b01      	subs	r3, #1
    3d40:	b29b      	uxth	r3, r3
    3d42:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3d44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d46:	b29b      	uxth	r3, r3
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d109      	bne.n	3d60 <_spi_interrupt_handler+0x98>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d4c:	2301      	movs	r3, #1
    3d4e:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3d50:	7a63      	ldrb	r3, [r4, #9]
    3d52:	2b01      	cmp	r3, #1
    3d54:	d104      	bne.n	3d60 <_spi_interrupt_handler+0x98>
    3d56:	79e3      	ldrb	r3, [r4, #7]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d101      	bne.n	3d60 <_spi_interrupt_handler+0x98>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3d5c:	2302      	movs	r3, #2
    3d5e:	75ab      	strb	r3, [r5, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3d60:	0772      	lsls	r2, r6, #29
    3d62:	d561      	bpl.n	3e28 <_spi_interrupt_handler+0x160>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d64:	8b6b      	ldrh	r3, [r5, #26]
    3d66:	0759      	lsls	r1, r3, #29
    3d68:	d514      	bpl.n	3d94 <_spi_interrupt_handler+0xcc>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3d6a:	7a63      	ldrb	r3, [r4, #9]
    3d6c:	2b01      	cmp	r3, #1
    3d6e:	d00b      	beq.n	3d88 <_spi_interrupt_handler+0xc0>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3d70:	221e      	movs	r2, #30
    3d72:	2338      	movs	r3, #56	; 0x38
    3d74:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3d76:	2303      	movs	r3, #3
    3d78:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3d7a:	2305      	movs	r3, #5
    3d7c:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3d7e:	073a      	lsls	r2, r7, #28
    3d80:	d502      	bpl.n	3d88 <_spi_interrupt_handler+0xc0>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3d82:	1c20      	adds	r0, r4, #0
    3d84:	69a3      	ldr	r3, [r4, #24]
    3d86:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3d88:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3d8a:	8b6a      	ldrh	r2, [r5, #26]
    3d8c:	2304      	movs	r3, #4
    3d8e:	4313      	orrs	r3, r2
    3d90:	836b      	strh	r3, [r5, #26]
    3d92:	e049      	b.n	3e28 <_spi_interrupt_handler+0x160>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    3d94:	7a63      	ldrb	r3, [r4, #9]
    3d96:	2b01      	cmp	r3, #1
    3d98:	d116      	bne.n	3dc8 <_spi_interrupt_handler+0x100>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d9a:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    3d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3d9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3da0:	3b01      	subs	r3, #1
    3da2:	b29b      	uxth	r3, r3
    3da4:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    3da6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3da8:	b29b      	uxth	r3, r3
    3daa:	2b00      	cmp	r3, #0
    3dac:	d13c      	bne.n	3e28 <_spi_interrupt_handler+0x160>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3dae:	2304      	movs	r3, #4
    3db0:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
    3db2:	2200      	movs	r2, #0
    3db4:	2338      	movs	r3, #56	; 0x38
    3db6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3db8:	2303      	movs	r3, #3
    3dba:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    3dbc:	07f9      	lsls	r1, r7, #31
    3dbe:	d533      	bpl.n	3e28 <_spi_interrupt_handler+0x160>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3dc0:	1c20      	adds	r0, r4, #0
    3dc2:	68e2      	ldr	r2, [r4, #12]
    3dc4:	4790      	blx	r2
    3dc6:	e02f      	b.n	3e28 <_spi_interrupt_handler+0x160>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3dc8:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dcc:	05d2      	lsls	r2, r2, #23
    3dce:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3dd0:	b2d3      	uxtb	r3, r2
    3dd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3dd4:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3dd8:	1c59      	adds	r1, r3, #1
    3dda:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ddc:	79a1      	ldrb	r1, [r4, #6]
    3dde:	2901      	cmp	r1, #1
    3de0:	d104      	bne.n	3dec <_spi_interrupt_handler+0x124>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3de2:	0a12      	lsrs	r2, r2, #8
    3de4:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3de6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3de8:	3301      	adds	r3, #1
    3dea:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    3dec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3dee:	3b01      	subs	r3, #1
    3df0:	b29b      	uxth	r3, r3
    3df2:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3df4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3df6:	b29b      	uxth	r3, r3
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d115      	bne.n	3e28 <_spi_interrupt_handler+0x160>
					module->status = STATUS_OK;
    3dfc:	2200      	movs	r2, #0
    3dfe:	2338      	movs	r3, #56	; 0x38
    3e00:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e02:	2304      	movs	r3, #4
    3e04:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3e06:	7a63      	ldrb	r3, [r4, #9]
    3e08:	2b02      	cmp	r3, #2
    3e0a:	d105      	bne.n	3e18 <_spi_interrupt_handler+0x150>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3e0c:	077a      	lsls	r2, r7, #29
    3e0e:	d50b      	bpl.n	3e28 <_spi_interrupt_handler+0x160>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3e10:	1c20      	adds	r0, r4, #0
    3e12:	6963      	ldr	r3, [r4, #20]
    3e14:	4798      	blx	r3
    3e16:	e007      	b.n	3e28 <_spi_interrupt_handler+0x160>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    3e18:	7a63      	ldrb	r3, [r4, #9]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d104      	bne.n	3e28 <_spi_interrupt_handler+0x160>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3e1e:	07b9      	lsls	r1, r7, #30
    3e20:	d502      	bpl.n	3e28 <_spi_interrupt_handler+0x160>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3e22:	1c20      	adds	r0, r4, #0
    3e24:	6922      	ldr	r2, [r4, #16]
    3e26:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3e28:	07b3      	lsls	r3, r6, #30
    3e2a:	d514      	bpl.n	3e56 <_spi_interrupt_handler+0x18e>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e2c:	7963      	ldrb	r3, [r4, #5]
    3e2e:	2b01      	cmp	r3, #1
    3e30:	d111      	bne.n	3e56 <_spi_interrupt_handler+0x18e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e32:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e34:	2b01      	cmp	r3, #1
    3e36:	d10e      	bne.n	3e56 <_spi_interrupt_handler+0x18e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e38:	79e3      	ldrb	r3, [r4, #7]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d10b      	bne.n	3e56 <_spi_interrupt_handler+0x18e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e3e:	2302      	movs	r3, #2
    3e40:	752b      	strb	r3, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3e42:	2303      	movs	r3, #3
    3e44:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3e46:	2200      	movs	r2, #0
    3e48:	2338      	movs	r3, #56	; 0x38
    3e4a:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3e4c:	07f9      	lsls	r1, r7, #31
    3e4e:	d502      	bpl.n	3e56 <_spi_interrupt_handler+0x18e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
						(module);
    3e50:	1c20      	adds	r0, r4, #0
    3e52:	68e2      	ldr	r2, [r4, #12]
    3e54:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3e56:	09f6      	lsrs	r6, r6, #7
    3e58:	d007      	beq.n	3e6a <_spi_interrupt_handler+0x1a2>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3e5a:	2380      	movs	r3, #128	; 0x80
    3e5c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3e5e:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3e60:	067b      	lsls	r3, r7, #25
    3e62:	d502      	bpl.n	3e6a <_spi_interrupt_handler+0x1a2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e66:	1c20      	adds	r0, r4, #0
    3e68:	4798      	blx	r3
		}
	}
#  endif
}
    3e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e6c:	200003fc 	.word	0x200003fc
    3e70:	20000414 	.word	0x20000414

00003e74 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e76:	465f      	mov	r7, fp
    3e78:	4656      	mov	r6, sl
    3e7a:	464d      	mov	r5, r9
    3e7c:	4644      	mov	r4, r8
    3e7e:	b4f0      	push	{r4, r5, r6, r7}
    3e80:	b091      	sub	sp, #68	; 0x44
    3e82:	1c05      	adds	r5, r0, #0
    3e84:	1c0c      	adds	r4, r1, #0
    3e86:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3e88:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3e8a:	1c08      	adds	r0, r1, #0
    3e8c:	4bad      	ldr	r3, [pc, #692]	; (4144 <usart_init+0x2d0>)
    3e8e:	4798      	blx	r3
    3e90:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e92:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3e94:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e96:	07d9      	lsls	r1, r3, #31
    3e98:	d500      	bpl.n	3e9c <usart_init+0x28>
    3e9a:	e14b      	b.n	4134 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3e9c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3e9e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ea0:	079f      	lsls	r7, r3, #30
    3ea2:	d500      	bpl.n	3ea6 <usart_init+0x32>
    3ea4:	e146      	b.n	4134 <usart_init+0x2c0>
    3ea6:	4ba8      	ldr	r3, [pc, #672]	; (4148 <usart_init+0x2d4>)
    3ea8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3eaa:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3eac:	2701      	movs	r7, #1
    3eae:	408f      	lsls	r7, r1
    3eb0:	1c39      	adds	r1, r7, #0
    3eb2:	4301      	orrs	r1, r0
    3eb4:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3eb6:	a90f      	add	r1, sp, #60	; 0x3c
    3eb8:	272d      	movs	r7, #45	; 0x2d
    3eba:	5df3      	ldrb	r3, [r6, r7]
    3ebc:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ebe:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3ec0:	b2d2      	uxtb	r2, r2
    3ec2:	4690      	mov	r8, r2
    3ec4:	1c10      	adds	r0, r2, #0
    3ec6:	4ba1      	ldr	r3, [pc, #644]	; (414c <usart_init+0x2d8>)
    3ec8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3eca:	4640      	mov	r0, r8
    3ecc:	4ba0      	ldr	r3, [pc, #640]	; (4150 <usart_init+0x2dc>)
    3ece:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3ed0:	5df0      	ldrb	r0, [r6, r7]
    3ed2:	2100      	movs	r1, #0
    3ed4:	4b9f      	ldr	r3, [pc, #636]	; (4154 <usart_init+0x2e0>)
    3ed6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3ed8:	7af3      	ldrb	r3, [r6, #11]
    3eda:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3edc:	2324      	movs	r3, #36	; 0x24
    3ede:	5cf3      	ldrb	r3, [r6, r3]
    3ee0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3ee2:	2325      	movs	r3, #37	; 0x25
    3ee4:	5cf3      	ldrb	r3, [r6, r3]
    3ee6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3ee8:	7ef3      	ldrb	r3, [r6, #27]
    3eea:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3eec:	7f33      	ldrb	r3, [r6, #28]
    3eee:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ef0:	6829      	ldr	r1, [r5, #0]
    3ef2:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ef4:	1c08      	adds	r0, r1, #0
    3ef6:	4b93      	ldr	r3, [pc, #588]	; (4144 <usart_init+0x2d0>)
    3ef8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3efa:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    3efc:	2200      	movs	r2, #0
    3efe:	466b      	mov	r3, sp
    3f00:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3f02:	8a32      	ldrh	r2, [r6, #16]
    3f04:	9202      	str	r2, [sp, #8]
    3f06:	2380      	movs	r3, #128	; 0x80
    3f08:	01db      	lsls	r3, r3, #7
    3f0a:	429a      	cmp	r2, r3
    3f0c:	d021      	beq.n	3f52 <usart_init+0xde>
    3f0e:	2380      	movs	r3, #128	; 0x80
    3f10:	01db      	lsls	r3, r3, #7
    3f12:	429a      	cmp	r2, r3
    3f14:	d804      	bhi.n	3f20 <usart_init+0xac>
    3f16:	2380      	movs	r3, #128	; 0x80
    3f18:	019b      	lsls	r3, r3, #6
    3f1a:	429a      	cmp	r2, r3
    3f1c:	d011      	beq.n	3f42 <usart_init+0xce>
    3f1e:	e008      	b.n	3f32 <usart_init+0xbe>
    3f20:	23c0      	movs	r3, #192	; 0xc0
    3f22:	01db      	lsls	r3, r3, #7
    3f24:	9f02      	ldr	r7, [sp, #8]
    3f26:	429f      	cmp	r7, r3
    3f28:	d00f      	beq.n	3f4a <usart_init+0xd6>
    3f2a:	2380      	movs	r3, #128	; 0x80
    3f2c:	021b      	lsls	r3, r3, #8
    3f2e:	429f      	cmp	r7, r3
    3f30:	d003      	beq.n	3f3a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f32:	2710      	movs	r7, #16
    3f34:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f36:	2700      	movs	r7, #0
    3f38:	e00e      	b.n	3f58 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3f3a:	2703      	movs	r7, #3
    3f3c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f3e:	2700      	movs	r7, #0
    3f40:	e00a      	b.n	3f58 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f42:	2710      	movs	r7, #16
    3f44:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f46:	2701      	movs	r7, #1
    3f48:	e006      	b.n	3f58 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3f4a:	2708      	movs	r7, #8
    3f4c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f4e:	2701      	movs	r7, #1
    3f50:	e002      	b.n	3f58 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3f52:	2708      	movs	r7, #8
    3f54:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f56:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3f58:	6831      	ldr	r1, [r6, #0]
    3f5a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    3f5c:	68f2      	ldr	r2, [r6, #12]
    3f5e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3f60:	6973      	ldr	r3, [r6, #20]
    3f62:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3f64:	7e31      	ldrb	r1, [r6, #24]
    3f66:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3f68:	2326      	movs	r3, #38	; 0x26
    3f6a:	5cf3      	ldrb	r3, [r6, r3]
    3f6c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    3f6e:	6873      	ldr	r3, [r6, #4]
    3f70:	2b00      	cmp	r3, #0
    3f72:	d013      	beq.n	3f9c <usart_init+0x128>
    3f74:	2280      	movs	r2, #128	; 0x80
    3f76:	0552      	lsls	r2, r2, #21
    3f78:	4293      	cmp	r3, r2
    3f7a:	d12e      	bne.n	3fda <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3f7c:	2327      	movs	r3, #39	; 0x27
    3f7e:	5cf3      	ldrb	r3, [r6, r3]
    3f80:	2b00      	cmp	r3, #0
    3f82:	d12e      	bne.n	3fe2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3f84:	6a37      	ldr	r7, [r6, #32]
    3f86:	b2c0      	uxtb	r0, r0
    3f88:	4b73      	ldr	r3, [pc, #460]	; (4158 <usart_init+0x2e4>)
    3f8a:	4798      	blx	r3
    3f8c:	1c01      	adds	r1, r0, #0
    3f8e:	1c38      	adds	r0, r7, #0
    3f90:	466a      	mov	r2, sp
    3f92:	3226      	adds	r2, #38	; 0x26
    3f94:	4b71      	ldr	r3, [pc, #452]	; (415c <usart_init+0x2e8>)
    3f96:	4798      	blx	r3
    3f98:	1c03      	adds	r3, r0, #0
    3f9a:	e01f      	b.n	3fdc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3f9c:	2327      	movs	r3, #39	; 0x27
    3f9e:	5cf3      	ldrb	r3, [r6, r3]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d00a      	beq.n	3fba <usart_init+0x146>
				status_code =
    3fa4:	9a06      	ldr	r2, [sp, #24]
    3fa6:	9200      	str	r2, [sp, #0]
    3fa8:	6a30      	ldr	r0, [r6, #32]
    3faa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3fac:	466a      	mov	r2, sp
    3fae:	3226      	adds	r2, #38	; 0x26
    3fb0:	1c3b      	adds	r3, r7, #0
    3fb2:	4f6b      	ldr	r7, [pc, #428]	; (4160 <usart_init+0x2ec>)
    3fb4:	47b8      	blx	r7
    3fb6:	1c03      	adds	r3, r0, #0
    3fb8:	e010      	b.n	3fdc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3fba:	6a31      	ldr	r1, [r6, #32]
    3fbc:	9107      	str	r1, [sp, #28]
    3fbe:	b2c0      	uxtb	r0, r0
    3fc0:	4b65      	ldr	r3, [pc, #404]	; (4158 <usart_init+0x2e4>)
    3fc2:	4798      	blx	r3
    3fc4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    3fc6:	9a06      	ldr	r2, [sp, #24]
    3fc8:	9200      	str	r2, [sp, #0]
    3fca:	9807      	ldr	r0, [sp, #28]
    3fcc:	466a      	mov	r2, sp
    3fce:	3226      	adds	r2, #38	; 0x26
    3fd0:	1c3b      	adds	r3, r7, #0
    3fd2:	4f63      	ldr	r7, [pc, #396]	; (4160 <usart_init+0x2ec>)
    3fd4:	47b8      	blx	r7
    3fd6:	1c03      	adds	r3, r0, #0
    3fd8:	e000      	b.n	3fdc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    3fda:	2300      	movs	r3, #0
    3fdc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3fde:	d000      	beq.n	3fe2 <usart_init+0x16e>
    3fe0:	e0a8      	b.n	4134 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3fe2:	7e73      	ldrb	r3, [r6, #25]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d002      	beq.n	3fee <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3fe8:	7eb3      	ldrb	r3, [r6, #26]
    3fea:	4641      	mov	r1, r8
    3fec:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3fee:	682a      	ldr	r2, [r5, #0]
    3ff0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ff2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d1fc      	bne.n	3ff2 <usart_init+0x17e>
    3ff8:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3ffa:	466b      	mov	r3, sp
    3ffc:	3326      	adds	r3, #38	; 0x26
    3ffe:	881b      	ldrh	r3, [r3, #0]
    4000:	4642      	mov	r2, r8
    4002:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4004:	464b      	mov	r3, r9
    4006:	9f03      	ldr	r7, [sp, #12]
    4008:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    400a:	9f04      	ldr	r7, [sp, #16]
    400c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    400e:	6871      	ldr	r1, [r6, #4]
    4010:	430b      	orrs	r3, r1
		config->sample_rate |
    4012:	9f02      	ldr	r7, [sp, #8]
    4014:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4016:	4652      	mov	r2, sl
    4018:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    401a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    401c:	4659      	mov	r1, fp
    401e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    4020:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    4022:	2327      	movs	r3, #39	; 0x27
    4024:	5cf3      	ldrb	r3, [r6, r3]
    4026:	2b00      	cmp	r3, #0
    4028:	d101      	bne.n	402e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    402a:	2304      	movs	r3, #4
    402c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    402e:	7e71      	ldrb	r1, [r6, #25]
    4030:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4032:	7f33      	ldrb	r3, [r6, #28]
    4034:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4036:	4319      	orrs	r1, r3
    4038:	7af2      	ldrb	r2, [r6, #11]
    403a:	7ab3      	ldrb	r3, [r6, #10]
    403c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    403e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4040:	7f73      	ldrb	r3, [r6, #29]
    4042:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4044:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4046:	2324      	movs	r3, #36	; 0x24
    4048:	5cf3      	ldrb	r3, [r6, r3]
    404a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    404c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    404e:	2325      	movs	r3, #37	; 0x25
    4050:	5cf3      	ldrb	r3, [r6, r3]
    4052:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4054:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4056:	8933      	ldrh	r3, [r6, #8]
    4058:	2bff      	cmp	r3, #255	; 0xff
    405a:	d00b      	beq.n	4074 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    405c:	7ef2      	ldrb	r2, [r6, #27]
    405e:	2a00      	cmp	r2, #0
    4060:	d003      	beq.n	406a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    4062:	22a0      	movs	r2, #160	; 0xa0
    4064:	04d2      	lsls	r2, r2, #19
    4066:	4317      	orrs	r7, r2
    4068:	e002      	b.n	4070 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    406a:	2280      	movs	r2, #128	; 0x80
    406c:	0452      	lsls	r2, r2, #17
    406e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    4070:	4319      	orrs	r1, r3
    4072:	e005      	b.n	4080 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4074:	7ef3      	ldrb	r3, [r6, #27]
    4076:	2b00      	cmp	r3, #0
    4078:	d002      	beq.n	4080 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    407a:	2380      	movs	r3, #128	; 0x80
    407c:	04db      	lsls	r3, r3, #19
    407e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4080:	232c      	movs	r3, #44	; 0x2c
    4082:	5cf3      	ldrb	r3, [r6, r3]
    4084:	2b00      	cmp	r3, #0
    4086:	d103      	bne.n	4090 <usart_init+0x21c>
    4088:	4b36      	ldr	r3, [pc, #216]	; (4164 <usart_init+0x2f0>)
    408a:	789b      	ldrb	r3, [r3, #2]
    408c:	079a      	lsls	r2, r3, #30
    408e:	d501      	bpl.n	4094 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4090:	2380      	movs	r3, #128	; 0x80
    4092:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4094:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4096:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4098:	2b00      	cmp	r3, #0
    409a:	d1fc      	bne.n	4096 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    409c:	4643      	mov	r3, r8
    409e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40a0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40a2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    40a4:	2b00      	cmp	r3, #0
    40a6:	d1fc      	bne.n	40a2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    40a8:	4641      	mov	r1, r8
    40aa:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    40ac:	ab0e      	add	r3, sp, #56	; 0x38
    40ae:	2280      	movs	r2, #128	; 0x80
    40b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40b2:	2200      	movs	r2, #0
    40b4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    40b6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    40b8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    40ba:	6b32      	ldr	r2, [r6, #48]	; 0x30
    40bc:	920a      	str	r2, [sp, #40]	; 0x28
    40be:	6b73      	ldr	r3, [r6, #52]	; 0x34
    40c0:	930b      	str	r3, [sp, #44]	; 0x2c
    40c2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    40c4:	970c      	str	r7, [sp, #48]	; 0x30
    40c6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    40c8:	960d      	str	r6, [sp, #52]	; 0x34
    40ca:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    40cc:	ae0e      	add	r6, sp, #56	; 0x38
    40ce:	b2f9      	uxtb	r1, r7
    40d0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    40d2:	aa0a      	add	r2, sp, #40	; 0x28
    40d4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    40d6:	2800      	cmp	r0, #0
    40d8:	d102      	bne.n	40e0 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    40da:	1c20      	adds	r0, r4, #0
    40dc:	4a22      	ldr	r2, [pc, #136]	; (4168 <usart_init+0x2f4>)
    40de:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    40e0:	1c43      	adds	r3, r0, #1
    40e2:	d005      	beq.n	40f0 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    40e4:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    40e6:	0c00      	lsrs	r0, r0, #16
    40e8:	b2c0      	uxtb	r0, r0
    40ea:	1c31      	adds	r1, r6, #0
    40ec:	4a1f      	ldr	r2, [pc, #124]	; (416c <usart_init+0x2f8>)
    40ee:	4790      	blx	r2
    40f0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    40f2:	2f04      	cmp	r7, #4
    40f4:	d1eb      	bne.n	40ce <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    40f6:	2300      	movs	r3, #0
    40f8:	60eb      	str	r3, [r5, #12]
    40fa:	612b      	str	r3, [r5, #16]
    40fc:	616b      	str	r3, [r5, #20]
    40fe:	61ab      	str	r3, [r5, #24]
    4100:	61eb      	str	r3, [r5, #28]
    4102:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    4104:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4106:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4108:	2200      	movs	r2, #0
    410a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    410c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    410e:	2330      	movs	r3, #48	; 0x30
    4110:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4112:	2331      	movs	r3, #49	; 0x31
    4114:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4116:	2332      	movs	r3, #50	; 0x32
    4118:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    411a:	2333      	movs	r3, #51	; 0x33
    411c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    411e:	6828      	ldr	r0, [r5, #0]
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <usart_init+0x2d0>)
    4122:	4798      	blx	r3
    4124:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4126:	4912      	ldr	r1, [pc, #72]	; (4170 <usart_init+0x2fc>)
    4128:	4b12      	ldr	r3, [pc, #72]	; (4174 <usart_init+0x300>)
    412a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    412c:	00a4      	lsls	r4, r4, #2
    412e:	4b12      	ldr	r3, [pc, #72]	; (4178 <usart_init+0x304>)
    4130:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    4132:	2000      	movs	r0, #0
}
    4134:	b011      	add	sp, #68	; 0x44
    4136:	bc3c      	pop	{r2, r3, r4, r5}
    4138:	4690      	mov	r8, r2
    413a:	4699      	mov	r9, r3
    413c:	46a2      	mov	sl, r4
    413e:	46ab      	mov	fp, r5
    4140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	000038f9 	.word	0x000038f9
    4148:	40000400 	.word	0x40000400
    414c:	00004ad5 	.word	0x00004ad5
    4150:	00004a49 	.word	0x00004a49
    4154:	00003721 	.word	0x00003721
    4158:	00004af1 	.word	0x00004af1
    415c:	00003549 	.word	0x00003549
    4160:	00003571 	.word	0x00003571
    4164:	41002000 	.word	0x41002000
    4168:	00003771 	.word	0x00003771
    416c:	00004bb1 	.word	0x00004bb1
    4170:	00004239 	.word	0x00004239
    4174:	00003939 	.word	0x00003939
    4178:	200003fc 	.word	0x200003fc

0000417c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    417c:	b510      	push	{r4, lr}
    417e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4180:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4182:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    4184:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4186:	2c00      	cmp	r4, #0
    4188:	d00d      	beq.n	41a6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    418a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    418c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    418e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4190:	2a00      	cmp	r2, #0
    4192:	d108      	bne.n	41a6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4194:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4196:	2a00      	cmp	r2, #0
    4198:	d1fc      	bne.n	4194 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    419a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    419c:	2102      	movs	r1, #2
    419e:	7e1a      	ldrb	r2, [r3, #24]
    41a0:	420a      	tst	r2, r1
    41a2:	d0fc      	beq.n	419e <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    41a4:	2000      	movs	r0, #0
}
    41a6:	bd10      	pop	{r4, pc}

000041a8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    41a8:	b510      	push	{r4, lr}
    41aa:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    41ac:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    41ae:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    41b0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    41b2:	2a00      	cmp	r2, #0
    41b4:	d033      	beq.n	421e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    41b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    41b8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    41ba:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    41bc:	2b00      	cmp	r3, #0
    41be:	d12e      	bne.n	421e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    41c0:	7e23      	ldrb	r3, [r4, #24]
    41c2:	075a      	lsls	r2, r3, #29
    41c4:	d52b      	bpl.n	421e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    41c6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    41c8:	2b00      	cmp	r3, #0
    41ca:	d1fc      	bne.n	41c6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    41cc:	8b63      	ldrh	r3, [r4, #26]
    41ce:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    41d0:	069a      	lsls	r2, r3, #26
    41d2:	d021      	beq.n	4218 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    41d4:	079a      	lsls	r2, r3, #30
    41d6:	d503      	bpl.n	41e0 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    41d8:	2302      	movs	r3, #2
    41da:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    41dc:	201a      	movs	r0, #26
    41de:	e01e      	b.n	421e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    41e0:	075a      	lsls	r2, r3, #29
    41e2:	d503      	bpl.n	41ec <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    41e4:	2304      	movs	r3, #4
    41e6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    41e8:	201e      	movs	r0, #30
    41ea:	e018      	b.n	421e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    41ec:	07da      	lsls	r2, r3, #31
    41ee:	d503      	bpl.n	41f8 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    41f0:	2301      	movs	r3, #1
    41f2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    41f4:	2013      	movs	r0, #19
    41f6:	e012      	b.n	421e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    41f8:	06da      	lsls	r2, r3, #27
    41fa:	d505      	bpl.n	4208 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    41fc:	8b62      	ldrh	r2, [r4, #26]
    41fe:	2310      	movs	r3, #16
    4200:	4313      	orrs	r3, r2
    4202:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    4204:	2042      	movs	r0, #66	; 0x42
    4206:	e00a      	b.n	421e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4208:	069a      	lsls	r2, r3, #26
    420a:	d505      	bpl.n	4218 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    420c:	8b62      	ldrh	r2, [r4, #26]
    420e:	2320      	movs	r3, #32
    4210:	4313      	orrs	r3, r2
    4212:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4214:	2041      	movs	r0, #65	; 0x41
    4216:	e002      	b.n	421e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4218:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    421a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    421c:	2000      	movs	r0, #0
}
    421e:	bd10      	pop	{r4, pc}

00004220 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4220:	1c93      	adds	r3, r2, #2
    4222:	009b      	lsls	r3, r3, #2
    4224:	18c3      	adds	r3, r0, r3
    4226:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4228:	2301      	movs	r3, #1
    422a:	4093      	lsls	r3, r2
    422c:	1c1a      	adds	r2, r3, #0
    422e:	2330      	movs	r3, #48	; 0x30
    4230:	5cc1      	ldrb	r1, [r0, r3]
    4232:	430a      	orrs	r2, r1
    4234:	54c2      	strb	r2, [r0, r3]
}
    4236:	4770      	bx	lr

00004238 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    423a:	0080      	lsls	r0, r0, #2
    423c:	4b64      	ldr	r3, [pc, #400]	; (43d0 <_usart_interrupt_handler+0x198>)
    423e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4240:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4242:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4244:	2b00      	cmp	r3, #0
    4246:	d1fc      	bne.n	4242 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4248:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    424a:	7da6      	ldrb	r6, [r4, #22]
    424c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    424e:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4250:	5ceb      	ldrb	r3, [r5, r3]
    4252:	2230      	movs	r2, #48	; 0x30
    4254:	5caf      	ldrb	r7, [r5, r2]
    4256:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4258:	07f1      	lsls	r1, r6, #31
    425a:	d520      	bpl.n	429e <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    425c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    425e:	b29b      	uxth	r3, r3
    4260:	2b00      	cmp	r3, #0
    4262:	d01a      	beq.n	429a <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4264:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4266:	781a      	ldrb	r2, [r3, #0]
    4268:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    426a:	1c59      	adds	r1, r3, #1
    426c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    426e:	7969      	ldrb	r1, [r5, #5]
    4270:	2901      	cmp	r1, #1
    4272:	d104      	bne.n	427e <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4274:	7859      	ldrb	r1, [r3, #1]
    4276:	0209      	lsls	r1, r1, #8
    4278:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    427a:	3302      	adds	r3, #2
    427c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    427e:	05d3      	lsls	r3, r2, #23
    4280:	0ddb      	lsrs	r3, r3, #23
    4282:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4284:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4286:	3b01      	subs	r3, #1
    4288:	b29b      	uxth	r3, r3
    428a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    428c:	2b00      	cmp	r3, #0
    428e:	d106      	bne.n	429e <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4290:	2301      	movs	r3, #1
    4292:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4294:	2302      	movs	r3, #2
    4296:	75a3      	strb	r3, [r4, #22]
    4298:	e001      	b.n	429e <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    429a:	2301      	movs	r3, #1
    429c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    429e:	07b2      	lsls	r2, r6, #30
    42a0:	d509      	bpl.n	42b6 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    42a2:	2302      	movs	r3, #2
    42a4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    42a6:	2200      	movs	r2, #0
    42a8:	2333      	movs	r3, #51	; 0x33
    42aa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    42ac:	07fb      	lsls	r3, r7, #31
    42ae:	d502      	bpl.n	42b6 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    42b0:	1c28      	adds	r0, r5, #0
    42b2:	68e9      	ldr	r1, [r5, #12]
    42b4:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    42b6:	0772      	lsls	r2, r6, #29
    42b8:	d56a      	bpl.n	4390 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    42ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    42bc:	b29b      	uxth	r3, r3
    42be:	2b00      	cmp	r3, #0
    42c0:	d064      	beq.n	438c <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    42c2:	8b63      	ldrh	r3, [r4, #26]
    42c4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    42c6:	0719      	lsls	r1, r3, #28
    42c8:	d402      	bmi.n	42d0 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    42ca:	223f      	movs	r2, #63	; 0x3f
    42cc:	4013      	ands	r3, r2
    42ce:	e001      	b.n	42d4 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    42d0:	2237      	movs	r2, #55	; 0x37
    42d2:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    42d4:	2b00      	cmp	r3, #0
    42d6:	d037      	beq.n	4348 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    42d8:	079a      	lsls	r2, r3, #30
    42da:	d507      	bpl.n	42ec <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    42dc:	221a      	movs	r2, #26
    42de:	2332      	movs	r3, #50	; 0x32
    42e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    42e2:	8b62      	ldrh	r2, [r4, #26]
    42e4:	2302      	movs	r3, #2
    42e6:	4313      	orrs	r3, r2
    42e8:	8363      	strh	r3, [r4, #26]
    42ea:	e027      	b.n	433c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    42ec:	0759      	lsls	r1, r3, #29
    42ee:	d507      	bpl.n	4300 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    42f0:	221e      	movs	r2, #30
    42f2:	2332      	movs	r3, #50	; 0x32
    42f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    42f6:	8b62      	ldrh	r2, [r4, #26]
    42f8:	2304      	movs	r3, #4
    42fa:	4313      	orrs	r3, r2
    42fc:	8363      	strh	r3, [r4, #26]
    42fe:	e01d      	b.n	433c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4300:	07da      	lsls	r2, r3, #31
    4302:	d507      	bpl.n	4314 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4304:	2213      	movs	r2, #19
    4306:	2332      	movs	r3, #50	; 0x32
    4308:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    430a:	8b62      	ldrh	r2, [r4, #26]
    430c:	2301      	movs	r3, #1
    430e:	4313      	orrs	r3, r2
    4310:	8363      	strh	r3, [r4, #26]
    4312:	e013      	b.n	433c <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4314:	06d9      	lsls	r1, r3, #27
    4316:	d507      	bpl.n	4328 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4318:	2242      	movs	r2, #66	; 0x42
    431a:	2332      	movs	r3, #50	; 0x32
    431c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    431e:	8b62      	ldrh	r2, [r4, #26]
    4320:	2310      	movs	r3, #16
    4322:	4313      	orrs	r3, r2
    4324:	8363      	strh	r3, [r4, #26]
    4326:	e009      	b.n	433c <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4328:	2220      	movs	r2, #32
    432a:	421a      	tst	r2, r3
    432c:	d006      	beq.n	433c <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    432e:	2241      	movs	r2, #65	; 0x41
    4330:	2332      	movs	r3, #50	; 0x32
    4332:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    4334:	8b62      	ldrh	r2, [r4, #26]
    4336:	2320      	movs	r3, #32
    4338:	4313      	orrs	r3, r2
    433a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    433c:	077a      	lsls	r2, r7, #29
    433e:	d527      	bpl.n	4390 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4340:	1c28      	adds	r0, r5, #0
    4342:	696b      	ldr	r3, [r5, #20]
    4344:	4798      	blx	r3
    4346:	e023      	b.n	4390 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4348:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    434a:	05d2      	lsls	r2, r2, #23
    434c:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    434e:	b2d3      	uxtb	r3, r2
    4350:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4352:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4354:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4356:	1c59      	adds	r1, r3, #1
    4358:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    435a:	7969      	ldrb	r1, [r5, #5]
    435c:	2901      	cmp	r1, #1
    435e:	d104      	bne.n	436a <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4360:	0a12      	lsrs	r2, r2, #8
    4362:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4364:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4366:	3301      	adds	r3, #1
    4368:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    436a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    436c:	3b01      	subs	r3, #1
    436e:	b29b      	uxth	r3, r3
    4370:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4372:	2b00      	cmp	r3, #0
    4374:	d10c      	bne.n	4390 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4376:	2304      	movs	r3, #4
    4378:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    437a:	2200      	movs	r2, #0
    437c:	2332      	movs	r3, #50	; 0x32
    437e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4380:	07ba      	lsls	r2, r7, #30
    4382:	d505      	bpl.n	4390 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4384:	1c28      	adds	r0, r5, #0
    4386:	692b      	ldr	r3, [r5, #16]
    4388:	4798      	blx	r3
    438a:	e001      	b.n	4390 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    438c:	2304      	movs	r3, #4
    438e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4390:	06f1      	lsls	r1, r6, #27
    4392:	d507      	bpl.n	43a4 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4394:	2310      	movs	r3, #16
    4396:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4398:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    439a:	06fa      	lsls	r2, r7, #27
    439c:	d502      	bpl.n	43a4 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    439e:	1c28      	adds	r0, r5, #0
    43a0:	69eb      	ldr	r3, [r5, #28]
    43a2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    43a4:	06b1      	lsls	r1, r6, #26
    43a6:	d507      	bpl.n	43b8 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    43a8:	2320      	movs	r3, #32
    43aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    43ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    43ae:	073a      	lsls	r2, r7, #28
    43b0:	d502      	bpl.n	43b8 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    43b2:	1c28      	adds	r0, r5, #0
    43b4:	69ab      	ldr	r3, [r5, #24]
    43b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    43b8:	0731      	lsls	r1, r6, #28
    43ba:	d507      	bpl.n	43cc <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    43bc:	2308      	movs	r3, #8
    43be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    43c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    43c2:	06ba      	lsls	r2, r7, #26
    43c4:	d502      	bpl.n	43cc <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    43c6:	6a2b      	ldr	r3, [r5, #32]
    43c8:	1c28      	adds	r0, r5, #0
    43ca:	4798      	blx	r3
		}
	}
#endif
}
    43cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	200003fc 	.word	0x200003fc

000043d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    43d4:	b508      	push	{r3, lr}
	switch (clock_source) {
    43d6:	2808      	cmp	r0, #8
    43d8:	d834      	bhi.n	4444 <system_clock_source_get_hz+0x70>
    43da:	0080      	lsls	r0, r0, #2
    43dc:	4b1b      	ldr	r3, [pc, #108]	; (444c <system_clock_source_get_hz+0x78>)
    43de:	581b      	ldr	r3, [r3, r0]
    43e0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    43e2:	2080      	movs	r0, #128	; 0x80
    43e4:	0200      	lsls	r0, r0, #8
    43e6:	e030      	b.n	444a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    43e8:	4b19      	ldr	r3, [pc, #100]	; (4450 <system_clock_source_get_hz+0x7c>)
    43ea:	6918      	ldr	r0, [r3, #16]
    43ec:	e02d      	b.n	444a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    43ee:	4b19      	ldr	r3, [pc, #100]	; (4454 <system_clock_source_get_hz+0x80>)
    43f0:	6a18      	ldr	r0, [r3, #32]
    43f2:	0580      	lsls	r0, r0, #22
    43f4:	0f80      	lsrs	r0, r0, #30
    43f6:	4b18      	ldr	r3, [pc, #96]	; (4458 <system_clock_source_get_hz+0x84>)
    43f8:	40c3      	lsrs	r3, r0
    43fa:	1c18      	adds	r0, r3, #0
    43fc:	e025      	b.n	444a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    43fe:	4b14      	ldr	r3, [pc, #80]	; (4450 <system_clock_source_get_hz+0x7c>)
    4400:	6958      	ldr	r0, [r3, #20]
    4402:	e022      	b.n	444a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4404:	4b12      	ldr	r3, [pc, #72]	; (4450 <system_clock_source_get_hz+0x7c>)
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	2002      	movs	r0, #2
    440a:	4018      	ands	r0, r3
    440c:	d01d      	beq.n	444a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    440e:	4911      	ldr	r1, [pc, #68]	; (4454 <system_clock_source_get_hz+0x80>)
    4410:	2210      	movs	r2, #16
    4412:	68cb      	ldr	r3, [r1, #12]
    4414:	421a      	tst	r2, r3
    4416:	d0fc      	beq.n	4412 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4418:	4b0d      	ldr	r3, [pc, #52]	; (4450 <system_clock_source_get_hz+0x7c>)
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	075a      	lsls	r2, r3, #29
    441e:	d513      	bpl.n	4448 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4420:	2000      	movs	r0, #0
    4422:	4b0e      	ldr	r3, [pc, #56]	; (445c <system_clock_source_get_hz+0x88>)
    4424:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4426:	4b0a      	ldr	r3, [pc, #40]	; (4450 <system_clock_source_get_hz+0x7c>)
    4428:	689b      	ldr	r3, [r3, #8]
    442a:	041b      	lsls	r3, r3, #16
    442c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    442e:	4358      	muls	r0, r3
    4430:	e00b      	b.n	444a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4432:	2350      	movs	r3, #80	; 0x50
    4434:	4a07      	ldr	r2, [pc, #28]	; (4454 <system_clock_source_get_hz+0x80>)
    4436:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4438:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    443a:	075a      	lsls	r2, r3, #29
    443c:	d505      	bpl.n	444a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    443e:	4b04      	ldr	r3, [pc, #16]	; (4450 <system_clock_source_get_hz+0x7c>)
    4440:	68d8      	ldr	r0, [r3, #12]
    4442:	e002      	b.n	444a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    4444:	2000      	movs	r0, #0
    4446:	e000      	b.n	444a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4448:	4805      	ldr	r0, [pc, #20]	; (4460 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    444a:	bd08      	pop	{r3, pc}
    444c:	00009154 	.word	0x00009154
    4450:	200000f0 	.word	0x200000f0
    4454:	40000800 	.word	0x40000800
    4458:	007a1200 	.word	0x007a1200
    445c:	00004af1 	.word	0x00004af1
    4460:	02dc6c00 	.word	0x02dc6c00

00004464 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4464:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4466:	4b0c      	ldr	r3, [pc, #48]	; (4498 <system_clock_source_osc8m_set_config+0x34>)
    4468:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    446a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    446c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    446e:	7840      	ldrb	r0, [r0, #1]
    4470:	2201      	movs	r2, #1
    4472:	4010      	ands	r0, r2
    4474:	0180      	lsls	r0, r0, #6
    4476:	2640      	movs	r6, #64	; 0x40
    4478:	43b4      	bics	r4, r6
    447a:	4304      	orrs	r4, r0
    447c:	402a      	ands	r2, r5
    447e:	01d0      	lsls	r0, r2, #7
    4480:	2280      	movs	r2, #128	; 0x80
    4482:	4394      	bics	r4, r2
    4484:	1c22      	adds	r2, r4, #0
    4486:	4302      	orrs	r2, r0
    4488:	2003      	movs	r0, #3
    448a:	4001      	ands	r1, r0
    448c:	0209      	lsls	r1, r1, #8
    448e:	4803      	ldr	r0, [pc, #12]	; (449c <system_clock_source_osc8m_set_config+0x38>)
    4490:	4002      	ands	r2, r0
    4492:	430a      	orrs	r2, r1
    4494:	621a      	str	r2, [r3, #32]
}
    4496:	bd70      	pop	{r4, r5, r6, pc}
    4498:	40000800 	.word	0x40000800
    449c:	fffffcff 	.word	0xfffffcff

000044a0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    44a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44a2:	464f      	mov	r7, r9
    44a4:	4646      	mov	r6, r8
    44a6:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    44a8:	4a19      	ldr	r2, [pc, #100]	; (4510 <system_clock_source_osc32k_set_config+0x70>)
    44aa:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    44ac:	7841      	ldrb	r1, [r0, #1]
    44ae:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    44b0:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    44b2:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    44b4:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    44b6:	7943      	ldrb	r3, [r0, #5]
    44b8:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    44ba:	7880      	ldrb	r0, [r0, #2]
    44bc:	2301      	movs	r3, #1
    44be:	4018      	ands	r0, r3
    44c0:	0080      	lsls	r0, r0, #2
    44c2:	2104      	movs	r1, #4
    44c4:	438c      	bics	r4, r1
    44c6:	4304      	orrs	r4, r0
    44c8:	4660      	mov	r0, ip
    44ca:	4018      	ands	r0, r3
    44cc:	00c0      	lsls	r0, r0, #3
    44ce:	2108      	movs	r1, #8
    44d0:	438c      	bics	r4, r1
    44d2:	4304      	orrs	r4, r0
    44d4:	1c18      	adds	r0, r3, #0
    44d6:	4038      	ands	r0, r7
    44d8:	0180      	lsls	r0, r0, #6
    44da:	2740      	movs	r7, #64	; 0x40
    44dc:	43bc      	bics	r4, r7
    44de:	4304      	orrs	r4, r0
    44e0:	1c18      	adds	r0, r3, #0
    44e2:	4030      	ands	r0, r6
    44e4:	01c0      	lsls	r0, r0, #7
    44e6:	2680      	movs	r6, #128	; 0x80
    44e8:	43b4      	bics	r4, r6
    44ea:	4304      	orrs	r4, r0
    44ec:	2007      	movs	r0, #7
    44ee:	4028      	ands	r0, r5
    44f0:	0200      	lsls	r0, r0, #8
    44f2:	4d08      	ldr	r5, [pc, #32]	; (4514 <system_clock_source_osc32k_set_config+0x74>)
    44f4:	402c      	ands	r4, r5
    44f6:	4304      	orrs	r4, r0
    44f8:	4649      	mov	r1, r9
    44fa:	400b      	ands	r3, r1
    44fc:	0319      	lsls	r1, r3, #12
    44fe:	4806      	ldr	r0, [pc, #24]	; (4518 <system_clock_source_osc32k_set_config+0x78>)
    4500:	1c23      	adds	r3, r4, #0
    4502:	4003      	ands	r3, r0
    4504:	430b      	orrs	r3, r1
    4506:	6193      	str	r3, [r2, #24]
}
    4508:	bc0c      	pop	{r2, r3}
    450a:	4690      	mov	r8, r2
    450c:	4699      	mov	r9, r3
    450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4510:	40000800 	.word	0x40000800
    4514:	fffff8ff 	.word	0xfffff8ff
    4518:	ffffefff 	.word	0xffffefff

0000451c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    451c:	b5f0      	push	{r4, r5, r6, r7, lr}
    451e:	465f      	mov	r7, fp
    4520:	4656      	mov	r6, sl
    4522:	464d      	mov	r5, r9
    4524:	4644      	mov	r4, r8
    4526:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4528:	4a25      	ldr	r2, [pc, #148]	; (45c0 <system_clock_source_xosc32k_set_config+0xa4>)
    452a:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    452c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    452e:	7803      	ldrb	r3, [r0, #0]
    4530:	4259      	negs	r1, r3
    4532:	4159      	adcs	r1, r3
    4534:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4536:	7883      	ldrb	r3, [r0, #2]
    4538:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    453a:	78c1      	ldrb	r1, [r0, #3]
    453c:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    453e:	7903      	ldrb	r3, [r0, #4]
    4540:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    4542:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4544:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4546:	7b81      	ldrb	r1, [r0, #14]
    4548:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    454a:	6880      	ldr	r0, [r0, #8]
    454c:	4b1d      	ldr	r3, [pc, #116]	; (45c4 <system_clock_source_xosc32k_set_config+0xa8>)
    454e:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    4550:	2301      	movs	r3, #1
    4552:	4651      	mov	r1, sl
    4554:	0088      	lsls	r0, r1, #2
    4556:	2104      	movs	r1, #4
    4558:	438c      	bics	r4, r1
    455a:	4304      	orrs	r4, r0
    455c:	4648      	mov	r0, r9
    455e:	4018      	ands	r0, r3
    4560:	00c0      	lsls	r0, r0, #3
    4562:	2108      	movs	r1, #8
    4564:	438c      	bics	r4, r1
    4566:	4304      	orrs	r4, r0
    4568:	4640      	mov	r0, r8
    456a:	4018      	ands	r0, r3
    456c:	0100      	lsls	r0, r0, #4
    456e:	2110      	movs	r1, #16
    4570:	438c      	bics	r4, r1
    4572:	4304      	orrs	r4, r0
    4574:	4660      	mov	r0, ip
    4576:	4018      	ands	r0, r3
    4578:	0140      	lsls	r0, r0, #5
    457a:	2120      	movs	r1, #32
    457c:	438c      	bics	r4, r1
    457e:	4304      	orrs	r4, r0
    4580:	1c18      	adds	r0, r3, #0
    4582:	4038      	ands	r0, r7
    4584:	0180      	lsls	r0, r0, #6
    4586:	2740      	movs	r7, #64	; 0x40
    4588:	43bc      	bics	r4, r7
    458a:	4304      	orrs	r4, r0
    458c:	1c18      	adds	r0, r3, #0
    458e:	4030      	ands	r0, r6
    4590:	01c0      	lsls	r0, r0, #7
    4592:	2680      	movs	r6, #128	; 0x80
    4594:	43b4      	bics	r4, r6
    4596:	4304      	orrs	r4, r0
    4598:	2007      	movs	r0, #7
    459a:	4028      	ands	r0, r5
    459c:	0200      	lsls	r0, r0, #8
    459e:	4d0a      	ldr	r5, [pc, #40]	; (45c8 <system_clock_source_xosc32k_set_config+0xac>)
    45a0:	402c      	ands	r4, r5
    45a2:	4304      	orrs	r4, r0
    45a4:	4659      	mov	r1, fp
    45a6:	400b      	ands	r3, r1
    45a8:	0319      	lsls	r1, r3, #12
    45aa:	4808      	ldr	r0, [pc, #32]	; (45cc <system_clock_source_xosc32k_set_config+0xb0>)
    45ac:	1c23      	adds	r3, r4, #0
    45ae:	4003      	ands	r3, r0
    45b0:	430b      	orrs	r3, r1
    45b2:	8293      	strh	r3, [r2, #20]
}
    45b4:	bc3c      	pop	{r2, r3, r4, r5}
    45b6:	4690      	mov	r8, r2
    45b8:	4699      	mov	r9, r3
    45ba:	46a2      	mov	sl, r4
    45bc:	46ab      	mov	fp, r5
    45be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45c0:	40000800 	.word	0x40000800
    45c4:	200000f0 	.word	0x200000f0
    45c8:	fffff8ff 	.word	0xfffff8ff
    45cc:	ffffefff 	.word	0xffffefff

000045d0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    45d0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45d2:	7a02      	ldrb	r2, [r0, #8]
    45d4:	0692      	lsls	r2, r2, #26
    45d6:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    45d8:	8943      	ldrh	r3, [r0, #10]
    45da:	059b      	lsls	r3, r3, #22
    45dc:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45de:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    45e0:	4b15      	ldr	r3, [pc, #84]	; (4638 <system_clock_source_dfll_set_config+0x68>)
    45e2:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    45e4:	8881      	ldrh	r1, [r0, #4]
    45e6:	8842      	ldrh	r2, [r0, #2]
    45e8:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    45ea:	79c4      	ldrb	r4, [r0, #7]
    45ec:	7982      	ldrb	r2, [r0, #6]
    45ee:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    45f0:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    45f2:	7841      	ldrb	r1, [r0, #1]
    45f4:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    45f6:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    45f8:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    45fa:	7803      	ldrb	r3, [r0, #0]
    45fc:	2b04      	cmp	r3, #4
    45fe:	d10f      	bne.n	4620 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4600:	7b02      	ldrb	r2, [r0, #12]
    4602:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4604:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4606:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4608:	89c3      	ldrh	r3, [r0, #14]
    460a:	041b      	lsls	r3, r3, #16
    460c:	490b      	ldr	r1, [pc, #44]	; (463c <system_clock_source_dfll_set_config+0x6c>)
    460e:	400b      	ands	r3, r1
    4610:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4612:	4b09      	ldr	r3, [pc, #36]	; (4638 <system_clock_source_dfll_set_config+0x68>)
    4614:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4616:	6819      	ldr	r1, [r3, #0]
    4618:	2204      	movs	r2, #4
    461a:	430a      	orrs	r2, r1
    461c:	601a      	str	r2, [r3, #0]
    461e:	e009      	b.n	4634 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4620:	2b20      	cmp	r3, #32
    4622:	d107      	bne.n	4634 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4624:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4626:	4b04      	ldr	r3, [pc, #16]	; (4638 <system_clock_source_dfll_set_config+0x68>)
    4628:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    462a:	6819      	ldr	r1, [r3, #0]
    462c:	2284      	movs	r2, #132	; 0x84
    462e:	00d2      	lsls	r2, r2, #3
    4630:	430a      	orrs	r2, r1
    4632:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4634:	bd10      	pop	{r4, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	200000f0 	.word	0x200000f0
    463c:	03ff0000 	.word	0x03ff0000

00004640 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4640:	2808      	cmp	r0, #8
    4642:	d843      	bhi.n	46cc <system_clock_source_enable+0x8c>
    4644:	0080      	lsls	r0, r0, #2
    4646:	4b22      	ldr	r3, [pc, #136]	; (46d0 <system_clock_source_enable+0x90>)
    4648:	581b      	ldr	r3, [r3, r0]
    464a:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    464c:	2000      	movs	r0, #0
    464e:	e03e      	b.n	46ce <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4650:	4b20      	ldr	r3, [pc, #128]	; (46d4 <system_clock_source_enable+0x94>)
    4652:	6a19      	ldr	r1, [r3, #32]
    4654:	2202      	movs	r2, #2
    4656:	430a      	orrs	r2, r1
    4658:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    465a:	2000      	movs	r0, #0
    465c:	e037      	b.n	46ce <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    465e:	4b1d      	ldr	r3, [pc, #116]	; (46d4 <system_clock_source_enable+0x94>)
    4660:	6999      	ldr	r1, [r3, #24]
    4662:	2202      	movs	r2, #2
    4664:	430a      	orrs	r2, r1
    4666:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4668:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    466a:	e030      	b.n	46ce <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    466c:	4b19      	ldr	r3, [pc, #100]	; (46d4 <system_clock_source_enable+0x94>)
    466e:	8a19      	ldrh	r1, [r3, #16]
    4670:	2202      	movs	r2, #2
    4672:	430a      	orrs	r2, r1
    4674:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4676:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4678:	e029      	b.n	46ce <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    467a:	4b16      	ldr	r3, [pc, #88]	; (46d4 <system_clock_source_enable+0x94>)
    467c:	8a99      	ldrh	r1, [r3, #20]
    467e:	2202      	movs	r2, #2
    4680:	430a      	orrs	r2, r1
    4682:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4684:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4686:	e022      	b.n	46ce <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4688:	4b13      	ldr	r3, [pc, #76]	; (46d8 <system_clock_source_enable+0x98>)
    468a:	6819      	ldr	r1, [r3, #0]
    468c:	2202      	movs	r2, #2
    468e:	430a      	orrs	r2, r1
    4690:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4692:	681a      	ldr	r2, [r3, #0]
    4694:	4b11      	ldr	r3, [pc, #68]	; (46dc <system_clock_source_enable+0x9c>)
    4696:	401a      	ands	r2, r3
    4698:	4b0e      	ldr	r3, [pc, #56]	; (46d4 <system_clock_source_enable+0x94>)
    469a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    469c:	1c19      	adds	r1, r3, #0
    469e:	2210      	movs	r2, #16
    46a0:	68cb      	ldr	r3, [r1, #12]
    46a2:	421a      	tst	r2, r3
    46a4:	d0fc      	beq.n	46a0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46a6:	4a0c      	ldr	r2, [pc, #48]	; (46d8 <system_clock_source_enable+0x98>)
    46a8:	6891      	ldr	r1, [r2, #8]
    46aa:	4b0a      	ldr	r3, [pc, #40]	; (46d4 <system_clock_source_enable+0x94>)
    46ac:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46ae:	6851      	ldr	r1, [r2, #4]
    46b0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46b2:	6812      	ldr	r2, [r2, #0]
    46b4:	b292      	uxth	r2, r2
    46b6:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46b8:	2000      	movs	r0, #0
    46ba:	e008      	b.n	46ce <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46bc:	4a05      	ldr	r2, [pc, #20]	; (46d4 <system_clock_source_enable+0x94>)
    46be:	2344      	movs	r3, #68	; 0x44
    46c0:	5cd0      	ldrb	r0, [r2, r3]
    46c2:	2102      	movs	r1, #2
    46c4:	4301      	orrs	r1, r0
    46c6:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    46c8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    46ca:	e000      	b.n	46ce <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    46cc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    46ce:	4770      	bx	lr
    46d0:	00009178 	.word	0x00009178
    46d4:	40000800 	.word	0x40000800
    46d8:	200000f0 	.word	0x200000f0
    46dc:	0000ff7f 	.word	0x0000ff7f

000046e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    46e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e2:	464f      	mov	r7, r9
    46e4:	4646      	mov	r6, r8
    46e6:	b4c0      	push	{r6, r7}
    46e8:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    46ea:	22c2      	movs	r2, #194	; 0xc2
    46ec:	00d2      	lsls	r2, r2, #3
    46ee:	4b5c      	ldr	r3, [pc, #368]	; (4860 <system_clock_init+0x180>)
    46f0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    46f2:	4b5c      	ldr	r3, [pc, #368]	; (4864 <system_clock_init+0x184>)
    46f4:	685a      	ldr	r2, [r3, #4]
    46f6:	211e      	movs	r1, #30
    46f8:	438a      	bics	r2, r1
    46fa:	2104      	movs	r1, #4
    46fc:	430a      	orrs	r2, r1
    46fe:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    4700:	2203      	movs	r2, #3
    4702:	ab01      	add	r3, sp, #4
    4704:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4706:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4708:	4d57      	ldr	r5, [pc, #348]	; (4868 <system_clock_init+0x188>)
    470a:	b2e0      	uxtb	r0, r4
    470c:	a901      	add	r1, sp, #4
    470e:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4710:	3401      	adds	r4, #1
    4712:	2c25      	cmp	r4, #37	; 0x25
    4714:	d1f9      	bne.n	470a <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4716:	a80c      	add	r0, sp, #48	; 0x30
    4718:	2300      	movs	r3, #0
    471a:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    471c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    471e:	2280      	movs	r2, #128	; 0x80
    4720:	0212      	lsls	r2, r2, #8
    4722:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4724:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4726:	2201      	movs	r2, #1
    4728:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    472a:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    472c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    472e:	2203      	movs	r2, #3
    4730:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4732:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4734:	4b4d      	ldr	r3, [pc, #308]	; (486c <system_clock_init+0x18c>)
    4736:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4738:	2005      	movs	r0, #5
    473a:	4b4d      	ldr	r3, [pc, #308]	; (4870 <system_clock_init+0x190>)
    473c:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    473e:	4948      	ldr	r1, [pc, #288]	; (4860 <system_clock_init+0x180>)
    4740:	2202      	movs	r2, #2
    4742:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4744:	421a      	tst	r2, r3
    4746:	d0fc      	beq.n	4742 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4748:	4b45      	ldr	r3, [pc, #276]	; (4860 <system_clock_init+0x180>)
    474a:	8a99      	ldrh	r1, [r3, #20]
    474c:	2280      	movs	r2, #128	; 0x80
    474e:	430a      	orrs	r2, r1
    4750:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    4752:	4d48      	ldr	r5, [pc, #288]	; (4874 <system_clock_init+0x194>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    4754:	682a      	ldr	r2, [r5, #0]
    4756:	04d1      	lsls	r1, r2, #19
    4758:	0e49      	lsrs	r1, r1, #25
    475a:	0409      	lsls	r1, r1, #16
    475c:	6998      	ldr	r0, [r3, #24]
    475e:	4a46      	ldr	r2, [pc, #280]	; (4878 <system_clock_init+0x198>)
    4760:	4002      	ands	r2, r0
    4762:	430a      	orrs	r2, r1
    4764:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    4766:	a80a      	add	r0, sp, #40	; 0x28
    4768:	2301      	movs	r3, #1
    476a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    476c:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    476e:	2400      	movs	r4, #0
    4770:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    4772:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4774:	2307      	movs	r3, #7
    4776:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    4778:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    477a:	4b40      	ldr	r3, [pc, #256]	; (487c <system_clock_init+0x19c>)
    477c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    477e:	2004      	movs	r0, #4
    4780:	4b3b      	ldr	r3, [pc, #236]	; (4870 <system_clock_init+0x190>)
    4782:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4784:	ab05      	add	r3, sp, #20
    4786:	2200      	movs	r2, #0
    4788:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    478a:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    478c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    478e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    4790:	213f      	movs	r1, #63	; 0x3f
    4792:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4794:	2104      	movs	r1, #4
    4796:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4798:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    479a:	682b      	ldr	r3, [r5, #0]
    479c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    479e:	2b3f      	cmp	r3, #63	; 0x3f
    47a0:	d100      	bne.n	47a4 <system_clock_init+0xc4>
		coarse = 0x1f;
    47a2:	231f      	movs	r3, #31
	}
	dfll_conf.coarse_value = coarse;
    47a4:	a805      	add	r0, sp, #20
    47a6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    47a8:	4b35      	ldr	r3, [pc, #212]	; (4880 <system_clock_init+0x1a0>)
    47aa:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    47ac:	2307      	movs	r3, #7
    47ae:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    47b0:	233f      	movs	r3, #63	; 0x3f
    47b2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    47b4:	4b33      	ldr	r3, [pc, #204]	; (4884 <system_clock_init+0x1a4>)
    47b6:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    47b8:	a804      	add	r0, sp, #16
    47ba:	2500      	movs	r5, #0
    47bc:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    47be:	2601      	movs	r6, #1
    47c0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    47c2:	2302      	movs	r3, #2
    47c4:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    47c6:	4b30      	ldr	r3, [pc, #192]	; (4888 <system_clock_init+0x1a8>)
    47c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    47ca:	2006      	movs	r0, #6
    47cc:	4f28      	ldr	r7, [pc, #160]	; (4870 <system_clock_init+0x190>)
    47ce:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47d0:	4b2e      	ldr	r3, [pc, #184]	; (488c <system_clock_init+0x1ac>)
    47d2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    47d4:	ac01      	add	r4, sp, #4
    47d6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    47d8:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47da:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47dc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47de:	2305      	movs	r3, #5
    47e0:	7023      	strb	r3, [r4, #0]
    47e2:	2001      	movs	r0, #1
    47e4:	1c21      	adds	r1, r4, #0
    47e6:	4b2a      	ldr	r3, [pc, #168]	; (4890 <system_clock_init+0x1b0>)
    47e8:	4699      	mov	r9, r3
    47ea:	4798      	blx	r3
    47ec:	2001      	movs	r0, #1
    47ee:	4a29      	ldr	r2, [pc, #164]	; (4894 <system_clock_init+0x1b4>)
    47f0:	4690      	mov	r8, r2
    47f2:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    47f4:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47f6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47f8:	7265      	strb	r5, [r4, #9]
    47fa:	2304      	movs	r3, #4
    47fc:	7023      	strb	r3, [r4, #0]
    47fe:	2320      	movs	r3, #32
    4800:	6063      	str	r3, [r4, #4]
    4802:	2002      	movs	r0, #2
    4804:	1c21      	adds	r1, r4, #0
    4806:	47c8      	blx	r9
    4808:	2002      	movs	r0, #2
    480a:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    480c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    480e:	2000      	movs	r0, #0
    4810:	1c21      	adds	r1, r4, #0
    4812:	4b15      	ldr	r3, [pc, #84]	; (4868 <system_clock_init+0x188>)
    4814:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4816:	2000      	movs	r0, #0
    4818:	4b1f      	ldr	r3, [pc, #124]	; (4898 <system_clock_init+0x1b8>)
    481a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    481c:	2007      	movs	r0, #7
    481e:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4820:	490f      	ldr	r1, [pc, #60]	; (4860 <system_clock_init+0x180>)
    4822:	22d0      	movs	r2, #208	; 0xd0
    4824:	68cb      	ldr	r3, [r1, #12]
    4826:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4828:	2bd0      	cmp	r3, #208	; 0xd0
    482a:	d1fb      	bne.n	4824 <system_clock_init+0x144>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    482c:	4a1b      	ldr	r2, [pc, #108]	; (489c <system_clock_init+0x1bc>)
    482e:	2300      	movs	r3, #0
    4830:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4832:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4834:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4836:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4838:	a901      	add	r1, sp, #4
    483a:	2201      	movs	r2, #1
    483c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    483e:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4840:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4842:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4844:	2307      	movs	r3, #7
    4846:	700b      	strb	r3, [r1, #0]
    4848:	2000      	movs	r0, #0
    484a:	4b11      	ldr	r3, [pc, #68]	; (4890 <system_clock_init+0x1b0>)
    484c:	4798      	blx	r3
    484e:	2000      	movs	r0, #0
    4850:	4b10      	ldr	r3, [pc, #64]	; (4894 <system_clock_init+0x1b4>)
    4852:	4798      	blx	r3
#endif
}
    4854:	b011      	add	sp, #68	; 0x44
    4856:	bc0c      	pop	{r2, r3}
    4858:	4690      	mov	r8, r2
    485a:	4699      	mov	r9, r3
    485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	40000800 	.word	0x40000800
    4864:	41004000 	.word	0x41004000
    4868:	00004ad5 	.word	0x00004ad5
    486c:	0000451d 	.word	0x0000451d
    4870:	00004641 	.word	0x00004641
    4874:	00806024 	.word	0x00806024
    4878:	ff80ffff 	.word	0xff80ffff
    487c:	000044a1 	.word	0x000044a1
    4880:	000005b9 	.word	0x000005b9
    4884:	000045d1 	.word	0x000045d1
    4888:	00004465 	.word	0x00004465
    488c:	000048a1 	.word	0x000048a1
    4890:	000048c5 	.word	0x000048c5
    4894:	00004979 	.word	0x00004979
    4898:	00004a49 	.word	0x00004a49
    489c:	40000400 	.word	0x40000400

000048a0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    48a0:	4b06      	ldr	r3, [pc, #24]	; (48bc <system_gclk_init+0x1c>)
    48a2:	6999      	ldr	r1, [r3, #24]
    48a4:	2208      	movs	r2, #8
    48a6:	430a      	orrs	r2, r1
    48a8:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    48aa:	2201      	movs	r2, #1
    48ac:	4b04      	ldr	r3, [pc, #16]	; (48c0 <system_gclk_init+0x20>)
    48ae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    48b0:	1c19      	adds	r1, r3, #0
    48b2:	780b      	ldrb	r3, [r1, #0]
    48b4:	4213      	tst	r3, r2
    48b6:	d1fc      	bne.n	48b2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    48b8:	4770      	bx	lr
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	40000400 	.word	0x40000400
    48c0:	40000c00 	.word	0x40000c00

000048c4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    48c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c6:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    48c8:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    48ca:	780d      	ldrb	r5, [r1, #0]
    48cc:	022d      	lsls	r5, r5, #8
    48ce:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    48d0:	784b      	ldrb	r3, [r1, #1]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d002      	beq.n	48dc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    48d6:	2380      	movs	r3, #128	; 0x80
    48d8:	02db      	lsls	r3, r3, #11
    48da:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    48dc:	7a4b      	ldrb	r3, [r1, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d002      	beq.n	48e8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    48e2:	2380      	movs	r3, #128	; 0x80
    48e4:	031b      	lsls	r3, r3, #12
    48e6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    48e8:	684c      	ldr	r4, [r1, #4]
    48ea:	2c01      	cmp	r4, #1
    48ec:	d917      	bls.n	491e <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    48ee:	1e63      	subs	r3, r4, #1
    48f0:	421c      	tst	r4, r3
    48f2:	d10f      	bne.n	4914 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48f4:	2c02      	cmp	r4, #2
    48f6:	d906      	bls.n	4906 <system_gclk_gen_set_config+0x42>
    48f8:	2302      	movs	r3, #2
    48fa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48fc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    48fe:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4900:	429c      	cmp	r4, r3
    4902:	d8fb      	bhi.n	48fc <system_gclk_gen_set_config+0x38>
    4904:	e000      	b.n	4908 <system_gclk_gen_set_config+0x44>
    4906:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4908:	0217      	lsls	r7, r2, #8
    490a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    490c:	2380      	movs	r3, #128	; 0x80
    490e:	035b      	lsls	r3, r3, #13
    4910:	431d      	orrs	r5, r3
    4912:	e004      	b.n	491e <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4914:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4916:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4918:	2380      	movs	r3, #128	; 0x80
    491a:	029b      	lsls	r3, r3, #10
    491c:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    491e:	7a0b      	ldrb	r3, [r1, #8]
    4920:	2b00      	cmp	r3, #0
    4922:	d002      	beq.n	492a <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4924:	2380      	movs	r3, #128	; 0x80
    4926:	039b      	lsls	r3, r3, #14
    4928:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    492a:	4a0f      	ldr	r2, [pc, #60]	; (4968 <system_gclk_gen_set_config+0xa4>)
    492c:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    492e:	b25b      	sxtb	r3, r3
    4930:	2b00      	cmp	r3, #0
    4932:	dbfb      	blt.n	492c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4934:	4b0d      	ldr	r3, [pc, #52]	; (496c <system_gclk_gen_set_config+0xa8>)
    4936:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4938:	4b0d      	ldr	r3, [pc, #52]	; (4970 <system_gclk_gen_set_config+0xac>)
    493a:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    493c:	4a0a      	ldr	r2, [pc, #40]	; (4968 <system_gclk_gen_set_config+0xa4>)
    493e:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4940:	b25b      	sxtb	r3, r3
    4942:	2b00      	cmp	r3, #0
    4944:	dbfb      	blt.n	493e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4946:	4b08      	ldr	r3, [pc, #32]	; (4968 <system_gclk_gen_set_config+0xa4>)
    4948:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    494a:	1c1a      	adds	r2, r3, #0
    494c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    494e:	b25b      	sxtb	r3, r3
    4950:	2b00      	cmp	r3, #0
    4952:	dbfb      	blt.n	494c <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <system_gclk_gen_set_config+0xa4>)
    4956:	6859      	ldr	r1, [r3, #4]
    4958:	2280      	movs	r2, #128	; 0x80
    495a:	0252      	lsls	r2, r2, #9
    495c:	400a      	ands	r2, r1
    495e:	4315      	orrs	r5, r2
    4960:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4962:	4b04      	ldr	r3, [pc, #16]	; (4974 <system_gclk_gen_set_config+0xb0>)
    4964:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4968:	40000c00 	.word	0x40000c00
    496c:	00002e71 	.word	0x00002e71
    4970:	40000c08 	.word	0x40000c08
    4974:	00002eb1 	.word	0x00002eb1

00004978 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4978:	b510      	push	{r4, lr}
    497a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    497c:	4a0b      	ldr	r2, [pc, #44]	; (49ac <system_gclk_gen_enable+0x34>)
    497e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4980:	b25b      	sxtb	r3, r3
    4982:	2b00      	cmp	r3, #0
    4984:	dbfb      	blt.n	497e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4986:	4b0a      	ldr	r3, [pc, #40]	; (49b0 <system_gclk_gen_enable+0x38>)
    4988:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <system_gclk_gen_enable+0x3c>)
    498c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    498e:	4a07      	ldr	r2, [pc, #28]	; (49ac <system_gclk_gen_enable+0x34>)
    4990:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4992:	b25b      	sxtb	r3, r3
    4994:	2b00      	cmp	r3, #0
    4996:	dbfb      	blt.n	4990 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4998:	4b04      	ldr	r3, [pc, #16]	; (49ac <system_gclk_gen_enable+0x34>)
    499a:	6859      	ldr	r1, [r3, #4]
    499c:	2280      	movs	r2, #128	; 0x80
    499e:	0252      	lsls	r2, r2, #9
    49a0:	430a      	orrs	r2, r1
    49a2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    49a4:	4b04      	ldr	r3, [pc, #16]	; (49b8 <system_gclk_gen_enable+0x40>)
    49a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    49a8:	bd10      	pop	{r4, pc}
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	40000c00 	.word	0x40000c00
    49b0:	00002e71 	.word	0x00002e71
    49b4:	40000c04 	.word	0x40000c04
    49b8:	00002eb1 	.word	0x00002eb1

000049bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
    49be:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49c0:	4a1a      	ldr	r2, [pc, #104]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49c2:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    49c4:	b25b      	sxtb	r3, r3
    49c6:	2b00      	cmp	r3, #0
    49c8:	dbfb      	blt.n	49c2 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    49ca:	4b19      	ldr	r3, [pc, #100]	; (4a30 <system_gclk_gen_get_hz+0x74>)
    49cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49ce:	4b19      	ldr	r3, [pc, #100]	; (4a34 <system_gclk_gen_get_hz+0x78>)
    49d0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49d2:	4a16      	ldr	r2, [pc, #88]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49d4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    49d6:	b25b      	sxtb	r3, r3
    49d8:	2b00      	cmp	r3, #0
    49da:	dbfb      	blt.n	49d4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    49dc:	4e13      	ldr	r6, [pc, #76]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49de:	6870      	ldr	r0, [r6, #4]
    49e0:	04c0      	lsls	r0, r0, #19
    49e2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49e4:	4b14      	ldr	r3, [pc, #80]	; (4a38 <system_gclk_gen_get_hz+0x7c>)
    49e6:	4798      	blx	r3
    49e8:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49ea:	4b12      	ldr	r3, [pc, #72]	; (4a34 <system_gclk_gen_get_hz+0x78>)
    49ec:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49ee:	6876      	ldr	r6, [r6, #4]
    49f0:	02f6      	lsls	r6, r6, #11
    49f2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49f4:	4b11      	ldr	r3, [pc, #68]	; (4a3c <system_gclk_gen_get_hz+0x80>)
    49f6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49f8:	4a0c      	ldr	r2, [pc, #48]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49fa:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    49fc:	b25b      	sxtb	r3, r3
    49fe:	2b00      	cmp	r3, #0
    4a00:	dbfb      	blt.n	49fa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4a02:	4b0a      	ldr	r3, [pc, #40]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    4a04:	689c      	ldr	r4, [r3, #8]
    4a06:	0a24      	lsrs	r4, r4, #8
    4a08:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a0a:	4b0d      	ldr	r3, [pc, #52]	; (4a40 <system_gclk_gen_get_hz+0x84>)
    4a0c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4a0e:	2e00      	cmp	r6, #0
    4a10:	d107      	bne.n	4a22 <system_gclk_gen_get_hz+0x66>
    4a12:	2c01      	cmp	r4, #1
    4a14:	d907      	bls.n	4a26 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4a16:	1c28      	adds	r0, r5, #0
    4a18:	1c21      	adds	r1, r4, #0
    4a1a:	4b0a      	ldr	r3, [pc, #40]	; (4a44 <system_gclk_gen_get_hz+0x88>)
    4a1c:	4798      	blx	r3
    4a1e:	1c05      	adds	r5, r0, #0
    4a20:	e001      	b.n	4a26 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4a22:	3401      	adds	r4, #1
    4a24:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4a26:	1c28      	adds	r0, r5, #0
    4a28:	bd70      	pop	{r4, r5, r6, pc}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	40000c00 	.word	0x40000c00
    4a30:	00002e71 	.word	0x00002e71
    4a34:	40000c04 	.word	0x40000c04
    4a38:	000043d5 	.word	0x000043d5
    4a3c:	40000c08 	.word	0x40000c08
    4a40:	00002eb1 	.word	0x00002eb1
    4a44:	00006d25 	.word	0x00006d25

00004a48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a48:	b510      	push	{r4, lr}
    4a4a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4a4c:	4b06      	ldr	r3, [pc, #24]	; (4a68 <system_gclk_chan_enable+0x20>)
    4a4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a50:	4b06      	ldr	r3, [pc, #24]	; (4a6c <system_gclk_chan_enable+0x24>)
    4a52:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a54:	4b06      	ldr	r3, [pc, #24]	; (4a70 <system_gclk_chan_enable+0x28>)
    4a56:	8859      	ldrh	r1, [r3, #2]
    4a58:	2280      	movs	r2, #128	; 0x80
    4a5a:	01d2      	lsls	r2, r2, #7
    4a5c:	430a      	orrs	r2, r1
    4a5e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4a60:	4b04      	ldr	r3, [pc, #16]	; (4a74 <system_gclk_chan_enable+0x2c>)
    4a62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a64:	bd10      	pop	{r4, pc}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	00002e71 	.word	0x00002e71
    4a6c:	40000c02 	.word	0x40000c02
    4a70:	40000c00 	.word	0x40000c00
    4a74:	00002eb1 	.word	0x00002eb1

00004a78 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4a7c:	4b0f      	ldr	r3, [pc, #60]	; (4abc <system_gclk_chan_disable+0x44>)
    4a7e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a80:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <system_gclk_chan_disable+0x48>)
    4a82:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a84:	4b0f      	ldr	r3, [pc, #60]	; (4ac4 <system_gclk_chan_disable+0x4c>)
    4a86:	8858      	ldrh	r0, [r3, #2]
    4a88:	0500      	lsls	r0, r0, #20
    4a8a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a8c:	8859      	ldrh	r1, [r3, #2]
    4a8e:	4a0e      	ldr	r2, [pc, #56]	; (4ac8 <system_gclk_chan_disable+0x50>)
    4a90:	400a      	ands	r2, r1
    4a92:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a94:	8859      	ldrh	r1, [r3, #2]
    4a96:	4a0d      	ldr	r2, [pc, #52]	; (4acc <system_gclk_chan_disable+0x54>)
    4a98:	400a      	ands	r2, r1
    4a9a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a9c:	1c19      	adds	r1, r3, #0
    4a9e:	2280      	movs	r2, #128	; 0x80
    4aa0:	01d2      	lsls	r2, r2, #7
    4aa2:	884b      	ldrh	r3, [r1, #2]
    4aa4:	4213      	tst	r3, r2
    4aa6:	d1fc      	bne.n	4aa2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4aa8:	4b06      	ldr	r3, [pc, #24]	; (4ac4 <system_gclk_chan_disable+0x4c>)
    4aaa:	0201      	lsls	r1, r0, #8
    4aac:	8858      	ldrh	r0, [r3, #2]
    4aae:	4a06      	ldr	r2, [pc, #24]	; (4ac8 <system_gclk_chan_disable+0x50>)
    4ab0:	4002      	ands	r2, r0
    4ab2:	430a      	orrs	r2, r1
    4ab4:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ab6:	4b06      	ldr	r3, [pc, #24]	; (4ad0 <system_gclk_chan_disable+0x58>)
    4ab8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4aba:	bd10      	pop	{r4, pc}
    4abc:	00002e71 	.word	0x00002e71
    4ac0:	40000c02 	.word	0x40000c02
    4ac4:	40000c00 	.word	0x40000c00
    4ac8:	fffff0ff 	.word	0xfffff0ff
    4acc:	ffffbfff 	.word	0xffffbfff
    4ad0:	00002eb1 	.word	0x00002eb1

00004ad4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4ad4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4ad6:	780c      	ldrb	r4, [r1, #0]
    4ad8:	0224      	lsls	r4, r4, #8
    4ada:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4adc:	4b02      	ldr	r3, [pc, #8]	; (4ae8 <system_gclk_chan_set_config+0x14>)
    4ade:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ae0:	b2a4      	uxth	r4, r4
    4ae2:	4b02      	ldr	r3, [pc, #8]	; (4aec <system_gclk_chan_set_config+0x18>)
    4ae4:	805c      	strh	r4, [r3, #2]
}
    4ae6:	bd10      	pop	{r4, pc}
    4ae8:	00004a79 	.word	0x00004a79
    4aec:	40000c00 	.word	0x40000c00

00004af0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4af0:	b510      	push	{r4, lr}
    4af2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4af4:	4b06      	ldr	r3, [pc, #24]	; (4b10 <system_gclk_chan_get_hz+0x20>)
    4af6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4af8:	4b06      	ldr	r3, [pc, #24]	; (4b14 <system_gclk_chan_get_hz+0x24>)
    4afa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4afc:	4b06      	ldr	r3, [pc, #24]	; (4b18 <system_gclk_chan_get_hz+0x28>)
    4afe:	885c      	ldrh	r4, [r3, #2]
    4b00:	0524      	lsls	r4, r4, #20
    4b02:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4b04:	4b05      	ldr	r3, [pc, #20]	; (4b1c <system_gclk_chan_get_hz+0x2c>)
    4b06:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4b08:	1c20      	adds	r0, r4, #0
    4b0a:	4b05      	ldr	r3, [pc, #20]	; (4b20 <system_gclk_chan_get_hz+0x30>)
    4b0c:	4798      	blx	r3
}
    4b0e:	bd10      	pop	{r4, pc}
    4b10:	00002e71 	.word	0x00002e71
    4b14:	40000c02 	.word	0x40000c02
    4b18:	40000c00 	.word	0x40000c00
    4b1c:	00002eb1 	.word	0x00002eb1
    4b20:	000049bd 	.word	0x000049bd

00004b24 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4b24:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4b26:	78d3      	ldrb	r3, [r2, #3]
    4b28:	2b00      	cmp	r3, #0
    4b2a:	d11e      	bne.n	4b6a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4b2c:	7813      	ldrb	r3, [r2, #0]
    4b2e:	2b80      	cmp	r3, #128	; 0x80
    4b30:	d004      	beq.n	4b3c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4b32:	061b      	lsls	r3, r3, #24
    4b34:	2480      	movs	r4, #128	; 0x80
    4b36:	0264      	lsls	r4, r4, #9
    4b38:	4323      	orrs	r3, r4
    4b3a:	e000      	b.n	4b3e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b3c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b3e:	7854      	ldrb	r4, [r2, #1]
    4b40:	2502      	movs	r5, #2
    4b42:	43ac      	bics	r4, r5
    4b44:	d10a      	bne.n	4b5c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b46:	7894      	ldrb	r4, [r2, #2]
    4b48:	2c00      	cmp	r4, #0
    4b4a:	d103      	bne.n	4b54 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b4c:	2480      	movs	r4, #128	; 0x80
    4b4e:	02a4      	lsls	r4, r4, #10
    4b50:	4323      	orrs	r3, r4
    4b52:	e002      	b.n	4b5a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b54:	24c0      	movs	r4, #192	; 0xc0
    4b56:	02e4      	lsls	r4, r4, #11
    4b58:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b5a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b5c:	7854      	ldrb	r4, [r2, #1]
    4b5e:	3c01      	subs	r4, #1
    4b60:	2c01      	cmp	r4, #1
    4b62:	d804      	bhi.n	4b6e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b64:	4c11      	ldr	r4, [pc, #68]	; (4bac <_system_pinmux_config+0x88>)
    4b66:	4023      	ands	r3, r4
    4b68:	e001      	b.n	4b6e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4b6a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b6c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b6e:	040d      	lsls	r5, r1, #16
    4b70:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b72:	24a0      	movs	r4, #160	; 0xa0
    4b74:	05e4      	lsls	r4, r4, #23
    4b76:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b78:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b7a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b7c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b7e:	24d0      	movs	r4, #208	; 0xd0
    4b80:	0624      	lsls	r4, r4, #24
    4b82:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b84:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b86:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b88:	78d4      	ldrb	r4, [r2, #3]
    4b8a:	2c00      	cmp	r4, #0
    4b8c:	d10c      	bne.n	4ba8 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4b8e:	035c      	lsls	r4, r3, #13
    4b90:	d505      	bpl.n	4b9e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4b92:	7893      	ldrb	r3, [r2, #2]
    4b94:	2b01      	cmp	r3, #1
    4b96:	d101      	bne.n	4b9c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    4b98:	6181      	str	r1, [r0, #24]
    4b9a:	e000      	b.n	4b9e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    4b9c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b9e:	7853      	ldrb	r3, [r2, #1]
    4ba0:	3b01      	subs	r3, #1
    4ba2:	2b01      	cmp	r3, #1
    4ba4:	d800      	bhi.n	4ba8 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4ba6:	6081      	str	r1, [r0, #8]
		}
	}
}
    4ba8:	bd30      	pop	{r4, r5, pc}
    4baa:	46c0      	nop			; (mov r8, r8)
    4bac:	fffbffff 	.word	0xfffbffff

00004bb0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4bb0:	b508      	push	{r3, lr}
    4bb2:	1c03      	adds	r3, r0, #0
    4bb4:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bb6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4bb8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4bba:	2900      	cmp	r1, #0
    4bbc:	d103      	bne.n	4bc6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4bbe:	0958      	lsrs	r0, r3, #5
    4bc0:	01c0      	lsls	r0, r0, #7
    4bc2:	4904      	ldr	r1, [pc, #16]	; (4bd4 <system_pinmux_pin_set_config+0x24>)
    4bc4:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4bc6:	211f      	movs	r1, #31
    4bc8:	400b      	ands	r3, r1
    4bca:	2101      	movs	r1, #1
    4bcc:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4bce:	4b02      	ldr	r3, [pc, #8]	; (4bd8 <system_pinmux_pin_set_config+0x28>)
    4bd0:	4798      	blx	r3
}
    4bd2:	bd08      	pop	{r3, pc}
    4bd4:	41004400 	.word	0x41004400
    4bd8:	00004b25 	.word	0x00004b25

00004bdc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4bdc:	4770      	bx	lr
    4bde:	46c0      	nop			; (mov r8, r8)

00004be0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4be0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4be2:	4b04      	ldr	r3, [pc, #16]	; (4bf4 <system_init+0x14>)
    4be4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4be6:	4b04      	ldr	r3, [pc, #16]	; (4bf8 <system_init+0x18>)
    4be8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4bea:	4b04      	ldr	r3, [pc, #16]	; (4bfc <system_init+0x1c>)
    4bec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4bee:	4b04      	ldr	r3, [pc, #16]	; (4c00 <system_init+0x20>)
    4bf0:	4798      	blx	r3
}
    4bf2:	bd08      	pop	{r3, pc}
    4bf4:	000046e1 	.word	0x000046e1
    4bf8:	00002ee1 	.word	0x00002ee1
    4bfc:	00004bdd 	.word	0x00004bdd
    4c00:	0000306d 	.word	0x0000306d

00004c04 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4c04:	1c03      	adds	r3, r0, #0
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4c06:	4a08      	ldr	r2, [pc, #32]	; (4c28 <_tcc_get_inst_index+0x24>)
    4c08:	4290      	cmp	r0, r2
    4c0a:	d00a      	beq.n	4c22 <_tcc_get_inst_index+0x1e>
    4c0c:	4a07      	ldr	r2, [pc, #28]	; (4c2c <_tcc_get_inst_index+0x28>)
    4c0e:	4290      	cmp	r0, r2
    4c10:	d005      	beq.n	4c1e <_tcc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c12:	2000      	movs	r0, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4c14:	4a06      	ldr	r2, [pc, #24]	; (4c30 <_tcc_get_inst_index+0x2c>)
    4c16:	4293      	cmp	r3, r2
    4c18:	d105      	bne.n	4c26 <_tcc_get_inst_index+0x22>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c1a:	2002      	movs	r0, #2
    4c1c:	e002      	b.n	4c24 <_tcc_get_inst_index+0x20>
    4c1e:	2001      	movs	r0, #1
    4c20:	e000      	b.n	4c24 <_tcc_get_inst_index+0x20>
    4c22:	2000      	movs	r0, #0
		if (hw == tcc_modules[i]) {
			return i;
    4c24:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    4c26:	4770      	bx	lr
    4c28:	42002000 	.word	0x42002000
    4c2c:	42002400 	.word	0x42002400
    4c30:	42002800 	.word	0x42002800

00004c34 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c34:	b510      	push	{r4, lr}
    4c36:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c38:	1c08      	adds	r0, r1, #0
    4c3a:	4b4f      	ldr	r3, [pc, #316]	; (4d78 <tcc_get_config_defaults+0x144>)
    4c3c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c3e:	2300      	movs	r3, #0
    4c40:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c42:	0080      	lsls	r0, r0, #2
    4c44:	4a4d      	ldr	r2, [pc, #308]	; (4d7c <tcc_get_config_defaults+0x148>)
    4c46:	5880      	ldr	r0, [r0, r2]
    4c48:	6060      	str	r0, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c4a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c4c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c4e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c50:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    4c52:	7223      	strb	r3, [r4, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c54:	61e3      	str	r3, [r4, #28]
    4c56:	6223      	str	r3, [r4, #32]
    4c58:	6263      	str	r3, [r4, #36]	; 0x24
    4c5a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c5c:	7523      	strb	r3, [r4, #20]
    4c5e:	7563      	strb	r3, [r4, #21]
    4c60:	75a3      	strb	r3, [r4, #22]
    4c62:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4c64:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4c66:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c68:	7423      	strb	r3, [r4, #16]
    4c6a:	7463      	strb	r3, [r4, #17]
    4c6c:	74a3      	strb	r3, [r4, #18]
    4c6e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4c70:	222c      	movs	r2, #44	; 0x2c
    4c72:	54a3      	strb	r3, [r4, r2]
    4c74:	222d      	movs	r2, #45	; 0x2d
    4c76:	54a3      	strb	r3, [r4, r2]
    4c78:	222e      	movs	r2, #46	; 0x2e
    4c7a:	54a3      	strb	r3, [r4, r2]
    4c7c:	222f      	movs	r2, #47	; 0x2f
    4c7e:	54a3      	strb	r3, [r4, r2]
    4c80:	2230      	movs	r2, #48	; 0x30
    4c82:	54a3      	strb	r3, [r4, r2]
    4c84:	2231      	movs	r2, #49	; 0x31
    4c86:	54a3      	strb	r3, [r4, r2]
    4c88:	2232      	movs	r2, #50	; 0x32
    4c8a:	54a3      	strb	r3, [r4, r2]
    4c8c:	2233      	movs	r2, #51	; 0x33
    4c8e:	54a3      	strb	r3, [r4, r2]
    4c90:	2234      	movs	r2, #52	; 0x34
    4c92:	54a3      	strb	r3, [r4, r2]
    4c94:	2235      	movs	r2, #53	; 0x35
    4c96:	54a3      	strb	r3, [r4, r2]
    4c98:	2236      	movs	r2, #54	; 0x36
    4c9a:	54a3      	strb	r3, [r4, r2]
    4c9c:	2237      	movs	r2, #55	; 0x37
    4c9e:	54a3      	strb	r3, [r4, r2]
    4ca0:	2238      	movs	r2, #56	; 0x38
    4ca2:	54a3      	strb	r3, [r4, r2]
    4ca4:	2239      	movs	r2, #57	; 0x39
    4ca6:	54a3      	strb	r3, [r4, r2]
    4ca8:	223a      	movs	r2, #58	; 0x3a
    4caa:	54a3      	strb	r3, [r4, r2]
    4cac:	223b      	movs	r2, #59	; 0x3b
    4cae:	54a3      	strb	r3, [r4, r2]
    4cb0:	223c      	movs	r2, #60	; 0x3c
    4cb2:	54a3      	strb	r3, [r4, r2]
    4cb4:	223d      	movs	r2, #61	; 0x3d
    4cb6:	54a3      	strb	r3, [r4, r2]
    4cb8:	223e      	movs	r2, #62	; 0x3e
    4cba:	54a3      	strb	r3, [r4, r2]
    4cbc:	223f      	movs	r2, #63	; 0x3f
    4cbe:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4cc0:	2240      	movs	r2, #64	; 0x40
    4cc2:	54a3      	strb	r3, [r4, r2]
    4cc4:	2241      	movs	r2, #65	; 0x41
    4cc6:	54a3      	strb	r3, [r4, r2]
    4cc8:	2242      	movs	r2, #66	; 0x42
    4cca:	54a3      	strb	r3, [r4, r2]
    4ccc:	2243      	movs	r2, #67	; 0x43
    4cce:	54a3      	strb	r3, [r4, r2]
    4cd0:	2244      	movs	r2, #68	; 0x44
    4cd2:	54a3      	strb	r3, [r4, r2]
    4cd4:	2245      	movs	r2, #69	; 0x45
    4cd6:	54a3      	strb	r3, [r4, r2]
    4cd8:	2246      	movs	r2, #70	; 0x46
    4cda:	54a3      	strb	r3, [r4, r2]
    4cdc:	2247      	movs	r2, #71	; 0x47
    4cde:	54a3      	strb	r3, [r4, r2]
    4ce0:	2248      	movs	r2, #72	; 0x48
    4ce2:	54a3      	strb	r3, [r4, r2]
    4ce4:	2249      	movs	r2, #73	; 0x49
    4ce6:	54a3      	strb	r3, [r4, r2]
    4ce8:	224a      	movs	r2, #74	; 0x4a
    4cea:	54a3      	strb	r3, [r4, r2]
    4cec:	224b      	movs	r2, #75	; 0x4b
    4cee:	54a3      	strb	r3, [r4, r2]
    4cf0:	224c      	movs	r2, #76	; 0x4c
    4cf2:	54a3      	strb	r3, [r4, r2]
    4cf4:	224d      	movs	r2, #77	; 0x4d
    4cf6:	54a3      	strb	r3, [r4, r2]
    4cf8:	224e      	movs	r2, #78	; 0x4e
    4cfa:	54a3      	strb	r3, [r4, r2]
    4cfc:	224f      	movs	r2, #79	; 0x4f
    4cfe:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4d00:	2250      	movs	r2, #80	; 0x50
    4d02:	54a3      	strb	r3, [r4, r2]
    4d04:	2251      	movs	r2, #81	; 0x51
    4d06:	54a3      	strb	r3, [r4, r2]
    4d08:	2252      	movs	r2, #82	; 0x52
    4d0a:	54a3      	strb	r3, [r4, r2]
    4d0c:	2253      	movs	r2, #83	; 0x53
    4d0e:	54a3      	strb	r3, [r4, r2]
    4d10:	2254      	movs	r2, #84	; 0x54
    4d12:	54a3      	strb	r3, [r4, r2]
    4d14:	2255      	movs	r2, #85	; 0x55
    4d16:	54a3      	strb	r3, [r4, r2]
    4d18:	2256      	movs	r2, #86	; 0x56
    4d1a:	54a3      	strb	r3, [r4, r2]
    4d1c:	2257      	movs	r2, #87	; 0x57
    4d1e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4d20:	2298      	movs	r2, #152	; 0x98
    4d22:	54a3      	strb	r3, [r4, r2]
    4d24:	65a3      	str	r3, [r4, #88]	; 0x58
    4d26:	67a3      	str	r3, [r4, #120]	; 0x78
    4d28:	2299      	movs	r2, #153	; 0x99
    4d2a:	54a3      	strb	r3, [r4, r2]
    4d2c:	65e3      	str	r3, [r4, #92]	; 0x5c
    4d2e:	67e3      	str	r3, [r4, #124]	; 0x7c
    4d30:	229a      	movs	r2, #154	; 0x9a
    4d32:	54a3      	strb	r3, [r4, r2]
    4d34:	6623      	str	r3, [r4, #96]	; 0x60
    4d36:	2280      	movs	r2, #128	; 0x80
    4d38:	50a3      	str	r3, [r4, r2]
    4d3a:	229b      	movs	r2, #155	; 0x9b
    4d3c:	54a3      	strb	r3, [r4, r2]
    4d3e:	6663      	str	r3, [r4, #100]	; 0x64
    4d40:	2284      	movs	r2, #132	; 0x84
    4d42:	50a3      	str	r3, [r4, r2]
    4d44:	229c      	movs	r2, #156	; 0x9c
    4d46:	54a3      	strb	r3, [r4, r2]
    4d48:	66a3      	str	r3, [r4, #104]	; 0x68
    4d4a:	2288      	movs	r2, #136	; 0x88
    4d4c:	50a3      	str	r3, [r4, r2]
    4d4e:	229d      	movs	r2, #157	; 0x9d
    4d50:	54a3      	strb	r3, [r4, r2]
    4d52:	66e3      	str	r3, [r4, #108]	; 0x6c
    4d54:	228c      	movs	r2, #140	; 0x8c
    4d56:	50a3      	str	r3, [r4, r2]
    4d58:	229e      	movs	r2, #158	; 0x9e
    4d5a:	54a3      	strb	r3, [r4, r2]
    4d5c:	6723      	str	r3, [r4, #112]	; 0x70
    4d5e:	2290      	movs	r2, #144	; 0x90
    4d60:	50a3      	str	r3, [r4, r2]
    4d62:	229f      	movs	r2, #159	; 0x9f
    4d64:	54a3      	strb	r3, [r4, r2]
    4d66:	6763      	str	r3, [r4, #116]	; 0x74
    4d68:	2294      	movs	r2, #148	; 0x94
    4d6a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4d6c:	2101      	movs	r1, #1
    4d6e:	22a0      	movs	r2, #160	; 0xa0
    4d70:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    4d72:	22a1      	movs	r2, #161	; 0xa1
    4d74:	54a3      	strb	r3, [r4, r2]
}
    4d76:	bd10      	pop	{r4, pc}
    4d78:	00004c05 	.word	0x00004c05
    4d7c:	000091ac 	.word	0x000091ac

00004d80 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    4d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d82:	465f      	mov	r7, fp
    4d84:	4656      	mov	r6, sl
    4d86:	464d      	mov	r5, r9
    4d88:	4644      	mov	r4, r8
    4d8a:	b4f0      	push	{r4, r5, r6, r7}
    4d8c:	b08f      	sub	sp, #60	; 0x3c
    4d8e:	4680      	mov	r8, r0
    4d90:	1c0c      	adds	r4, r1, #0
    4d92:	1c16      	adds	r6, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4d94:	1c08      	adds	r0, r1, #0
    4d96:	4bdb      	ldr	r3, [pc, #876]	; (5104 <tcc_init+0x384>)
    4d98:	4798      	blx	r3
    4d9a:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4d9c:	1c07      	adds	r7, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4d9e:	4bda      	ldr	r3, [pc, #872]	; (5108 <tcc_init+0x388>)
    4da0:	6a19      	ldr	r1, [r3, #32]
    4da2:	0080      	lsls	r0, r0, #2
    4da4:	4ad9      	ldr	r2, [pc, #868]	; (510c <tcc_init+0x38c>)
    4da6:	5882      	ldr	r2, [r0, r2]
    4da8:	430a      	orrs	r2, r1
    4daa:	621a      	str	r2, [r3, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4dac:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4dae:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4db0:	0799      	lsls	r1, r3, #30
    4db2:	d500      	bpl.n	4db6 <tcc_init+0x36>
    4db4:	e1d9      	b.n	516a <tcc_init+0x3ea>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    4db6:	6823      	ldr	r3, [r4, #0]
    4db8:	07da      	lsls	r2, r3, #31
    4dba:	d500      	bpl.n	4dbe <tcc_init+0x3e>
    4dbc:	e1d5      	b.n	516a <tcc_init+0x3ea>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    4dbe:	00ab      	lsls	r3, r5, #2
    4dc0:	4ad3      	ldr	r2, [pc, #844]	; (5110 <tcc_init+0x390>)
    4dc2:	589b      	ldr	r3, [r3, r2]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    4dc4:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    4dc6:	6831      	ldr	r1, [r6, #0]
    4dc8:	428b      	cmp	r3, r1
    4dca:	d200      	bcs.n	4dce <tcc_init+0x4e>
    4dcc:	e1cd      	b.n	516a <tcc_init+0x3ea>
		|| (config->counter.period > count_max)
    4dce:	6872      	ldr	r2, [r6, #4]
    4dd0:	4293      	cmp	r3, r2
    4dd2:	d200      	bcs.n	4dd6 <tcc_init+0x56>
    4dd4:	e1c9      	b.n	516a <tcc_init+0x3ea>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    4dd6:	69f0      	ldr	r0, [r6, #28]
    4dd8:	4283      	cmp	r3, r0
    4dda:	d200      	bcs.n	4dde <tcc_init+0x5e>
    4ddc:	e1ae      	b.n	513c <tcc_init+0x3bc>
    4dde:	6a31      	ldr	r1, [r6, #32]
    4de0:	428b      	cmp	r3, r1
    4de2:	d200      	bcs.n	4de6 <tcc_init+0x66>
    4de4:	e1ac      	b.n	5140 <tcc_init+0x3c0>
    4de6:	6a72      	ldr	r2, [r6, #36]	; 0x24
    4de8:	4293      	cmp	r3, r2
    4dea:	d200      	bcs.n	4dee <tcc_init+0x6e>
    4dec:	e1aa      	b.n	5144 <tcc_init+0x3c4>
    4dee:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    4df0:	4283      	cmp	r3, r0
    4df2:	d200      	bcs.n	4df6 <tcc_init+0x76>
    4df4:	e1a8      	b.n	5148 <tcc_init+0x3c8>
    4df6:	2300      	movs	r3, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    4df8:	49c6      	ldr	r1, [pc, #792]	; (5114 <tcc_init+0x394>)
    4dfa:	18f2      	adds	r2, r6, r3
    4dfc:	3298      	adds	r2, #152	; 0x98
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    4dfe:	7812      	ldrb	r2, [r2, #0]
    4e00:	2a00      	cmp	r2, #0
    4e02:	d003      	beq.n	4e0c <tcc_init+0x8c>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    4e04:	5dca      	ldrb	r2, [r1, r7]
    4e06:	429a      	cmp	r2, r3
    4e08:	dc00      	bgt.n	4e0c <tcc_init+0x8c>
    4e0a:	e19f      	b.n	514c <tcc_init+0x3cc>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4e0c:	3301      	adds	r3, #1
    4e0e:	2b08      	cmp	r3, #8
    4e10:	d1f3      	bne.n	4dfa <tcc_init+0x7a>
    4e12:	2100      	movs	r1, #0
    4e14:	468b      	mov	fp, r1
    4e16:	2300      	movs	r3, #0

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e18:	2180      	movs	r1, #128	; 0x80
    4e1a:	0449      	lsls	r1, r1, #17
    4e1c:	468c      	mov	ip, r1
    4e1e:	4658      	mov	r0, fp
    4e20:	18f2      	adds	r2, r6, r3
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    4e22:	7c12      	ldrb	r2, [r2, #16]
    4e24:	2a01      	cmp	r2, #1
    4e26:	d107      	bne.n	4e38 <tcc_init+0xb8>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4e28:	49bb      	ldr	r1, [pc, #748]	; (5118 <tcc_init+0x398>)
    4e2a:	5dca      	ldrb	r2, [r1, r7]
    4e2c:	429a      	cmp	r2, r3
    4e2e:	da00      	bge.n	4e32 <tcc_init+0xb2>
    4e30:	e18e      	b.n	5150 <tcc_init+0x3d0>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e32:	4662      	mov	r2, ip
    4e34:	409a      	lsls	r2, r3
    4e36:	4310      	orrs	r0, r2
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4e38:	3301      	adds	r3, #1
    4e3a:	2b04      	cmp	r3, #4
    4e3c:	d1f0      	bne.n	4e20 <tcc_init+0xa0>
    4e3e:	4683      	mov	fp, r0
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    4e40:	23a1      	movs	r3, #161	; 0xa1
    4e42:	5cf3      	ldrb	r3, [r6, r3]
    4e44:	2b00      	cmp	r3, #0
    4e46:	d004      	beq.n	4e52 <tcc_init+0xd2>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4e48:	2380      	movs	r3, #128	; 0x80
    4e4a:	011b      	lsls	r3, r3, #4
    4e4c:	1c02      	adds	r2, r0, #0
    4e4e:	431a      	orrs	r2, r3
    4e50:	4693      	mov	fp, r2
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4e52:	7b33      	ldrb	r3, [r6, #12]
    4e54:	9307      	str	r3, [sp, #28]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4e56:	7af0      	ldrb	r0, [r6, #11]
    4e58:	9008      	str	r0, [sp, #32]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    4e5a:	7a33      	ldrb	r3, [r6, #8]
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;
    4e5c:	1e5a      	subs	r2, r3, #1
    4e5e:	4193      	sbcs	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	9305      	str	r3, [sp, #20]

	if (config->counter.oneshot) {
		ctrlb |= TCC_CTRLBSET_ONESHOT;
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4e64:	7a73      	ldrb	r3, [r6, #9]
    4e66:	2b01      	cmp	r3, #1
    4e68:	d102      	bne.n	4e70 <tcc_init+0xf0>
		ctrlb |= TCC_CTRLBSET_DIR;
    4e6a:	9905      	ldr	r1, [sp, #20]
    4e6c:	4319      	orrs	r1, r3
    4e6e:	9105      	str	r1, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    4e70:	4ba9      	ldr	r3, [pc, #676]	; (5118 <tcc_init+0x398>)
    4e72:	5d5b      	ldrb	r3, [r3, r5]
    4e74:	9304      	str	r3, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    4e76:	1c33      	adds	r3, r6, #0
    4e78:	332c      	adds	r3, #44	; 0x2c
    4e7a:	7a5a      	ldrb	r2, [r3, #9]
    4e7c:	9b04      	ldr	r3, [sp, #16]
    4e7e:	4293      	cmp	r3, r2
    4e80:	d800      	bhi.n	4e84 <tcc_init+0x104>
    4e82:	e171      	b.n	5168 <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    4e84:	232c      	movs	r3, #44	; 0x2c
    4e86:	5cf1      	ldrb	r1, [r6, r3]
    4e88:	290f      	cmp	r1, #15
    4e8a:	d900      	bls.n	4e8e <tcc_init+0x10e>
    4e8c:	e16c      	b.n	5168 <tcc_init+0x3e8>
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
    4e8e:	1c33      	adds	r3, r6, #0
    4e90:	332c      	adds	r3, #44	; 0x2c
    4e92:	1c30      	adds	r0, r6, #0
    4e94:	3036      	adds	r0, #54	; 0x36
    4e96:	9003      	str	r0, [sp, #12]
    4e98:	a80c      	add	r0, sp, #48	; 0x30
    4e9a:	4681      	mov	r9, r0
    4e9c:	a80d      	add	r0, sp, #52	; 0x34
    4e9e:	9002      	str	r0, [sp, #8]
    4ea0:	4648      	mov	r0, r9
    4ea2:	46bc      	mov	ip, r7
    4ea4:	465f      	mov	r7, fp
    4ea6:	9709      	str	r7, [sp, #36]	; 0x24
    4ea8:	46a1      	mov	r9, r4
    4eaa:	46b2      	mov	sl, r6
    4eac:	46ab      	mov	fp, r5
    4eae:	e00d      	b.n	4ecc <tcc_init+0x14c>
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    4eb0:	9b03      	ldr	r3, [sp, #12]
    4eb2:	7a5a      	ldrb	r2, [r3, #9]
    4eb4:	9904      	ldr	r1, [sp, #16]
    4eb6:	4291      	cmp	r1, r2
    4eb8:	d800      	bhi.n	4ebc <tcc_init+0x13c>
    4eba:	e155      	b.n	5168 <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    4ebc:	7819      	ldrb	r1, [r3, #0]
    4ebe:	1c1c      	adds	r4, r3, #0
    4ec0:	340a      	adds	r4, #10
    4ec2:	9403      	str	r4, [sp, #12]
    4ec4:	3004      	adds	r0, #4
    4ec6:	290f      	cmp	r1, #15
    4ec8:	d900      	bls.n	4ecc <tcc_init+0x14c>
    4eca:	e14d      	b.n	5168 <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ecc:	060d      	lsls	r5, r1, #24
    4ece:	27f0      	movs	r7, #240	; 0xf0
    4ed0:	053f      	lsls	r7, r7, #20
    4ed2:	403d      	ands	r5, r7
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4ed4:	785c      	ldrb	r4, [r3, #1]
    4ed6:	0424      	lsls	r4, r4, #16
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4ed8:	789f      	ldrb	r7, [r3, #2]
    4eda:	1e79      	subs	r1, r7, #1
    4edc:	418f      	sbcs	r7, r1
    4ede:	01ff      	lsls	r7, r7, #7
    4ee0:	9701      	str	r7, [sp, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4ee2:	78d9      	ldrb	r1, [r3, #3]
    4ee4:	1e4e      	subs	r6, r1, #1
    4ee6:	41b1      	sbcs	r1, r6
    4ee8:	00c9      	lsls	r1, r1, #3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4eea:	791e      	ldrb	r6, [r3, #4]
    4eec:	1e77      	subs	r7, r6, #1
    4eee:	41be      	sbcs	r6, r7
    4ef0:	0136      	lsls	r6, r6, #4
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4ef2:	0292      	lsls	r2, r2, #10
    4ef4:	27c0      	movs	r7, #192	; 0xc0
    4ef6:	013f      	lsls	r7, r7, #4
    4ef8:	403a      	ands	r2, r7
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4efa:	4315      	orrs	r5, r2
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    4efc:	795a      	ldrb	r2, [r3, #5]
    4efe:	2703      	movs	r7, #3
    4f00:	403a      	ands	r2, r7
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4f02:	4315      	orrs	r5, r2
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4f04:	432c      	orrs	r4, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4f06:	799a      	ldrb	r2, [r3, #6]
    4f08:	0152      	lsls	r2, r2, #5
    4f0a:	2560      	movs	r5, #96	; 0x60
    4f0c:	402a      	ands	r2, r5
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4f0e:	4314      	orrs	r4, r2
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
    4f10:	79da      	ldrb	r2, [r3, #7]
    4f12:	0212      	lsls	r2, r2, #8
    4f14:	27c0      	movs	r7, #192	; 0xc0
    4f16:	00bf      	lsls	r7, r7, #2
    4f18:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    4f1a:	4314      	orrs	r4, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4f1c:	7a1a      	ldrb	r2, [r3, #8]
    4f1e:	0312      	lsls	r2, r2, #12
    4f20:	23e0      	movs	r3, #224	; 0xe0
    4f22:	01db      	lsls	r3, r3, #7
    4f24:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4f26:	4322      	orrs	r2, r4
				| TCC_FCTRLA_HALT(cfg->halt_action)
    4f28:	9f01      	ldr	r7, [sp, #4]
    4f2a:	4317      	orrs	r7, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4f2c:	4339      	orrs	r1, r7
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4f2e:	430e      	orrs	r6, r1
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    4f30:	6006      	str	r6, [r0, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    4f32:	9c02      	ldr	r4, [sp, #8]
    4f34:	42a0      	cmp	r0, r4
    4f36:	d1bb      	bne.n	4eb0 <tcc_init+0x130>
    4f38:	4667      	mov	r7, ip
    4f3a:	464c      	mov	r4, r9
    4f3c:	4656      	mov	r6, sl
    4f3e:	465d      	mov	r5, fp
    4f40:	9809      	ldr	r0, [sp, #36]	; 0x24
    4f42:	4683      	mov	fp, r0
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    4f44:	4b73      	ldr	r3, [pc, #460]	; (5114 <tcc_init+0x394>)
    4f46:	5d58      	ldrb	r0, [r3, r5]
    4f48:	4652      	mov	r2, sl
    4f4a:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    4f4c:	2100      	movs	r1, #0
    4f4e:	4689      	mov	r9, r1

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4f50:	2300      	movs	r3, #0
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4f52:	2180      	movs	r1, #128	; 0x80
    4f54:	0249      	lsls	r1, r1, #9
    4f56:	468c      	mov	ip, r1
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4f58:	2101      	movs	r1, #1
    4f5a:	468a      	mov	sl, r1
    4f5c:	1c21      	adds	r1, r4, #0
    4f5e:	1c04      	adds	r4, r0, #0
    4f60:	4648      	mov	r0, r9
    4f62:	4689      	mov	r9, r1
    4f64:	18f1      	adds	r1, r6, r3
    4f66:	3150      	adds	r1, #80	; 0x50
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    4f68:	7809      	ldrb	r1, [r1, #0]
    4f6a:	2900      	cmp	r1, #0
    4f6c:	d005      	beq.n	4f7a <tcc_init+0x1fa>
			if (i >= ow_num) {
    4f6e:	429c      	cmp	r4, r3
    4f70:	d800      	bhi.n	4f74 <tcc_init+0x1f4>
    4f72:	e0ef      	b.n	5154 <tcc_init+0x3d4>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4f74:	4661      	mov	r1, ip
    4f76:	4099      	lsls	r1, r3
    4f78:	4308      	orrs	r0, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4f7a:	7811      	ldrb	r1, [r2, #0]
    4f7c:	2900      	cmp	r1, #0
    4f7e:	d00c      	beq.n	4f9a <tcc_init+0x21a>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    4f80:	429c      	cmp	r4, r3
    4f82:	d800      	bhi.n	4f86 <tcc_init+0x206>
    4f84:	e0e8      	b.n	5158 <tcc_init+0x3d8>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4f86:	2902      	cmp	r1, #2
    4f88:	d104      	bne.n	4f94 <tcc_init+0x214>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4f8a:	2102      	movs	r1, #2
    4f8c:	31ff      	adds	r1, #255	; 0xff
    4f8e:	4099      	lsls	r1, r3
    4f90:	4308      	orrs	r0, r1
    4f92:	e002      	b.n	4f9a <tcc_init+0x21a>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4f94:	4651      	mov	r1, sl
    4f96:	4099      	lsls	r1, r3
    4f98:	4308      	orrs	r0, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4f9a:	3301      	adds	r3, #1
    4f9c:	3202      	adds	r2, #2
    4f9e:	2b08      	cmp	r3, #8
    4fa0:	d1e0      	bne.n	4f64 <tcc_init+0x1e4>
    4fa2:	464c      	mov	r4, r9
    4fa4:	4681      	mov	r9, r0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    4fa6:	4b5c      	ldr	r3, [pc, #368]	; (5118 <tcc_init+0x398>)
    4fa8:	5d5b      	ldrb	r3, [r3, r5]
    4faa:	9304      	str	r3, [sp, #16]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fac:	7e73      	ldrb	r3, [r6, #25]
    4fae:	011b      	lsls	r3, r3, #4
    4fb0:	2230      	movs	r2, #48	; 0x30
    4fb2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    4fb4:	7e33      	ldrb	r3, [r6, #24]
    4fb6:	2107      	movs	r1, #7
    4fb8:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fba:	431a      	orrs	r2, r3
    4fbc:	9203      	str	r2, [sp, #12]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4fbe:	2300      	movs	r3, #0
    4fc0:	1c31      	adds	r1, r6, #0
    4fc2:	3110      	adds	r1, #16
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    4fc4:	2080      	movs	r0, #128	; 0x80
    4fc6:	0240      	lsls	r0, r0, #9
    4fc8:	4684      	mov	ip, r0
    4fca:	18ca      	adds	r2, r1, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    4fcc:	7912      	ldrb	r2, [r2, #4]
    4fce:	2a00      	cmp	r2, #0
    4fd0:	d008      	beq.n	4fe4 <tcc_init+0x264>
			if (n >= cc_num) {
    4fd2:	9a04      	ldr	r2, [sp, #16]
    4fd4:	429a      	cmp	r2, r3
    4fd6:	dc00      	bgt.n	4fda <tcc_init+0x25a>
    4fd8:	e0c0      	b.n	515c <tcc_init+0x3dc>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    4fda:	4662      	mov	r2, ip
    4fdc:	409a      	lsls	r2, r3
    4fde:	9803      	ldr	r0, [sp, #12]
    4fe0:	4310      	orrs	r0, r2
    4fe2:	9003      	str	r0, [sp, #12]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4fe4:	3301      	adds	r3, #1
    4fe6:	2b04      	cmp	r3, #4
    4fe8:	d1ef      	bne.n	4fca <tcc_init+0x24a>
    4fea:	2300      	movs	r3, #0

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    4fec:	1c19      	adds	r1, r3, #0
    4fee:	4640      	mov	r0, r8
    4ff0:	18c2      	adds	r2, r0, r3
    4ff2:	6051      	str	r1, [r2, #4]
    4ff4:	3304      	adds	r3, #4
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    4ff6:	2b30      	cmp	r3, #48	; 0x30
    4ff8:	d1fa      	bne.n	4ff0 <tcc_init+0x270>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    4ffa:	2300      	movs	r3, #0
    4ffc:	6343      	str	r3, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    4ffe:	6383      	str	r3, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5000:	00aa      	lsls	r2, r5, #2
    5002:	4b46      	ldr	r3, [pc, #280]	; (511c <tcc_init+0x39c>)
    5004:	50d0      	str	r0, [r2, r3]
#endif

	module_inst->hw = hw;
    5006:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5008:	23a0      	movs	r3, #160	; 0xa0
    500a:	5cf2      	ldrb	r2, [r6, r3]
    500c:	233c      	movs	r3, #60	; 0x3c
    500e:	54c2      	strb	r2, [r0, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    5010:	a90b      	add	r1, sp, #44	; 0x2c
    5012:	7ab3      	ldrb	r3, [r6, #10]
    5014:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5016:	4b42      	ldr	r3, [pc, #264]	; (5120 <tcc_init+0x3a0>)
    5018:	5d5b      	ldrb	r3, [r3, r5]
    501a:	4698      	mov	r8, r3
    501c:	1c18      	adds	r0, r3, #0
    501e:	4b41      	ldr	r3, [pc, #260]	; (5124 <tcc_init+0x3a4>)
    5020:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5022:	4640      	mov	r0, r8
    5024:	4b40      	ldr	r3, [pc, #256]	; (5128 <tcc_init+0x3a8>)
    5026:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5028:	4b3a      	ldr	r3, [pc, #232]	; (5114 <tcc_init+0x394>)
    502a:	5d5b      	ldrb	r3, [r3, r5]
    502c:	2b00      	cmp	r3, #0
    502e:	dd27      	ble.n	5080 <tcc_init+0x300>
    5030:	2178      	movs	r1, #120	; 0x78
    5032:	1989      	adds	r1, r1, r6
    5034:	2500      	movs	r5, #0
    5036:	4a37      	ldr	r2, [pc, #220]	; (5114 <tcc_init+0x394>)
    5038:	4692      	mov	sl, r2
    503a:	1c23      	adds	r3, r4, #0
    503c:	1c0c      	adds	r4, r1, #0
    503e:	4698      	mov	r8, r3
    5040:	1973      	adds	r3, r6, r5
    5042:	3398      	adds	r3, #152	; 0x98
		if (!config->pins.enable_wave_out_pin[i]) {
    5044:	781b      	ldrb	r3, [r3, #0]
    5046:	2b00      	cmp	r3, #0
    5048:	d013      	beq.n	5072 <tcc_init+0x2f2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    504a:	2301      	movs	r3, #1
    504c:	202a      	movs	r0, #42	; 0x2a
    504e:	4468      	add	r0, sp
    5050:	7003      	strb	r3, [r0, #0]
	config->powersave    = false;
    5052:	2200      	movs	r2, #0
    5054:	212b      	movs	r1, #43	; 0x2b
    5056:	4469      	add	r1, sp
    5058:	700a      	strb	r2, [r1, #0]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    505a:	6820      	ldr	r0, [r4, #0]
    505c:	aa0a      	add	r2, sp, #40	; 0x28
    505e:	7010      	strb	r0, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5060:	2129      	movs	r1, #41	; 0x29
    5062:	4469      	add	r1, sp
    5064:	700b      	strb	r3, [r1, #0]
    5066:	1c23      	adds	r3, r4, #0
    5068:	3b20      	subs	r3, #32
		system_pinmux_pin_set_config(
    506a:	7818      	ldrb	r0, [r3, #0]
    506c:	1c11      	adds	r1, r2, #0
    506e:	4a2f      	ldr	r2, [pc, #188]	; (512c <tcc_init+0x3ac>)
    5070:	4790      	blx	r2
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5072:	3501      	adds	r5, #1
    5074:	3404      	adds	r4, #4
    5076:	4650      	mov	r0, sl
    5078:	5dc3      	ldrb	r3, [r0, r7]
    507a:	42ab      	cmp	r3, r5
    507c:	dce0      	bgt.n	5040 <tcc_init+0x2c0>
    507e:	4644      	mov	r4, r8

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5080:	9d08      	ldr	r5, [sp, #32]
    5082:	022a      	lsls	r2, r5, #8
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5084:	9f07      	ldr	r7, [sp, #28]
    5086:	033b      	lsls	r3, r7, #12
    5088:	4313      	orrs	r3, r2
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    508a:	4658      	mov	r0, fp
    508c:	4303      	orrs	r3, r0
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    508e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5090:	2204      	movs	r2, #4
    5092:	68a3      	ldr	r3, [r4, #8]
    5094:	421a      	tst	r2, r3
    5096:	d1fc      	bne.n	5092 <tcc_init+0x312>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5098:	23ff      	movs	r3, #255	; 0xff
    509a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    509c:	2204      	movs	r2, #4
    509e:	68a3      	ldr	r3, [r4, #8]
    50a0:	421a      	tst	r2, r3
    50a2:	d1fc      	bne.n	509e <tcc_init+0x31e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    50a4:	9d05      	ldr	r5, [sp, #20]
    50a6:	7165      	strb	r5, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    50a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    50aa:	60e7      	str	r7, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    50ac:	980d      	ldr	r0, [sp, #52]	; 0x34
    50ae:	6120      	str	r0, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    50b0:	4649      	mov	r1, r9
    50b2:	61a1      	str	r1, [r4, #24]

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    50b4:	4a1e      	ldr	r2, [pc, #120]	; (5130 <tcc_init+0x3b0>)
    50b6:	68a3      	ldr	r3, [r4, #8]
    50b8:	4213      	tst	r3, r2
    50ba:	d1fc      	bne.n	50b6 <tcc_init+0x336>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    50bc:	9d03      	ldr	r5, [sp, #12]
    50be:	63e5      	str	r5, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    50c0:	2210      	movs	r2, #16
    50c2:	68a3      	ldr	r3, [r4, #8]
    50c4:	421a      	tst	r2, r3
    50c6:	d1fc      	bne.n	50c2 <tcc_init+0x342>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    50c8:	6837      	ldr	r7, [r6, #0]
    50ca:	6367      	str	r7, [r4, #52]	; 0x34

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    50cc:	4a19      	ldr	r2, [pc, #100]	; (5134 <tcc_init+0x3b4>)
    50ce:	68a3      	ldr	r3, [r4, #8]
    50d0:	4213      	tst	r3, r2
    50d2:	d1fc      	bne.n	50ce <tcc_init+0x34e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    50d4:	6870      	ldr	r0, [r6, #4]
    50d6:	6420      	str	r0, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    50d8:	9804      	ldr	r0, [sp, #16]
    50da:	2800      	cmp	r0, #0
    50dc:	dd40      	ble.n	5160 <tcc_init+0x3e0>
    50de:	361c      	adds	r6, #28
    50e0:	2100      	movs	r1, #0
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    50e2:	4d15      	ldr	r5, [pc, #84]	; (5138 <tcc_init+0x3b8>)
    50e4:	1c2a      	adds	r2, r5, #0
    50e6:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
    50e8:	68a3      	ldr	r3, [r4, #8]
    50ea:	4213      	tst	r3, r2
    50ec:	d1fc      	bne.n	50e8 <tcc_init+0x368>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    50ee:	ce04      	ldmia	r6!, {r2}
    50f0:	1c0b      	adds	r3, r1, #0
    50f2:	3310      	adds	r3, #16
    50f4:	009b      	lsls	r3, r3, #2
    50f6:	18e3      	adds	r3, r4, r3
    50f8:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    50fa:	3101      	adds	r1, #1
    50fc:	4288      	cmp	r0, r1
    50fe:	dcf1      	bgt.n	50e4 <tcc_init+0x364>
    5100:	e030      	b.n	5164 <tcc_init+0x3e4>
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	00004c05 	.word	0x00004c05
    5108:	40000400 	.word	0x40000400
    510c:	000091a0 	.word	0x000091a0
    5110:	000091ac 	.word	0x000091ac
    5114:	000091bc 	.word	0x000091bc
    5118:	000091b8 	.word	0x000091b8
    511c:	20000418 	.word	0x20000418
    5120:	0000919c 	.word	0x0000919c
    5124:	00004ad5 	.word	0x00004ad5
    5128:	00004a49 	.word	0x00004a49
    512c:	00004bb1 	.word	0x00004bb1
    5130:	00020040 	.word	0x00020040
    5134:	00040080 	.word	0x00040080
    5138:	00080100 	.word	0x00080100

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    513c:	2017      	movs	r0, #23
    513e:	e014      	b.n	516a <tcc_init+0x3ea>
    5140:	2017      	movs	r0, #23
    5142:	e012      	b.n	516a <tcc_init+0x3ea>
    5144:	2017      	movs	r0, #23
    5146:	e010      	b.n	516a <tcc_init+0x3ea>
    5148:	2017      	movs	r0, #23
    514a:	e00e      	b.n	516a <tcc_init+0x3ea>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    514c:	2017      	movs	r0, #23
    514e:	e00c      	b.n	516a <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    5150:	2017      	movs	r0, #23
    5152:	e00a      	b.n	516a <tcc_init+0x3ea>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    5154:	2017      	movs	r0, #23
    5156:	e008      	b.n	516a <tcc_init+0x3ea>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5158:	2017      	movs	r0, #23
    515a:	e006      	b.n	516a <tcc_init+0x3ea>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    515c:	2017      	movs	r0, #23
    515e:	e004      	b.n	516a <tcc_init+0x3ea>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    5160:	2000      	movs	r0, #0
    5162:	e002      	b.n	516a <tcc_init+0x3ea>
    5164:	2000      	movs	r0, #0
    5166:	e000      	b.n	516a <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    5168:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    516a:	b00f      	add	sp, #60	; 0x3c
    516c:	bc3c      	pop	{r2, r3, r4, r5}
    516e:	4690      	mov	r8, r2
    5170:	4699      	mov	r9, r3
    5172:	46a2      	mov	sl, r4
    5174:	46ab      	mov	fp, r5
    5176:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005178 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5178:	0092      	lsls	r2, r2, #2
    517a:	1883      	adds	r3, r0, r2
    517c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    517e:	4b03      	ldr	r3, [pc, #12]	; (518c <tcc_register_callback+0x14>)
    5180:	58d3      	ldr	r3, [r2, r3]
    5182:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5184:	4313      	orrs	r3, r2
    5186:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5188:	2000      	movs	r0, #0
    518a:	4770      	bx	lr
    518c:	000091c0 	.word	0x000091c0

00005190 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5190:	b538      	push	{r3, r4, r5, lr}
    5192:	1c04      	adds	r4, r0, #0
    5194:	1c0d      	adds	r5, r1, #0
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5196:	6800      	ldr	r0, [r0, #0]
    5198:	4b09      	ldr	r3, [pc, #36]	; (51c0 <tcc_enable_callback+0x30>)
    519a:	4798      	blx	r3
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    519c:	4b09      	ldr	r3, [pc, #36]	; (51c4 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    519e:	5c1b      	ldrb	r3, [r3, r0]
    51a0:	221f      	movs	r2, #31
    51a2:	401a      	ands	r2, r3
    51a4:	2301      	movs	r3, #1
    51a6:	4093      	lsls	r3, r2
    51a8:	1c1a      	adds	r2, r3, #0
    51aa:	4b07      	ldr	r3, [pc, #28]	; (51c8 <tcc_enable_callback+0x38>)
    51ac:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    51ae:	00ad      	lsls	r5, r5, #2
    51b0:	4b06      	ldr	r3, [pc, #24]	; (51cc <tcc_enable_callback+0x3c>)
    51b2:	58eb      	ldr	r3, [r5, r3]
    51b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    51b6:	431a      	orrs	r2, r3
    51b8:	63a2      	str	r2, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    51ba:	6822      	ldr	r2, [r4, #0]
    51bc:	6293      	str	r3, [r2, #40]	; 0x28
}
    51be:	bd38      	pop	{r3, r4, r5, pc}
    51c0:	00004c05 	.word	0x00004c05
    51c4:	000091f0 	.word	0x000091f0
    51c8:	e000e100 	.word	0xe000e100
    51cc:	000091c0 	.word	0x000091c0

000051d0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    51d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d2:	4647      	mov	r7, r8
    51d4:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    51d6:	0080      	lsls	r0, r0, #2
    51d8:	4b0d      	ldr	r3, [pc, #52]	; (5210 <_tcc_interrupt_handler+0x40>)
    51da:	58c6      	ldr	r6, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    51dc:	6833      	ldr	r3, [r6, #0]
    51de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51e0:	6b72      	ldr	r2, [r6, #52]	; 0x34
    51e2:	4013      	ands	r3, r2
    51e4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    51e6:	401a      	ands	r2, r3
    51e8:	4690      	mov	r8, r2
    51ea:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    51ec:	4f09      	ldr	r7, [pc, #36]	; (5214 <_tcc_interrupt_handler+0x44>)
    51ee:	59e5      	ldr	r5, [r4, r7]
    51f0:	4643      	mov	r3, r8
    51f2:	422b      	tst	r3, r5
    51f4:	d005      	beq.n	5202 <_tcc_interrupt_handler+0x32>
    51f6:	1933      	adds	r3, r6, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    51f8:	685b      	ldr	r3, [r3, #4]
    51fa:	1c30      	adds	r0, r6, #0
    51fc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    51fe:	6833      	ldr	r3, [r6, #0]
    5200:	62dd      	str	r5, [r3, #44]	; 0x2c
    5202:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5204:	2c30      	cmp	r4, #48	; 0x30
    5206:	d1f2      	bne.n	51ee <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    5208:	bc04      	pop	{r2}
    520a:	4690      	mov	r8, r2
    520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	20000418 	.word	0x20000418
    5214:	000091c0 	.word	0x000091c0

00005218 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5218:	b508      	push	{r3, lr}
    521a:	2000      	movs	r0, #0
    521c:	4b01      	ldr	r3, [pc, #4]	; (5224 <TCC0_Handler+0xc>)
    521e:	4798      	blx	r3
    5220:	bd08      	pop	{r3, pc}
    5222:	46c0      	nop			; (mov r8, r8)
    5224:	000051d1 	.word	0x000051d1

00005228 <TCC1_Handler>:
    5228:	b508      	push	{r3, lr}
    522a:	2001      	movs	r0, #1
    522c:	4b01      	ldr	r3, [pc, #4]	; (5234 <TCC1_Handler+0xc>)
    522e:	4798      	blx	r3
    5230:	bd08      	pop	{r3, pc}
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	000051d1 	.word	0x000051d1

00005238 <TCC2_Handler>:
    5238:	b508      	push	{r3, lr}
    523a:	2002      	movs	r0, #2
    523c:	4b01      	ldr	r3, [pc, #4]	; (5244 <TCC2_Handler+0xc>)
    523e:	4798      	blx	r3
    5240:	bd08      	pop	{r3, pc}
    5242:	46c0      	nop			; (mov r8, r8)
    5244:	000051d1 	.word	0x000051d1

00005248 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5248:	e7fe      	b.n	5248 <Dummy_Handler>
    524a:	46c0      	nop			; (mov r8, r8)

0000524c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    524c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    524e:	4b2c      	ldr	r3, [pc, #176]	; (5300 <Reset_Handler+0xb4>)
    5250:	4a2c      	ldr	r2, [pc, #176]	; (5304 <Reset_Handler+0xb8>)
    5252:	429a      	cmp	r2, r3
    5254:	d003      	beq.n	525e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    5256:	4b2c      	ldr	r3, [pc, #176]	; (5308 <Reset_Handler+0xbc>)
    5258:	4a29      	ldr	r2, [pc, #164]	; (5300 <Reset_Handler+0xb4>)
    525a:	429a      	cmp	r2, r3
    525c:	d304      	bcc.n	5268 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    525e:	4b2b      	ldr	r3, [pc, #172]	; (530c <Reset_Handler+0xc0>)
    5260:	4a2b      	ldr	r2, [pc, #172]	; (5310 <Reset_Handler+0xc4>)
    5262:	429a      	cmp	r2, r3
    5264:	d310      	bcc.n	5288 <Reset_Handler+0x3c>
    5266:	e01b      	b.n	52a0 <Reset_Handler+0x54>
    5268:	4b2a      	ldr	r3, [pc, #168]	; (5314 <Reset_Handler+0xc8>)
    526a:	4827      	ldr	r0, [pc, #156]	; (5308 <Reset_Handler+0xbc>)
    526c:	3003      	adds	r0, #3
    526e:	1ac0      	subs	r0, r0, r3
    5270:	0880      	lsrs	r0, r0, #2
    5272:	3001      	adds	r0, #1
    5274:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5276:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    5278:	4921      	ldr	r1, [pc, #132]	; (5300 <Reset_Handler+0xb4>)
    527a:	4a22      	ldr	r2, [pc, #136]	; (5304 <Reset_Handler+0xb8>)
    527c:	58d4      	ldr	r4, [r2, r3]
    527e:	50cc      	str	r4, [r1, r3]
    5280:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5282:	4283      	cmp	r3, r0
    5284:	d1fa      	bne.n	527c <Reset_Handler+0x30>
    5286:	e7ea      	b.n	525e <Reset_Handler+0x12>
    5288:	4b21      	ldr	r3, [pc, #132]	; (5310 <Reset_Handler+0xc4>)
    528a:	1d1a      	adds	r2, r3, #4
    528c:	491f      	ldr	r1, [pc, #124]	; (530c <Reset_Handler+0xc0>)
    528e:	3103      	adds	r1, #3
    5290:	1a89      	subs	r1, r1, r2
    5292:	0889      	lsrs	r1, r1, #2
    5294:	0089      	lsls	r1, r1, #2
    5296:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    5298:	2100      	movs	r1, #0
    529a:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    529c:	4293      	cmp	r3, r2
    529e:	d1fc      	bne.n	529a <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    52a0:	4b1d      	ldr	r3, [pc, #116]	; (5318 <Reset_Handler+0xcc>)
    52a2:	21ff      	movs	r1, #255	; 0xff
    52a4:	4a1d      	ldr	r2, [pc, #116]	; (531c <Reset_Handler+0xd0>)
    52a6:	438a      	bics	r2, r1
    52a8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    52aa:	2102      	movs	r1, #2
    52ac:	2390      	movs	r3, #144	; 0x90
    52ae:	005b      	lsls	r3, r3, #1
    52b0:	4a1b      	ldr	r2, [pc, #108]	; (5320 <Reset_Handler+0xd4>)
    52b2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    52b4:	4b1b      	ldr	r3, [pc, #108]	; (5324 <Reset_Handler+0xd8>)
    52b6:	78d8      	ldrb	r0, [r3, #3]
    52b8:	2103      	movs	r1, #3
    52ba:	4388      	bics	r0, r1
    52bc:	2202      	movs	r2, #2
    52be:	4310      	orrs	r0, r2
    52c0:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    52c2:	78dd      	ldrb	r5, [r3, #3]
    52c4:	240c      	movs	r4, #12
    52c6:	43a5      	bics	r5, r4
    52c8:	2008      	movs	r0, #8
    52ca:	4305      	orrs	r5, r0
    52cc:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    52ce:	4b16      	ldr	r3, [pc, #88]	; (5328 <Reset_Handler+0xdc>)
    52d0:	7b9e      	ldrb	r6, [r3, #14]
    52d2:	2530      	movs	r5, #48	; 0x30
    52d4:	43ae      	bics	r6, r5
    52d6:	2520      	movs	r5, #32
    52d8:	4335      	orrs	r5, r6
    52da:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    52dc:	7b9d      	ldrb	r5, [r3, #14]
    52de:	43a5      	bics	r5, r4
    52e0:	4328      	orrs	r0, r5
    52e2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    52e4:	7b98      	ldrb	r0, [r3, #14]
    52e6:	4388      	bics	r0, r1
    52e8:	4302      	orrs	r2, r0
    52ea:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    52ec:	4b0f      	ldr	r3, [pc, #60]	; (532c <Reset_Handler+0xe0>)
    52ee:	6859      	ldr	r1, [r3, #4]
    52f0:	2280      	movs	r2, #128	; 0x80
    52f2:	430a      	orrs	r2, r1
    52f4:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    52f6:	4b0e      	ldr	r3, [pc, #56]	; (5330 <Reset_Handler+0xe4>)
    52f8:	4798      	blx	r3

        /* Branch to main function */
        main();
    52fa:	4b0e      	ldr	r3, [pc, #56]	; (5334 <Reset_Handler+0xe8>)
    52fc:	4798      	blx	r3
    52fe:	e7fe      	b.n	52fe <Reset_Handler+0xb2>
    5300:	20000000 	.word	0x20000000
    5304:	00009728 	.word	0x00009728
    5308:	20000078 	.word	0x20000078
    530c:	200005f0 	.word	0x200005f0
    5310:	20000078 	.word	0x20000078
    5314:	20000004 	.word	0x20000004
    5318:	e000ed00 	.word	0xe000ed00
    531c:	00000000 	.word	0x00000000
    5320:	41007000 	.word	0x41007000
    5324:	41005000 	.word	0x41005000
    5328:	41004800 	.word	0x41004800
    532c:	41004000 	.word	0x41004000
    5330:	00006ec9 	.word	0x00006ec9
    5334:	00005a75 	.word	0x00005a75

00005338 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5338:	b5f0      	push	{r4, r5, r6, r7, lr}
    533a:	4647      	mov	r7, r8
    533c:	b480      	push	{r7}
    533e:	1c0c      	adds	r4, r1, #0
    5340:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5342:	2800      	cmp	r0, #0
    5344:	d10c      	bne.n	5360 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    5346:	2a00      	cmp	r2, #0
    5348:	dd0d      	ble.n	5366 <_read+0x2e>
    534a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    534c:	4e09      	ldr	r6, [pc, #36]	; (5374 <_read+0x3c>)
    534e:	4d0a      	ldr	r5, [pc, #40]	; (5378 <_read+0x40>)
    5350:	6830      	ldr	r0, [r6, #0]
    5352:	1c21      	adds	r1, r4, #0
    5354:	682b      	ldr	r3, [r5, #0]
    5356:	4798      	blx	r3
		ptr++;
    5358:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    535a:	42bc      	cmp	r4, r7
    535c:	d1f8      	bne.n	5350 <_read+0x18>
    535e:	e004      	b.n	536a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    5360:	2001      	movs	r0, #1
    5362:	4240      	negs	r0, r0
    5364:	e002      	b.n	536c <_read+0x34>
	}

	for (; len > 0; --len) {
    5366:	2000      	movs	r0, #0
    5368:	e000      	b.n	536c <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    536a:	4640      	mov	r0, r8
	}
	return nChars;
}
    536c:	bc04      	pop	{r2}
    536e:	4690      	mov	r8, r2
    5370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	2000042c 	.word	0x2000042c
    5378:	20000424 	.word	0x20000424

0000537c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    537c:	b5f0      	push	{r4, r5, r6, r7, lr}
    537e:	4647      	mov	r7, r8
    5380:	b480      	push	{r7}
    5382:	1c0e      	adds	r6, r1, #0
    5384:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5386:	3801      	subs	r0, #1
    5388:	2802      	cmp	r0, #2
    538a:	d810      	bhi.n	53ae <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    538c:	2a00      	cmp	r2, #0
    538e:	d011      	beq.n	53b4 <_write+0x38>
    5390:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5392:	4b0d      	ldr	r3, [pc, #52]	; (53c8 <_write+0x4c>)
    5394:	4698      	mov	r8, r3
    5396:	4f0d      	ldr	r7, [pc, #52]	; (53cc <_write+0x50>)
    5398:	4643      	mov	r3, r8
    539a:	6818      	ldr	r0, [r3, #0]
    539c:	5d31      	ldrb	r1, [r6, r4]
    539e:	683b      	ldr	r3, [r7, #0]
    53a0:	4798      	blx	r3
    53a2:	2800      	cmp	r0, #0
    53a4:	db08      	blt.n	53b8 <_write+0x3c>
			return -1;
		}
		++nChars;
    53a6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    53a8:	42a5      	cmp	r5, r4
    53aa:	d1f5      	bne.n	5398 <_write+0x1c>
    53ac:	e007      	b.n	53be <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    53ae:	2001      	movs	r0, #1
    53b0:	4240      	negs	r0, r0
    53b2:	e005      	b.n	53c0 <_write+0x44>
	}

	for (; len != 0; --len) {
    53b4:	2000      	movs	r0, #0
    53b6:	e003      	b.n	53c0 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    53b8:	2001      	movs	r0, #1
    53ba:	4240      	negs	r0, r0
    53bc:	e000      	b.n	53c0 <_write+0x44>
		}
		++nChars;
    53be:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    53c0:	bc04      	pop	{r2}
    53c2:	4690      	mov	r8, r2
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c6:	46c0      	nop			; (mov r8, r8)
    53c8:	2000042c 	.word	0x2000042c
    53cc:	20000428 	.word	0x20000428

000053d0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    53d0:	4b06      	ldr	r3, [pc, #24]	; (53ec <_sbrk+0x1c>)
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	2b00      	cmp	r3, #0
    53d6:	d102      	bne.n	53de <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    53d8:	4a05      	ldr	r2, [pc, #20]	; (53f0 <_sbrk+0x20>)
    53da:	4b04      	ldr	r3, [pc, #16]	; (53ec <_sbrk+0x1c>)
    53dc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    53de:	4a03      	ldr	r2, [pc, #12]	; (53ec <_sbrk+0x1c>)
    53e0:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    53e2:	1818      	adds	r0, r3, r0
    53e4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    53e6:	1c18      	adds	r0, r3, #0
    53e8:	4770      	bx	lr
    53ea:	46c0      	nop			; (mov r8, r8)
    53ec:	20000108 	.word	0x20000108
    53f0:	200025f0 	.word	0x200025f0

000053f4 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    53f4:	2001      	movs	r0, #1
}
    53f6:	4240      	negs	r0, r0
    53f8:	4770      	bx	lr
    53fa:	46c0      	nop			; (mov r8, r8)

000053fc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    53fc:	2380      	movs	r3, #128	; 0x80
    53fe:	019b      	lsls	r3, r3, #6
    5400:	604b      	str	r3, [r1, #4]

	return 0;
}
    5402:	2000      	movs	r0, #0
    5404:	4770      	bx	lr
    5406:	46c0      	nop			; (mov r8, r8)

00005408 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5408:	2001      	movs	r0, #1
    540a:	4770      	bx	lr

0000540c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    540c:	2000      	movs	r0, #0
    540e:	4770      	bx	lr

00005410 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    5410:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    5412:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5414:	2200      	movs	r2, #0
    5416:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    5418:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    541a:	9b00      	ldr	r3, [sp, #0]
    541c:	60c3      	str	r3, [r0, #12]
}
    541e:	4770      	bx	lr

00005420 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    5420:	b510      	push	{r4, lr}
    5422:	1c04      	adds	r4, r0, #0
	if(writer->written > 0) {
    5424:	6842      	ldr	r2, [r0, #4]
    5426:	2a00      	cmp	r2, #0
    5428:	d005      	beq.n	5436 <stream_writer_send_remain+0x16>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    542a:	68c0      	ldr	r0, [r0, #12]
    542c:	6921      	ldr	r1, [r4, #16]
    542e:	68a3      	ldr	r3, [r4, #8]
    5430:	4798      	blx	r3
		writer->written = 0;
    5432:	2300      	movs	r3, #0
    5434:	6063      	str	r3, [r4, #4]
	}
}
    5436:	bd10      	pop	{r4, pc}

00005438 <stream_writer_send_8>:
	writer->write_func = func;
	writer->priv_data = priv_data;
}

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    5438:	b538      	push	{r3, r4, r5, lr}
    543a:	1c04      	adds	r4, r0, #0
    543c:	1c0d      	adds	r5, r1, #0
	int remain = writer->max_size - writer->written;
    543e:	6801      	ldr	r1, [r0, #0]
    5440:	6842      	ldr	r2, [r0, #4]
    5442:	1a8b      	subs	r3, r1, r2

	if (remain < 1) {
    5444:	2b00      	cmp	r3, #0
    5446:	dc01      	bgt.n	544c <stream_writer_send_8+0x14>
		stream_writer_send_remain(writer);
    5448:	4b03      	ldr	r3, [pc, #12]	; (5458 <stream_writer_send_8+0x20>)
    544a:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    544c:	6922      	ldr	r2, [r4, #16]
    544e:	6863      	ldr	r3, [r4, #4]
    5450:	1c59      	adds	r1, r3, #1
    5452:	6061      	str	r1, [r4, #4]
    5454:	54d5      	strb	r5, [r2, r3]
}
    5456:	bd38      	pop	{r3, r4, r5, pc}
    5458:	00005421 	.word	0x00005421

0000545c <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    545c:	b570      	push	{r4, r5, r6, lr}
    545e:	1c05      	adds	r5, r0, #0
    5460:	1c0e      	adds	r6, r1, #0
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    5462:	1209      	asrs	r1, r1, #8
    5464:	4c02      	ldr	r4, [pc, #8]	; (5470 <stream_writer_send_16BE+0x14>)
    5466:	47a0      	blx	r4
	stream_writer_send_8(writer, value & 0xFF);
    5468:	b271      	sxtb	r1, r6
    546a:	1c28      	adds	r0, r5, #0
    546c:	47a0      	blx	r4
}
    546e:	bd70      	pop	{r4, r5, r6, pc}
    5470:	00005439 	.word	0x00005439

00005474 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    5474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5476:	1c06      	adds	r6, r0, #0
    5478:	1c0d      	adds	r5, r1, #0
    547a:	1e14      	subs	r4, r2, #0
	for (; length > 0; length--, buffer++) {
    547c:	d008      	beq.n	5490 <stream_writer_send_buffer+0x1c>
		stream_writer_send_8(writer, *buffer);
    547e:	4f05      	ldr	r7, [pc, #20]	; (5494 <stream_writer_send_buffer+0x20>)
    5480:	2100      	movs	r1, #0
    5482:	5669      	ldrsb	r1, [r5, r1]
    5484:	1c30      	adds	r0, r6, #0
    5486:	47b8      	blx	r7
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
    5488:	3c01      	subs	r4, #1
    548a:	3501      	adds	r5, #1
    548c:	2c00      	cmp	r4, #0
    548e:	d1f7      	bne.n	5480 <stream_writer_send_buffer+0xc>
		stream_writer_send_8(writer, *buffer);
	}
}
    5490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	00005439 	.word	0x00005439

00005498 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    5498:	4b02      	ldr	r3, [pc, #8]	; (54a4 <sw_timer_tcc_callback+0xc>)
    549a:	681a      	ldr	r2, [r3, #0]
    549c:	3201      	adds	r2, #1
    549e:	601a      	str	r2, [r3, #0]
}
    54a0:	4770      	bx	lr
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	2000010c 	.word	0x2000010c

000054a8 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    54a8:	2364      	movs	r3, #100	; 0x64
    54aa:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    54ac:	2300      	movs	r3, #0
    54ae:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    54b0:	7043      	strb	r3, [r0, #1]
}
    54b2:	4770      	bx	lr

000054b4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b6:	4647      	mov	r7, r8
    54b8:	b480      	push	{r7}
    54ba:	b0ac      	sub	sp, #176	; 0xb0
    54bc:	1c0c      	adds	r4, r1, #0
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    54be:	466d      	mov	r5, sp
    54c0:	4b1d      	ldr	r3, [pc, #116]	; (5538 <sw_timer_init+0x84>)
    54c2:	466a      	mov	r2, sp
    54c4:	cbc2      	ldmia	r3!, {r1, r6, r7}
    54c6:	c2c2      	stmia	r2!, {r1, r6, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    54c8:	8863      	ldrh	r3, [r4, #2]
    54ca:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    54cc:	1c07      	adds	r7, r0, #0
    54ce:	3714      	adds	r7, #20
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    54d0:	1c16      	adds	r6, r2, #0
    54d2:	7823      	ldrb	r3, [r4, #0]
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	5959      	ldr	r1, [r3, r5]
    54d8:	1c10      	adds	r0, r2, #0
    54da:	4b18      	ldr	r3, [pc, #96]	; (553c <sw_timer_init+0x88>)
    54dc:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    54de:	2000      	movs	r0, #0
    54e0:	4b17      	ldr	r3, [pc, #92]	; (5540 <sw_timer_init+0x8c>)
    54e2:	4798      	blx	r3
    54e4:	4b17      	ldr	r3, [pc, #92]	; (5544 <sw_timer_init+0x90>)
    54e6:	7a1b      	ldrb	r3, [r3, #8]
    54e8:	b2db      	uxtb	r3, r3
    54ea:	40d8      	lsrs	r0, r3
    54ec:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    54ee:	8861      	ldrh	r1, [r4, #2]
    54f0:	20fa      	movs	r0, #250	; 0xfa
    54f2:	0200      	lsls	r0, r0, #8
    54f4:	4b14      	ldr	r3, [pc, #80]	; (5548 <sw_timer_init+0x94>)
    54f6:	4798      	blx	r3
    54f8:	1c01      	adds	r1, r0, #0
    54fa:	4640      	mov	r0, r8
    54fc:	4b13      	ldr	r3, [pc, #76]	; (554c <sw_timer_init+0x98>)
    54fe:	4798      	blx	r3
    5500:	6070      	str	r0, [r6, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    5502:	2305      	movs	r3, #5
    5504:	72f3      	strb	r3, [r6, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    5506:	7823      	ldrb	r3, [r4, #0]
    5508:	009b      	lsls	r3, r3, #2
    550a:	5959      	ldr	r1, [r3, r5]
    550c:	1c38      	adds	r0, r7, #0
    550e:	1c32      	adds	r2, r6, #0
    5510:	4b0f      	ldr	r3, [pc, #60]	; (5550 <sw_timer_init+0x9c>)
    5512:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5514:	7862      	ldrb	r2, [r4, #1]
    5516:	3208      	adds	r2, #8
    5518:	b2d2      	uxtb	r2, r2
    551a:	1c38      	adds	r0, r7, #0
    551c:	490d      	ldr	r1, [pc, #52]	; (5554 <sw_timer_init+0xa0>)
    551e:	4b0e      	ldr	r3, [pc, #56]	; (5558 <sw_timer_init+0xa4>)
    5520:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5522:	7861      	ldrb	r1, [r4, #1]
    5524:	3108      	adds	r1, #8
    5526:	b2c9      	uxtb	r1, r1
    5528:	1c38      	adds	r0, r7, #0
    552a:	4b0c      	ldr	r3, [pc, #48]	; (555c <sw_timer_init+0xa8>)
    552c:	4798      	blx	r3
}
    552e:	b02c      	add	sp, #176	; 0xb0
    5530:	bc04      	pop	{r2}
    5532:	4690      	mov	r8, r2
    5534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	000091f4 	.word	0x000091f4
    553c:	00004c35 	.word	0x00004c35
    5540:	000049bd 	.word	0x000049bd
    5544:	40000400 	.word	0x40000400
    5548:	00006dc1 	.word	0x00006dc1
    554c:	00006d25 	.word	0x00006d25
    5550:	00004d81 	.word	0x00004d81
    5554:	00005499 	.word	0x00005499
    5558:	00005179 	.word	0x00005179
    555c:	00005191 	.word	0x00005191

00005560 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5560:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5562:	2102      	movs	r1, #2
    5564:	6893      	ldr	r3, [r2, #8]
    5566:	4219      	tst	r1, r3
    5568:	d1fc      	bne.n	5564 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    556a:	6811      	ldr	r1, [r2, #0]
    556c:	2302      	movs	r3, #2
    556e:	430b      	orrs	r3, r1
    5570:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    5572:	4770      	bx	lr

00005574 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    5574:	b538      	push	{r3, r4, r5, lr}
    5576:	1c04      	adds	r4, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    5578:	7805      	ldrb	r5, [r0, #0]
    557a:	07e8      	lsls	r0, r5, #31
    557c:	d410      	bmi.n	55a0 <sw_timer_register_callback+0x2c>
			handler = &module_inst->handler[index];
			handler->callback = callback;
    557e:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    5580:	1c29      	adds	r1, r5, #0
    5582:	2002      	movs	r0, #2
    5584:	4381      	bics	r1, r0
    5586:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    5588:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    558a:	1c18      	adds	r0, r3, #0
    558c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    558e:	4b06      	ldr	r3, [pc, #24]	; (55a8 <sw_timer_register_callback+0x34>)
    5590:	4798      	blx	r3
    5592:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    5594:	7822      	ldrb	r2, [r4, #0]
    5596:	2301      	movs	r3, #1
    5598:	4313      	orrs	r3, r2
    559a:	7023      	strb	r3, [r4, #0]
			return index;
    559c:	2000      	movs	r0, #0
    559e:	e001      	b.n	55a4 <sw_timer_register_callback+0x30>
		}
	}

	return -1;
    55a0:	2001      	movs	r0, #1
    55a2:	4240      	negs	r0, r0
}
    55a4:	bd38      	pop	{r3, r4, r5, pc}
    55a6:	46c0      	nop			; (mov r8, r8)
    55a8:	00006d25 	.word	0x00006d25

000055ac <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    55ac:	b510      	push	{r4, lr}
    55ae:	1c03      	adds	r3, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    55b0:	008c      	lsls	r4, r1, #2
    55b2:	1864      	adds	r4, r4, r1
    55b4:	00a4      	lsls	r4, r4, #2
    55b6:	1904      	adds	r4, r0, r4

	handler->callback_enable = 1;
    55b8:	7820      	ldrb	r0, [r4, #0]
    55ba:	2102      	movs	r1, #2
    55bc:	4301      	orrs	r1, r0
    55be:	7021      	strb	r1, [r4, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    55c0:	1c10      	adds	r0, r2, #0
    55c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
    55c4:	4b03      	ldr	r3, [pc, #12]	; (55d4 <sw_timer_enable_callback+0x28>)
    55c6:	4798      	blx	r3
    55c8:	4b03      	ldr	r3, [pc, #12]	; (55d8 <sw_timer_enable_callback+0x2c>)
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	18c0      	adds	r0, r0, r3
    55ce:	6120      	str	r0, [r4, #16]
}
    55d0:	bd10      	pop	{r4, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	00006d25 	.word	0x00006d25
    55d8:	2000010c 	.word	0x2000010c

000055dc <sw_timer_disable_callback>:
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    55dc:	008b      	lsls	r3, r1, #2
    55de:	1859      	adds	r1, r3, r1
    55e0:	0089      	lsls	r1, r1, #2

	handler->callback_enable = 0;
    55e2:	5c43      	ldrb	r3, [r0, r1]
    55e4:	2202      	movs	r2, #2
    55e6:	4393      	bics	r3, r2
    55e8:	5443      	strb	r3, [r0, r1]
}
    55ea:	4770      	bx	lr

000055ec <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    55ec:	b538      	push	{r3, r4, r5, lr}
    55ee:	1c04      	adds	r4, r0, #0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    55f0:	7803      	ldrb	r3, [r0, #0]
    55f2:	07da      	lsls	r2, r3, #31
    55f4:	d522      	bpl.n	563c <sw_timer_task+0x50>
    55f6:	079d      	lsls	r5, r3, #30
    55f8:	d520      	bpl.n	563c <sw_timer_task+0x50>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    55fa:	4b11      	ldr	r3, [pc, #68]	; (5640 <sw_timer_task+0x54>)
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	6902      	ldr	r2, [r0, #16]
    5600:	1ad3      	subs	r3, r2, r3
    5602:	d51b      	bpl.n	563c <sw_timer_task+0x50>
    5604:	7803      	ldrb	r3, [r0, #0]
    5606:	075d      	lsls	r5, r3, #29
    5608:	d418      	bmi.n	563c <sw_timer_task+0x50>
				/* Enter critical section. */
				handler->busy = 1;
    560a:	1c1a      	adds	r2, r3, #0
    560c:	2304      	movs	r3, #4
    560e:	4313      	orrs	r3, r2
    5610:	7003      	strb	r3, [r0, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    5612:	2100      	movs	r1, #0
    5614:	68a2      	ldr	r2, [r4, #8]
    5616:	68e3      	ldr	r3, [r4, #12]
    5618:	6865      	ldr	r5, [r4, #4]
    561a:	47a8      	blx	r5
				/* Timer was expired. */
				if (handler->period > 0) {
    561c:	68e3      	ldr	r3, [r4, #12]
    561e:	2b00      	cmp	r3, #0
    5620:	d004      	beq.n	562c <sw_timer_task+0x40>
					handler->expire_time = sw_timer_tick + handler->period;
    5622:	4a07      	ldr	r2, [pc, #28]	; (5640 <sw_timer_task+0x54>)
    5624:	6812      	ldr	r2, [r2, #0]
    5626:	18d3      	adds	r3, r2, r3
    5628:	6123      	str	r3, [r4, #16]
    562a:	e003      	b.n	5634 <sw_timer_task+0x48>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    562c:	7823      	ldrb	r3, [r4, #0]
    562e:	2202      	movs	r2, #2
    5630:	4393      	bics	r3, r2
    5632:	7023      	strb	r3, [r4, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    5634:	7823      	ldrb	r3, [r4, #0]
    5636:	2204      	movs	r2, #4
    5638:	4393      	bics	r3, r2
    563a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

}
    563c:	bd38      	pop	{r3, r4, r5, pc}
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	2000010c 	.word	0x2000010c

00005644 <uart_callback>:
} mqtt_connection_state;

static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    5644:	4b05      	ldr	r3, [pc, #20]	; (565c <uart_callback+0x18>)
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	2b3f      	cmp	r3, #63	; 0x3f
    564a:	dc05      	bgt.n	5658 <uart_callback+0x14>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    564c:	1c59      	adds	r1, r3, #1
    564e:	4a03      	ldr	r2, [pc, #12]	; (565c <uart_callback+0x18>)
    5650:	6011      	str	r1, [r2, #0]
    5652:	2100      	movs	r1, #0
    5654:	4a02      	ldr	r2, [pc, #8]	; (5660 <uart_callback+0x1c>)
    5656:	54d1      	strb	r1, [r2, r3]
	}
}
    5658:	4770      	bx	lr
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	20000144 	.word	0x20000144
    5660:	20000188 	.word	0x20000188

00005664 <extint_detection_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    5664:	4b0b      	ldr	r3, [pc, #44]	; (5694 <extint_detection_callback+0x30>)
    5666:	6a1b      	ldr	r3, [r3, #32]
}

void extint_detection_callback(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if(pin_state)
    5668:	0219      	lsls	r1, r3, #8
    566a:	d506      	bpl.n	567a <extint_detection_callback+0x16>
		strcpy(glb_msg, "Open");
    566c:	4b0a      	ldr	r3, [pc, #40]	; (5698 <extint_detection_callback+0x34>)
    566e:	4a0b      	ldr	r2, [pc, #44]	; (569c <extint_detection_callback+0x38>)
    5670:	6811      	ldr	r1, [r2, #0]
    5672:	6019      	str	r1, [r3, #0]
    5674:	7912      	ldrb	r2, [r2, #4]
    5676:	711a      	strb	r2, [r3, #4]
    5678:	e007      	b.n	568a <extint_detection_callback+0x26>
	else if(!pin_state)
		strcpy(glb_msg, "Closed");
    567a:	4b07      	ldr	r3, [pc, #28]	; (5698 <extint_detection_callback+0x34>)
    567c:	4a08      	ldr	r2, [pc, #32]	; (56a0 <extint_detection_callback+0x3c>)
    567e:	6811      	ldr	r1, [r2, #0]
    5680:	6019      	str	r1, [r3, #0]
    5682:	8891      	ldrh	r1, [r2, #4]
    5684:	8099      	strh	r1, [r3, #4]
    5686:	7992      	ldrb	r2, [r2, #6]
    5688:	719a      	strb	r2, [r3, #6]
	new_activity = 1;
    568a:	2201      	movs	r2, #1
    568c:	4b05      	ldr	r3, [pc, #20]	; (56a4 <extint_detection_callback+0x40>)
    568e:	701a      	strb	r2, [r3, #0]
}
    5690:	4770      	bx	lr
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	41004480 	.word	0x41004480
    5698:	20000444 	.word	0x20000444
    569c:	00009214 	.word	0x00009214
    56a0:	0000921c 	.word	0x0000921c
    56a4:	2000048f 	.word	0x2000048f

000056a8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    56a8:	b508      	push	{r3, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    56aa:	4b01      	ldr	r3, [pc, #4]	; (56b0 <socket_resolve_handler+0x8>)
    56ac:	4798      	blx	r3
}
    56ae:	bd08      	pop	{r3, pc}
    56b0:	00006071 	.word	0x00006071

000056b4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    56b4:	b508      	push	{r3, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    56b6:	4b01      	ldr	r3, [pc, #4]	; (56bc <socket_event_handler+0x8>)
    56b8:	4798      	blx	r3
}
    56ba:	bd08      	pop	{r3, pc}
    56bc:	00006c11 	.word	0x00006c11

000056c0 <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    56c0:	b530      	push	{r4, r5, lr}
    56c2:	b083      	sub	sp, #12
    56c4:	1c0c      	adds	r4, r1, #0
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;
	tstrM2MConnInfo     *pstrConnInfo = (tstrM2MConnInfo*)msg_data;

	switch (msg_type) 
    56c6:	282c      	cmp	r0, #44	; 0x2c
    56c8:	d01e      	beq.n	5708 <wifi_callback+0x48>
    56ca:	2836      	cmp	r0, #54	; 0x36
    56cc:	d037      	beq.n	573e <wifi_callback+0x7e>
    56ce:	2806      	cmp	r0, #6
    56d0:	d148      	bne.n	5764 <wifi_callback+0xa4>
	{	
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
    56d2:	4825      	ldr	r0, [pc, #148]	; (5768 <wifi_callback+0xa8>)
    56d4:	4b25      	ldr	r3, [pc, #148]	; (576c <wifi_callback+0xac>)
    56d6:	4798      	blx	r3
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
    56d8:	4825      	ldr	r0, [pc, #148]	; (5770 <wifi_callback+0xb0>)
    56da:	1c21      	adds	r1, r4, #0
    56dc:	4d25      	ldr	r5, [pc, #148]	; (5774 <wifi_callback+0xb4>)
    56de:	47a8      	blx	r5
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
    56e0:	2321      	movs	r3, #33	; 0x21
    56e2:	5ce1      	ldrb	r1, [r4, r3]
    56e4:	4824      	ldr	r0, [pc, #144]	; (5778 <wifi_callback+0xb8>)
    56e6:	47a8      	blx	r5
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
    56e8:	232c      	movs	r3, #44	; 0x2c
    56ea:	56e1      	ldrsb	r1, [r4, r3]
    56ec:	4823      	ldr	r0, [pc, #140]	; (577c <wifi_callback+0xbc>)
    56ee:	47a8      	blx	r5
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
    56f0:	2322      	movs	r3, #34	; 0x22
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
    56f2:	5ce1      	ldrb	r1, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
    56f4:	2323      	movs	r3, #35	; 0x23
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
    56f6:	5ce2      	ldrb	r2, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
    56f8:	2324      	movs	r3, #36	; 0x24
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
    56fa:	5ce3      	ldrb	r3, [r4, r3]
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
    56fc:	2025      	movs	r0, #37	; 0x25
	case M2M_WIFI_RESP_CONN_INFO:
		printf("CONNECTED AP INFO\n");
		printf("SSID                : %s\n",pstrConnInfo->acSSID);
		printf("SEC TYPE            : %d\n",pstrConnInfo->u8SecType);
		printf("Signal Strength     : %d\n", pstrConnInfo->s8RSSI);
		printf("Local IP Address    : %d.%d.%d.%d\r\n",
    56fe:	5c20      	ldrb	r0, [r4, r0]
    5700:	9000      	str	r0, [sp, #0]
    5702:	481f      	ldr	r0, [pc, #124]	; (5780 <wifi_callback+0xc0>)
    5704:	47a8      	blx	r5
		pstrConnInfo->au8IPAddr[0] , pstrConnInfo->au8IPAddr[1], pstrConnInfo->au8IPAddr[2], pstrConnInfo->au8IPAddr[3]);
		break;
    5706:	e02d      	b.n	5764 <wifi_callback+0xa4>
		
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    5708:	780b      	ldrb	r3, [r1, #0]
    570a:	2b01      	cmp	r3, #1
    570c:	d105      	bne.n	571a <wifi_callback+0x5a>
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected - Requesting DHCP...\r\n");
    570e:	481d      	ldr	r0, [pc, #116]	; (5784 <wifi_callback+0xc4>)
    5710:	4b16      	ldr	r3, [pc, #88]	; (576c <wifi_callback+0xac>)
    5712:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    5714:	4b1c      	ldr	r3, [pc, #112]	; (5788 <wifi_callback+0xc8>)
    5716:	4798      	blx	r3
    5718:	e024      	b.n	5764 <wifi_callback+0xa4>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    571a:	2b00      	cmp	r3, #0
    571c:	d122      	bne.n	5764 <wifi_callback+0xa4>
			/* If Wi-Fi is disconnected. */
			printf("Wi-Fi disconnected\r\n");
    571e:	481b      	ldr	r0, [pc, #108]	; (578c <wifi_callback+0xcc>)
    5720:	4b12      	ldr	r3, [pc, #72]	; (576c <wifi_callback+0xac>)
    5722:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5724:	23ff      	movs	r3, #255	; 0xff
    5726:	9300      	str	r3, [sp, #0]
    5728:	4819      	ldr	r0, [pc, #100]	; (5790 <wifi_callback+0xd0>)
    572a:	2106      	movs	r1, #6
    572c:	2202      	movs	r2, #2
    572e:	4b19      	ldr	r3, [pc, #100]	; (5794 <wifi_callback+0xd4>)
    5730:	4c19      	ldr	r4, [pc, #100]	; (5798 <wifi_callback+0xd8>)
    5732:	47a0      	blx	r4
					MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
    5734:	4819      	ldr	r0, [pc, #100]	; (579c <wifi_callback+0xdc>)
    5736:	2101      	movs	r1, #1
    5738:	4b19      	ldr	r3, [pc, #100]	; (57a0 <wifi_callback+0xe0>)
    573a:	4798      	blx	r3
    573c:	e012      	b.n	5764 <wifi_callback+0xa4>

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("DHCP Complete.\r\nWi-Fi IP is %u.%u.%u.%u\r\n",
    573e:	7809      	ldrb	r1, [r1, #0]
    5740:	7862      	ldrb	r2, [r4, #1]
    5742:	78a3      	ldrb	r3, [r4, #2]
    5744:	78e0      	ldrb	r0, [r4, #3]
    5746:	9000      	str	r0, [sp, #0]
    5748:	4816      	ldr	r0, [pc, #88]	; (57a4 <wifi_callback+0xe4>)
    574a:	4c0a      	ldr	r4, [pc, #40]	; (5774 <wifi_callback+0xb4>)
    574c:	47a0      	blx	r4
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    574e:	4813      	ldr	r0, [pc, #76]	; (579c <wifi_callback+0xdc>)
    5750:	4915      	ldr	r1, [pc, #84]	; (57a8 <wifi_callback+0xe8>)
    5752:	4b16      	ldr	r3, [pc, #88]	; (57ac <wifi_callback+0xec>)
    5754:	4798      	blx	r3
		mqtt_connection_state = CONNECTING;
    5756:	2201      	movs	r2, #1
    5758:	4b15      	ldr	r3, [pc, #84]	; (57b0 <wifi_callback+0xf0>)
    575a:	701a      	strb	r2, [r3, #0]
		printf("Connecting to MQTT broker...\n\r");
    575c:	4815      	ldr	r0, [pc, #84]	; (57b4 <wifi_callback+0xf4>)
    575e:	47a0      	blx	r4
		m2m_wifi_get_connection_info();
    5760:	4b15      	ldr	r3, [pc, #84]	; (57b8 <wifi_callback+0xf8>)
    5762:	4798      	blx	r3
		break;

	default:
		break;
	}
}
    5764:	b003      	add	sp, #12
    5766:	bd30      	pop	{r4, r5, pc}
    5768:	00009224 	.word	0x00009224
    576c:	000071d5 	.word	0x000071d5
    5770:	00009238 	.word	0x00009238
    5774:	000070b5 	.word	0x000070b5
    5778:	00009254 	.word	0x00009254
    577c:	00009270 	.word	0x00009270
    5780:	0000928c 	.word	0x0000928c
    5784:	000092b0 	.word	0x000092b0
    5788:	0000123d 	.word	0x0000123d
    578c:	000092d8 	.word	0x000092d8
    5790:	000092ec 	.word	0x000092ec
    5794:	000092f4 	.word	0x000092f4
    5798:	00001221 	.word	0x00001221
    579c:	20000248 	.word	0x20000248
    57a0:	000068d1 	.word	0x000068d1
    57a4:	00009300 	.word	0x00009300
    57a8:	00009200 	.word	0x00009200
    57ac:	000060c5 	.word	0x000060c5
    57b0:	200004e8 	.word	0x200004e8
    57b4:	0000932c 	.word	0x0000932c
    57b8:	000012b9 	.word	0x000012b9

000057bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    57bc:	b570      	push	{r4, r5, r6, lr}
    57be:	b082      	sub	sp, #8
    57c0:	1c05      	adds	r5, r0, #0
    57c2:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    57c4:	2200      	movs	r2, #0
    57c6:	466b      	mov	r3, sp
    57c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    57ca:	4c06      	ldr	r4, [pc, #24]	; (57e4 <usart_serial_getchar+0x28>)
    57cc:	1c28      	adds	r0, r5, #0
    57ce:	4669      	mov	r1, sp
    57d0:	3106      	adds	r1, #6
    57d2:	47a0      	blx	r4
    57d4:	2800      	cmp	r0, #0
    57d6:	d1f9      	bne.n	57cc <usart_serial_getchar+0x10>

	*c = temp;
    57d8:	466b      	mov	r3, sp
    57da:	3306      	adds	r3, #6
    57dc:	881b      	ldrh	r3, [r3, #0]
    57de:	7033      	strb	r3, [r6, #0]
}
    57e0:	b002      	add	sp, #8
    57e2:	bd70      	pop	{r4, r5, r6, pc}
    57e4:	000041a9 	.word	0x000041a9

000057e8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    57e8:	b570      	push	{r4, r5, r6, lr}
    57ea:	1c06      	adds	r6, r0, #0
    57ec:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    57ee:	4c03      	ldr	r4, [pc, #12]	; (57fc <usart_serial_putchar+0x14>)
    57f0:	1c30      	adds	r0, r6, #0
    57f2:	1c29      	adds	r1, r5, #0
    57f4:	47a0      	blx	r4
    57f6:	2800      	cmp	r0, #0
    57f8:	d1fa      	bne.n	57f0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    57fa:	bd70      	pop	{r4, r5, r6, pc}
    57fc:	0000417d 	.word	0x0000417d

00005800 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5800:	b530      	push	{r4, r5, lr}
    5802:	b087      	sub	sp, #28
    5804:	1c04      	adds	r4, r0, #0
	switch (type) {
    5806:	2901      	cmp	r1, #1
    5808:	d01d      	beq.n	5846 <mqtt_callback+0x46>
    580a:	2905      	cmp	r1, #5
    580c:	d033      	beq.n	5876 <mqtt_callback+0x76>
    580e:	2900      	cmp	r1, #0
    5810:	d13d      	bne.n	588e <mqtt_callback+0x8e>
	{
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
    5812:	6813      	ldr	r3, [r2, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	db0c      	blt.n	5832 <mqtt_callback+0x32>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    5818:	4b1e      	ldr	r3, [pc, #120]	; (5894 <mqtt_callback+0x94>)
    581a:	9300      	str	r3, [sp, #0]
    581c:	2300      	movs	r3, #0
    581e:	9301      	str	r3, [sp, #4]
    5820:	9302      	str	r3, [sp, #8]
    5822:	9303      	str	r3, [sp, #12]
    5824:	9304      	str	r3, [sp, #16]
    5826:	9305      	str	r3, [sp, #20]
    5828:	2101      	movs	r1, #1
    582a:	2200      	movs	r2, #0
    582c:	4c1a      	ldr	r4, [pc, #104]	; (5898 <mqtt_callback+0x98>)
    582e:	47a0      	blx	r4
    5830:	e02d      	b.n	588e <mqtt_callback+0x8e>
		} else {
			printf("Failed to connect to (%s)! Automatically retrying...\r\n", main_mqtt_broker);
    5832:	4d1a      	ldr	r5, [pc, #104]	; (589c <mqtt_callback+0x9c>)
    5834:	481a      	ldr	r0, [pc, #104]	; (58a0 <mqtt_callback+0xa0>)
    5836:	1c29      	adds	r1, r5, #0
    5838:	4b1a      	ldr	r3, [pc, #104]	; (58a4 <mqtt_callback+0xa4>)
    583a:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    583c:	1c20      	adds	r0, r4, #0
    583e:	1c29      	adds	r1, r5, #0
    5840:	4b19      	ldr	r3, [pc, #100]	; (58a8 <mqtt_callback+0xa8>)
    5842:	4798      	blx	r3
    5844:	e023      	b.n	588e <mqtt_callback+0x8e>
		}
	}
	break;

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    5846:	7811      	ldrb	r1, [r2, #0]
    5848:	2900      	cmp	r1, #0
    584a:	d110      	bne.n	586e <mqtt_callback+0x6e>
			/* Subscribe chat topic. */
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    584c:	4917      	ldr	r1, [pc, #92]	; (58ac <mqtt_callback+0xac>)
    584e:	2200      	movs	r2, #0
    5850:	4b17      	ldr	r3, [pc, #92]	; (58b0 <mqtt_callback+0xb0>)
    5852:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    5854:	4a17      	ldr	r2, [pc, #92]	; (58b4 <mqtt_callback+0xb4>)
    5856:	2331      	movs	r3, #49	; 0x31
    5858:	5cd0      	ldrb	r0, [r2, r3]
    585a:	2102      	movs	r1, #2
    585c:	4301      	orrs	r1, r0
    585e:	54d1      	strb	r1, [r2, r3]
			/* Enable USART receiving callback. */
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
			printf("MQTT Connection Accepted.\r\n");
    5860:	4815      	ldr	r0, [pc, #84]	; (58b8 <mqtt_callback+0xb8>)
    5862:	4b16      	ldr	r3, [pc, #88]	; (58bc <mqtt_callback+0xbc>)
    5864:	4798      	blx	r3
			mqtt_connection_state = CONNECTED;
    5866:	4b16      	ldr	r3, [pc, #88]	; (58c0 <mqtt_callback+0xc0>)
    5868:	2202      	movs	r2, #2
    586a:	701a      	strb	r2, [r3, #0]
    586c:	e00f      	b.n	588e <mqtt_callback+0x8e>
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    586e:	4815      	ldr	r0, [pc, #84]	; (58c4 <mqtt_callback+0xc4>)
    5870:	4b0c      	ldr	r3, [pc, #48]	; (58a4 <mqtt_callback+0xa4>)
    5872:	4798      	blx	r3
    5874:	e00b      	b.n	588e <mqtt_callback+0x8e>
		//SetRTCTime(data->recv_publish.topic, data->recv_publish.msg);
		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    5876:	4814      	ldr	r0, [pc, #80]	; (58c8 <mqtt_callback+0xc8>)
    5878:	4b10      	ldr	r3, [pc, #64]	; (58bc <mqtt_callback+0xbc>)
    587a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    587c:	4a0d      	ldr	r2, [pc, #52]	; (58b4 <mqtt_callback+0xb4>)
    587e:	2331      	movs	r3, #49	; 0x31
    5880:	5cd1      	ldrb	r1, [r2, r3]
    5882:	2002      	movs	r0, #2
    5884:	4381      	bics	r1, r0
    5886:	54d1      	strb	r1, [r2, r3]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		mqtt_connection_state = DISCONNECTED;
    5888:	2200      	movs	r2, #0
    588a:	4b0d      	ldr	r3, [pc, #52]	; (58c0 <mqtt_callback+0xc0>)
    588c:	701a      	strb	r2, [r3, #0]
		break;
	}
}
    588e:	b007      	add	sp, #28
    5890:	bd30      	pop	{r4, r5, pc}
    5892:	46c0      	nop			; (mov r8, r8)
    5894:	20000148 	.word	0x20000148
    5898:	000061d9 	.word	0x000061d9
    589c:	00009200 	.word	0x00009200
    58a0:	0000934c 	.word	0x0000934c
    58a4:	000070b5 	.word	0x000070b5
    58a8:	000060c5 	.word	0x000060c5
    58ac:	00009384 	.word	0x00009384
    58b0:	00006631 	.word	0x00006631
    58b4:	20000110 	.word	0x20000110
    58b8:	00009394 	.word	0x00009394
    58bc:	000071d5 	.word	0x000071d5
    58c0:	200004e8 	.word	0x200004e8
    58c4:	000093b0 	.word	0x000093b0
    58c8:	000093e4 	.word	0x000093e4

000058cc <configure_extint_channel>:
		while (1);
	}
}

void configure_extint_channel(void)
{
    58cc:	b510      	push	{r4, lr}
    58ce:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    58d0:	ac01      	add	r4, sp, #4
    58d2:	1c20      	adds	r0, r4, #0
    58d4:	4b07      	ldr	r3, [pc, #28]	; (58f4 <configure_extint_channel+0x28>)
    58d6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    58d8:	2337      	movs	r3, #55	; 0x37
    58da:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    58dc:	2300      	movs	r3, #0
    58de:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    58e0:	2301      	movs	r3, #1
    58e2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    58e4:	2303      	movs	r3, #3
    58e6:	72e3      	strb	r3, [r4, #11]
	//	config_extint_chan.filter_input_signal = true;
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    58e8:	2007      	movs	r0, #7
    58ea:	1c21      	adds	r1, r4, #0
    58ec:	4b02      	ldr	r3, [pc, #8]	; (58f8 <configure_extint_channel+0x2c>)
    58ee:	4798      	blx	r3
}
    58f0:	b004      	add	sp, #16
    58f2:	bd10      	pop	{r4, pc}
    58f4:	000030d9 	.word	0x000030d9
    58f8:	000030ed 	.word	0x000030ed

000058fc <configure_extint_callbacks>:
		strcpy(glb_msg, "Closed");
	new_activity = 1;
}

void configure_extint_callbacks(void)
{
    58fc:	b508      	push	{r3, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    58fe:	4805      	ldr	r0, [pc, #20]	; (5914 <configure_extint_callbacks+0x18>)
    5900:	2107      	movs	r1, #7
    5902:	2200      	movs	r2, #0
    5904:	4b04      	ldr	r3, [pc, #16]	; (5918 <configure_extint_callbacks+0x1c>)
    5906:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5908:	2007      	movs	r0, #7
    590a:	2100      	movs	r1, #0
    590c:	4b03      	ldr	r3, [pc, #12]	; (591c <configure_extint_callbacks+0x20>)
    590e:	4798      	blx	r3
}
    5910:	bd08      	pop	{r3, pc}
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	00005665 	.word	0x00005665
    5918:	00002f75 	.word	0x00002f75
    591c:	00002fa5 	.word	0x00002fa5

00005920 <configure_rtc_calendar>:

void configure_rtc_calendar(void)
{
    5920:	b510      	push	{r4, lr}
    5922:	b086      	sub	sp, #24
	/* Initialize and set time structure to default. */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5924:	aa01      	add	r2, sp, #4
    5926:	23a0      	movs	r3, #160	; 0xa0
    5928:	011b      	lsls	r3, r3, #4
    592a:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    592c:	2300      	movs	r3, #0
    592e:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    5930:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    5932:	23fa      	movs	r3, #250	; 0xfa
    5934:	00db      	lsls	r3, r3, #3
    5936:	80d3      	strh	r3, [r2, #6]
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	
	config_rtc_calendar.clock_24h     = true;
    5938:	2301      	movs	r3, #1
    593a:	7113      	strb	r3, [r2, #4]
	config_rtc_calendar.alarm[0].time = alarm.time;
    593c:	4907      	ldr	r1, [pc, #28]	; (595c <configure_rtc_calendar+0x3c>)
    593e:	ab03      	add	r3, sp, #12
    5940:	c911      	ldmia	r1!, {r0, r4}
    5942:	c311      	stmia	r3!, {r0, r4}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    5944:	2306      	movs	r3, #6
    5946:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5948:	4c05      	ldr	r4, [pc, #20]	; (5960 <configure_rtc_calendar+0x40>)
    594a:	1c20      	adds	r0, r4, #0
    594c:	4905      	ldr	r1, [pc, #20]	; (5964 <configure_rtc_calendar+0x44>)
    594e:	4b06      	ldr	r3, [pc, #24]	; (5968 <configure_rtc_calendar+0x48>)
    5950:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5952:	1c20      	adds	r0, r4, #0
    5954:	4b05      	ldr	r3, [pc, #20]	; (596c <configure_rtc_calendar+0x4c>)
    5956:	4798      	blx	r3
}
    5958:	b006      	add	sp, #24
    595a:	bd10      	pop	{r4, pc}
    595c:	20000484 	.word	0x20000484
    5960:	20000430 	.word	0x20000430
    5964:	40001400 	.word	0x40001400
    5968:	000032e5 	.word	0x000032e5
    596c:	00003205 	.word	0x00003205

00005970 <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
    5970:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    5972:	4c05      	ldr	r4, [pc, #20]	; (5988 <configure_rtc_callbacks+0x18>)
    5974:	1c20      	adds	r0, r4, #0
    5976:	4905      	ldr	r1, [pc, #20]	; (598c <configure_rtc_callbacks+0x1c>)
    5978:	2200      	movs	r2, #0
    597a:	4b05      	ldr	r3, [pc, #20]	; (5990 <configure_rtc_callbacks+0x20>)
    597c:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    597e:	1c20      	adds	r0, r4, #0
    5980:	2100      	movs	r1, #0
    5982:	4b04      	ldr	r3, [pc, #16]	; (5994 <configure_rtc_callbacks+0x24>)
    5984:	4798      	blx	r3
}
    5986:	bd10      	pop	{r4, pc}
    5988:	20000430 	.word	0x20000430
    598c:	00005a5d 	.word	0x00005a5d
    5990:	000034c1 	.word	0x000034c1
    5994:	000034e1 	.word	0x000034e1

00005998 <set_next_rtc_alarm>:
	set_next_rtc_alarm(60);
	rtc_activity = 1;
}

void set_next_rtc_alarm(uint32_t num_of_seconds)
{
    5998:	b570      	push	{r4, r5, r6, lr}
    599a:	b082      	sub	sp, #8
    599c:	1c04      	adds	r4, r0, #0
	struct rtc_calendar_time my_time;
	rtc_calendar_get_time(&rtc_instance, &my_time);
    599e:	4823      	ldr	r0, [pc, #140]	; (5a2c <set_next_rtc_alarm+0x94>)
    59a0:	4669      	mov	r1, sp
    59a2:	4b23      	ldr	r3, [pc, #140]	; (5a30 <set_next_rtc_alarm+0x98>)
    59a4:	4798      	blx	r3
	alarm.time.day = my_time.day;
    59a6:	4b23      	ldr	r3, [pc, #140]	; (5a34 <set_next_rtc_alarm+0x9c>)
    59a8:	4669      	mov	r1, sp
    59aa:	790a      	ldrb	r2, [r1, #4]
    59ac:	711a      	strb	r2, [r3, #4]
	alarm.time.hour = my_time.hour;
    59ae:	7888      	ldrb	r0, [r1, #2]
    59b0:	7098      	strb	r0, [r3, #2]
	alarm.time.minute = my_time.minute;
    59b2:	784d      	ldrb	r5, [r1, #1]
    59b4:	705d      	strb	r5, [r3, #1]
	alarm.time.month = my_time.month;
    59b6:	794a      	ldrb	r2, [r1, #5]
    59b8:	715a      	strb	r2, [r3, #5]
	alarm.time.pm = my_time.pm;
    59ba:	78ca      	ldrb	r2, [r1, #3]
    59bc:	70da      	strb	r2, [r3, #3]
	alarm.time.year = my_time.year;
    59be:	88ca      	ldrh	r2, [r1, #6]
    59c0:	80da      	strh	r2, [r3, #6]
	alarm.time.second = my_time.second;	
    59c2:	780a      	ldrb	r2, [r1, #0]
    59c4:	701a      	strb	r2, [r3, #0]
	if(num_of_seconds < 60)
    59c6:	2c3b      	cmp	r4, #59	; 0x3b
    59c8:	d809      	bhi.n	59de <set_next_rtc_alarm+0x46>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    59ca:	1c1d      	adds	r5, r3, #0
    59cc:	2301      	movs	r3, #1
    59ce:	722b      	strb	r3, [r5, #8]
		alarm.time.second += num_of_seconds;
    59d0:	1914      	adds	r4, r2, r4
		alarm.time.second = alarm.time.second % 60;
    59d2:	b2e0      	uxtb	r0, r4
    59d4:	213c      	movs	r1, #60	; 0x3c
    59d6:	4b18      	ldr	r3, [pc, #96]	; (5a38 <set_next_rtc_alarm+0xa0>)
    59d8:	4798      	blx	r3
    59da:	7029      	strb	r1, [r5, #0]
    59dc:	e01f      	b.n	5a1e <set_next_rtc_alarm+0x86>
	}
	else if(num_of_seconds < (60 * 60)) //time span is greater than an minute
    59de:	4b17      	ldr	r3, [pc, #92]	; (5a3c <set_next_rtc_alarm+0xa4>)
    59e0:	429c      	cmp	r4, r3
    59e2:	d80d      	bhi.n	5a00 <set_next_rtc_alarm+0x68>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_MIN;
    59e4:	4e13      	ldr	r6, [pc, #76]	; (5a34 <set_next_rtc_alarm+0x9c>)
    59e6:	2302      	movs	r3, #2
    59e8:	7233      	strb	r3, [r6, #8]
		alarm.time.minute += num_of_seconds / 60;
    59ea:	1c20      	adds	r0, r4, #0
    59ec:	213c      	movs	r1, #60	; 0x3c
    59ee:	4b14      	ldr	r3, [pc, #80]	; (5a40 <set_next_rtc_alarm+0xa8>)
    59f0:	4798      	blx	r3
    59f2:	1828      	adds	r0, r5, r0
		alarm.time.minute = alarm.time.minute % 60;		
    59f4:	b2c0      	uxtb	r0, r0
    59f6:	213c      	movs	r1, #60	; 0x3c
    59f8:	4b0f      	ldr	r3, [pc, #60]	; (5a38 <set_next_rtc_alarm+0xa0>)
    59fa:	4798      	blx	r3
    59fc:	7071      	strb	r1, [r6, #1]
    59fe:	e00e      	b.n	5a1e <set_next_rtc_alarm+0x86>
	}
	else if(num_of_seconds < (3600 * 24)) //time span is greater than an hour
    5a00:	4b10      	ldr	r3, [pc, #64]	; (5a44 <set_next_rtc_alarm+0xac>)
    5a02:	429c      	cmp	r4, r3
    5a04:	d807      	bhi.n	5a16 <set_next_rtc_alarm+0x7e>
	{
		alarm.mask = RTC_CALENDAR_ALARM_MASK_HOUR;
    5a06:	4c0b      	ldr	r4, [pc, #44]	; (5a34 <set_next_rtc_alarm+0x9c>)
    5a08:	2303      	movs	r3, #3
    5a0a:	7223      	strb	r3, [r4, #8]
		alarm.time.minute += num_of_seconds / 3600;
		alarm.time.minute = alarm.time.hour % (3600 * 24);		
    5a0c:	490e      	ldr	r1, [pc, #56]	; (5a48 <set_next_rtc_alarm+0xb0>)
    5a0e:	4b0f      	ldr	r3, [pc, #60]	; (5a4c <set_next_rtc_alarm+0xb4>)
    5a10:	4798      	blx	r3
    5a12:	7061      	strb	r1, [r4, #1]
    5a14:	e003      	b.n	5a1e <set_next_rtc_alarm+0x86>
	}
	else
	{
		printf("FAILURE TO SET ALARM - Value too high!"); //time span can't exceed 23:59:59 hours
    5a16:	480e      	ldr	r0, [pc, #56]	; (5a50 <set_next_rtc_alarm+0xb8>)
    5a18:	4b0e      	ldr	r3, [pc, #56]	; (5a54 <set_next_rtc_alarm+0xbc>)
    5a1a:	4798      	blx	r3
    5a1c:	e004      	b.n	5a28 <set_next_rtc_alarm+0x90>
		return;
	}
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);	
    5a1e:	4803      	ldr	r0, [pc, #12]	; (5a2c <set_next_rtc_alarm+0x94>)
    5a20:	4904      	ldr	r1, [pc, #16]	; (5a34 <set_next_rtc_alarm+0x9c>)
    5a22:	2200      	movs	r2, #0
    5a24:	4b0c      	ldr	r3, [pc, #48]	; (5a58 <set_next_rtc_alarm+0xc0>)
    5a26:	4798      	blx	r3
}
    5a28:	b002      	add	sp, #8
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
    5a2c:	20000430 	.word	0x20000430
    5a30:	00003289 	.word	0x00003289
    5a34:	20000484 	.word	0x20000484
    5a38:	00006dad 	.word	0x00006dad
    5a3c:	00000e0f 	.word	0x00000e0f
    5a40:	00006d25 	.word	0x00006d25
    5a44:	0001517f 	.word	0x0001517f
    5a48:	00015180 	.word	0x00015180
    5a4c:	00006e6d 	.word	0x00006e6d
    5a50:	000093f8 	.word	0x000093f8
    5a54:	000070b5 	.word	0x000070b5
    5a58:	000032b5 	.word	0x000032b5

00005a5c <rtc_match_callback>:
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
}

void rtc_match_callback(void)
{
    5a5c:	b508      	push	{r3, lr}
	set_next_rtc_alarm(60);
    5a5e:	203c      	movs	r0, #60	; 0x3c
    5a60:	4b02      	ldr	r3, [pc, #8]	; (5a6c <rtc_match_callback+0x10>)
    5a62:	4798      	blx	r3
	rtc_activity = 1;
    5a64:	2201      	movs	r2, #1
    5a66:	4b02      	ldr	r3, [pc, #8]	; (5a70 <rtc_match_callback+0x14>)
    5a68:	701a      	strb	r2, [r3, #0]
}
    5a6a:	bd08      	pop	{r3, pc}
    5a6c:	00005999 	.word	0x00005999
    5a70:	2000048e 	.word	0x2000048e

00005a74 <main>:
	}
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);	
}

int main(void)
{
    5a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a76:	464f      	mov	r7, r9
    5a78:	4646      	mov	r6, r8
    5a7a:	b4c0      	push	{r6, r7}
    5a7c:	b0af      	sub	sp, #188	; 0xbc
	tstrWifiInitParam param;
	int8_t ret;
	char ping_msg[64];
	struct rtc_calendar_time my_time;
	/* Initialize the board. */
	system_init();
    5a7e:	4bc7      	ldr	r3, [pc, #796]	; (5d9c <main+0x328>)
    5a80:	4798      	blx	r3

	configure_rtc_calendar();
    5a82:	4bc7      	ldr	r3, [pc, #796]	; (5da0 <main+0x32c>)
    5a84:	4798      	blx	r3
	configure_rtc_callbacks();
    5a86:	4bc7      	ldr	r3, [pc, #796]	; (5da4 <main+0x330>)
    5a88:	4798      	blx	r3
	my_time.year   = 2015;
    5a8a:	a916      	add	r1, sp, #88	; 0x58
    5a8c:	4bc6      	ldr	r3, [pc, #792]	; (5da8 <main+0x334>)
    5a8e:	80cb      	strh	r3, [r1, #6]
	my_time.month  = 1;
    5a90:	2501      	movs	r5, #1
    5a92:	714d      	strb	r5, [r1, #5]
	my_time.day    = 1;
    5a94:	710d      	strb	r5, [r1, #4]
	my_time.hour   = 0;
    5a96:	2400      	movs	r4, #0
    5a98:	2600      	movs	r6, #0
    5a9a:	708c      	strb	r4, [r1, #2]
	my_time.minute = 0;
    5a9c:	704c      	strb	r4, [r1, #1]
	my_time.second = 0;
    5a9e:	700c      	strb	r4, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &my_time);
    5aa0:	4fc2      	ldr	r7, [pc, #776]	; (5dac <main+0x338>)
    5aa2:	1c38      	adds	r0, r7, #0
    5aa4:	4bc2      	ldr	r3, [pc, #776]	; (5db0 <main+0x33c>)
    5aa6:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    5aa8:	1c38      	adds	r0, r7, #0
    5aaa:	4bc2      	ldr	r3, [pc, #776]	; (5db4 <main+0x340>)
    5aac:	4798      	blx	r3
	set_next_rtc_alarm(60);
    5aae:	203c      	movs	r0, #60	; 0x3c
    5ab0:	4bc1      	ldr	r3, [pc, #772]	; (5db8 <main+0x344>)
    5ab2:	4798      	blx	r3
	
	configure_extint_channel();
    5ab4:	4bc1      	ldr	r3, [pc, #772]	; (5dbc <main+0x348>)
    5ab6:	4798      	blx	r3
	configure_extint_callbacks();
    5ab8:	4bc1      	ldr	r3, [pc, #772]	; (5dc0 <main+0x34c>)
    5aba:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    5abc:	4bc1      	ldr	r3, [pc, #772]	; (5dc4 <main+0x350>)
    5abe:	701d      	strb	r5, [r3, #0]
    5ac0:	f3bf 8f5f 	dmb	sy
    5ac4:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5ac6:	aa06      	add	r2, sp, #24
    5ac8:	2380      	movs	r3, #128	; 0x80
    5aca:	05db      	lsls	r3, r3, #23
    5acc:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5ace:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5ad0:	23ff      	movs	r3, #255	; 0xff
    5ad2:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    5ad4:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5ad6:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5ad8:	2324      	movs	r3, #36	; 0x24
    5ada:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    5adc:	2325      	movs	r3, #37	; 0x25
    5ade:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    5ae0:	2326      	movs	r3, #38	; 0x26
    5ae2:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    5ae4:	2327      	movs	r3, #39	; 0x27
    5ae6:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    5ae8:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5aea:	232c      	movs	r3, #44	; 0x2c
    5aec:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    5aee:	232d      	movs	r3, #45	; 0x2d
    5af0:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5af2:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5af4:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5af6:	2300      	movs	r3, #0
    5af8:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    5afa:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    5afc:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    5afe:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                        = 19;
    5b00:	2313      	movs	r3, #19
    5b02:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    5b04:	7756      	strb	r6, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5b06:	23c4      	movs	r3, #196	; 0xc4
    5b08:	039b      	lsls	r3, r3, #14
    5b0a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5b0c:	2301      	movs	r3, #1
    5b0e:	425b      	negs	r3, r3
    5b10:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5b12:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5b14:	4bac      	ldr	r3, [pc, #688]	; (5dc8 <main+0x354>)
    5b16:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5b18:	4bac      	ldr	r3, [pc, #688]	; (5dcc <main+0x358>)
    5b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5b1c:	23e1      	movs	r3, #225	; 0xe1
    5b1e:	025b      	lsls	r3, r3, #9
    5b20:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5b22:	4cab      	ldr	r4, [pc, #684]	; (5dd0 <main+0x35c>)
    5b24:	4bab      	ldr	r3, [pc, #684]	; (5dd4 <main+0x360>)
    5b26:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5b28:	49ab      	ldr	r1, [pc, #684]	; (5dd8 <main+0x364>)
    5b2a:	4bac      	ldr	r3, [pc, #688]	; (5ddc <main+0x368>)
    5b2c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5b2e:	49ac      	ldr	r1, [pc, #688]	; (5de0 <main+0x36c>)
    5b30:	4bac      	ldr	r3, [pc, #688]	; (5de4 <main+0x370>)
    5b32:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    5b34:	1c20      	adds	r0, r4, #0
    5b36:	49ac      	ldr	r1, [pc, #688]	; (5de8 <main+0x374>)
    5b38:	4bac      	ldr	r3, [pc, #688]	; (5dec <main+0x378>)
    5b3a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5b3c:	4fac      	ldr	r7, [pc, #688]	; (5df0 <main+0x37c>)
    5b3e:	683b      	ldr	r3, [r7, #0]
    5b40:	6898      	ldr	r0, [r3, #8]
    5b42:	2100      	movs	r1, #0
    5b44:	4eab      	ldr	r6, [pc, #684]	; (5df4 <main+0x380>)
    5b46:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5b48:	683b      	ldr	r3, [r7, #0]
    5b4a:	6858      	ldr	r0, [r3, #4]
    5b4c:	2100      	movs	r1, #0
    5b4e:	47b0      	blx	r6

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	/* Register USART callback for receiving user input. */
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    5b50:	1c20      	adds	r0, r4, #0
    5b52:	49a9      	ldr	r1, [pc, #676]	; (5df8 <main+0x384>)
    5b54:	2201      	movs	r2, #1
    5b56:	4ba9      	ldr	r3, [pc, #676]	; (5dfc <main+0x388>)
    5b58:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5b5a:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5b5c:	1c30      	adds	r0, r6, #0
    5b5e:	4ba8      	ldr	r3, [pc, #672]	; (5e00 <main+0x38c>)
    5b60:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5b62:	231f      	movs	r3, #31
    5b64:	4018      	ands	r0, r3
    5b66:	4085      	lsls	r5, r0
    5b68:	4ba6      	ldr	r3, [pc, #664]	; (5e04 <main+0x390>)
    5b6a:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5b6c:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5b6e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5b70:	2b00      	cmp	r3, #0
    5b72:	d1fc      	bne.n	5b6e <main+0xfa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5b74:	6832      	ldr	r2, [r6, #0]
    5b76:	2302      	movs	r3, #2
    5b78:	4313      	orrs	r3, r2
    5b7a:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();

	/* Output example information */
	printf(STRING_HEADER);
    5b7c:	48a2      	ldr	r0, [pc, #648]	; (5e08 <main+0x394>)
    5b7e:	4ba3      	ldr	r3, [pc, #652]	; (5e0c <main+0x398>)
    5b80:	4798      	blx	r3
}

static void configure_timer(void)
{
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    5b82:	a806      	add	r0, sp, #24
    5b84:	4ba2      	ldr	r3, [pc, #648]	; (5e10 <main+0x39c>)
    5b86:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    5b88:	4ca2      	ldr	r4, [pc, #648]	; (5e14 <main+0x3a0>)
    5b8a:	1c20      	adds	r0, r4, #0
    5b8c:	a906      	add	r1, sp, #24
    5b8e:	4ba2      	ldr	r3, [pc, #648]	; (5e18 <main+0x3a4>)
    5b90:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    5b92:	1c20      	adds	r0, r4, #0
    5b94:	4ba1      	ldr	r3, [pc, #644]	; (5e1c <main+0x3a8>)
    5b96:	4798      	blx	r3
static void configure_mqtt(void)
{
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    5b98:	a806      	add	r0, sp, #24
    5b9a:	4ba1      	ldr	r3, [pc, #644]	; (5e20 <main+0x3ac>)
    5b9c:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    5b9e:	9407      	str	r4, [sp, #28]
	mqtt_conf.recv_buffer = mqtt_buffer;
    5ba0:	4ba0      	ldr	r3, [pc, #640]	; (5e24 <main+0x3b0>)
    5ba2:	9309      	str	r3, [sp, #36]	; 0x24
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    5ba4:	2380      	movs	r3, #128	; 0x80
    5ba6:	930a      	str	r3, [sp, #40]	; 0x28

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    5ba8:	489f      	ldr	r0, [pc, #636]	; (5e28 <main+0x3b4>)
    5baa:	a906      	add	r1, sp, #24
    5bac:	4b9f      	ldr	r3, [pc, #636]	; (5e2c <main+0x3b8>)
    5bae:	4798      	blx	r3
    5bb0:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5bb2:	da03      	bge.n	5bbc <main+0x148>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    5bb4:	489e      	ldr	r0, [pc, #632]	; (5e30 <main+0x3bc>)
    5bb6:	4b9f      	ldr	r3, [pc, #636]	; (5e34 <main+0x3c0>)
    5bb8:	4798      	blx	r3
    5bba:	e7fe      	b.n	5bba <main+0x146>
		while (1);
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    5bbc:	489a      	ldr	r0, [pc, #616]	; (5e28 <main+0x3b4>)
    5bbe:	499e      	ldr	r1, [pc, #632]	; (5e38 <main+0x3c4>)
    5bc0:	4b9e      	ldr	r3, [pc, #632]	; (5e3c <main+0x3c8>)
    5bc2:	4798      	blx	r3
    5bc4:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5bc6:	da03      	bge.n	5bd0 <main+0x15c>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    5bc8:	489d      	ldr	r0, [pc, #628]	; (5e40 <main+0x3cc>)
    5bca:	4b9a      	ldr	r3, [pc, #616]	; (5e34 <main+0x3c0>)
    5bcc:	4798      	blx	r3
    5bce:	e7fe      	b.n	5bce <main+0x15a>
	/* Initialize the Timer. */
	configure_timer();

	/* Initialize the MQTT service. */
	configure_mqtt();
	mqtt_connection_state = CONNECTING;
    5bd0:	2201      	movs	r2, #1
    5bd2:	4b9c      	ldr	r3, [pc, #624]	; (5e44 <main+0x3d0>)
    5bd4:	701a      	strb	r2, [r3, #0]

	/* Initialize the BSP. */
	nm_bsp_init();
    5bd6:	4b9c      	ldr	r3, [pc, #624]	; (5e48 <main+0x3d4>)
    5bd8:	4798      	blx	r3

	/* Setup user name first */
	strcpy(mqtt_user, "reed_switch");
    5bda:	4b9c      	ldr	r3, [pc, #624]	; (5e4c <main+0x3d8>)
    5bdc:	4a9c      	ldr	r2, [pc, #624]	; (5e50 <main+0x3dc>)
    5bde:	1c19      	adds	r1, r3, #0
    5be0:	ca31      	ldmia	r2!, {r0, r4, r5}
    5be2:	c131      	stmia	r1!, {r0, r4, r5}
	sprintf(glb_topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user);
    5be4:	4c9b      	ldr	r4, [pc, #620]	; (5e54 <main+0x3e0>)
    5be6:	1c20      	adds	r0, r4, #0
    5be8:	499b      	ldr	r1, [pc, #620]	; (5e58 <main+0x3e4>)
    5bea:	4a9c      	ldr	r2, [pc, #624]	; (5e5c <main+0x3e8>)
    5bec:	4d9c      	ldr	r5, [pc, #624]	; (5e60 <main+0x3ec>)
    5bee:	47a8      	blx	r5
	printf("Publishing to topic: %s\r\n", glb_topic);
    5bf0:	489c      	ldr	r0, [pc, #624]	; (5e64 <main+0x3f0>)
    5bf2:	1c21      	adds	r1, r4, #0
    5bf4:	4b8f      	ldr	r3, [pc, #572]	; (5e34 <main+0x3c0>)
    5bf6:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    5bf8:	a828      	add	r0, sp, #160	; 0xa0
    5bfa:	2100      	movs	r1, #0
    5bfc:	2218      	movs	r2, #24
    5bfe:	4b9a      	ldr	r3, [pc, #616]	; (5e68 <main+0x3f4>)
    5c00:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    5c02:	4b9a      	ldr	r3, [pc, #616]	; (5e6c <main+0x3f8>)
    5c04:	9328      	str	r3, [sp, #160]	; 0xa0
	ret = m2m_wifi_init(&param);
    5c06:	a828      	add	r0, sp, #160	; 0xa0
    5c08:	4b99      	ldr	r3, [pc, #612]	; (5e70 <main+0x3fc>)
    5c0a:	4798      	blx	r3
    5c0c:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    5c0e:	d003      	beq.n	5c18 <main+0x1a4>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    5c10:	4898      	ldr	r0, [pc, #608]	; (5e74 <main+0x400>)
    5c12:	4b88      	ldr	r3, [pc, #544]	; (5e34 <main+0x3c0>)
    5c14:	4798      	blx	r3
    5c16:	e7fe      	b.n	5c16 <main+0x1a2>
		while (1);
	}

	/* Initialize socket interface. */
	socketInit();
    5c18:	4b97      	ldr	r3, [pc, #604]	; (5e78 <main+0x404>)
    5c1a:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    5c1c:	4897      	ldr	r0, [pc, #604]	; (5e7c <main+0x408>)
    5c1e:	4998      	ldr	r1, [pc, #608]	; (5e80 <main+0x40c>)
    5c20:	4b98      	ldr	r3, [pc, #608]	; (5e84 <main+0x410>)
    5c22:	4798      	blx	r3
		printf("M2M_PS_MANUAL\r\n");
		m2m_wifi_set_sleep_mode(MAIN_PS_SLEEP_MODE, 1);
	} 
	else if (MAIN_PS_SLEEP_MODE == M2M_PS_DEEP_AUTOMATIC) 
	{
		printf("M2M_PS_DEEP_AUTOMATIC\r\n");
    5c24:	4898      	ldr	r0, [pc, #608]	; (5e88 <main+0x414>)
    5c26:	4b79      	ldr	r3, [pc, #484]	; (5e0c <main+0x398>)
    5c28:	4798      	blx	r3
		tstrM2mLsnInt strM2mLsnInt;
		m2m_wifi_set_sleep_mode(M2M_PS_DEEP_AUTOMATIC, 1);
    5c2a:	2003      	movs	r0, #3
    5c2c:	2101      	movs	r1, #1
    5c2e:	4b97      	ldr	r3, [pc, #604]	; (5e8c <main+0x418>)
    5c30:	4798      	blx	r3
		strM2mLsnInt.u16LsnInt = M2M_LISTEN_INTERVAL;
    5c32:	a806      	add	r0, sp, #24
    5c34:	230a      	movs	r3, #10
    5c36:	8003      	strh	r3, [r0, #0]
		m2m_wifi_set_lsn_int(&strM2mLsnInt);
    5c38:	4b95      	ldr	r3, [pc, #596]	; (5e90 <main+0x41c>)
    5c3a:	4798      	blx	r3
	const enum system_sleepmode sleep_mode)
{
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    5c3c:	4b95      	ldr	r3, [pc, #596]	; (5e94 <main+0x420>)
    5c3e:	6859      	ldr	r1, [r3, #4]
    5c40:	22c0      	movs	r2, #192	; 0xc0
    5c42:	0092      	lsls	r2, r2, #2
    5c44:	430a      	orrs	r2, r1
    5c46:	605a      	str	r2, [r3, #4]

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5c48:	4b93      	ldr	r3, [pc, #588]	; (5e98 <main+0x424>)
    5c4a:	691a      	ldr	r2, [r3, #16]
    5c4c:	2104      	movs	r1, #4
    5c4e:	438a      	bics	r2, r1
    5c50:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    5c52:	2200      	movs	r2, #0
    5c54:	4b91      	ldr	r3, [pc, #580]	; (5e9c <main+0x428>)
    5c56:	705a      	strb	r2, [r3, #1]

	
	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_0);
	
	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    5c58:	23ff      	movs	r3, #255	; 0xff
    5c5a:	9300      	str	r3, [sp, #0]
    5c5c:	4890      	ldr	r0, [pc, #576]	; (5ea0 <main+0x42c>)
    5c5e:	2106      	movs	r1, #6
    5c60:	2202      	movs	r2, #2
    5c62:	4b90      	ldr	r3, [pc, #576]	; (5ea4 <main+0x430>)
    5c64:	4c90      	ldr	r4, [pc, #576]	; (5ea8 <main+0x434>)
    5c66:	47a0      	blx	r4
	while (1) 
	{
		if (MAIN_PS_SLEEP_MODE == M2M_PS_MANUAL)
			m2m_wifi_request_sleep(1000);
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    5c68:	4e90      	ldr	r6, [pc, #576]	; (5eac <main+0x438>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    5c6a:	4d6a      	ldr	r5, [pc, #424]	; (5e14 <main+0x3a0>)
    5c6c:	4c90      	ldr	r4, [pc, #576]	; (5eb0 <main+0x43c>)
	while (1) 
	{
		if (MAIN_PS_SLEEP_MODE == M2M_PS_MANUAL)
			m2m_wifi_request_sleep(1000);
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    5c6e:	2000      	movs	r0, #0
    5c70:	47b0      	blx	r6
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    5c72:	1c28      	adds	r0, r5, #0
    5c74:	47a0      	blx	r4
		switch(mqtt_connection_state)
    5c76:	4b73      	ldr	r3, [pc, #460]	; (5e44 <main+0x3d0>)
    5c78:	781b      	ldrb	r3, [r3, #0]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d002      	beq.n	5c84 <main+0x210>
    5c7e:	2b02      	cmp	r3, #2
    5c80:	d00b      	beq.n	5c9a <main+0x226>
    5c82:	e7f4      	b.n	5c6e <main+0x1fa>
		{
			case DISCONNECTED:
				mqtt_connect(&mqtt_inst, main_mqtt_broker);
    5c84:	4868      	ldr	r0, [pc, #416]	; (5e28 <main+0x3b4>)
    5c86:	498b      	ldr	r1, [pc, #556]	; (5eb4 <main+0x440>)
    5c88:	4b8b      	ldr	r3, [pc, #556]	; (5eb8 <main+0x444>)
    5c8a:	4798      	blx	r3
				printf("Connecting to MQTT Broker...\r\n");
    5c8c:	488b      	ldr	r0, [pc, #556]	; (5ebc <main+0x448>)
    5c8e:	4b5f      	ldr	r3, [pc, #380]	; (5e0c <main+0x398>)
    5c90:	4798      	blx	r3
				//TODO: sleep here...
				mqtt_connection_state = CONNECTING;
    5c92:	2201      	movs	r2, #1
    5c94:	4b6b      	ldr	r3, [pc, #428]	; (5e44 <main+0x3d0>)
    5c96:	701a      	strb	r2, [r3, #0]
				break;
    5c98:	e7e9      	b.n	5c6e <main+0x1fa>
				
			case CONNECTED:
				if(new_activity)
    5c9a:	4b89      	ldr	r3, [pc, #548]	; (5ec0 <main+0x44c>)
    5c9c:	781b      	ldrb	r3, [r3, #0]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d02d      	beq.n	5cfe <main+0x28a>
				{
					new_activity = 0;
    5ca2:	2000      	movs	r0, #0
    5ca4:	4680      	mov	r8, r0
    5ca6:	4b86      	ldr	r3, [pc, #536]	; (5ec0 <main+0x44c>)
    5ca8:	7018      	strb	r0, [r3, #0]
					rtc_calendar_get_time(&rtc_instance, &my_time);
    5caa:	af16      	add	r7, sp, #88	; 0x58
    5cac:	483f      	ldr	r0, [pc, #252]	; (5dac <main+0x338>)
    5cae:	1c39      	adds	r1, r7, #0
    5cb0:	4b84      	ldr	r3, [pc, #528]	; (5ec4 <main+0x450>)
    5cb2:	4798      	blx	r3
					sprintf(ping_msg, "%s @ %d/%d/%d %d:%d:%d", glb_msg, my_time.day, my_time.month, my_time.year, my_time.hour, my_time.minute, my_time.second);
    5cb4:	4b84      	ldr	r3, [pc, #528]	; (5ec8 <main+0x454>)
    5cb6:	4699      	mov	r9, r3
    5cb8:	793b      	ldrb	r3, [r7, #4]
    5cba:	797a      	ldrb	r2, [r7, #5]
    5cbc:	9200      	str	r2, [sp, #0]
    5cbe:	88fa      	ldrh	r2, [r7, #6]
    5cc0:	9201      	str	r2, [sp, #4]
    5cc2:	78ba      	ldrb	r2, [r7, #2]
    5cc4:	9202      	str	r2, [sp, #8]
    5cc6:	787a      	ldrb	r2, [r7, #1]
    5cc8:	9203      	str	r2, [sp, #12]
    5cca:	783a      	ldrb	r2, [r7, #0]
    5ccc:	9204      	str	r2, [sp, #16]
    5cce:	a818      	add	r0, sp, #96	; 0x60
    5cd0:	497e      	ldr	r1, [pc, #504]	; (5ecc <main+0x458>)
    5cd2:	464a      	mov	r2, r9
    5cd4:	4f62      	ldr	r7, [pc, #392]	; (5e60 <main+0x3ec>)
    5cd6:	47b8      	blx	r7
					printf("Sending: '%s' to %s\n", glb_msg, MAIN_CHAT_TOPIC);
    5cd8:	487d      	ldr	r0, [pc, #500]	; (5ed0 <main+0x45c>)
    5cda:	4649      	mov	r1, r9
    5cdc:	4a5f      	ldr	r2, [pc, #380]	; (5e5c <main+0x3e8>)
    5cde:	4b55      	ldr	r3, [pc, #340]	; (5e34 <main+0x3c0>)
    5ce0:	4798      	blx	r3
					mqtt_publish(&mqtt_inst, glb_topic, ping_msg, strlen(ping_msg), 0, 1);
    5ce2:	a818      	add	r0, sp, #96	; 0x60
    5ce4:	4b7b      	ldr	r3, [pc, #492]	; (5ed4 <main+0x460>)
    5ce6:	4798      	blx	r3
    5ce8:	1c03      	adds	r3, r0, #0
    5cea:	4640      	mov	r0, r8
    5cec:	9000      	str	r0, [sp, #0]
    5cee:	2201      	movs	r2, #1
    5cf0:	9201      	str	r2, [sp, #4]
    5cf2:	484d      	ldr	r0, [pc, #308]	; (5e28 <main+0x3b4>)
    5cf4:	4957      	ldr	r1, [pc, #348]	; (5e54 <main+0x3e0>)
    5cf6:	aa18      	add	r2, sp, #96	; 0x60
    5cf8:	4f77      	ldr	r7, [pc, #476]	; (5ed8 <main+0x464>)
    5cfa:	47b8      	blx	r7
    5cfc:	e7b7      	b.n	5c6e <main+0x1fa>
				}
				else if (rtc_activity)
    5cfe:	4b77      	ldr	r3, [pc, #476]	; (5edc <main+0x468>)
    5d00:	781b      	ldrb	r3, [r3, #0]
    5d02:	2b00      	cmp	r3, #0
    5d04:	d028      	beq.n	5d58 <main+0x2e4>
				{
					rtc_activity = 0;
    5d06:	2200      	movs	r2, #0
    5d08:	4690      	mov	r8, r2
    5d0a:	4b74      	ldr	r3, [pc, #464]	; (5edc <main+0x468>)
    5d0c:	701a      	strb	r2, [r3, #0]
					/* Do something on RTC alarm match here */
					rtc_calendar_get_time(&rtc_instance, &my_time);
    5d0e:	af16      	add	r7, sp, #88	; 0x58
    5d10:	4826      	ldr	r0, [pc, #152]	; (5dac <main+0x338>)
    5d12:	1c39      	adds	r1, r7, #0
    5d14:	4b6b      	ldr	r3, [pc, #428]	; (5ec4 <main+0x450>)
    5d16:	4798      	blx	r3
					sprintf(ping_msg, "Ping @ %d/%d/%d %d:%d:%d", my_time.month, my_time.day, my_time.year, my_time.hour, my_time.minute, my_time.second);
    5d18:	797a      	ldrb	r2, [r7, #5]
    5d1a:	793b      	ldrb	r3, [r7, #4]
    5d1c:	88f9      	ldrh	r1, [r7, #6]
    5d1e:	9100      	str	r1, [sp, #0]
    5d20:	78b9      	ldrb	r1, [r7, #2]
    5d22:	9101      	str	r1, [sp, #4]
    5d24:	7879      	ldrb	r1, [r7, #1]
    5d26:	9102      	str	r1, [sp, #8]
    5d28:	7839      	ldrb	r1, [r7, #0]
    5d2a:	9103      	str	r1, [sp, #12]
    5d2c:	a818      	add	r0, sp, #96	; 0x60
    5d2e:	496c      	ldr	r1, [pc, #432]	; (5ee0 <main+0x46c>)
    5d30:	4f4b      	ldr	r7, [pc, #300]	; (5e60 <main+0x3ec>)
    5d32:	47b8      	blx	r7
					printf("Sending ping message: %s", ping_msg);
    5d34:	486b      	ldr	r0, [pc, #428]	; (5ee4 <main+0x470>)
    5d36:	a918      	add	r1, sp, #96	; 0x60
    5d38:	4b3e      	ldr	r3, [pc, #248]	; (5e34 <main+0x3c0>)
    5d3a:	4798      	blx	r3
					mqtt_publish(&mqtt_inst, "bs/monitor/ping", ping_msg, strlen(ping_msg), 0, 1);
    5d3c:	a818      	add	r0, sp, #96	; 0x60
    5d3e:	4b65      	ldr	r3, [pc, #404]	; (5ed4 <main+0x460>)
    5d40:	4798      	blx	r3
    5d42:	1c03      	adds	r3, r0, #0
    5d44:	4642      	mov	r2, r8
    5d46:	9200      	str	r2, [sp, #0]
    5d48:	2201      	movs	r2, #1
    5d4a:	9201      	str	r2, [sp, #4]
    5d4c:	4836      	ldr	r0, [pc, #216]	; (5e28 <main+0x3b4>)
    5d4e:	4966      	ldr	r1, [pc, #408]	; (5ee8 <main+0x474>)
    5d50:	aa18      	add	r2, sp, #96	; 0x60
    5d52:	4f61      	ldr	r7, [pc, #388]	; (5ed8 <main+0x464>)
    5d54:	47b8      	blx	r7
    5d56:	e78a      	b.n	5c6e <main+0x1fa>
				}
				else if(1)
				{
					if(mqtt_disconnect(&mqtt_inst, 1) == 0)
    5d58:	4833      	ldr	r0, [pc, #204]	; (5e28 <main+0x3b4>)
    5d5a:	2101      	movs	r1, #1
    5d5c:	4b63      	ldr	r3, [pc, #396]	; (5eec <main+0x478>)
    5d5e:	4798      	blx	r3
    5d60:	2800      	cmp	r0, #0
    5d62:	d106      	bne.n	5d72 <main+0x2fe>
					{
						printf("Disconnecting from MQTT Broker...\r\n");
    5d64:	4862      	ldr	r0, [pc, #392]	; (5ef0 <main+0x47c>)
    5d66:	4b29      	ldr	r3, [pc, #164]	; (5e0c <main+0x398>)
    5d68:	4798      	blx	r3
						mqtt_connection_state = DISCONNECTED;	
    5d6a:	2200      	movs	r2, #0
    5d6c:	4b35      	ldr	r3, [pc, #212]	; (5e44 <main+0x3d0>)
    5d6e:	701a      	strb	r2, [r3, #0]
    5d70:	e002      	b.n	5d78 <main+0x304>
					}
					else
						printf("Disconnection from broker failed...\r\n");
    5d72:	4860      	ldr	r0, [pc, #384]	; (5ef4 <main+0x480>)
    5d74:	4b25      	ldr	r3, [pc, #148]	; (5e0c <main+0x398>)
    5d76:	4798      	blx	r3
					printf("---Going to sleep---\r\n");
    5d78:	485f      	ldr	r0, [pc, #380]	; (5ef8 <main+0x484>)
    5d7a:	4b24      	ldr	r3, [pc, #144]	; (5e0c <main+0x398>)
    5d7c:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    5d7e:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    5d82:	bf30      	wfi
					system_sleep();
					while((rtc_activity == 0) && (new_activity == 0));
    5d84:	4a55      	ldr	r2, [pc, #340]	; (5edc <main+0x468>)
    5d86:	494e      	ldr	r1, [pc, #312]	; (5ec0 <main+0x44c>)
    5d88:	7813      	ldrb	r3, [r2, #0]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d102      	bne.n	5d94 <main+0x320>
    5d8e:	780b      	ldrb	r3, [r1, #0]
    5d90:	2b00      	cmp	r3, #0
    5d92:	d0f9      	beq.n	5d88 <main+0x314>
					printf("Woke up!\n\r");
    5d94:	4859      	ldr	r0, [pc, #356]	; (5efc <main+0x488>)
    5d96:	4b27      	ldr	r3, [pc, #156]	; (5e34 <main+0x3c0>)
    5d98:	4798      	blx	r3
    5d9a:	e768      	b.n	5c6e <main+0x1fa>
    5d9c:	00004be1 	.word	0x00004be1
    5da0:	00005921 	.word	0x00005921
    5da4:	00005971 	.word	0x00005971
    5da8:	000007df 	.word	0x000007df
    5dac:	20000430 	.word	0x20000430
    5db0:	00003271 	.word	0x00003271
    5db4:	000033a1 	.word	0x000033a1
    5db8:	00005999 	.word	0x00005999
    5dbc:	000058cd 	.word	0x000058cd
    5dc0:	000058fd 	.word	0x000058fd
    5dc4:	20000010 	.word	0x20000010
    5dc8:	002a0003 	.word	0x002a0003
    5dcc:	002b0003 	.word	0x002b0003
    5dd0:	20000110 	.word	0x20000110
    5dd4:	2000042c 	.word	0x2000042c
    5dd8:	000057e9 	.word	0x000057e9
    5ddc:	20000428 	.word	0x20000428
    5de0:	000057bd 	.word	0x000057bd
    5de4:	20000424 	.word	0x20000424
    5de8:	42001800 	.word	0x42001800
    5dec:	00003e75 	.word	0x00003e75
    5df0:	20000074 	.word	0x20000074
    5df4:	0000720d 	.word	0x0000720d
    5df8:	00005645 	.word	0x00005645
    5dfc:	00004221 	.word	0x00004221
    5e00:	00003975 	.word	0x00003975
    5e04:	e000e100 	.word	0xe000e100
    5e08:	00009420 	.word	0x00009420
    5e0c:	000071d5 	.word	0x000071d5
    5e10:	000054a9 	.word	0x000054a9
    5e14:	20000490 	.word	0x20000490
    5e18:	000054b5 	.word	0x000054b5
    5e1c:	00005561 	.word	0x00005561
    5e20:	00005fb1 	.word	0x00005fb1
    5e24:	200001c8 	.word	0x200001c8
    5e28:	20000248 	.word	0x20000248
    5e2c:	00005fd5 	.word	0x00005fd5
    5e30:	00009478 	.word	0x00009478
    5e34:	000070b5 	.word	0x000070b5
    5e38:	00005801 	.word	0x00005801
    5e3c:	00006061 	.word	0x00006061
    5e40:	000094ac 	.word	0x000094ac
    5e44:	200004e8 	.word	0x200004e8
    5e48:	000001d5 	.word	0x000001d5
    5e4c:	20000148 	.word	0x20000148
    5e50:	000094e0 	.word	0x000094e0
    5e54:	200004ec 	.word	0x200004ec
    5e58:	000094ec 	.word	0x000094ec
    5e5c:	000094f4 	.word	0x000094f4
    5e60:	0000732d 	.word	0x0000732d
    5e64:	00009500 	.word	0x00009500
    5e68:	00006f6d 	.word	0x00006f6d
    5e6c:	000056c1 	.word	0x000056c1
    5e70:	00000fdd 	.word	0x00000fdd
    5e74:	0000951c 	.word	0x0000951c
    5e78:	00002a45 	.word	0x00002a45
    5e7c:	000056b5 	.word	0x000056b5
    5e80:	000056a9 	.word	0x000056a9
    5e84:	00002a89 	.word	0x00002a89
    5e88:	00009544 	.word	0x00009544
    5e8c:	00001261 	.word	0x00001261
    5e90:	00001241 	.word	0x00001241
    5e94:	41004000 	.word	0x41004000
    5e98:	e000ed00 	.word	0xe000ed00
    5e9c:	40000400 	.word	0x40000400
    5ea0:	000092ec 	.word	0x000092ec
    5ea4:	000092f4 	.word	0x000092f4
    5ea8:	00001221 	.word	0x00001221
    5eac:	00001031 	.word	0x00001031
    5eb0:	000055ed 	.word	0x000055ed
    5eb4:	00009200 	.word	0x00009200
    5eb8:	000060c5 	.word	0x000060c5
    5ebc:	0000955c 	.word	0x0000955c
    5ec0:	2000048f 	.word	0x2000048f
    5ec4:	00003289 	.word	0x00003289
    5ec8:	20000444 	.word	0x20000444
    5ecc:	0000957c 	.word	0x0000957c
    5ed0:	00009594 	.word	0x00009594
    5ed4:	00007395 	.word	0x00007395
    5ed8:	00006489 	.word	0x00006489
    5edc:	2000048e 	.word	0x2000048e
    5ee0:	000095ac 	.word	0x000095ac
    5ee4:	000095c8 	.word	0x000095c8
    5ee8:	000095e4 	.word	0x000095e4
    5eec:	000068d1 	.word	0x000068d1
    5ef0:	000095f4 	.word	0x000095f4
    5ef4:	00009618 	.word	0x00009618
    5ef8:	00009640 	.word	0x00009640
    5efc:	00009658 	.word	0x00009658

00005f00 <_hwerr_to_stderr>:
    5f00:	1c03      	adds	r3, r0, #0
    5f02:	300e      	adds	r0, #14
    5f04:	b500      	push	{lr}
    5f06:	280e      	cmp	r0, #14
    5f08:	d819      	bhi.n	5f3e <_hwerr_to_stderr+0x3e>
    5f0a:	f000 ff01 	bl	6d10 <__gnu_thumb1_case_uqi>
    5f0e:	1416      	.short	0x1416
    5f10:	1b181012 	.word	0x1b181012
    5f14:	180c0e18 	.word	0x180c0e18
    5f18:	1d0a0e0e 	.word	0x1d0a0e0e
    5f1c:	08          	.byte	0x08
    5f1d:	00          	.byte	0x00
    5f1e:	2000      	movs	r0, #0
    5f20:	e014      	b.n	5f4c <_hwerr_to_stderr+0x4c>
    5f22:	2070      	movs	r0, #112	; 0x70
    5f24:	e011      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f26:	2016      	movs	r0, #22
    5f28:	e00f      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f2a:	200c      	movs	r0, #12
    5f2c:	e00d      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f2e:	2079      	movs	r0, #121	; 0x79
    5f30:	e00b      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f32:	2068      	movs	r0, #104	; 0x68
    5f34:	e009      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f36:	200b      	movs	r0, #11
    5f38:	e007      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f3a:	2010      	movs	r0, #16
    5f3c:	e005      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f3e:	2000      	movs	r0, #0
    5f40:	4283      	cmp	r3, r0
    5f42:	da03      	bge.n	5f4c <_hwerr_to_stderr+0x4c>
    5f44:	2005      	movs	r0, #5
    5f46:	e000      	b.n	5f4a <_hwerr_to_stderr+0x4a>
    5f48:	2002      	movs	r0, #2
    5f4a:	4240      	negs	r0, r0
    5f4c:	bd00      	pop	{pc}
	...

00005f50 <_mqtt_send_wait>:
    5f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f52:	1c04      	adds	r4, r0, #0
    5f54:	3443      	adds	r4, #67	; 0x43
    5f56:	7823      	ldrb	r3, [r4, #0]
    5f58:	1c05      	adds	r5, r0, #0
    5f5a:	07d8      	lsls	r0, r3, #31
    5f5c:	d51c      	bpl.n	5f98 <_mqtt_send_wait+0x48>
    5f5e:	2604      	movs	r6, #4
    5f60:	4333      	orrs	r3, r6
    5f62:	7023      	strb	r3, [r4, #0]
    5f64:	2002      	movs	r0, #2
    5f66:	5628      	ldrsb	r0, [r5, r0]
    5f68:	b292      	uxth	r2, r2
    5f6a:	2300      	movs	r3, #0
    5f6c:	4f0c      	ldr	r7, [pc, #48]	; (5fa0 <_mqtt_send_wait+0x50>)
    5f6e:	47b8      	blx	r7
    5f70:	2800      	cmp	r0, #0
    5f72:	da05      	bge.n	5f80 <_mqtt_send_wait+0x30>
    5f74:	7823      	ldrb	r3, [r4, #0]
    5f76:	43b3      	bics	r3, r6
    5f78:	7023      	strb	r3, [r4, #0]
    5f7a:	4b0a      	ldr	r3, [pc, #40]	; (5fa4 <_mqtt_send_wait+0x54>)
    5f7c:	4798      	blx	r3
    5f7e:	e00d      	b.n	5f9c <_mqtt_send_wait+0x4c>
    5f80:	7822      	ldrb	r2, [r4, #0]
    5f82:	2314      	movs	r3, #20
    5f84:	4013      	ands	r3, r2
    5f86:	2000      	movs	r0, #0
    5f88:	2b04      	cmp	r3, #4
    5f8a:	d107      	bne.n	5f9c <_mqtt_send_wait+0x4c>
    5f8c:	4b06      	ldr	r3, [pc, #24]	; (5fa8 <_mqtt_send_wait+0x58>)
    5f8e:	4798      	blx	r3
    5f90:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    5f92:	4b06      	ldr	r3, [pc, #24]	; (5fac <_mqtt_send_wait+0x5c>)
    5f94:	4798      	blx	r3
    5f96:	e7f3      	b.n	5f80 <_mqtt_send_wait+0x30>
    5f98:	2001      	movs	r0, #1
    5f9a:	4240      	negs	r0, r0
    5f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	00002bfd 	.word	0x00002bfd
    5fa4:	00005f01 	.word	0x00005f01
    5fa8:	00001031 	.word	0x00001031
    5fac:	000055ed 	.word	0x000055ed

00005fb0 <mqtt_get_config_defaults>:
    5fb0:	4b07      	ldr	r3, [pc, #28]	; (5fd0 <mqtt_get_config_defaults+0x20>)
    5fb2:	2240      	movs	r2, #64	; 0x40
    5fb4:	8003      	strh	r3, [r0, #0]
    5fb6:	2396      	movs	r3, #150	; 0x96
    5fb8:	009b      	lsls	r3, r3, #2
    5fba:	8103      	strh	r3, [r0, #8]
    5fbc:	6102      	str	r2, [r0, #16]
    5fbe:	2300      	movs	r3, #0
    5fc0:	2220      	movs	r2, #32
    5fc2:	7083      	strb	r3, [r0, #2]
    5fc4:	6043      	str	r3, [r0, #4]
    5fc6:	60c3      	str	r3, [r0, #12]
    5fc8:	6142      	str	r2, [r0, #20]
    5fca:	7603      	strb	r3, [r0, #24]
    5fcc:	4770      	bx	lr
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	0000075b 	.word	0x0000075b

00005fd4 <mqtt_init>:
    5fd4:	b538      	push	{r3, r4, r5, lr}
    5fd6:	1c04      	adds	r4, r0, #0
    5fd8:	1c0d      	adds	r5, r1, #0
    5fda:	2800      	cmp	r0, #0
    5fdc:	d030      	beq.n	6040 <mqtt_init+0x6c>
    5fde:	2900      	cmp	r1, #0
    5fe0:	d02e      	beq.n	6040 <mqtt_init+0x6c>
    5fe2:	690b      	ldr	r3, [r1, #16]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d02b      	beq.n	6040 <mqtt_init+0x6c>
    5fe8:	684b      	ldr	r3, [r1, #4]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d028      	beq.n	6040 <mqtt_init+0x6c>
    5fee:	2100      	movs	r1, #0
    5ff0:	2274      	movs	r2, #116	; 0x74
    5ff2:	4b16      	ldr	r3, [pc, #88]	; (604c <mqtt_init+0x78>)
    5ff4:	4798      	blx	r3
    5ff6:	1c20      	adds	r0, r4, #0
    5ff8:	4b15      	ldr	r3, [pc, #84]	; (6050 <mqtt_init+0x7c>)
    5ffa:	3058      	adds	r0, #88	; 0x58
    5ffc:	1c29      	adds	r1, r5, #0
    5ffe:	221c      	movs	r2, #28
    6000:	4798      	blx	r3
    6002:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6004:	2b00      	cmp	r3, #0
    6006:	d10b      	bne.n	6020 <mqtt_init+0x4c>
    6008:	6928      	ldr	r0, [r5, #16]
    600a:	4b12      	ldr	r3, [pc, #72]	; (6054 <mqtt_init+0x80>)
    600c:	4798      	blx	r3
    600e:	6660      	str	r0, [r4, #100]	; 0x64
    6010:	2800      	cmp	r0, #0
    6012:	d017      	beq.n	6044 <mqtt_init+0x70>
    6014:	1c23      	adds	r3, r4, #0
    6016:	3343      	adds	r3, #67	; 0x43
    6018:	781a      	ldrb	r2, [r3, #0]
    601a:	2120      	movs	r1, #32
    601c:	430a      	orrs	r2, r1
    601e:	701a      	strb	r2, [r3, #0]
    6020:	892a      	ldrh	r2, [r5, #8]
    6022:	23fa      	movs	r3, #250	; 0xfa
    6024:	005b      	lsls	r3, r3, #1
    6026:	4353      	muls	r3, r2
    6028:	6868      	ldr	r0, [r5, #4]
    602a:	490b      	ldr	r1, [pc, #44]	; (6058 <mqtt_init+0x84>)
    602c:	1c22      	adds	r2, r4, #0
    602e:	4d0b      	ldr	r5, [pc, #44]	; (605c <mqtt_init+0x88>)
    6030:	47a8      	blx	r5
    6032:	1c03      	adds	r3, r0, #0
    6034:	6520      	str	r0, [r4, #80]	; 0x50
    6036:	2000      	movs	r0, #0
    6038:	4283      	cmp	r3, r0
    603a:	da05      	bge.n	6048 <mqtt_init+0x74>
    603c:	201c      	movs	r0, #28
    603e:	e002      	b.n	6046 <mqtt_init+0x72>
    6040:	2016      	movs	r0, #22
    6042:	e000      	b.n	6046 <mqtt_init+0x72>
    6044:	200c      	movs	r0, #12
    6046:	4240      	negs	r0, r0
    6048:	bd38      	pop	{r3, r4, r5, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	00006f6d 	.word	0x00006f6d
    6050:	00006f29 	.word	0x00006f29
    6054:	00006f15 	.word	0x00006f15
    6058:	000067dd 	.word	0x000067dd
    605c:	00005575 	.word	0x00005575

00006060 <mqtt_register_callback>:
    6060:	2800      	cmp	r0, #0
    6062:	d002      	beq.n	606a <mqtt_register_callback+0xa>
    6064:	6541      	str	r1, [r0, #84]	; 0x54
    6066:	2000      	movs	r0, #0
    6068:	e001      	b.n	606e <mqtt_register_callback+0xe>
    606a:	2016      	movs	r0, #22
    606c:	4240      	negs	r0, r0
    606e:	4770      	bx	lr

00006070 <mqtt_socket_resolve_handler>:
    6070:	b5f0      	push	{r4, r5, r6, r7, lr}
    6072:	1c06      	adds	r6, r0, #0
    6074:	b085      	sub	sp, #20
    6076:	1c0f      	adds	r7, r1, #0
    6078:	2400      	movs	r4, #0
    607a:	4b0f      	ldr	r3, [pc, #60]	; (60b8 <mqtt_socket_resolve_handler+0x48>)
    607c:	58e5      	ldr	r5, [r4, r3]
    607e:	2d00      	cmp	r5, #0
    6080:	d015      	beq.n	60ae <mqtt_socket_resolve_handler+0x3e>
    6082:	1ce9      	adds	r1, r5, #3
    6084:	1c30      	adds	r0, r6, #0
    6086:	4b0d      	ldr	r3, [pc, #52]	; (60bc <mqtt_socket_resolve_handler+0x4c>)
    6088:	4798      	blx	r3
    608a:	2800      	cmp	r0, #0
    608c:	d10f      	bne.n	60ae <mqtt_socket_resolve_handler+0x3e>
    608e:	466a      	mov	r2, sp
    6090:	2302      	movs	r3, #2
    6092:	8013      	strh	r3, [r2, #0]
    6094:	1c2b      	adds	r3, r5, #0
    6096:	3358      	adds	r3, #88	; 0x58
    6098:	881b      	ldrh	r3, [r3, #0]
    609a:	9701      	str	r7, [sp, #4]
    609c:	ba5b      	rev16	r3, r3
    609e:	8053      	strh	r3, [r2, #2]
    60a0:	2002      	movs	r0, #2
    60a2:	5628      	ldrsb	r0, [r5, r0]
    60a4:	4669      	mov	r1, sp
    60a6:	2210      	movs	r2, #16
    60a8:	4b05      	ldr	r3, [pc, #20]	; (60c0 <mqtt_socket_resolve_handler+0x50>)
    60aa:	4798      	blx	r3
    60ac:	e002      	b.n	60b4 <mqtt_socket_resolve_handler+0x44>
    60ae:	3404      	adds	r4, #4
    60b0:	2c1c      	cmp	r4, #28
    60b2:	d1e2      	bne.n	607a <mqtt_socket_resolve_handler+0xa>
    60b4:	b005      	add	sp, #20
    60b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60b8:	200002bc 	.word	0x200002bc
    60bc:	00007371 	.word	0x00007371
    60c0:	00002b65 	.word	0x00002b65

000060c4 <mqtt_connect>:
    60c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60c6:	1c04      	adds	r4, r0, #0
    60c8:	b089      	sub	sp, #36	; 0x24
    60ca:	1c0d      	adds	r5, r1, #0
    60cc:	2800      	cmp	r0, #0
    60ce:	d051      	beq.n	6174 <mqtt_connect+0xb0>
    60d0:	2900      	cmp	r1, #0
    60d2:	d04f      	beq.n	6174 <mqtt_connect+0xb0>
    60d4:	1c08      	adds	r0, r1, #0
    60d6:	4b39      	ldr	r3, [pc, #228]	; (61bc <mqtt_connect+0xf8>)
    60d8:	4798      	blx	r3
    60da:	2840      	cmp	r0, #64	; 0x40
    60dc:	d84c      	bhi.n	6178 <mqtt_connect+0xb4>
    60de:	1c21      	adds	r1, r4, #0
    60e0:	3143      	adds	r1, #67	; 0x43
    60e2:	780b      	ldrb	r3, [r1, #0]
    60e4:	9101      	str	r1, [sp, #4]
    60e6:	07db      	lsls	r3, r3, #31
    60e8:	0fd9      	lsrs	r1, r3, #31
    60ea:	466a      	mov	r2, sp
    60ec:	b2ce      	uxtb	r6, r1
    60ee:	1ce0      	adds	r0, r4, #3
    60f0:	7211      	strb	r1, [r2, #8]
    60f2:	2e00      	cmp	r6, #0
    60f4:	d142      	bne.n	617c <mqtt_connect+0xb8>
    60f6:	2701      	movs	r7, #1
    60f8:	1c29      	adds	r1, r5, #0
    60fa:	4b31      	ldr	r3, [pc, #196]	; (61c0 <mqtt_connect+0xfc>)
    60fc:	8027      	strh	r7, [r4, #0]
    60fe:	4798      	blx	r3
    6100:	9a01      	ldr	r2, [sp, #4]
    6102:	2002      	movs	r0, #2
    6104:	7813      	ldrb	r3, [r2, #0]
    6106:	9901      	ldr	r1, [sp, #4]
    6108:	43bb      	bics	r3, r7
    610a:	4383      	bics	r3, r0
    610c:	22e3      	movs	r2, #227	; 0xe3
    610e:	4013      	ands	r3, r2
    6110:	466a      	mov	r2, sp
    6112:	700b      	strb	r3, [r1, #0]
    6114:	7a12      	ldrb	r2, [r2, #8]
    6116:	1c23      	adds	r3, r4, #0
    6118:	3348      	adds	r3, #72	; 0x48
    611a:	6466      	str	r6, [r4, #68]	; 0x44
    611c:	701a      	strb	r2, [r3, #0]
    611e:	7c9a      	ldrb	r2, [r3, #18]
    6120:	805e      	strh	r6, [r3, #2]
    6122:	1e53      	subs	r3, r2, #1
    6124:	419a      	sbcs	r2, r3
    6126:	b2d2      	uxtb	r2, r2
    6128:	1c39      	adds	r1, r7, #0
    612a:	4b26      	ldr	r3, [pc, #152]	; (61c4 <mqtt_connect+0x100>)
    612c:	4798      	blx	r3
    612e:	70a0      	strb	r0, [r4, #2]
    6130:	2800      	cmp	r0, #0
    6132:	db25      	blt.n	6180 <mqtt_connect+0xbc>
    6134:	4b24      	ldr	r3, [pc, #144]	; (61c8 <mqtt_connect+0x104>)
    6136:	0080      	lsls	r0, r0, #2
    6138:	50c4      	str	r4, [r0, r3]
    613a:	1c2b      	adds	r3, r5, #0
    613c:	781f      	ldrb	r7, [r3, #0]
    613e:	2f00      	cmp	r7, #0
    6140:	d026      	beq.n	6190 <mqtt_connect+0xcc>
    6142:	2220      	movs	r2, #32
    6144:	1c39      	adds	r1, r7, #0
    6146:	4391      	bics	r1, r2
    6148:	1c0a      	adds	r2, r1, #0
    614a:	3a41      	subs	r2, #65	; 0x41
    614c:	b2d2      	uxtb	r2, r2
    614e:	3301      	adds	r3, #1
    6150:	2a05      	cmp	r2, #5
    6152:	d90d      	bls.n	6170 <mqtt_connect+0xac>
    6154:	2f3a      	cmp	r7, #58	; 0x3a
    6156:	d00b      	beq.n	6170 <mqtt_connect+0xac>
    6158:	2f2f      	cmp	r7, #47	; 0x2f
    615a:	d009      	beq.n	6170 <mqtt_connect+0xac>
    615c:	2f2e      	cmp	r7, #46	; 0x2e
    615e:	d102      	bne.n	6166 <mqtt_connect+0xa2>
    6160:	2e00      	cmp	r6, #0
    6162:	d0eb      	beq.n	613c <mqtt_connect+0x78>
    6164:	e00f      	b.n	6186 <mqtt_connect+0xc2>
    6166:	2230      	movs	r2, #48	; 0x30
    6168:	4017      	ands	r7, r2
    616a:	4297      	cmp	r7, r2
    616c:	d0e6      	beq.n	613c <mqtt_connect+0x78>
    616e:	e00a      	b.n	6186 <mqtt_connect+0xc2>
    6170:	2601      	movs	r6, #1
    6172:	e7e3      	b.n	613c <mqtt_connect+0x78>
    6174:	2016      	movs	r0, #22
    6176:	e004      	b.n	6182 <mqtt_connect+0xbe>
    6178:	205b      	movs	r0, #91	; 0x5b
    617a:	e002      	b.n	6182 <mqtt_connect+0xbe>
    617c:	2078      	movs	r0, #120	; 0x78
    617e:	e000      	b.n	6182 <mqtt_connect+0xbe>
    6180:	201c      	movs	r0, #28
    6182:	4240      	negs	r0, r0
    6184:	e017      	b.n	61b6 <mqtt_connect+0xf2>
    6186:	1c28      	adds	r0, r5, #0
    6188:	4b10      	ldr	r3, [pc, #64]	; (61cc <mqtt_connect+0x108>)
    618a:	4798      	blx	r3
    618c:	2000      	movs	r0, #0
    618e:	e012      	b.n	61b6 <mqtt_connect+0xf2>
    6190:	466a      	mov	r2, sp
    6192:	2302      	movs	r3, #2
    6194:	8213      	strh	r3, [r2, #16]
    6196:	1c23      	adds	r3, r4, #0
    6198:	3358      	adds	r3, #88	; 0x58
    619a:	881b      	ldrh	r3, [r3, #0]
    619c:	1c28      	adds	r0, r5, #0
    619e:	ba5b      	rev16	r3, r3
    61a0:	8253      	strh	r3, [r2, #18]
    61a2:	4b0b      	ldr	r3, [pc, #44]	; (61d0 <mqtt_connect+0x10c>)
    61a4:	4798      	blx	r3
    61a6:	9005      	str	r0, [sp, #20]
    61a8:	2002      	movs	r0, #2
    61aa:	5620      	ldrsb	r0, [r4, r0]
    61ac:	a904      	add	r1, sp, #16
    61ae:	2210      	movs	r2, #16
    61b0:	4b08      	ldr	r3, [pc, #32]	; (61d4 <mqtt_connect+0x110>)
    61b2:	4798      	blx	r3
    61b4:	1c38      	adds	r0, r7, #0
    61b6:	b009      	add	sp, #36	; 0x24
    61b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	00007395 	.word	0x00007395
    61c0:	00007385 	.word	0x00007385
    61c4:	00002a9d 	.word	0x00002a9d
    61c8:	200002bc 	.word	0x200002bc
    61cc:	00002e2d 	.word	0x00002e2d
    61d0:	00002dbd 	.word	0x00002dbd
    61d4:	00002b65 	.word	0x00002b65

000061d8 <mqtt_connect_broker>:
    61d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61da:	b095      	sub	sp, #84	; 0x54
    61dc:	af02      	add	r7, sp, #8
    61de:	617b      	str	r3, [r7, #20]
    61e0:	1c3b      	adds	r3, r7, #0
    61e2:	3370      	adds	r3, #112	; 0x70
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	1c05      	adds	r5, r0, #0
    61e8:	60fb      	str	r3, [r7, #12]
    61ea:	1c3b      	adds	r3, r7, #0
    61ec:	3374      	adds	r3, #116	; 0x74
    61ee:	781b      	ldrb	r3, [r3, #0]
    61f0:	6139      	str	r1, [r7, #16]
    61f2:	61fa      	str	r2, [r7, #28]
    61f4:	60bb      	str	r3, [r7, #8]
    61f6:	2800      	cmp	r0, #0
    61f8:	d101      	bne.n	61fe <mqtt_connect_broker+0x26>
    61fa:	2016      	movs	r0, #22
    61fc:	e129      	b.n	6452 <mqtt_connect_broker+0x27a>
    61fe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6200:	4668      	mov	r0, sp
    6202:	3307      	adds	r3, #7
    6204:	08db      	lsrs	r3, r3, #3
    6206:	00db      	lsls	r3, r3, #3
    6208:	1ac0      	subs	r0, r0, r3
    620a:	4685      	mov	sp, r0
    620c:	ac02      	add	r4, sp, #8
    620e:	607c      	str	r4, [r7, #4]
    6210:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    6212:	2c00      	cmp	r4, #0
    6214:	d0f1      	beq.n	61fa <mqtt_connect_broker+0x22>
    6216:	1c2b      	adds	r3, r5, #0
    6218:	3343      	adds	r3, #67	; 0x43
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	07d8      	lsls	r0, r3, #31
    621e:	d400      	bmi.n	6222 <mqtt_connect_broker+0x4a>
    6220:	e112      	b.n	6448 <mqtt_connect_broker+0x270>
    6222:	079a      	lsls	r2, r3, #30
    6224:	d500      	bpl.n	6228 <mqtt_connect_broker+0x50>
    6226:	e111      	b.n	644c <mqtt_connect_broker+0x274>
    6228:	071c      	lsls	r4, r3, #28
    622a:	d40b      	bmi.n	6244 <mqtt_connect_broker+0x6c>
    622c:	4e8b      	ldr	r6, [pc, #556]	; (645c <mqtt_connect_broker+0x284>)
    622e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6230:	47b0      	blx	r6
    6232:	1c03      	adds	r3, r0, #0
    6234:	61b8      	str	r0, [r7, #24]
    6236:	69f8      	ldr	r0, [r7, #28]
    6238:	330e      	adds	r3, #14
    623a:	1c34      	adds	r4, r6, #0
    623c:	2800      	cmp	r0, #0
    623e:	d113      	bne.n	6268 <mqtt_connect_broker+0x90>
    6240:	1c1e      	adds	r6, r3, #0
    6242:	e01d      	b.n	6280 <mqtt_connect_broker+0xa8>
    6244:	1c2b      	adds	r3, r5, #0
    6246:	3370      	adds	r3, #112	; 0x70
    6248:	781b      	ldrb	r3, [r3, #0]
    624a:	2b00      	cmp	r3, #0
    624c:	d000      	beq.n	6250 <mqtt_connect_broker+0x78>
    624e:	e0ff      	b.n	6450 <mqtt_connect_broker+0x278>
    6250:	1c2b      	adds	r3, r5, #0
    6252:	3343      	adds	r3, #67	; 0x43
    6254:	781b      	ldrb	r3, [r3, #0]
    6256:	071a      	lsls	r2, r3, #28
    6258:	d5e8      	bpl.n	622c <mqtt_connect_broker+0x54>
    625a:	4b81      	ldr	r3, [pc, #516]	; (6460 <mqtt_connect_broker+0x288>)
    625c:	2000      	movs	r0, #0
    625e:	4798      	blx	r3
    6260:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6262:	4b80      	ldr	r3, [pc, #512]	; (6464 <mqtt_connect_broker+0x28c>)
    6264:	4798      	blx	r3
    6266:	e7f3      	b.n	6250 <mqtt_connect_broker+0x78>
    6268:	69f8      	ldr	r0, [r7, #28]
    626a:	47b0      	blx	r6
    626c:	69be      	ldr	r6, [r7, #24]
    626e:	697b      	ldr	r3, [r7, #20]
    6270:	3610      	adds	r6, #16
    6272:	1836      	adds	r6, r6, r0
    6274:	2b00      	cmp	r3, #0
    6276:	d003      	beq.n	6280 <mqtt_connect_broker+0xa8>
    6278:	1c18      	adds	r0, r3, #0
    627a:	47a0      	blx	r4
    627c:	3602      	adds	r6, #2
    627e:	1836      	adds	r6, r6, r0
    6280:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6282:	2800      	cmp	r0, #0
    6284:	d007      	beq.n	6296 <mqtt_connect_broker+0xbe>
    6286:	47a0      	blx	r4
    6288:	3602      	adds	r6, #2
    628a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    628c:	1830      	adds	r0, r6, r0
    628e:	1906      	adds	r6, r0, r4
    6290:	2c00      	cmp	r4, #0
    6292:	d100      	bne.n	6296 <mqtt_connect_broker+0xbe>
    6294:	1c06      	adds	r6, r0, #0
    6296:	69fc      	ldr	r4, [r7, #28]
    6298:	2c00      	cmp	r4, #0
    629a:	d006      	beq.n	62aa <mqtt_connect_broker+0xd2>
    629c:	24c0      	movs	r4, #192	; 0xc0
    629e:	61bc      	str	r4, [r7, #24]
    62a0:	697c      	ldr	r4, [r7, #20]
    62a2:	2c00      	cmp	r4, #0
    62a4:	d103      	bne.n	62ae <mqtt_connect_broker+0xd6>
    62a6:	2480      	movs	r4, #128	; 0x80
    62a8:	e000      	b.n	62ac <mqtt_connect_broker+0xd4>
    62aa:	69fc      	ldr	r4, [r7, #28]
    62ac:	61bc      	str	r4, [r7, #24]
    62ae:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    62b0:	2c00      	cmp	r4, #0
    62b2:	d00f      	beq.n	62d4 <mqtt_connect_broker+0xfc>
    62b4:	68bc      	ldr	r4, [r7, #8]
    62b6:	2c00      	cmp	r4, #0
    62b8:	d003      	beq.n	62c2 <mqtt_connect_broker+0xea>
    62ba:	69bc      	ldr	r4, [r7, #24]
    62bc:	2320      	movs	r3, #32
    62be:	431c      	orrs	r4, r3
    62c0:	61bc      	str	r4, [r7, #24]
    62c2:	68fc      	ldr	r4, [r7, #12]
    62c4:	2303      	movs	r3, #3
    62c6:	4023      	ands	r3, r4
    62c8:	00db      	lsls	r3, r3, #3
    62ca:	69bc      	ldr	r4, [r7, #24]
    62cc:	2204      	movs	r2, #4
    62ce:	4313      	orrs	r3, r2
    62d0:	431c      	orrs	r4, r3
    62d2:	61bc      	str	r4, [r7, #24]
    62d4:	693c      	ldr	r4, [r7, #16]
    62d6:	2c00      	cmp	r4, #0
    62d8:	d003      	beq.n	62e2 <mqtt_connect_broker+0x10a>
    62da:	69bc      	ldr	r4, [r7, #24]
    62dc:	2302      	movs	r3, #2
    62de:	431c      	orrs	r4, r3
    62e0:	61bc      	str	r4, [r7, #24]
    62e2:	1c2b      	adds	r3, r5, #0
    62e4:	3343      	adds	r3, #67	; 0x43
    62e6:	781a      	ldrb	r2, [r3, #0]
    62e8:	2108      	movs	r1, #8
    62ea:	430a      	orrs	r2, r1
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	1c38      	adds	r0, r7, #0
    62f0:	9500      	str	r5, [sp, #0]
    62f2:	3020      	adds	r0, #32
    62f4:	6879      	ldr	r1, [r7, #4]
    62f6:	4b5c      	ldr	r3, [pc, #368]	; (6468 <mqtt_connect_broker+0x290>)
    62f8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    62fa:	4c5c      	ldr	r4, [pc, #368]	; (646c <mqtt_connect_broker+0x294>)
    62fc:	47a0      	blx	r4
    62fe:	1c38      	adds	r0, r7, #0
    6300:	3020      	adds	r0, #32
    6302:	2110      	movs	r1, #16
    6304:	4b5a      	ldr	r3, [pc, #360]	; (6470 <mqtt_connect_broker+0x298>)
    6306:	4798      	blx	r3
    6308:	2e80      	cmp	r6, #128	; 0x80
    630a:	dd09      	ble.n	6320 <mqtt_connect_broker+0x148>
    630c:	2180      	movs	r1, #128	; 0x80
    630e:	4249      	negs	r1, r1
    6310:	4331      	orrs	r1, r6
    6312:	1c38      	adds	r0, r7, #0
    6314:	b249      	sxtb	r1, r1
    6316:	3020      	adds	r0, #32
    6318:	4c55      	ldr	r4, [pc, #340]	; (6470 <mqtt_connect_broker+0x298>)
    631a:	47a0      	blx	r4
    631c:	11f6      	asrs	r6, r6, #7
    631e:	e7f3      	b.n	6308 <mqtt_connect_broker+0x130>
    6320:	4b54      	ldr	r3, [pc, #336]	; (6474 <mqtt_connect_broker+0x29c>)
    6322:	401e      	ands	r6, r3
    6324:	d504      	bpl.n	6330 <mqtt_connect_broker+0x158>
    6326:	2380      	movs	r3, #128	; 0x80
    6328:	3e01      	subs	r6, #1
    632a:	425b      	negs	r3, r3
    632c:	431e      	orrs	r6, r3
    632e:	3601      	adds	r6, #1
    6330:	1c38      	adds	r0, r7, #0
    6332:	b271      	sxtb	r1, r6
    6334:	3020      	adds	r0, #32
    6336:	4c4e      	ldr	r4, [pc, #312]	; (6470 <mqtt_connect_broker+0x298>)
    6338:	47a0      	blx	r4
    633a:	1c38      	adds	r0, r7, #0
    633c:	4c4e      	ldr	r4, [pc, #312]	; (6478 <mqtt_connect_broker+0x2a0>)
    633e:	3020      	adds	r0, #32
    6340:	2106      	movs	r1, #6
    6342:	47a0      	blx	r4
    6344:	1c38      	adds	r0, r7, #0
    6346:	4b4d      	ldr	r3, [pc, #308]	; (647c <mqtt_connect_broker+0x2a4>)
    6348:	3020      	adds	r0, #32
    634a:	494d      	ldr	r1, [pc, #308]	; (6480 <mqtt_connect_broker+0x2a8>)
    634c:	2206      	movs	r2, #6
    634e:	4798      	blx	r3
    6350:	1c38      	adds	r0, r7, #0
    6352:	3020      	adds	r0, #32
    6354:	2103      	movs	r1, #3
    6356:	4a46      	ldr	r2, [pc, #280]	; (6470 <mqtt_connect_broker+0x298>)
    6358:	4790      	blx	r2
    635a:	69bb      	ldr	r3, [r7, #24]
    635c:	1c38      	adds	r0, r7, #0
    635e:	4a44      	ldr	r2, [pc, #272]	; (6470 <mqtt_connect_broker+0x298>)
    6360:	b259      	sxtb	r1, r3
    6362:	3020      	adds	r0, #32
    6364:	4790      	blx	r2
    6366:	1c2b      	adds	r3, r5, #0
    6368:	3360      	adds	r3, #96	; 0x60
    636a:	2000      	movs	r0, #0
    636c:	5e19      	ldrsh	r1, [r3, r0]
    636e:	1c38      	adds	r0, r7, #0
    6370:	3020      	adds	r0, #32
    6372:	47a0      	blx	r4
    6374:	4e39      	ldr	r6, [pc, #228]	; (645c <mqtt_connect_broker+0x284>)
    6376:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6378:	47b0      	blx	r6
    637a:	b201      	sxth	r1, r0
    637c:	1c38      	adds	r0, r7, #0
    637e:	3020      	adds	r0, #32
    6380:	47a0      	blx	r4
    6382:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6384:	47b0      	blx	r6
    6386:	1c02      	adds	r2, r0, #0
    6388:	1c38      	adds	r0, r7, #0
    638a:	3020      	adds	r0, #32
    638c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    638e:	4b3b      	ldr	r3, [pc, #236]	; (647c <mqtt_connect_broker+0x2a4>)
    6390:	4798      	blx	r3
    6392:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6394:	2800      	cmp	r0, #0
    6396:	d015      	beq.n	63c4 <mqtt_connect_broker+0x1ec>
    6398:	47b0      	blx	r6
    639a:	b201      	sxth	r1, r0
    639c:	1c38      	adds	r0, r7, #0
    639e:	3020      	adds	r0, #32
    63a0:	47a0      	blx	r4
    63a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
    63a4:	47b0      	blx	r6
    63a6:	1c02      	adds	r2, r0, #0
    63a8:	1c38      	adds	r0, r7, #0
    63aa:	4c34      	ldr	r4, [pc, #208]	; (647c <mqtt_connect_broker+0x2a4>)
    63ac:	3020      	adds	r0, #32
    63ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
    63b0:	47a0      	blx	r4
    63b2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    63b4:	2c00      	cmp	r4, #0
    63b6:	d005      	beq.n	63c4 <mqtt_connect_broker+0x1ec>
    63b8:	1c38      	adds	r0, r7, #0
    63ba:	1c21      	adds	r1, r4, #0
    63bc:	3020      	adds	r0, #32
    63be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    63c0:	4c2e      	ldr	r4, [pc, #184]	; (647c <mqtt_connect_broker+0x2a4>)
    63c2:	47a0      	blx	r4
    63c4:	69fc      	ldr	r4, [r7, #28]
    63c6:	2c00      	cmp	r4, #0
    63c8:	d01f      	beq.n	640a <mqtt_connect_broker+0x232>
    63ca:	4e24      	ldr	r6, [pc, #144]	; (645c <mqtt_connect_broker+0x284>)
    63cc:	1c20      	adds	r0, r4, #0
    63ce:	47b0      	blx	r6
    63d0:	b201      	sxth	r1, r0
    63d2:	1c38      	adds	r0, r7, #0
    63d4:	3020      	adds	r0, #32
    63d6:	4c28      	ldr	r4, [pc, #160]	; (6478 <mqtt_connect_broker+0x2a0>)
    63d8:	47a0      	blx	r4
    63da:	69f8      	ldr	r0, [r7, #28]
    63dc:	47b0      	blx	r6
    63de:	1c02      	adds	r2, r0, #0
    63e0:	1c38      	adds	r0, r7, #0
    63e2:	3020      	adds	r0, #32
    63e4:	69f9      	ldr	r1, [r7, #28]
    63e6:	4c25      	ldr	r4, [pc, #148]	; (647c <mqtt_connect_broker+0x2a4>)
    63e8:	47a0      	blx	r4
    63ea:	6978      	ldr	r0, [r7, #20]
    63ec:	2800      	cmp	r0, #0
    63ee:	d00c      	beq.n	640a <mqtt_connect_broker+0x232>
    63f0:	47b0      	blx	r6
    63f2:	b201      	sxth	r1, r0
    63f4:	1c38      	adds	r0, r7, #0
    63f6:	4a20      	ldr	r2, [pc, #128]	; (6478 <mqtt_connect_broker+0x2a0>)
    63f8:	3020      	adds	r0, #32
    63fa:	4790      	blx	r2
    63fc:	6978      	ldr	r0, [r7, #20]
    63fe:	47b0      	blx	r6
    6400:	1c02      	adds	r2, r0, #0
    6402:	1c38      	adds	r0, r7, #0
    6404:	3020      	adds	r0, #32
    6406:	6979      	ldr	r1, [r7, #20]
    6408:	47a0      	blx	r4
    640a:	1c38      	adds	r0, r7, #0
    640c:	1c2c      	adds	r4, r5, #0
    640e:	3020      	adds	r0, #32
    6410:	4b1c      	ldr	r3, [pc, #112]	; (6484 <mqtt_connect_broker+0x2ac>)
    6412:	3443      	adds	r4, #67	; 0x43
    6414:	4798      	blx	r3
    6416:	7821      	ldrb	r1, [r4, #0]
    6418:	0789      	lsls	r1, r1, #30
    641a:	0fc9      	lsrs	r1, r1, #31
    641c:	2901      	cmp	r1, #1
    641e:	d10b      	bne.n	6438 <mqtt_connect_broker+0x260>
    6420:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6422:	2a00      	cmp	r2, #0
    6424:	d108      	bne.n	6438 <mqtt_connect_broker+0x260>
    6426:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6428:	2b00      	cmp	r3, #0
    642a:	d005      	beq.n	6438 <mqtt_connect_broker+0x260>
    642c:	2034      	movs	r0, #52	; 0x34
    642e:	55c2      	strb	r2, [r0, r7]
    6430:	1c3a      	adds	r2, r7, #0
    6432:	1c28      	adds	r0, r5, #0
    6434:	3234      	adds	r2, #52	; 0x34
    6436:	4798      	blx	r3
    6438:	7823      	ldrb	r3, [r4, #0]
    643a:	2202      	movs	r2, #2
    643c:	4313      	orrs	r3, r2
    643e:	2208      	movs	r2, #8
    6440:	4393      	bics	r3, r2
    6442:	7023      	strb	r3, [r4, #0]
    6444:	2000      	movs	r0, #0
    6446:	e005      	b.n	6454 <mqtt_connect_broker+0x27c>
    6448:	2080      	movs	r0, #128	; 0x80
    644a:	e002      	b.n	6452 <mqtt_connect_broker+0x27a>
    644c:	2078      	movs	r0, #120	; 0x78
    644e:	e000      	b.n	6452 <mqtt_connect_broker+0x27a>
    6450:	200b      	movs	r0, #11
    6452:	4240      	negs	r0, r0
    6454:	46bd      	mov	sp, r7
    6456:	b013      	add	sp, #76	; 0x4c
    6458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    645a:	46c0      	nop			; (mov r8, r8)
    645c:	00007395 	.word	0x00007395
    6460:	00001031 	.word	0x00001031
    6464:	000055ed 	.word	0x000055ed
    6468:	00005f51 	.word	0x00005f51
    646c:	00005411 	.word	0x00005411
    6470:	00005439 	.word	0x00005439
    6474:	8000007f 	.word	0x8000007f
    6478:	0000545d 	.word	0x0000545d
    647c:	00005475 	.word	0x00005475
    6480:	00009664 	.word	0x00009664
    6484:	00005421 	.word	0x00005421

00006488 <mqtt_publish>:
    6488:	b5f0      	push	{r4, r5, r6, r7, lr}
    648a:	b093      	sub	sp, #76	; 0x4c
    648c:	af02      	add	r7, sp, #8
    648e:	60fb      	str	r3, [r7, #12]
    6490:	1c3b      	adds	r3, r7, #0
    6492:	3358      	adds	r3, #88	; 0x58
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	1c04      	adds	r4, r0, #0
    6498:	613b      	str	r3, [r7, #16]
    649a:	1c3b      	adds	r3, r7, #0
    649c:	335c      	adds	r3, #92	; 0x5c
    649e:	781b      	ldrb	r3, [r3, #0]
    64a0:	6179      	str	r1, [r7, #20]
    64a2:	60ba      	str	r2, [r7, #8]
    64a4:	607b      	str	r3, [r7, #4]
    64a6:	2800      	cmp	r0, #0
    64a8:	d101      	bne.n	64ae <mqtt_publish+0x26>
    64aa:	2516      	movs	r5, #22
    64ac:	e0a7      	b.n	65fe <mqtt_publish+0x176>
    64ae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    64b0:	466a      	mov	r2, sp
    64b2:	3307      	adds	r3, #7
    64b4:	08db      	lsrs	r3, r3, #3
    64b6:	00db      	lsls	r3, r3, #3
    64b8:	1ad2      	subs	r2, r2, r3
    64ba:	697b      	ldr	r3, [r7, #20]
    64bc:	4695      	mov	sp, r2
    64be:	ae02      	add	r6, sp, #8
    64c0:	2b00      	cmp	r3, #0
    64c2:	d0f2      	beq.n	64aa <mqtt_publish+0x22>
    64c4:	693a      	ldr	r2, [r7, #16]
    64c6:	2a02      	cmp	r2, #2
    64c8:	d8ef      	bhi.n	64aa <mqtt_publish+0x22>
    64ca:	1c05      	adds	r5, r0, #0
    64cc:	3543      	adds	r5, #67	; 0x43
    64ce:	782b      	ldrb	r3, [r5, #0]
    64d0:	079a      	lsls	r2, r3, #30
    64d2:	d400      	bmi.n	64d6 <mqtt_publish+0x4e>
    64d4:	e090      	b.n	65f8 <mqtt_publish+0x170>
    64d6:	071a      	lsls	r2, r3, #28
    64d8:	d40a      	bmi.n	64f0 <mqtt_publish+0x68>
    64da:	4b4b      	ldr	r3, [pc, #300]	; (6608 <mqtt_publish+0x180>)
    64dc:	6978      	ldr	r0, [r7, #20]
    64de:	4798      	blx	r3
    64e0:	68fd      	ldr	r5, [r7, #12]
    64e2:	693b      	ldr	r3, [r7, #16]
    64e4:	3502      	adds	r5, #2
    64e6:	182d      	adds	r5, r5, r0
    64e8:	2b00      	cmp	r3, #0
    64ea:	d011      	beq.n	6510 <mqtt_publish+0x88>
    64ec:	3502      	adds	r5, #2
    64ee:	e00f      	b.n	6510 <mqtt_publish+0x88>
    64f0:	1c03      	adds	r3, r0, #0
    64f2:	3370      	adds	r3, #112	; 0x70
    64f4:	781b      	ldrb	r3, [r3, #0]
    64f6:	2b00      	cmp	r3, #0
    64f8:	d000      	beq.n	64fc <mqtt_publish+0x74>
    64fa:	e07f      	b.n	65fc <mqtt_publish+0x174>
    64fc:	782b      	ldrb	r3, [r5, #0]
    64fe:	071a      	lsls	r2, r3, #28
    6500:	d5eb      	bpl.n	64da <mqtt_publish+0x52>
    6502:	4b42      	ldr	r3, [pc, #264]	; (660c <mqtt_publish+0x184>)
    6504:	2000      	movs	r0, #0
    6506:	4798      	blx	r3
    6508:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    650a:	4b41      	ldr	r3, [pc, #260]	; (6610 <mqtt_publish+0x188>)
    650c:	4798      	blx	r3
    650e:	e7f5      	b.n	64fc <mqtt_publish+0x74>
    6510:	1c23      	adds	r3, r4, #0
    6512:	3343      	adds	r3, #67	; 0x43
    6514:	781a      	ldrb	r2, [r3, #0]
    6516:	2108      	movs	r1, #8
    6518:	430a      	orrs	r2, r1
    651a:	701a      	strb	r2, [r3, #0]
    651c:	1c38      	adds	r0, r7, #0
    651e:	9400      	str	r4, [sp, #0]
    6520:	1c31      	adds	r1, r6, #0
    6522:	302c      	adds	r0, #44	; 0x2c
    6524:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6526:	4b3b      	ldr	r3, [pc, #236]	; (6614 <mqtt_publish+0x18c>)
    6528:	4e3b      	ldr	r6, [pc, #236]	; (6618 <mqtt_publish+0x190>)
    652a:	47b0      	blx	r6
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	2101      	movs	r1, #1
    6530:	4019      	ands	r1, r3
    6532:	2330      	movs	r3, #48	; 0x30
    6534:	4319      	orrs	r1, r3
    6536:	693b      	ldr	r3, [r7, #16]
    6538:	1c38      	adds	r0, r7, #0
    653a:	005a      	lsls	r2, r3, #1
    653c:	2306      	movs	r3, #6
    653e:	4013      	ands	r3, r2
    6540:	4319      	orrs	r1, r3
    6542:	302c      	adds	r0, #44	; 0x2c
    6544:	4b35      	ldr	r3, [pc, #212]	; (661c <mqtt_publish+0x194>)
    6546:	4798      	blx	r3
    6548:	4b34      	ldr	r3, [pc, #208]	; (661c <mqtt_publish+0x194>)
    654a:	2d80      	cmp	r5, #128	; 0x80
    654c:	dd08      	ble.n	6560 <mqtt_publish+0xd8>
    654e:	2180      	movs	r1, #128	; 0x80
    6550:	4249      	negs	r1, r1
    6552:	4329      	orrs	r1, r5
    6554:	1c38      	adds	r0, r7, #0
    6556:	b249      	sxtb	r1, r1
    6558:	302c      	adds	r0, #44	; 0x2c
    655a:	4798      	blx	r3
    655c:	11ed      	asrs	r5, r5, #7
    655e:	e7f3      	b.n	6548 <mqtt_publish+0xc0>
    6560:	4a2f      	ldr	r2, [pc, #188]	; (6620 <mqtt_publish+0x198>)
    6562:	4015      	ands	r5, r2
    6564:	d504      	bpl.n	6570 <mqtt_publish+0xe8>
    6566:	2280      	movs	r2, #128	; 0x80
    6568:	3d01      	subs	r5, #1
    656a:	4252      	negs	r2, r2
    656c:	4315      	orrs	r5, r2
    656e:	3501      	adds	r5, #1
    6570:	1c38      	adds	r0, r7, #0
    6572:	b269      	sxtb	r1, r5
    6574:	302c      	adds	r0, #44	; 0x2c
    6576:	4798      	blx	r3
    6578:	4e23      	ldr	r6, [pc, #140]	; (6608 <mqtt_publish+0x180>)
    657a:	6978      	ldr	r0, [r7, #20]
    657c:	47b0      	blx	r6
    657e:	b201      	sxth	r1, r0
    6580:	1c38      	adds	r0, r7, #0
    6582:	302c      	adds	r0, #44	; 0x2c
    6584:	4d27      	ldr	r5, [pc, #156]	; (6624 <mqtt_publish+0x19c>)
    6586:	47a8      	blx	r5
    6588:	6978      	ldr	r0, [r7, #20]
    658a:	47b0      	blx	r6
    658c:	1c02      	adds	r2, r0, #0
    658e:	1c38      	adds	r0, r7, #0
    6590:	302c      	adds	r0, #44	; 0x2c
    6592:	6979      	ldr	r1, [r7, #20]
    6594:	4e24      	ldr	r6, [pc, #144]	; (6628 <mqtt_publish+0x1a0>)
    6596:	47b0      	blx	r6
    6598:	693a      	ldr	r2, [r7, #16]
    659a:	2a00      	cmp	r2, #0
    659c:	d006      	beq.n	65ac <mqtt_publish+0x124>
    659e:	8821      	ldrh	r1, [r4, #0]
    65a0:	1c38      	adds	r0, r7, #0
    65a2:	1c4b      	adds	r3, r1, #1
    65a4:	8023      	strh	r3, [r4, #0]
    65a6:	b209      	sxth	r1, r1
    65a8:	302c      	adds	r0, #44	; 0x2c
    65aa:	47a8      	blx	r5
    65ac:	8823      	ldrh	r3, [r4, #0]
    65ae:	2b00      	cmp	r3, #0
    65b0:	d101      	bne.n	65b6 <mqtt_publish+0x12e>
    65b2:	2301      	movs	r3, #1
    65b4:	8023      	strh	r3, [r4, #0]
    65b6:	68bb      	ldr	r3, [r7, #8]
    65b8:	2b00      	cmp	r3, #0
    65ba:	d006      	beq.n	65ca <mqtt_publish+0x142>
    65bc:	68fa      	ldr	r2, [r7, #12]
    65be:	2a00      	cmp	r2, #0
    65c0:	d003      	beq.n	65ca <mqtt_publish+0x142>
    65c2:	1c38      	adds	r0, r7, #0
    65c4:	302c      	adds	r0, #44	; 0x2c
    65c6:	1c19      	adds	r1, r3, #0
    65c8:	47b0      	blx	r6
    65ca:	1c38      	adds	r0, r7, #0
    65cc:	4b17      	ldr	r3, [pc, #92]	; (662c <mqtt_publish+0x1a4>)
    65ce:	302c      	adds	r0, #44	; 0x2c
    65d0:	4798      	blx	r3
    65d2:	1c23      	adds	r3, r4, #0
    65d4:	3343      	adds	r3, #67	; 0x43
    65d6:	781a      	ldrb	r2, [r3, #0]
    65d8:	2108      	movs	r1, #8
    65da:	438a      	bics	r2, r1
    65dc:	701a      	strb	r2, [r3, #0]
    65de:	693b      	ldr	r3, [r7, #16]
    65e0:	2500      	movs	r5, #0
    65e2:	42ab      	cmp	r3, r5
    65e4:	d10c      	bne.n	6600 <mqtt_publish+0x178>
    65e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    65e8:	42ab      	cmp	r3, r5
    65ea:	d009      	beq.n	6600 <mqtt_publish+0x178>
    65ec:	1c3a      	adds	r2, r7, #0
    65ee:	1c20      	adds	r0, r4, #0
    65f0:	2102      	movs	r1, #2
    65f2:	3218      	adds	r2, #24
    65f4:	4798      	blx	r3
    65f6:	e003      	b.n	6600 <mqtt_publish+0x178>
    65f8:	2580      	movs	r5, #128	; 0x80
    65fa:	e000      	b.n	65fe <mqtt_publish+0x176>
    65fc:	250b      	movs	r5, #11
    65fe:	426d      	negs	r5, r5
    6600:	1c28      	adds	r0, r5, #0
    6602:	46bd      	mov	sp, r7
    6604:	b011      	add	sp, #68	; 0x44
    6606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6608:	00007395 	.word	0x00007395
    660c:	00001031 	.word	0x00001031
    6610:	000055ed 	.word	0x000055ed
    6614:	00005f51 	.word	0x00005f51
    6618:	00005411 	.word	0x00005411
    661c:	00005439 	.word	0x00005439
    6620:	8000007f 	.word	0x8000007f
    6624:	0000545d 	.word	0x0000545d
    6628:	00005475 	.word	0x00005475
    662c:	00005421 	.word	0x00005421

00006630 <mqtt_subscribe>:
    6630:	b5f0      	push	{r4, r5, r6, r7, lr}
    6632:	b08d      	sub	sp, #52	; 0x34
    6634:	af02      	add	r7, sp, #8
    6636:	1c04      	adds	r4, r0, #0
    6638:	60b9      	str	r1, [r7, #8]
    663a:	607a      	str	r2, [r7, #4]
    663c:	d101      	bne.n	6642 <mqtt_subscribe+0x12>
    663e:	2016      	movs	r0, #22
    6640:	e086      	b.n	6750 <mqtt_subscribe+0x120>
    6642:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6644:	466a      	mov	r2, sp
    6646:	3307      	adds	r3, #7
    6648:	08db      	lsrs	r3, r3, #3
    664a:	00db      	lsls	r3, r3, #3
    664c:	1ad2      	subs	r2, r2, r3
    664e:	4695      	mov	sp, r2
    6650:	ad02      	add	r5, sp, #8
    6652:	603d      	str	r5, [r7, #0]
    6654:	68bd      	ldr	r5, [r7, #8]
    6656:	2d00      	cmp	r5, #0
    6658:	d0f1      	beq.n	663e <mqtt_subscribe+0xe>
    665a:	687d      	ldr	r5, [r7, #4]
    665c:	2d02      	cmp	r5, #2
    665e:	d8ee      	bhi.n	663e <mqtt_subscribe+0xe>
    6660:	1c05      	adds	r5, r0, #0
    6662:	3543      	adds	r5, #67	; 0x43
    6664:	782b      	ldrb	r3, [r5, #0]
    6666:	079a      	lsls	r2, r3, #30
    6668:	d56f      	bpl.n	674a <mqtt_subscribe+0x11a>
    666a:	071a      	lsls	r2, r3, #28
    666c:	d41a      	bmi.n	66a4 <mqtt_subscribe+0x74>
    666e:	68b8      	ldr	r0, [r7, #8]
    6670:	4d39      	ldr	r5, [pc, #228]	; (6758 <mqtt_subscribe+0x128>)
    6672:	47a8      	blx	r5
    6674:	1c25      	adds	r5, r4, #0
    6676:	3543      	adds	r5, #67	; 0x43
    6678:	782b      	ldrb	r3, [r5, #0]
    667a:	2208      	movs	r2, #8
    667c:	4313      	orrs	r3, r2
    667e:	702b      	strb	r3, [r5, #0]
    6680:	60fd      	str	r5, [r7, #12]
    6682:	1d46      	adds	r6, r0, #5
    6684:	9400      	str	r4, [sp, #0]
    6686:	1c38      	adds	r0, r7, #0
    6688:	3014      	adds	r0, #20
    668a:	6839      	ldr	r1, [r7, #0]
    668c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    668e:	4b33      	ldr	r3, [pc, #204]	; (675c <mqtt_subscribe+0x12c>)
    6690:	4d33      	ldr	r5, [pc, #204]	; (6760 <mqtt_subscribe+0x130>)
    6692:	47a8      	blx	r5
    6694:	1c38      	adds	r0, r7, #0
    6696:	217e      	movs	r1, #126	; 0x7e
    6698:	3014      	adds	r0, #20
    669a:	4249      	negs	r1, r1
    669c:	4b31      	ldr	r3, [pc, #196]	; (6764 <mqtt_subscribe+0x134>)
    669e:	4798      	blx	r3
    66a0:	4d2d      	ldr	r5, [pc, #180]	; (6758 <mqtt_subscribe+0x128>)
    66a2:	e00e      	b.n	66c2 <mqtt_subscribe+0x92>
    66a4:	1c03      	adds	r3, r0, #0
    66a6:	3370      	adds	r3, #112	; 0x70
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d14f      	bne.n	674e <mqtt_subscribe+0x11e>
    66ae:	782b      	ldrb	r3, [r5, #0]
    66b0:	071a      	lsls	r2, r3, #28
    66b2:	d5dc      	bpl.n	666e <mqtt_subscribe+0x3e>
    66b4:	4b2c      	ldr	r3, [pc, #176]	; (6768 <mqtt_subscribe+0x138>)
    66b6:	2000      	movs	r0, #0
    66b8:	4798      	blx	r3
    66ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    66bc:	4b2b      	ldr	r3, [pc, #172]	; (676c <mqtt_subscribe+0x13c>)
    66be:	4798      	blx	r3
    66c0:	e7f5      	b.n	66ae <mqtt_subscribe+0x7e>
    66c2:	4b28      	ldr	r3, [pc, #160]	; (6764 <mqtt_subscribe+0x134>)
    66c4:	2e80      	cmp	r6, #128	; 0x80
    66c6:	dd08      	ble.n	66da <mqtt_subscribe+0xaa>
    66c8:	2180      	movs	r1, #128	; 0x80
    66ca:	4249      	negs	r1, r1
    66cc:	4331      	orrs	r1, r6
    66ce:	1c38      	adds	r0, r7, #0
    66d0:	b249      	sxtb	r1, r1
    66d2:	3014      	adds	r0, #20
    66d4:	4798      	blx	r3
    66d6:	11f6      	asrs	r6, r6, #7
    66d8:	e7f3      	b.n	66c2 <mqtt_subscribe+0x92>
    66da:	4925      	ldr	r1, [pc, #148]	; (6770 <mqtt_subscribe+0x140>)
    66dc:	4031      	ands	r1, r6
    66de:	d504      	bpl.n	66ea <mqtt_subscribe+0xba>
    66e0:	2280      	movs	r2, #128	; 0x80
    66e2:	3901      	subs	r1, #1
    66e4:	4252      	negs	r2, r2
    66e6:	4311      	orrs	r1, r2
    66e8:	3101      	adds	r1, #1
    66ea:	1c38      	adds	r0, r7, #0
    66ec:	b249      	sxtb	r1, r1
    66ee:	3014      	adds	r0, #20
    66f0:	4798      	blx	r3
    66f2:	8821      	ldrh	r1, [r4, #0]
    66f4:	1c38      	adds	r0, r7, #0
    66f6:	1c4b      	adds	r3, r1, #1
    66f8:	8023      	strh	r3, [r4, #0]
    66fa:	b209      	sxth	r1, r1
    66fc:	3014      	adds	r0, #20
    66fe:	4e1d      	ldr	r6, [pc, #116]	; (6774 <mqtt_subscribe+0x144>)
    6700:	47b0      	blx	r6
    6702:	8823      	ldrh	r3, [r4, #0]
    6704:	2b00      	cmp	r3, #0
    6706:	d101      	bne.n	670c <mqtt_subscribe+0xdc>
    6708:	2301      	movs	r3, #1
    670a:	8023      	strh	r3, [r4, #0]
    670c:	68b8      	ldr	r0, [r7, #8]
    670e:	47a8      	blx	r5
    6710:	b201      	sxth	r1, r0
    6712:	1c38      	adds	r0, r7, #0
    6714:	3014      	adds	r0, #20
    6716:	47b0      	blx	r6
    6718:	68b8      	ldr	r0, [r7, #8]
    671a:	47a8      	blx	r5
    671c:	1c02      	adds	r2, r0, #0
    671e:	1c38      	adds	r0, r7, #0
    6720:	3014      	adds	r0, #20
    6722:	68b9      	ldr	r1, [r7, #8]
    6724:	4b14      	ldr	r3, [pc, #80]	; (6778 <mqtt_subscribe+0x148>)
    6726:	4798      	blx	r3
    6728:	687d      	ldr	r5, [r7, #4]
    672a:	1c38      	adds	r0, r7, #0
    672c:	b269      	sxtb	r1, r5
    672e:	3014      	adds	r0, #20
    6730:	4b0c      	ldr	r3, [pc, #48]	; (6764 <mqtt_subscribe+0x134>)
    6732:	4798      	blx	r3
    6734:	1c38      	adds	r0, r7, #0
    6736:	3014      	adds	r0, #20
    6738:	4b10      	ldr	r3, [pc, #64]	; (677c <mqtt_subscribe+0x14c>)
    673a:	4798      	blx	r3
    673c:	68fd      	ldr	r5, [r7, #12]
    673e:	2208      	movs	r2, #8
    6740:	782b      	ldrb	r3, [r5, #0]
    6742:	2000      	movs	r0, #0
    6744:	4393      	bics	r3, r2
    6746:	702b      	strb	r3, [r5, #0]
    6748:	e003      	b.n	6752 <mqtt_subscribe+0x122>
    674a:	2080      	movs	r0, #128	; 0x80
    674c:	e000      	b.n	6750 <mqtt_subscribe+0x120>
    674e:	200b      	movs	r0, #11
    6750:	4240      	negs	r0, r0
    6752:	46bd      	mov	sp, r7
    6754:	b00b      	add	sp, #44	; 0x2c
    6756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6758:	00007395 	.word	0x00007395
    675c:	00005f51 	.word	0x00005f51
    6760:	00005411 	.word	0x00005411
    6764:	00005439 	.word	0x00005439
    6768:	00001031 	.word	0x00001031
    676c:	000055ed 	.word	0x000055ed
    6770:	8000007f 	.word	0x8000007f
    6774:	0000545d 	.word	0x0000545d
    6778:	00005475 	.word	0x00005475
    677c:	00005421 	.word	0x00005421

00006780 <_mqtt_ping>:
    6780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6782:	23c0      	movs	r3, #192	; 0xc0
    6784:	a901      	add	r1, sp, #4
    6786:	2500      	movs	r5, #0
    6788:	700b      	strb	r3, [r1, #0]
    678a:	704d      	strb	r5, [r1, #1]
    678c:	42a8      	cmp	r0, r5
    678e:	d019      	beq.n	67c4 <_mqtt_ping+0x44>
    6790:	1c04      	adds	r4, r0, #0
    6792:	3443      	adds	r4, #67	; 0x43
    6794:	7823      	ldrb	r3, [r4, #0]
    6796:	079a      	lsls	r2, r3, #30
    6798:	d516      	bpl.n	67c8 <_mqtt_ping+0x48>
    679a:	071a      	lsls	r2, r3, #28
    679c:	d416      	bmi.n	67cc <_mqtt_ping+0x4c>
    679e:	2608      	movs	r6, #8
    67a0:	4333      	orrs	r3, r6
    67a2:	7023      	strb	r3, [r4, #0]
    67a4:	7880      	ldrb	r0, [r0, #2]
    67a6:	1c2b      	adds	r3, r5, #0
    67a8:	b240      	sxtb	r0, r0
    67aa:	2202      	movs	r2, #2
    67ac:	4f09      	ldr	r7, [pc, #36]	; (67d4 <_mqtt_ping+0x54>)
    67ae:	47b8      	blx	r7
    67b0:	1c2b      	adds	r3, r5, #0
    67b2:	42a8      	cmp	r0, r5
    67b4:	da0c      	bge.n	67d0 <_mqtt_ping+0x50>
    67b6:	7823      	ldrb	r3, [r4, #0]
    67b8:	43b3      	bics	r3, r6
    67ba:	7023      	strb	r3, [r4, #0]
    67bc:	4b06      	ldr	r3, [pc, #24]	; (67d8 <_mqtt_ping+0x58>)
    67be:	4798      	blx	r3
    67c0:	1c03      	adds	r3, r0, #0
    67c2:	e005      	b.n	67d0 <_mqtt_ping+0x50>
    67c4:	2316      	movs	r3, #22
    67c6:	e002      	b.n	67ce <_mqtt_ping+0x4e>
    67c8:	2380      	movs	r3, #128	; 0x80
    67ca:	e000      	b.n	67ce <_mqtt_ping+0x4e>
    67cc:	230b      	movs	r3, #11
    67ce:	425b      	negs	r3, r3
    67d0:	1c18      	adds	r0, r3, #0
    67d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    67d4:	00002bfd 	.word	0x00002bfd
    67d8:	00005f01 	.word	0x00005f01

000067dc <mqtt_timer_callback>:
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	1c05      	adds	r5, r0, #0
    67e0:	b086      	sub	sp, #24
    67e2:	1c0e      	adds	r6, r1, #0
    67e4:	1c14      	adds	r4, r2, #0
    67e6:	2800      	cmp	r0, #0
    67e8:	d012      	beq.n	6810 <mqtt_timer_callback+0x34>
    67ea:	2a00      	cmp	r2, #0
    67ec:	d010      	beq.n	6810 <mqtt_timer_callback+0x34>
    67ee:	1c10      	adds	r0, r2, #0
    67f0:	4b08      	ldr	r3, [pc, #32]	; (6814 <mqtt_timer_callback+0x38>)
    67f2:	4798      	blx	r3
    67f4:	2800      	cmp	r0, #0
    67f6:	da04      	bge.n	6802 <mqtt_timer_callback+0x26>
    67f8:	1c28      	adds	r0, r5, #0
    67fa:	1c31      	adds	r1, r6, #0
    67fc:	2200      	movs	r2, #0
    67fe:	4b06      	ldr	r3, [pc, #24]	; (6818 <mqtt_timer_callback+0x3c>)
    6800:	e005      	b.n	680e <mqtt_timer_callback+0x32>
    6802:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6804:	2b00      	cmp	r3, #0
    6806:	d003      	beq.n	6810 <mqtt_timer_callback+0x34>
    6808:	1c20      	adds	r0, r4, #0
    680a:	2107      	movs	r1, #7
    680c:	aa01      	add	r2, sp, #4
    680e:	4798      	blx	r3
    6810:	b006      	add	sp, #24
    6812:	bd70      	pop	{r4, r5, r6, pc}
    6814:	00006781 	.word	0x00006781
    6818:	000055ad 	.word	0x000055ad

0000681c <_mqtt_puback>:
    681c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    681e:	2302      	movs	r3, #2
    6820:	ac01      	add	r4, sp, #4
    6822:	2700      	movs	r7, #0
    6824:	7063      	strb	r3, [r4, #1]
    6826:	42b8      	cmp	r0, r7
    6828:	d01e      	beq.n	6868 <_mqtt_puback+0x4c>
    682a:	1c05      	adds	r5, r0, #0
    682c:	3543      	adds	r5, #67	; 0x43
    682e:	782b      	ldrb	r3, [r5, #0]
    6830:	079e      	lsls	r6, r3, #30
    6832:	d51b      	bpl.n	686c <_mqtt_puback+0x50>
    6834:	071e      	lsls	r6, r3, #28
    6836:	d41b      	bmi.n	6870 <_mqtt_puback+0x54>
    6838:	2608      	movs	r6, #8
    683a:	4333      	orrs	r3, r6
    683c:	702b      	strb	r3, [r5, #0]
    683e:	7880      	ldrb	r0, [r0, #2]
    6840:	7021      	strb	r1, [r4, #0]
    6842:	0a11      	lsrs	r1, r2, #8
    6844:	70a1      	strb	r1, [r4, #2]
    6846:	70e2      	strb	r2, [r4, #3]
    6848:	1c21      	adds	r1, r4, #0
    684a:	1c3b      	adds	r3, r7, #0
    684c:	b240      	sxtb	r0, r0
    684e:	2204      	movs	r2, #4
    6850:	4c09      	ldr	r4, [pc, #36]	; (6878 <_mqtt_puback+0x5c>)
    6852:	47a0      	blx	r4
    6854:	1c3b      	adds	r3, r7, #0
    6856:	42b8      	cmp	r0, r7
    6858:	da0c      	bge.n	6874 <_mqtt_puback+0x58>
    685a:	782b      	ldrb	r3, [r5, #0]
    685c:	43b3      	bics	r3, r6
    685e:	702b      	strb	r3, [r5, #0]
    6860:	4b06      	ldr	r3, [pc, #24]	; (687c <_mqtt_puback+0x60>)
    6862:	4798      	blx	r3
    6864:	1c03      	adds	r3, r0, #0
    6866:	e005      	b.n	6874 <_mqtt_puback+0x58>
    6868:	2316      	movs	r3, #22
    686a:	e002      	b.n	6872 <_mqtt_puback+0x56>
    686c:	2380      	movs	r3, #128	; 0x80
    686e:	e000      	b.n	6872 <_mqtt_puback+0x56>
    6870:	230b      	movs	r3, #11
    6872:	425b      	negs	r3, r3
    6874:	1c18      	adds	r0, r3, #0
    6876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6878:	00002bfd 	.word	0x00002bfd
    687c:	00005f01 	.word	0x00005f01

00006880 <mqtt_clear_conn>:
    6880:	b530      	push	{r4, r5, lr}
    6882:	1c04      	adds	r4, r0, #0
    6884:	b087      	sub	sp, #28
    6886:	2800      	cmp	r0, #0
    6888:	d01c      	beq.n	68c4 <mqtt_clear_conn+0x44>
    688a:	2002      	movs	r0, #2
    688c:	4b0e      	ldr	r3, [pc, #56]	; (68c8 <mqtt_clear_conn+0x48>)
    688e:	5620      	ldrsb	r0, [r4, r0]
    6890:	4798      	blx	r3
    6892:	1c23      	adds	r3, r4, #0
    6894:	3343      	adds	r3, #67	; 0x43
    6896:	781a      	ldrb	r2, [r3, #0]
    6898:	21fc      	movs	r1, #252	; 0xfc
    689a:	0795      	lsls	r5, r2, #30
    689c:	400a      	ands	r2, r1
    689e:	701a      	strb	r2, [r3, #0]
    68a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    68a2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    68a4:	9301      	str	r3, [sp, #4]
    68a6:	2300      	movs	r3, #0
    68a8:	64e3      	str	r3, [r4, #76]	; 0x4c
    68aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
    68ac:	4b07      	ldr	r3, [pc, #28]	; (68cc <mqtt_clear_conn+0x4c>)
    68ae:	4798      	blx	r3
    68b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    68b2:	0fed      	lsrs	r5, r5, #31
    68b4:	2b00      	cmp	r3, #0
    68b6:	d005      	beq.n	68c4 <mqtt_clear_conn+0x44>
    68b8:	2d00      	cmp	r5, #0
    68ba:	d003      	beq.n	68c4 <mqtt_clear_conn+0x44>
    68bc:	1c20      	adds	r0, r4, #0
    68be:	2105      	movs	r1, #5
    68c0:	aa01      	add	r2, sp, #4
    68c2:	4798      	blx	r3
    68c4:	b007      	add	sp, #28
    68c6:	bd30      	pop	{r4, r5, pc}
    68c8:	00002d3d 	.word	0x00002d3d
    68cc:	000055dd 	.word	0x000055dd

000068d0 <mqtt_disconnect>:
    68d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68d2:	23e0      	movs	r3, #224	; 0xe0
    68d4:	ae01      	add	r6, sp, #4
    68d6:	2700      	movs	r7, #0
    68d8:	1c05      	adds	r5, r0, #0
    68da:	7033      	strb	r3, [r6, #0]
    68dc:	7077      	strb	r7, [r6, #1]
    68de:	42b8      	cmp	r0, r7
    68e0:	d036      	beq.n	6950 <mqtt_disconnect+0x80>
    68e2:	1c04      	adds	r4, r0, #0
    68e4:	3443      	adds	r4, #67	; 0x43
    68e6:	7823      	ldrb	r3, [r4, #0]
    68e8:	079a      	lsls	r2, r3, #30
    68ea:	d533      	bpl.n	6954 <mqtt_disconnect+0x84>
    68ec:	42b9      	cmp	r1, r7
    68ee:	d12b      	bne.n	6948 <mqtt_disconnect+0x78>
    68f0:	071a      	lsls	r2, r3, #28
    68f2:	d414      	bmi.n	691e <mqtt_disconnect+0x4e>
    68f4:	7823      	ldrb	r3, [r4, #0]
    68f6:	2210      	movs	r2, #16
    68f8:	4313      	orrs	r3, r2
    68fa:	2708      	movs	r7, #8
    68fc:	433b      	orrs	r3, r7
    68fe:	7023      	strb	r3, [r4, #0]
    6900:	2002      	movs	r0, #2
    6902:	5628      	ldrsb	r0, [r5, r0]
    6904:	1c31      	adds	r1, r6, #0
    6906:	2202      	movs	r2, #2
    6908:	2300      	movs	r3, #0
    690a:	4d15      	ldr	r5, [pc, #84]	; (6960 <mqtt_disconnect+0x90>)
    690c:	47a8      	blx	r5
    690e:	2800      	cmp	r0, #0
    6910:	da14      	bge.n	693c <mqtt_disconnect+0x6c>
    6912:	7823      	ldrb	r3, [r4, #0]
    6914:	43bb      	bics	r3, r7
    6916:	7023      	strb	r3, [r4, #0]
    6918:	4b12      	ldr	r3, [pc, #72]	; (6964 <mqtt_disconnect+0x94>)
    691a:	4798      	blx	r3
    691c:	e01e      	b.n	695c <mqtt_disconnect+0x8c>
    691e:	1c03      	adds	r3, r0, #0
    6920:	3370      	adds	r3, #112	; 0x70
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	2b00      	cmp	r3, #0
    6926:	d117      	bne.n	6958 <mqtt_disconnect+0x88>
    6928:	7823      	ldrb	r3, [r4, #0]
    692a:	071a      	lsls	r2, r3, #28
    692c:	d5e2      	bpl.n	68f4 <mqtt_disconnect+0x24>
    692e:	4b0e      	ldr	r3, [pc, #56]	; (6968 <mqtt_disconnect+0x98>)
    6930:	2000      	movs	r0, #0
    6932:	4798      	blx	r3
    6934:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6936:	4b0d      	ldr	r3, [pc, #52]	; (696c <mqtt_disconnect+0x9c>)
    6938:	4798      	blx	r3
    693a:	e7f5      	b.n	6928 <mqtt_disconnect+0x58>
    693c:	7823      	ldrb	r3, [r4, #0]
    693e:	2202      	movs	r2, #2
    6940:	4393      	bics	r3, r2
    6942:	7023      	strb	r3, [r4, #0]
    6944:	2000      	movs	r0, #0
    6946:	e009      	b.n	695c <mqtt_disconnect+0x8c>
    6948:	4b09      	ldr	r3, [pc, #36]	; (6970 <mqtt_disconnect+0xa0>)
    694a:	4798      	blx	r3
    694c:	1c38      	adds	r0, r7, #0
    694e:	e005      	b.n	695c <mqtt_disconnect+0x8c>
    6950:	2016      	movs	r0, #22
    6952:	e002      	b.n	695a <mqtt_disconnect+0x8a>
    6954:	2080      	movs	r0, #128	; 0x80
    6956:	e000      	b.n	695a <mqtt_disconnect+0x8a>
    6958:	200b      	movs	r0, #11
    695a:	4240      	negs	r0, r0
    695c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	00002bfd 	.word	0x00002bfd
    6964:	00005f01 	.word	0x00005f01
    6968:	00001031 	.word	0x00001031
    696c:	000055ed 	.word	0x000055ed
    6970:	00006881 	.word	0x00006881

00006974 <_mqtt_recv_handler>:
    6974:	b5f0      	push	{r4, r5, r6, r7, lr}
    6976:	1c04      	adds	r4, r0, #0
    6978:	6e40      	ldr	r0, [r0, #100]	; 0x64
    697a:	230f      	movs	r3, #15
    697c:	7802      	ldrb	r2, [r0, #0]
    697e:	b087      	sub	sp, #28
    6980:	1c15      	adds	r5, r2, #0
    6982:	439d      	bics	r5, r3
    6984:	2d50      	cmp	r5, #80	; 0x50
    6986:	d100      	bne.n	698a <_mqtt_recv_handler+0x16>
    6988:	e098      	b.n	6abc <_mqtt_recv_handler+0x148>
    698a:	d808      	bhi.n	699e <_mqtt_recv_handler+0x2a>
    698c:	2d30      	cmp	r5, #48	; 0x30
    698e:	d03f      	beq.n	6a10 <_mqtt_recv_handler+0x9c>
    6990:	2d40      	cmp	r5, #64	; 0x40
    6992:	d100      	bne.n	6996 <_mqtt_recv_handler+0x22>
    6994:	e0b3      	b.n	6afe <_mqtt_recv_handler+0x18a>
    6996:	2d20      	cmp	r5, #32
    6998:	d000      	beq.n	699c <_mqtt_recv_handler+0x28>
    699a:	e0c3      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    699c:	e00e      	b.n	69bc <_mqtt_recv_handler+0x48>
    699e:	2d70      	cmp	r5, #112	; 0x70
    69a0:	d100      	bne.n	69a4 <_mqtt_recv_handler+0x30>
    69a2:	e0ac      	b.n	6afe <_mqtt_recv_handler+0x18a>
    69a4:	d803      	bhi.n	69ae <_mqtt_recv_handler+0x3a>
    69a6:	2d60      	cmp	r5, #96	; 0x60
    69a8:	d100      	bne.n	69ac <_mqtt_recv_handler+0x38>
    69aa:	e096      	b.n	6ada <_mqtt_recv_handler+0x166>
    69ac:	e0ba      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    69ae:	2d90      	cmp	r5, #144	; 0x90
    69b0:	d100      	bne.n	69b4 <_mqtt_recv_handler+0x40>
    69b2:	e0aa      	b.n	6b0a <_mqtt_recv_handler+0x196>
    69b4:	2db0      	cmp	r5, #176	; 0xb0
    69b6:	d100      	bne.n	69ba <_mqtt_recv_handler+0x46>
    69b8:	e0ad      	b.n	6b16 <_mqtt_recv_handler+0x1a2>
    69ba:	e0b3      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    69bc:	aa01      	add	r2, sp, #4
    69be:	2303      	movs	r3, #3
    69c0:	2901      	cmp	r1, #1
    69c2:	d900      	bls.n	69c6 <_mqtt_recv_handler+0x52>
    69c4:	78c3      	ldrb	r3, [r0, #3]
    69c6:	7013      	strb	r3, [r2, #0]
    69c8:	7813      	ldrb	r3, [r2, #0]
    69ca:	2b00      	cmp	r3, #0
    69cc:	d00d      	beq.n	69ea <_mqtt_recv_handler+0x76>
    69ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    69d0:	2b00      	cmp	r3, #0
    69d2:	d002      	beq.n	69da <_mqtt_recv_handler+0x66>
    69d4:	1c20      	adds	r0, r4, #0
    69d6:	2101      	movs	r1, #1
    69d8:	4798      	blx	r3
    69da:	236f      	movs	r3, #111	; 0x6f
    69dc:	425b      	negs	r3, r3
    69de:	64e3      	str	r3, [r4, #76]	; 0x4c
    69e0:	1c20      	adds	r0, r4, #0
    69e2:	2100      	movs	r1, #0
    69e4:	4b50      	ldr	r3, [pc, #320]	; (6b28 <_mqtt_recv_handler+0x1b4>)
    69e6:	4798      	blx	r3
    69e8:	e09c      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    69ea:	1c23      	adds	r3, r4, #0
    69ec:	3343      	adds	r3, #67	; 0x43
    69ee:	7819      	ldrb	r1, [r3, #0]
    69f0:	0789      	lsls	r1, r1, #30
    69f2:	0fc9      	lsrs	r1, r1, #31
    69f4:	d105      	bne.n	6a02 <_mqtt_recv_handler+0x8e>
    69f6:	781a      	ldrb	r2, [r3, #0]
    69f8:	64e1      	str	r1, [r4, #76]	; 0x4c
    69fa:	2102      	movs	r1, #2
    69fc:	430a      	orrs	r2, r1
    69fe:	701a      	strb	r2, [r3, #0]
    6a00:	e090      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    6a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a04:	2b00      	cmp	r3, #0
    6a06:	d100      	bne.n	6a0a <_mqtt_recv_handler+0x96>
    6a08:	e08c      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    6a0a:	1c20      	adds	r0, r4, #0
    6a0c:	2101      	movs	r1, #1
    6a0e:	e088      	b.n	6b22 <_mqtt_recv_handler+0x1ae>
    6a10:	ad01      	add	r5, sp, #4
    6a12:	0713      	lsls	r3, r2, #28
    6a14:	7c2a      	ldrb	r2, [r5, #16]
    6a16:	0fdb      	lsrs	r3, r3, #31
    6a18:	2604      	movs	r6, #4
    6a1a:	009b      	lsls	r3, r3, #2
    6a1c:	43b2      	bics	r2, r6
    6a1e:	431a      	orrs	r2, r3
    6a20:	742a      	strb	r2, [r5, #16]
    6a22:	7807      	ldrb	r7, [r0, #0]
    6a24:	2303      	movs	r3, #3
    6a26:	b2d2      	uxtb	r2, r2
    6a28:	087f      	lsrs	r7, r7, #1
    6a2a:	439a      	bics	r2, r3
    6a2c:	401f      	ands	r7, r3
    6a2e:	1c13      	adds	r3, r2, #0
    6a30:	433b      	orrs	r3, r7
    6a32:	742b      	strb	r3, [r5, #16]
    6a34:	1c43      	adds	r3, r0, #1
    6a36:	7818      	ldrb	r0, [r3, #0]
    6a38:	1c5a      	adds	r2, r3, #1
    6a3a:	287f      	cmp	r0, #127	; 0x7f
    6a3c:	d901      	bls.n	6a42 <_mqtt_recv_handler+0xce>
    6a3e:	1c13      	adds	r3, r2, #0
    6a40:	e7f9      	b.n	6a36 <_mqtt_recv_handler+0xc2>
    6a42:	7858      	ldrb	r0, [r3, #1]
    6a44:	789e      	ldrb	r6, [r3, #2]
    6a46:	0200      	lsls	r0, r0, #8
    6a48:	4330      	orrs	r0, r6
    6a4a:	3303      	adds	r3, #3
    6a4c:	2600      	movs	r6, #0
    6a4e:	6068      	str	r0, [r5, #4]
    6a50:	9301      	str	r3, [sp, #4]
    6a52:	1818      	adds	r0, r3, r0
    6a54:	42b7      	cmp	r7, r6
    6a56:	d004      	beq.n	6a62 <_mqtt_recv_handler+0xee>
    6a58:	7806      	ldrb	r6, [r0, #0]
    6a5a:	7843      	ldrb	r3, [r0, #1]
    6a5c:	0236      	lsls	r6, r6, #8
    6a5e:	431e      	orrs	r6, r3
    6a60:	3002      	adds	r0, #2
    6a62:	1851      	adds	r1, r2, r1
    6a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a66:	60a8      	str	r0, [r5, #8]
    6a68:	1a08      	subs	r0, r1, r0
    6a6a:	60e8      	str	r0, [r5, #12]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d003      	beq.n	6a78 <_mqtt_recv_handler+0x104>
    6a70:	1c20      	adds	r0, r4, #0
    6a72:	2106      	movs	r1, #6
    6a74:	1c2a      	adds	r2, r5, #0
    6a76:	4798      	blx	r3
    6a78:	7c2b      	ldrb	r3, [r5, #16]
    6a7a:	079b      	lsls	r3, r3, #30
    6a7c:	0f9b      	lsrs	r3, r3, #30
    6a7e:	2b01      	cmp	r3, #1
    6a80:	d10b      	bne.n	6a9a <_mqtt_recv_handler+0x126>
    6a82:	b2b6      	uxth	r6, r6
    6a84:	1c20      	adds	r0, r4, #0
    6a86:	2140      	movs	r1, #64	; 0x40
    6a88:	1c32      	adds	r2, r6, #0
    6a8a:	4b28      	ldr	r3, [pc, #160]	; (6b2c <_mqtt_recv_handler+0x1b8>)
    6a8c:	4798      	blx	r3
    6a8e:	2800      	cmp	r0, #0
    6a90:	d048      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6a92:	1c23      	adds	r3, r4, #0
    6a94:	3348      	adds	r3, #72	; 0x48
    6a96:	2240      	movs	r2, #64	; 0x40
    6a98:	e00c      	b.n	6ab4 <_mqtt_recv_handler+0x140>
    6a9a:	2b02      	cmp	r3, #2
    6a9c:	d142      	bne.n	6b24 <_mqtt_recv_handler+0x1b0>
    6a9e:	b2b6      	uxth	r6, r6
    6aa0:	1c20      	adds	r0, r4, #0
    6aa2:	2150      	movs	r1, #80	; 0x50
    6aa4:	1c32      	adds	r2, r6, #0
    6aa6:	4b21      	ldr	r3, [pc, #132]	; (6b2c <_mqtt_recv_handler+0x1b8>)
    6aa8:	4798      	blx	r3
    6aaa:	2800      	cmp	r0, #0
    6aac:	d03a      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6aae:	1c23      	adds	r3, r4, #0
    6ab0:	3348      	adds	r3, #72	; 0x48
    6ab2:	2250      	movs	r2, #80	; 0x50
    6ab4:	344a      	adds	r4, #74	; 0x4a
    6ab6:	701a      	strb	r2, [r3, #0]
    6ab8:	8026      	strh	r6, [r4, #0]
    6aba:	e033      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    6abc:	7885      	ldrb	r5, [r0, #2]
    6abe:	78c3      	ldrb	r3, [r0, #3]
    6ac0:	022d      	lsls	r5, r5, #8
    6ac2:	431d      	orrs	r5, r3
    6ac4:	1c20      	adds	r0, r4, #0
    6ac6:	2162      	movs	r1, #98	; 0x62
    6ac8:	1c2a      	adds	r2, r5, #0
    6aca:	4b18      	ldr	r3, [pc, #96]	; (6b2c <_mqtt_recv_handler+0x1b8>)
    6acc:	4798      	blx	r3
    6ace:	2800      	cmp	r0, #0
    6ad0:	d028      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6ad2:	1c23      	adds	r3, r4, #0
    6ad4:	3348      	adds	r3, #72	; 0x48
    6ad6:	2260      	movs	r2, #96	; 0x60
    6ad8:	e00d      	b.n	6af6 <_mqtt_recv_handler+0x182>
    6ada:	7885      	ldrb	r5, [r0, #2]
    6adc:	78c3      	ldrb	r3, [r0, #3]
    6ade:	022d      	lsls	r5, r5, #8
    6ae0:	431d      	orrs	r5, r3
    6ae2:	1c20      	adds	r0, r4, #0
    6ae4:	2170      	movs	r1, #112	; 0x70
    6ae6:	1c2a      	adds	r2, r5, #0
    6ae8:	4b10      	ldr	r3, [pc, #64]	; (6b2c <_mqtt_recv_handler+0x1b8>)
    6aea:	4798      	blx	r3
    6aec:	2800      	cmp	r0, #0
    6aee:	d019      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6af0:	1c23      	adds	r3, r4, #0
    6af2:	3348      	adds	r3, #72	; 0x48
    6af4:	2270      	movs	r2, #112	; 0x70
    6af6:	344a      	adds	r4, #74	; 0x4a
    6af8:	701a      	strb	r2, [r3, #0]
    6afa:	8025      	strh	r5, [r4, #0]
    6afc:	e012      	b.n	6b24 <_mqtt_recv_handler+0x1b0>
    6afe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b00:	2b00      	cmp	r3, #0
    6b02:	d00f      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6b04:	1c20      	adds	r0, r4, #0
    6b06:	2102      	movs	r1, #2
    6b08:	e00a      	b.n	6b20 <_mqtt_recv_handler+0x1ac>
    6b0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d009      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6b10:	1c20      	adds	r0, r4, #0
    6b12:	2103      	movs	r1, #3
    6b14:	e004      	b.n	6b20 <_mqtt_recv_handler+0x1ac>
    6b16:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d003      	beq.n	6b24 <_mqtt_recv_handler+0x1b0>
    6b1c:	1c20      	adds	r0, r4, #0
    6b1e:	2104      	movs	r1, #4
    6b20:	aa01      	add	r2, sp, #4
    6b22:	4798      	blx	r3
    6b24:	b007      	add	sp, #28
    6b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b28:	000068d1 	.word	0x000068d1
    6b2c:	0000681d 	.word	0x0000681d

00006b30 <mqtt_recv_packet>:
    6b30:	b538      	push	{r3, r4, r5, lr}
    6b32:	1e04      	subs	r4, r0, #0
    6b34:	d017      	beq.n	6b66 <mqtt_recv_packet+0x36>
    6b36:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6b38:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6b3a:	429a      	cmp	r2, r3
    6b3c:	d906      	bls.n	6b4c <mqtt_recv_packet+0x1c>
    6b3e:	238b      	movs	r3, #139	; 0x8b
    6b40:	425b      	negs	r3, r3
    6b42:	64c3      	str	r3, [r0, #76]	; 0x4c
    6b44:	2100      	movs	r1, #0
    6b46:	4b08      	ldr	r3, [pc, #32]	; (6b68 <mqtt_recv_packet+0x38>)
    6b48:	4798      	blx	r3
    6b4a:	e00c      	b.n	6b66 <mqtt_recv_packet+0x36>
    6b4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6b50:	2002      	movs	r0, #2
    6b52:	1899      	adds	r1, r3, r2
    6b54:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6b56:	5620      	ldrsb	r0, [r4, r0]
    6b58:	1a9a      	subs	r2, r3, r2
    6b5a:	b292      	uxth	r2, r2
    6b5c:	2300      	movs	r3, #0
    6b5e:	4d03      	ldr	r5, [pc, #12]	; (6b6c <mqtt_recv_packet+0x3c>)
    6b60:	47a8      	blx	r5
    6b62:	2800      	cmp	r0, #0
    6b64:	d1f2      	bne.n	6b4c <mqtt_recv_packet+0x1c>
    6b66:	bd38      	pop	{r3, r4, r5, pc}
    6b68:	000068d1 	.word	0x000068d1
    6b6c:	00002c99 	.word	0x00002c99

00006b70 <mqtt_recved_packet>:
    6b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b72:	1e04      	subs	r4, r0, #0
    6b74:	d042      	beq.n	6bfc <mqtt_recved_packet+0x8c>
    6b76:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6b78:	6e67      	ldr	r7, [r4, #100]	; 0x64
    6b7a:	18ca      	adds	r2, r1, r3
    6b7c:	2301      	movs	r3, #1
    6b7e:	9701      	str	r7, [sp, #4]
    6b80:	6462      	str	r2, [r4, #68]	; 0x44
    6b82:	2600      	movs	r6, #0
    6b84:	1c1d      	adds	r5, r3, #0
    6b86:	42a9      	cmp	r1, r5
    6b88:	dc03      	bgt.n	6b92 <mqtt_recved_packet+0x22>
    6b8a:	1c20      	adds	r0, r4, #0
    6b8c:	4b1c      	ldr	r3, [pc, #112]	; (6c00 <mqtt_recved_packet+0x90>)
    6b8e:	4798      	blx	r3
    6b90:	e034      	b.n	6bfc <mqtt_recved_packet+0x8c>
    6b92:	9f01      	ldr	r7, [sp, #4]
    6b94:	5d78      	ldrb	r0, [r7, r5]
    6b96:	01df      	lsls	r7, r3, #7
    6b98:	46bc      	mov	ip, r7
    6b9a:	2d03      	cmp	r5, #3
    6b9c:	d101      	bne.n	6ba2 <mqtt_recved_packet+0x32>
    6b9e:	234d      	movs	r3, #77	; 0x4d
    6ba0:	e00e      	b.n	6bc0 <mqtt_recved_packet+0x50>
    6ba2:	277f      	movs	r7, #127	; 0x7f
    6ba4:	4007      	ands	r7, r0
    6ba6:	437b      	muls	r3, r7
    6ba8:	b240      	sxtb	r0, r0
    6baa:	3501      	adds	r5, #1
    6bac:	18f6      	adds	r6, r6, r3
    6bae:	2800      	cmp	r0, #0
    6bb0:	da01      	bge.n	6bb6 <mqtt_recved_packet+0x46>
    6bb2:	4663      	mov	r3, ip
    6bb4:	e7e7      	b.n	6b86 <mqtt_recved_packet+0x16>
    6bb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6bb8:	19af      	adds	r7, r5, r6
    6bba:	429f      	cmp	r7, r3
    6bbc:	d907      	bls.n	6bce <mqtt_recved_packet+0x5e>
    6bbe:	238b      	movs	r3, #139	; 0x8b
    6bc0:	425b      	negs	r3, r3
    6bc2:	64e3      	str	r3, [r4, #76]	; 0x4c
    6bc4:	1c20      	adds	r0, r4, #0
    6bc6:	2100      	movs	r1, #0
    6bc8:	4b0e      	ldr	r3, [pc, #56]	; (6c04 <mqtt_recved_packet+0x94>)
    6bca:	4798      	blx	r3
    6bcc:	e016      	b.n	6bfc <mqtt_recved_packet+0x8c>
    6bce:	42ba      	cmp	r2, r7
    6bd0:	d314      	bcc.n	6bfc <mqtt_recved_packet+0x8c>
    6bd2:	4b0d      	ldr	r3, [pc, #52]	; (6c08 <mqtt_recved_packet+0x98>)
    6bd4:	1c20      	adds	r0, r4, #0
    6bd6:	1c31      	adds	r1, r6, #0
    6bd8:	4798      	blx	r3
    6bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6bdc:	42bb      	cmp	r3, r7
    6bde:	d102      	bne.n	6be6 <mqtt_recved_packet+0x76>
    6be0:	2300      	movs	r3, #0
    6be2:	6463      	str	r3, [r4, #68]	; 0x44
    6be4:	e00a      	b.n	6bfc <mqtt_recved_packet+0x8c>
    6be6:	1b9e      	subs	r6, r3, r6
    6be8:	9b01      	ldr	r3, [sp, #4]
    6bea:	1b75      	subs	r5, r6, r5
    6bec:	19d9      	adds	r1, r3, r7
    6bee:	1c18      	adds	r0, r3, #0
    6bf0:	1c2a      	adds	r2, r5, #0
    6bf2:	4b06      	ldr	r3, [pc, #24]	; (6c0c <mqtt_recved_packet+0x9c>)
    6bf4:	4798      	blx	r3
    6bf6:	6465      	str	r5, [r4, #68]	; 0x44
    6bf8:	2100      	movs	r1, #0
    6bfa:	e7bc      	b.n	6b76 <mqtt_recved_packet+0x6>
    6bfc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6bfe:	46c0      	nop			; (mov r8, r8)
    6c00:	00006b31 	.word	0x00006b31
    6c04:	000068d1 	.word	0x000068d1
    6c08:	00006975 	.word	0x00006975
    6c0c:	00006f3b 	.word	0x00006f3b

00006c10 <mqtt_socket_event_handler>:
    6c10:	b570      	push	{r4, r5, r6, lr}
    6c12:	4d37      	ldr	r5, [pc, #220]	; (6cf0 <mqtt_socket_event_handler+0xe0>)
    6c14:	0086      	lsls	r6, r0, #2
    6c16:	5974      	ldr	r4, [r6, r5]
    6c18:	b086      	sub	sp, #24
    6c1a:	2c00      	cmp	r4, #0
    6c1c:	d066      	beq.n	6cec <mqtt_socket_event_handler+0xdc>
    6c1e:	2906      	cmp	r1, #6
    6c20:	d02b      	beq.n	6c7a <mqtt_socket_event_handler+0x6a>
    6c22:	2907      	cmp	r1, #7
    6c24:	d039      	beq.n	6c9a <mqtt_socket_event_handler+0x8a>
    6c26:	2905      	cmp	r1, #5
    6c28:	d160      	bne.n	6cec <mqtt_socket_event_handler+0xdc>
    6c2a:	2001      	movs	r0, #1
    6c2c:	5610      	ldrsb	r0, [r2, r0]
    6c2e:	4b31      	ldr	r3, [pc, #196]	; (6cf4 <mqtt_socket_event_handler+0xe4>)
    6c30:	4798      	blx	r3
    6c32:	9001      	str	r0, [sp, #4]
    6c34:	2800      	cmp	r0, #0
    6c36:	da06      	bge.n	6c46 <mqtt_socket_event_handler+0x36>
    6c38:	2002      	movs	r0, #2
    6c3a:	4b2f      	ldr	r3, [pc, #188]	; (6cf8 <mqtt_socket_event_handler+0xe8>)
    6c3c:	5620      	ldrsb	r0, [r4, r0]
    6c3e:	4798      	blx	r3
    6c40:	2300      	movs	r3, #0
    6c42:	5173      	str	r3, [r6, r5]
    6c44:	e011      	b.n	6c6a <mqtt_socket_event_handler+0x5a>
    6c46:	1c23      	adds	r3, r4, #0
    6c48:	3343      	adds	r3, #67	; 0x43
    6c4a:	781a      	ldrb	r2, [r3, #0]
    6c4c:	2101      	movs	r1, #1
    6c4e:	430a      	orrs	r2, r1
    6c50:	701a      	strb	r2, [r3, #0]
    6c52:	331d      	adds	r3, #29
    6c54:	881b      	ldrh	r3, [r3, #0]
    6c56:	2b00      	cmp	r3, #0
    6c58:	d004      	beq.n	6c64 <mqtt_socket_event_handler+0x54>
    6c5a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6c5c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6c5e:	2200      	movs	r2, #0
    6c60:	4b26      	ldr	r3, [pc, #152]	; (6cfc <mqtt_socket_event_handler+0xec>)
    6c62:	4798      	blx	r3
    6c64:	1c20      	adds	r0, r4, #0
    6c66:	4b26      	ldr	r3, [pc, #152]	; (6d00 <mqtt_socket_event_handler+0xf0>)
    6c68:	4798      	blx	r3
    6c6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d03d      	beq.n	6cec <mqtt_socket_event_handler+0xdc>
    6c70:	1c20      	adds	r0, r4, #0
    6c72:	2100      	movs	r1, #0
    6c74:	aa01      	add	r2, sp, #4
    6c76:	4798      	blx	r3
    6c78:	e038      	b.n	6cec <mqtt_socket_event_handler+0xdc>
    6c7a:	2304      	movs	r3, #4
    6c7c:	5ed1      	ldrsh	r1, [r2, r3]
    6c7e:	2900      	cmp	r1, #0
    6c80:	dd03      	ble.n	6c8a <mqtt_socket_event_handler+0x7a>
    6c82:	1c20      	adds	r0, r4, #0
    6c84:	4b1f      	ldr	r3, [pc, #124]	; (6d04 <mqtt_socket_event_handler+0xf4>)
    6c86:	4798      	blx	r3
    6c88:	e003      	b.n	6c92 <mqtt_socket_event_handler+0x82>
    6c8a:	1c0b      	adds	r3, r1, #0
    6c8c:	1c08      	adds	r0, r1, #0
    6c8e:	330d      	adds	r3, #13
    6c90:	d11a      	bne.n	6cc8 <mqtt_socket_event_handler+0xb8>
    6c92:	4b1b      	ldr	r3, [pc, #108]	; (6d00 <mqtt_socket_event_handler+0xf0>)
    6c94:	1c20      	adds	r0, r4, #0
    6c96:	4798      	blx	r3
    6c98:	e028      	b.n	6cec <mqtt_socket_event_handler+0xdc>
    6c9a:	1c23      	adds	r3, r4, #0
    6c9c:	3343      	adds	r3, #67	; 0x43
    6c9e:	8810      	ldrh	r0, [r2, #0]
    6ca0:	781a      	ldrb	r2, [r3, #0]
    6ca2:	0751      	lsls	r1, r2, #29
    6ca4:	d402      	bmi.n	6cac <mqtt_socket_event_handler+0x9c>
    6ca6:	2108      	movs	r1, #8
    6ca8:	438a      	bics	r2, r1
    6caa:	701a      	strb	r2, [r3, #0]
    6cac:	781a      	ldrb	r2, [r3, #0]
    6cae:	2104      	movs	r1, #4
    6cb0:	438a      	bics	r2, r1
    6cb2:	701a      	strb	r2, [r3, #0]
    6cb4:	06d3      	lsls	r3, r2, #27
    6cb6:	0fde      	lsrs	r6, r3, #31
    6cb8:	b200      	sxth	r0, r0
    6cba:	2b00      	cmp	r3, #0
    6cbc:	db02      	blt.n	6cc4 <mqtt_socket_event_handler+0xb4>
    6cbe:	2800      	cmp	r0, #0
    6cc0:	da08      	bge.n	6cd4 <mqtt_socket_event_handler+0xc4>
    6cc2:	e001      	b.n	6cc8 <mqtt_socket_event_handler+0xb8>
    6cc4:	2800      	cmp	r0, #0
    6cc6:	da02      	bge.n	6cce <mqtt_socket_event_handler+0xbe>
    6cc8:	4b0a      	ldr	r3, [pc, #40]	; (6cf4 <mqtt_socket_event_handler+0xe4>)
    6cca:	4798      	blx	r3
    6ccc:	64e0      	str	r0, [r4, #76]	; 0x4c
    6cce:	1c20      	adds	r0, r4, #0
    6cd0:	4b0d      	ldr	r3, [pc, #52]	; (6d08 <mqtt_socket_event_handler+0xf8>)
    6cd2:	e7e0      	b.n	6c96 <mqtt_socket_event_handler+0x86>
    6cd4:	1c25      	adds	r5, r4, #0
    6cd6:	3548      	adds	r5, #72	; 0x48
    6cd8:	7829      	ldrb	r1, [r5, #0]
    6cda:	2900      	cmp	r1, #0
    6cdc:	d006      	beq.n	6cec <mqtt_socket_event_handler+0xdc>
    6cde:	1c23      	adds	r3, r4, #0
    6ce0:	334a      	adds	r3, #74	; 0x4a
    6ce2:	881a      	ldrh	r2, [r3, #0]
    6ce4:	1c20      	adds	r0, r4, #0
    6ce6:	4b09      	ldr	r3, [pc, #36]	; (6d0c <mqtt_socket_event_handler+0xfc>)
    6ce8:	4798      	blx	r3
    6cea:	702e      	strb	r6, [r5, #0]
    6cec:	b006      	add	sp, #24
    6cee:	bd70      	pop	{r4, r5, r6, pc}
    6cf0:	200002bc 	.word	0x200002bc
    6cf4:	00005f01 	.word	0x00005f01
    6cf8:	00002d3d 	.word	0x00002d3d
    6cfc:	000055ad 	.word	0x000055ad
    6d00:	00006b31 	.word	0x00006b31
    6d04:	00006b71 	.word	0x00006b71
    6d08:	00006881 	.word	0x00006881
    6d0c:	0000681d 	.word	0x0000681d

00006d10 <__gnu_thumb1_case_uqi>:
    6d10:	b402      	push	{r1}
    6d12:	4671      	mov	r1, lr
    6d14:	0849      	lsrs	r1, r1, #1
    6d16:	0049      	lsls	r1, r1, #1
    6d18:	5c09      	ldrb	r1, [r1, r0]
    6d1a:	0049      	lsls	r1, r1, #1
    6d1c:	448e      	add	lr, r1
    6d1e:	bc02      	pop	{r1}
    6d20:	4770      	bx	lr
    6d22:	46c0      	nop			; (mov r8, r8)

00006d24 <__aeabi_uidiv>:
    6d24:	2900      	cmp	r1, #0
    6d26:	d034      	beq.n	6d92 <.udivsi3_skip_div0_test+0x6a>

00006d28 <.udivsi3_skip_div0_test>:
    6d28:	2301      	movs	r3, #1
    6d2a:	2200      	movs	r2, #0
    6d2c:	b410      	push	{r4}
    6d2e:	4288      	cmp	r0, r1
    6d30:	d32c      	bcc.n	6d8c <.udivsi3_skip_div0_test+0x64>
    6d32:	2401      	movs	r4, #1
    6d34:	0724      	lsls	r4, r4, #28
    6d36:	42a1      	cmp	r1, r4
    6d38:	d204      	bcs.n	6d44 <.udivsi3_skip_div0_test+0x1c>
    6d3a:	4281      	cmp	r1, r0
    6d3c:	d202      	bcs.n	6d44 <.udivsi3_skip_div0_test+0x1c>
    6d3e:	0109      	lsls	r1, r1, #4
    6d40:	011b      	lsls	r3, r3, #4
    6d42:	e7f8      	b.n	6d36 <.udivsi3_skip_div0_test+0xe>
    6d44:	00e4      	lsls	r4, r4, #3
    6d46:	42a1      	cmp	r1, r4
    6d48:	d204      	bcs.n	6d54 <.udivsi3_skip_div0_test+0x2c>
    6d4a:	4281      	cmp	r1, r0
    6d4c:	d202      	bcs.n	6d54 <.udivsi3_skip_div0_test+0x2c>
    6d4e:	0049      	lsls	r1, r1, #1
    6d50:	005b      	lsls	r3, r3, #1
    6d52:	e7f8      	b.n	6d46 <.udivsi3_skip_div0_test+0x1e>
    6d54:	4288      	cmp	r0, r1
    6d56:	d301      	bcc.n	6d5c <.udivsi3_skip_div0_test+0x34>
    6d58:	1a40      	subs	r0, r0, r1
    6d5a:	431a      	orrs	r2, r3
    6d5c:	084c      	lsrs	r4, r1, #1
    6d5e:	42a0      	cmp	r0, r4
    6d60:	d302      	bcc.n	6d68 <.udivsi3_skip_div0_test+0x40>
    6d62:	1b00      	subs	r0, r0, r4
    6d64:	085c      	lsrs	r4, r3, #1
    6d66:	4322      	orrs	r2, r4
    6d68:	088c      	lsrs	r4, r1, #2
    6d6a:	42a0      	cmp	r0, r4
    6d6c:	d302      	bcc.n	6d74 <.udivsi3_skip_div0_test+0x4c>
    6d6e:	1b00      	subs	r0, r0, r4
    6d70:	089c      	lsrs	r4, r3, #2
    6d72:	4322      	orrs	r2, r4
    6d74:	08cc      	lsrs	r4, r1, #3
    6d76:	42a0      	cmp	r0, r4
    6d78:	d302      	bcc.n	6d80 <.udivsi3_skip_div0_test+0x58>
    6d7a:	1b00      	subs	r0, r0, r4
    6d7c:	08dc      	lsrs	r4, r3, #3
    6d7e:	4322      	orrs	r2, r4
    6d80:	2800      	cmp	r0, #0
    6d82:	d003      	beq.n	6d8c <.udivsi3_skip_div0_test+0x64>
    6d84:	091b      	lsrs	r3, r3, #4
    6d86:	d001      	beq.n	6d8c <.udivsi3_skip_div0_test+0x64>
    6d88:	0909      	lsrs	r1, r1, #4
    6d8a:	e7e3      	b.n	6d54 <.udivsi3_skip_div0_test+0x2c>
    6d8c:	1c10      	adds	r0, r2, #0
    6d8e:	bc10      	pop	{r4}
    6d90:	4770      	bx	lr
    6d92:	2800      	cmp	r0, #0
    6d94:	d001      	beq.n	6d9a <.udivsi3_skip_div0_test+0x72>
    6d96:	2000      	movs	r0, #0
    6d98:	43c0      	mvns	r0, r0
    6d9a:	b407      	push	{r0, r1, r2}
    6d9c:	4802      	ldr	r0, [pc, #8]	; (6da8 <.udivsi3_skip_div0_test+0x80>)
    6d9e:	a102      	add	r1, pc, #8	; (adr r1, 6da8 <.udivsi3_skip_div0_test+0x80>)
    6da0:	1840      	adds	r0, r0, r1
    6da2:	9002      	str	r0, [sp, #8]
    6da4:	bd03      	pop	{r0, r1, pc}
    6da6:	46c0      	nop			; (mov r8, r8)
    6da8:	000000d9 	.word	0x000000d9

00006dac <__aeabi_uidivmod>:
    6dac:	2900      	cmp	r1, #0
    6dae:	d0f0      	beq.n	6d92 <.udivsi3_skip_div0_test+0x6a>
    6db0:	b503      	push	{r0, r1, lr}
    6db2:	f7ff ffb9 	bl	6d28 <.udivsi3_skip_div0_test>
    6db6:	bc0e      	pop	{r1, r2, r3}
    6db8:	4342      	muls	r2, r0
    6dba:	1a89      	subs	r1, r1, r2
    6dbc:	4718      	bx	r3
    6dbe:	46c0      	nop			; (mov r8, r8)

00006dc0 <__aeabi_idiv>:
    6dc0:	2900      	cmp	r1, #0
    6dc2:	d041      	beq.n	6e48 <.divsi3_skip_div0_test+0x84>

00006dc4 <.divsi3_skip_div0_test>:
    6dc4:	b410      	push	{r4}
    6dc6:	1c04      	adds	r4, r0, #0
    6dc8:	404c      	eors	r4, r1
    6dca:	46a4      	mov	ip, r4
    6dcc:	2301      	movs	r3, #1
    6dce:	2200      	movs	r2, #0
    6dd0:	2900      	cmp	r1, #0
    6dd2:	d500      	bpl.n	6dd6 <.divsi3_skip_div0_test+0x12>
    6dd4:	4249      	negs	r1, r1
    6dd6:	2800      	cmp	r0, #0
    6dd8:	d500      	bpl.n	6ddc <.divsi3_skip_div0_test+0x18>
    6dda:	4240      	negs	r0, r0
    6ddc:	4288      	cmp	r0, r1
    6dde:	d32c      	bcc.n	6e3a <.divsi3_skip_div0_test+0x76>
    6de0:	2401      	movs	r4, #1
    6de2:	0724      	lsls	r4, r4, #28
    6de4:	42a1      	cmp	r1, r4
    6de6:	d204      	bcs.n	6df2 <.divsi3_skip_div0_test+0x2e>
    6de8:	4281      	cmp	r1, r0
    6dea:	d202      	bcs.n	6df2 <.divsi3_skip_div0_test+0x2e>
    6dec:	0109      	lsls	r1, r1, #4
    6dee:	011b      	lsls	r3, r3, #4
    6df0:	e7f8      	b.n	6de4 <.divsi3_skip_div0_test+0x20>
    6df2:	00e4      	lsls	r4, r4, #3
    6df4:	42a1      	cmp	r1, r4
    6df6:	d204      	bcs.n	6e02 <.divsi3_skip_div0_test+0x3e>
    6df8:	4281      	cmp	r1, r0
    6dfa:	d202      	bcs.n	6e02 <.divsi3_skip_div0_test+0x3e>
    6dfc:	0049      	lsls	r1, r1, #1
    6dfe:	005b      	lsls	r3, r3, #1
    6e00:	e7f8      	b.n	6df4 <.divsi3_skip_div0_test+0x30>
    6e02:	4288      	cmp	r0, r1
    6e04:	d301      	bcc.n	6e0a <.divsi3_skip_div0_test+0x46>
    6e06:	1a40      	subs	r0, r0, r1
    6e08:	431a      	orrs	r2, r3
    6e0a:	084c      	lsrs	r4, r1, #1
    6e0c:	42a0      	cmp	r0, r4
    6e0e:	d302      	bcc.n	6e16 <.divsi3_skip_div0_test+0x52>
    6e10:	1b00      	subs	r0, r0, r4
    6e12:	085c      	lsrs	r4, r3, #1
    6e14:	4322      	orrs	r2, r4
    6e16:	088c      	lsrs	r4, r1, #2
    6e18:	42a0      	cmp	r0, r4
    6e1a:	d302      	bcc.n	6e22 <.divsi3_skip_div0_test+0x5e>
    6e1c:	1b00      	subs	r0, r0, r4
    6e1e:	089c      	lsrs	r4, r3, #2
    6e20:	4322      	orrs	r2, r4
    6e22:	08cc      	lsrs	r4, r1, #3
    6e24:	42a0      	cmp	r0, r4
    6e26:	d302      	bcc.n	6e2e <.divsi3_skip_div0_test+0x6a>
    6e28:	1b00      	subs	r0, r0, r4
    6e2a:	08dc      	lsrs	r4, r3, #3
    6e2c:	4322      	orrs	r2, r4
    6e2e:	2800      	cmp	r0, #0
    6e30:	d003      	beq.n	6e3a <.divsi3_skip_div0_test+0x76>
    6e32:	091b      	lsrs	r3, r3, #4
    6e34:	d001      	beq.n	6e3a <.divsi3_skip_div0_test+0x76>
    6e36:	0909      	lsrs	r1, r1, #4
    6e38:	e7e3      	b.n	6e02 <.divsi3_skip_div0_test+0x3e>
    6e3a:	1c10      	adds	r0, r2, #0
    6e3c:	4664      	mov	r4, ip
    6e3e:	2c00      	cmp	r4, #0
    6e40:	d500      	bpl.n	6e44 <.divsi3_skip_div0_test+0x80>
    6e42:	4240      	negs	r0, r0
    6e44:	bc10      	pop	{r4}
    6e46:	4770      	bx	lr
    6e48:	2800      	cmp	r0, #0
    6e4a:	d006      	beq.n	6e5a <.divsi3_skip_div0_test+0x96>
    6e4c:	db03      	blt.n	6e56 <.divsi3_skip_div0_test+0x92>
    6e4e:	2000      	movs	r0, #0
    6e50:	43c0      	mvns	r0, r0
    6e52:	0840      	lsrs	r0, r0, #1
    6e54:	e001      	b.n	6e5a <.divsi3_skip_div0_test+0x96>
    6e56:	2080      	movs	r0, #128	; 0x80
    6e58:	0600      	lsls	r0, r0, #24
    6e5a:	b407      	push	{r0, r1, r2}
    6e5c:	4802      	ldr	r0, [pc, #8]	; (6e68 <.divsi3_skip_div0_test+0xa4>)
    6e5e:	a102      	add	r1, pc, #8	; (adr r1, 6e68 <.divsi3_skip_div0_test+0xa4>)
    6e60:	1840      	adds	r0, r0, r1
    6e62:	9002      	str	r0, [sp, #8]
    6e64:	bd03      	pop	{r0, r1, pc}
    6e66:	46c0      	nop			; (mov r8, r8)
    6e68:	00000019 	.word	0x00000019

00006e6c <__aeabi_idivmod>:
    6e6c:	2900      	cmp	r1, #0
    6e6e:	d0eb      	beq.n	6e48 <.divsi3_skip_div0_test+0x84>
    6e70:	b503      	push	{r0, r1, lr}
    6e72:	f7ff ffa7 	bl	6dc4 <.divsi3_skip_div0_test>
    6e76:	bc0e      	pop	{r1, r2, r3}
    6e78:	4342      	muls	r2, r0
    6e7a:	1a89      	subs	r1, r1, r2
    6e7c:	4718      	bx	r3
    6e7e:	46c0      	nop			; (mov r8, r8)

00006e80 <__aeabi_idiv0>:
    6e80:	4770      	bx	lr
    6e82:	46c0      	nop			; (mov r8, r8)

00006e84 <__aeabi_lmul>:
    6e84:	469c      	mov	ip, r3
    6e86:	0403      	lsls	r3, r0, #16
    6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e8a:	0c1b      	lsrs	r3, r3, #16
    6e8c:	0417      	lsls	r7, r2, #16
    6e8e:	0c3f      	lsrs	r7, r7, #16
    6e90:	0c15      	lsrs	r5, r2, #16
    6e92:	1c1e      	adds	r6, r3, #0
    6e94:	1c04      	adds	r4, r0, #0
    6e96:	0c00      	lsrs	r0, r0, #16
    6e98:	437e      	muls	r6, r7
    6e9a:	436b      	muls	r3, r5
    6e9c:	4347      	muls	r7, r0
    6e9e:	4345      	muls	r5, r0
    6ea0:	18fb      	adds	r3, r7, r3
    6ea2:	0c30      	lsrs	r0, r6, #16
    6ea4:	1818      	adds	r0, r3, r0
    6ea6:	4287      	cmp	r7, r0
    6ea8:	d902      	bls.n	6eb0 <__aeabi_lmul+0x2c>
    6eaa:	2380      	movs	r3, #128	; 0x80
    6eac:	025b      	lsls	r3, r3, #9
    6eae:	18ed      	adds	r5, r5, r3
    6eb0:	0c03      	lsrs	r3, r0, #16
    6eb2:	18ed      	adds	r5, r5, r3
    6eb4:	4663      	mov	r3, ip
    6eb6:	435c      	muls	r4, r3
    6eb8:	434a      	muls	r2, r1
    6eba:	0436      	lsls	r6, r6, #16
    6ebc:	0c36      	lsrs	r6, r6, #16
    6ebe:	18a1      	adds	r1, r4, r2
    6ec0:	0400      	lsls	r0, r0, #16
    6ec2:	1980      	adds	r0, r0, r6
    6ec4:	1949      	adds	r1, r1, r5
    6ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ec8 <__libc_init_array>:
    6ec8:	b570      	push	{r4, r5, r6, lr}
    6eca:	4b0e      	ldr	r3, [pc, #56]	; (6f04 <__libc_init_array+0x3c>)
    6ecc:	4d0e      	ldr	r5, [pc, #56]	; (6f08 <__libc_init_array+0x40>)
    6ece:	2400      	movs	r4, #0
    6ed0:	1aed      	subs	r5, r5, r3
    6ed2:	10ad      	asrs	r5, r5, #2
    6ed4:	1c1e      	adds	r6, r3, #0
    6ed6:	42ac      	cmp	r4, r5
    6ed8:	d004      	beq.n	6ee4 <__libc_init_array+0x1c>
    6eda:	00a3      	lsls	r3, r4, #2
    6edc:	58f3      	ldr	r3, [r6, r3]
    6ede:	4798      	blx	r3
    6ee0:	3401      	adds	r4, #1
    6ee2:	e7f8      	b.n	6ed6 <__libc_init_array+0xe>
    6ee4:	f002 fc10 	bl	9708 <_init>
    6ee8:	4b08      	ldr	r3, [pc, #32]	; (6f0c <__libc_init_array+0x44>)
    6eea:	4d09      	ldr	r5, [pc, #36]	; (6f10 <__libc_init_array+0x48>)
    6eec:	2400      	movs	r4, #0
    6eee:	1aed      	subs	r5, r5, r3
    6ef0:	10ad      	asrs	r5, r5, #2
    6ef2:	1c1e      	adds	r6, r3, #0
    6ef4:	42ac      	cmp	r4, r5
    6ef6:	d004      	beq.n	6f02 <__libc_init_array+0x3a>
    6ef8:	00a3      	lsls	r3, r4, #2
    6efa:	58f3      	ldr	r3, [r6, r3]
    6efc:	4798      	blx	r3
    6efe:	3401      	adds	r4, #1
    6f00:	e7f8      	b.n	6ef4 <__libc_init_array+0x2c>
    6f02:	bd70      	pop	{r4, r5, r6, pc}
    6f04:	00009714 	.word	0x00009714
    6f08:	00009714 	.word	0x00009714
    6f0c:	00009714 	.word	0x00009714
    6f10:	00009718 	.word	0x00009718

00006f14 <malloc>:
    6f14:	b508      	push	{r3, lr}
    6f16:	4b03      	ldr	r3, [pc, #12]	; (6f24 <malloc+0x10>)
    6f18:	1c01      	adds	r1, r0, #0
    6f1a:	6818      	ldr	r0, [r3, #0]
    6f1c:	f000 f876 	bl	700c <_malloc_r>
    6f20:	bd08      	pop	{r3, pc}
    6f22:	46c0      	nop			; (mov r8, r8)
    6f24:	20000074 	.word	0x20000074

00006f28 <memcpy>:
    6f28:	b510      	push	{r4, lr}
    6f2a:	2300      	movs	r3, #0
    6f2c:	4293      	cmp	r3, r2
    6f2e:	d003      	beq.n	6f38 <memcpy+0x10>
    6f30:	5ccc      	ldrb	r4, [r1, r3]
    6f32:	54c4      	strb	r4, [r0, r3]
    6f34:	3301      	adds	r3, #1
    6f36:	e7f9      	b.n	6f2c <memcpy+0x4>
    6f38:	bd10      	pop	{r4, pc}

00006f3a <memmove>:
    6f3a:	b570      	push	{r4, r5, r6, lr}
    6f3c:	4281      	cmp	r1, r0
    6f3e:	d301      	bcc.n	6f44 <memmove+0xa>
    6f40:	2300      	movs	r3, #0
    6f42:	e00c      	b.n	6f5e <memmove+0x24>
    6f44:	188c      	adds	r4, r1, r2
    6f46:	42a0      	cmp	r0, r4
    6f48:	d2fa      	bcs.n	6f40 <memmove+0x6>
    6f4a:	1885      	adds	r5, r0, r2
    6f4c:	1c13      	adds	r3, r2, #0
    6f4e:	3b01      	subs	r3, #1
    6f50:	d30b      	bcc.n	6f6a <memmove+0x30>
    6f52:	4251      	negs	r1, r2
    6f54:	1866      	adds	r6, r4, r1
    6f56:	5cf6      	ldrb	r6, [r6, r3]
    6f58:	1869      	adds	r1, r5, r1
    6f5a:	54ce      	strb	r6, [r1, r3]
    6f5c:	e7f7      	b.n	6f4e <memmove+0x14>
    6f5e:	4293      	cmp	r3, r2
    6f60:	d003      	beq.n	6f6a <memmove+0x30>
    6f62:	5ccc      	ldrb	r4, [r1, r3]
    6f64:	54c4      	strb	r4, [r0, r3]
    6f66:	3301      	adds	r3, #1
    6f68:	e7f9      	b.n	6f5e <memmove+0x24>
    6f6a:	bd70      	pop	{r4, r5, r6, pc}

00006f6c <memset>:
    6f6c:	1c03      	adds	r3, r0, #0
    6f6e:	1882      	adds	r2, r0, r2
    6f70:	4293      	cmp	r3, r2
    6f72:	d002      	beq.n	6f7a <memset+0xe>
    6f74:	7019      	strb	r1, [r3, #0]
    6f76:	3301      	adds	r3, #1
    6f78:	e7fa      	b.n	6f70 <memset+0x4>
    6f7a:	4770      	bx	lr

00006f7c <_free_r>:
    6f7c:	b530      	push	{r4, r5, lr}
    6f7e:	2900      	cmp	r1, #0
    6f80:	d040      	beq.n	7004 <_free_r+0x88>
    6f82:	3904      	subs	r1, #4
    6f84:	680b      	ldr	r3, [r1, #0]
    6f86:	2b00      	cmp	r3, #0
    6f88:	da00      	bge.n	6f8c <_free_r+0x10>
    6f8a:	18c9      	adds	r1, r1, r3
    6f8c:	4a1e      	ldr	r2, [pc, #120]	; (7008 <_free_r+0x8c>)
    6f8e:	6813      	ldr	r3, [r2, #0]
    6f90:	1c14      	adds	r4, r2, #0
    6f92:	2b00      	cmp	r3, #0
    6f94:	d102      	bne.n	6f9c <_free_r+0x20>
    6f96:	604b      	str	r3, [r1, #4]
    6f98:	6011      	str	r1, [r2, #0]
    6f9a:	e033      	b.n	7004 <_free_r+0x88>
    6f9c:	4299      	cmp	r1, r3
    6f9e:	d20f      	bcs.n	6fc0 <_free_r+0x44>
    6fa0:	6808      	ldr	r0, [r1, #0]
    6fa2:	180a      	adds	r2, r1, r0
    6fa4:	429a      	cmp	r2, r3
    6fa6:	d105      	bne.n	6fb4 <_free_r+0x38>
    6fa8:	6813      	ldr	r3, [r2, #0]
    6faa:	6852      	ldr	r2, [r2, #4]
    6fac:	18c0      	adds	r0, r0, r3
    6fae:	6008      	str	r0, [r1, #0]
    6fb0:	604a      	str	r2, [r1, #4]
    6fb2:	e000      	b.n	6fb6 <_free_r+0x3a>
    6fb4:	604b      	str	r3, [r1, #4]
    6fb6:	6021      	str	r1, [r4, #0]
    6fb8:	e024      	b.n	7004 <_free_r+0x88>
    6fba:	428a      	cmp	r2, r1
    6fbc:	d803      	bhi.n	6fc6 <_free_r+0x4a>
    6fbe:	1c13      	adds	r3, r2, #0
    6fc0:	685a      	ldr	r2, [r3, #4]
    6fc2:	2a00      	cmp	r2, #0
    6fc4:	d1f9      	bne.n	6fba <_free_r+0x3e>
    6fc6:	681d      	ldr	r5, [r3, #0]
    6fc8:	195c      	adds	r4, r3, r5
    6fca:	428c      	cmp	r4, r1
    6fcc:	d10b      	bne.n	6fe6 <_free_r+0x6a>
    6fce:	6809      	ldr	r1, [r1, #0]
    6fd0:	1869      	adds	r1, r5, r1
    6fd2:	1858      	adds	r0, r3, r1
    6fd4:	6019      	str	r1, [r3, #0]
    6fd6:	4290      	cmp	r0, r2
    6fd8:	d114      	bne.n	7004 <_free_r+0x88>
    6fda:	6814      	ldr	r4, [r2, #0]
    6fdc:	6852      	ldr	r2, [r2, #4]
    6fde:	1909      	adds	r1, r1, r4
    6fe0:	6019      	str	r1, [r3, #0]
    6fe2:	605a      	str	r2, [r3, #4]
    6fe4:	e00e      	b.n	7004 <_free_r+0x88>
    6fe6:	428c      	cmp	r4, r1
    6fe8:	d902      	bls.n	6ff0 <_free_r+0x74>
    6fea:	230c      	movs	r3, #12
    6fec:	6003      	str	r3, [r0, #0]
    6fee:	e009      	b.n	7004 <_free_r+0x88>
    6ff0:	6808      	ldr	r0, [r1, #0]
    6ff2:	180c      	adds	r4, r1, r0
    6ff4:	4294      	cmp	r4, r2
    6ff6:	d103      	bne.n	7000 <_free_r+0x84>
    6ff8:	6814      	ldr	r4, [r2, #0]
    6ffa:	6852      	ldr	r2, [r2, #4]
    6ffc:	1900      	adds	r0, r0, r4
    6ffe:	6008      	str	r0, [r1, #0]
    7000:	604a      	str	r2, [r1, #4]
    7002:	6059      	str	r1, [r3, #4]
    7004:	bd30      	pop	{r4, r5, pc}
    7006:	46c0      	nop			; (mov r8, r8)
    7008:	200002dc 	.word	0x200002dc

0000700c <_malloc_r>:
    700c:	b570      	push	{r4, r5, r6, lr}
    700e:	2303      	movs	r3, #3
    7010:	1ccd      	adds	r5, r1, #3
    7012:	439d      	bics	r5, r3
    7014:	3508      	adds	r5, #8
    7016:	1c06      	adds	r6, r0, #0
    7018:	2d0c      	cmp	r5, #12
    701a:	d201      	bcs.n	7020 <_malloc_r+0x14>
    701c:	250c      	movs	r5, #12
    701e:	e001      	b.n	7024 <_malloc_r+0x18>
    7020:	2d00      	cmp	r5, #0
    7022:	db3f      	blt.n	70a4 <_malloc_r+0x98>
    7024:	428d      	cmp	r5, r1
    7026:	d33d      	bcc.n	70a4 <_malloc_r+0x98>
    7028:	4b20      	ldr	r3, [pc, #128]	; (70ac <_malloc_r+0xa0>)
    702a:	681c      	ldr	r4, [r3, #0]
    702c:	1c1a      	adds	r2, r3, #0
    702e:	1c21      	adds	r1, r4, #0
    7030:	2900      	cmp	r1, #0
    7032:	d013      	beq.n	705c <_malloc_r+0x50>
    7034:	6808      	ldr	r0, [r1, #0]
    7036:	1b43      	subs	r3, r0, r5
    7038:	d40d      	bmi.n	7056 <_malloc_r+0x4a>
    703a:	2b0b      	cmp	r3, #11
    703c:	d902      	bls.n	7044 <_malloc_r+0x38>
    703e:	600b      	str	r3, [r1, #0]
    7040:	18cc      	adds	r4, r1, r3
    7042:	e01e      	b.n	7082 <_malloc_r+0x76>
    7044:	428c      	cmp	r4, r1
    7046:	d102      	bne.n	704e <_malloc_r+0x42>
    7048:	6863      	ldr	r3, [r4, #4]
    704a:	6013      	str	r3, [r2, #0]
    704c:	e01a      	b.n	7084 <_malloc_r+0x78>
    704e:	6848      	ldr	r0, [r1, #4]
    7050:	6060      	str	r0, [r4, #4]
    7052:	1c0c      	adds	r4, r1, #0
    7054:	e016      	b.n	7084 <_malloc_r+0x78>
    7056:	1c0c      	adds	r4, r1, #0
    7058:	6849      	ldr	r1, [r1, #4]
    705a:	e7e9      	b.n	7030 <_malloc_r+0x24>
    705c:	4c14      	ldr	r4, [pc, #80]	; (70b0 <_malloc_r+0xa4>)
    705e:	6820      	ldr	r0, [r4, #0]
    7060:	2800      	cmp	r0, #0
    7062:	d103      	bne.n	706c <_malloc_r+0x60>
    7064:	1c30      	adds	r0, r6, #0
    7066:	f000 f8bf 	bl	71e8 <_sbrk_r>
    706a:	6020      	str	r0, [r4, #0]
    706c:	1c30      	adds	r0, r6, #0
    706e:	1c29      	adds	r1, r5, #0
    7070:	f000 f8ba 	bl	71e8 <_sbrk_r>
    7074:	1c43      	adds	r3, r0, #1
    7076:	d015      	beq.n	70a4 <_malloc_r+0x98>
    7078:	1cc4      	adds	r4, r0, #3
    707a:	2303      	movs	r3, #3
    707c:	439c      	bics	r4, r3
    707e:	4284      	cmp	r4, r0
    7080:	d10a      	bne.n	7098 <_malloc_r+0x8c>
    7082:	6025      	str	r5, [r4, #0]
    7084:	1c20      	adds	r0, r4, #0
    7086:	300b      	adds	r0, #11
    7088:	2207      	movs	r2, #7
    708a:	1d23      	adds	r3, r4, #4
    708c:	4390      	bics	r0, r2
    708e:	1ac3      	subs	r3, r0, r3
    7090:	d00b      	beq.n	70aa <_malloc_r+0x9e>
    7092:	425a      	negs	r2, r3
    7094:	50e2      	str	r2, [r4, r3]
    7096:	e008      	b.n	70aa <_malloc_r+0x9e>
    7098:	1a21      	subs	r1, r4, r0
    709a:	1c30      	adds	r0, r6, #0
    709c:	f000 f8a4 	bl	71e8 <_sbrk_r>
    70a0:	3001      	adds	r0, #1
    70a2:	d1ee      	bne.n	7082 <_malloc_r+0x76>
    70a4:	230c      	movs	r3, #12
    70a6:	6033      	str	r3, [r6, #0]
    70a8:	2000      	movs	r0, #0
    70aa:	bd70      	pop	{r4, r5, r6, pc}
    70ac:	200002dc 	.word	0x200002dc
    70b0:	200002d8 	.word	0x200002d8

000070b4 <iprintf>:
    70b4:	b40f      	push	{r0, r1, r2, r3}
    70b6:	4b0b      	ldr	r3, [pc, #44]	; (70e4 <iprintf+0x30>)
    70b8:	b513      	push	{r0, r1, r4, lr}
    70ba:	681c      	ldr	r4, [r3, #0]
    70bc:	2c00      	cmp	r4, #0
    70be:	d005      	beq.n	70cc <iprintf+0x18>
    70c0:	69a3      	ldr	r3, [r4, #24]
    70c2:	2b00      	cmp	r3, #0
    70c4:	d102      	bne.n	70cc <iprintf+0x18>
    70c6:	1c20      	adds	r0, r4, #0
    70c8:	f000 ff4a 	bl	7f60 <__sinit>
    70cc:	ab05      	add	r3, sp, #20
    70ce:	68a1      	ldr	r1, [r4, #8]
    70d0:	1c20      	adds	r0, r4, #0
    70d2:	9a04      	ldr	r2, [sp, #16]
    70d4:	9301      	str	r3, [sp, #4]
    70d6:	f000 fadd 	bl	7694 <_vfiprintf_r>
    70da:	bc16      	pop	{r1, r2, r4}
    70dc:	bc08      	pop	{r3}
    70de:	b004      	add	sp, #16
    70e0:	4718      	bx	r3
    70e2:	46c0      	nop			; (mov r8, r8)
    70e4:	20000074 	.word	0x20000074

000070e8 <putchar>:
    70e8:	b538      	push	{r3, r4, r5, lr}
    70ea:	4b08      	ldr	r3, [pc, #32]	; (710c <putchar+0x24>)
    70ec:	1c05      	adds	r5, r0, #0
    70ee:	681c      	ldr	r4, [r3, #0]
    70f0:	2c00      	cmp	r4, #0
    70f2:	d005      	beq.n	7100 <putchar+0x18>
    70f4:	69a3      	ldr	r3, [r4, #24]
    70f6:	2b00      	cmp	r3, #0
    70f8:	d102      	bne.n	7100 <putchar+0x18>
    70fa:	1c20      	adds	r0, r4, #0
    70fc:	f000 ff30 	bl	7f60 <__sinit>
    7100:	1c29      	adds	r1, r5, #0
    7102:	68a2      	ldr	r2, [r4, #8]
    7104:	1c20      	adds	r0, r4, #0
    7106:	f001 f81d 	bl	8144 <_putc_r>
    710a:	bd38      	pop	{r3, r4, r5, pc}
    710c:	20000074 	.word	0x20000074

00007110 <_puts_r>:
    7110:	b570      	push	{r4, r5, r6, lr}
    7112:	1c05      	adds	r5, r0, #0
    7114:	1c0e      	adds	r6, r1, #0
    7116:	2800      	cmp	r0, #0
    7118:	d004      	beq.n	7124 <_puts_r+0x14>
    711a:	6982      	ldr	r2, [r0, #24]
    711c:	2a00      	cmp	r2, #0
    711e:	d101      	bne.n	7124 <_puts_r+0x14>
    7120:	f000 ff1e 	bl	7f60 <__sinit>
    7124:	68ac      	ldr	r4, [r5, #8]
    7126:	89a3      	ldrh	r3, [r4, #12]
    7128:	071a      	lsls	r2, r3, #28
    712a:	d502      	bpl.n	7132 <_puts_r+0x22>
    712c:	6923      	ldr	r3, [r4, #16]
    712e:	2b00      	cmp	r3, #0
    7130:	d119      	bne.n	7166 <_puts_r+0x56>
    7132:	1c28      	adds	r0, r5, #0
    7134:	1c21      	adds	r1, r4, #0
    7136:	f000 fd97 	bl	7c68 <__swsetup_r>
    713a:	2800      	cmp	r0, #0
    713c:	d013      	beq.n	7166 <_puts_r+0x56>
    713e:	2001      	movs	r0, #1
    7140:	4240      	negs	r0, r0
    7142:	e045      	b.n	71d0 <_puts_r+0xc0>
    7144:	7831      	ldrb	r1, [r6, #0]
    7146:	2b00      	cmp	r3, #0
    7148:	da1b      	bge.n	7182 <_puts_r+0x72>
    714a:	69a2      	ldr	r2, [r4, #24]
    714c:	4293      	cmp	r3, r2
    714e:	da11      	bge.n	7174 <_puts_r+0x64>
    7150:	1c28      	adds	r0, r5, #0
    7152:	1c22      	adds	r2, r4, #0
    7154:	f000 fd30 	bl	7bb8 <__swbuf_r>
    7158:	3001      	adds	r0, #1
    715a:	4243      	negs	r3, r0
    715c:	4158      	adcs	r0, r3
    715e:	b2c0      	uxtb	r0, r0
    7160:	2800      	cmp	r0, #0
    7162:	d1ec      	bne.n	713e <_puts_r+0x2e>
    7164:	3601      	adds	r6, #1
    7166:	68a3      	ldr	r3, [r4, #8]
    7168:	7832      	ldrb	r2, [r6, #0]
    716a:	3b01      	subs	r3, #1
    716c:	60a3      	str	r3, [r4, #8]
    716e:	2a00      	cmp	r2, #0
    7170:	d1e8      	bne.n	7144 <_puts_r+0x34>
    7172:	e00c      	b.n	718e <_puts_r+0x7e>
    7174:	6823      	ldr	r3, [r4, #0]
    7176:	7019      	strb	r1, [r3, #0]
    7178:	6823      	ldr	r3, [r4, #0]
    717a:	7819      	ldrb	r1, [r3, #0]
    717c:	290a      	cmp	r1, #10
    717e:	d103      	bne.n	7188 <_puts_r+0x78>
    7180:	e7e6      	b.n	7150 <_puts_r+0x40>
    7182:	6822      	ldr	r2, [r4, #0]
    7184:	7011      	strb	r1, [r2, #0]
    7186:	6823      	ldr	r3, [r4, #0]
    7188:	3301      	adds	r3, #1
    718a:	6023      	str	r3, [r4, #0]
    718c:	e7ea      	b.n	7164 <_puts_r+0x54>
    718e:	2b00      	cmp	r3, #0
    7190:	da17      	bge.n	71c2 <_puts_r+0xb2>
    7192:	69a2      	ldr	r2, [r4, #24]
    7194:	4293      	cmp	r3, r2
    7196:	db08      	blt.n	71aa <_puts_r+0x9a>
    7198:	6822      	ldr	r2, [r4, #0]
    719a:	230a      	movs	r3, #10
    719c:	7013      	strb	r3, [r2, #0]
    719e:	6823      	ldr	r3, [r4, #0]
    71a0:	7819      	ldrb	r1, [r3, #0]
    71a2:	290a      	cmp	r1, #10
    71a4:	d111      	bne.n	71ca <_puts_r+0xba>
    71a6:	1c28      	adds	r0, r5, #0
    71a8:	e001      	b.n	71ae <_puts_r+0x9e>
    71aa:	1c28      	adds	r0, r5, #0
    71ac:	210a      	movs	r1, #10
    71ae:	1c22      	adds	r2, r4, #0
    71b0:	f000 fd02 	bl	7bb8 <__swbuf_r>
    71b4:	3001      	adds	r0, #1
    71b6:	4243      	negs	r3, r0
    71b8:	4158      	adcs	r0, r3
    71ba:	b2c0      	uxtb	r0, r0
    71bc:	2800      	cmp	r0, #0
    71be:	d006      	beq.n	71ce <_puts_r+0xbe>
    71c0:	e7bd      	b.n	713e <_puts_r+0x2e>
    71c2:	6822      	ldr	r2, [r4, #0]
    71c4:	230a      	movs	r3, #10
    71c6:	7013      	strb	r3, [r2, #0]
    71c8:	6823      	ldr	r3, [r4, #0]
    71ca:	3301      	adds	r3, #1
    71cc:	6023      	str	r3, [r4, #0]
    71ce:	200a      	movs	r0, #10
    71d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000071d4 <puts>:
    71d4:	b508      	push	{r3, lr}
    71d6:	4b03      	ldr	r3, [pc, #12]	; (71e4 <puts+0x10>)
    71d8:	1c01      	adds	r1, r0, #0
    71da:	6818      	ldr	r0, [r3, #0]
    71dc:	f7ff ff98 	bl	7110 <_puts_r>
    71e0:	bd08      	pop	{r3, pc}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	20000074 	.word	0x20000074

000071e8 <_sbrk_r>:
    71e8:	b538      	push	{r3, r4, r5, lr}
    71ea:	4c07      	ldr	r4, [pc, #28]	; (7208 <_sbrk_r+0x20>)
    71ec:	2300      	movs	r3, #0
    71ee:	1c05      	adds	r5, r0, #0
    71f0:	1c08      	adds	r0, r1, #0
    71f2:	6023      	str	r3, [r4, #0]
    71f4:	f7fe f8ec 	bl	53d0 <_sbrk>
    71f8:	1c43      	adds	r3, r0, #1
    71fa:	d103      	bne.n	7204 <_sbrk_r+0x1c>
    71fc:	6823      	ldr	r3, [r4, #0]
    71fe:	2b00      	cmp	r3, #0
    7200:	d000      	beq.n	7204 <_sbrk_r+0x1c>
    7202:	602b      	str	r3, [r5, #0]
    7204:	bd38      	pop	{r3, r4, r5, pc}
    7206:	46c0      	nop			; (mov r8, r8)
    7208:	200005ec 	.word	0x200005ec

0000720c <setbuf>:
    720c:	b508      	push	{r3, lr}
    720e:	424a      	negs	r2, r1
    7210:	414a      	adcs	r2, r1
    7212:	2380      	movs	r3, #128	; 0x80
    7214:	0052      	lsls	r2, r2, #1
    7216:	00db      	lsls	r3, r3, #3
    7218:	f000 f802 	bl	7220 <setvbuf>
    721c:	bd08      	pop	{r3, pc}
	...

00007220 <setvbuf>:
    7220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7222:	1c1e      	adds	r6, r3, #0
    7224:	4b3c      	ldr	r3, [pc, #240]	; (7318 <setvbuf+0xf8>)
    7226:	1c04      	adds	r4, r0, #0
    7228:	681d      	ldr	r5, [r3, #0]
    722a:	1c0f      	adds	r7, r1, #0
    722c:	9201      	str	r2, [sp, #4]
    722e:	2d00      	cmp	r5, #0
    7230:	d005      	beq.n	723e <setvbuf+0x1e>
    7232:	69aa      	ldr	r2, [r5, #24]
    7234:	2a00      	cmp	r2, #0
    7236:	d102      	bne.n	723e <setvbuf+0x1e>
    7238:	1c28      	adds	r0, r5, #0
    723a:	f000 fe91 	bl	7f60 <__sinit>
    723e:	4b37      	ldr	r3, [pc, #220]	; (731c <setvbuf+0xfc>)
    7240:	429c      	cmp	r4, r3
    7242:	d101      	bne.n	7248 <setvbuf+0x28>
    7244:	686c      	ldr	r4, [r5, #4]
    7246:	e008      	b.n	725a <setvbuf+0x3a>
    7248:	4b35      	ldr	r3, [pc, #212]	; (7320 <setvbuf+0x100>)
    724a:	429c      	cmp	r4, r3
    724c:	d101      	bne.n	7252 <setvbuf+0x32>
    724e:	68ac      	ldr	r4, [r5, #8]
    7250:	e003      	b.n	725a <setvbuf+0x3a>
    7252:	4b34      	ldr	r3, [pc, #208]	; (7324 <setvbuf+0x104>)
    7254:	429c      	cmp	r4, r3
    7256:	d100      	bne.n	725a <setvbuf+0x3a>
    7258:	68ec      	ldr	r4, [r5, #12]
    725a:	9b01      	ldr	r3, [sp, #4]
    725c:	2b02      	cmp	r3, #2
    725e:	d857      	bhi.n	7310 <setvbuf+0xf0>
    7260:	2e00      	cmp	r6, #0
    7262:	db55      	blt.n	7310 <setvbuf+0xf0>
    7264:	1c28      	adds	r0, r5, #0
    7266:	1c21      	adds	r1, r4, #0
    7268:	f000 fdfa 	bl	7e60 <_fflush_r>
    726c:	2300      	movs	r3, #0
    726e:	6063      	str	r3, [r4, #4]
    7270:	61a3      	str	r3, [r4, #24]
    7272:	89a3      	ldrh	r3, [r4, #12]
    7274:	061a      	lsls	r2, r3, #24
    7276:	d503      	bpl.n	7280 <setvbuf+0x60>
    7278:	1c28      	adds	r0, r5, #0
    727a:	6921      	ldr	r1, [r4, #16]
    727c:	f7ff fe7e 	bl	6f7c <_free_r>
    7280:	89a3      	ldrh	r3, [r4, #12]
    7282:	2283      	movs	r2, #131	; 0x83
    7284:	4393      	bics	r3, r2
    7286:	81a3      	strh	r3, [r4, #12]
    7288:	9b01      	ldr	r3, [sp, #4]
    728a:	2b02      	cmp	r3, #2
    728c:	d013      	beq.n	72b6 <setvbuf+0x96>
    728e:	2f00      	cmp	r7, #0
    7290:	d125      	bne.n	72de <setvbuf+0xbe>
    7292:	2e00      	cmp	r6, #0
    7294:	d101      	bne.n	729a <setvbuf+0x7a>
    7296:	2680      	movs	r6, #128	; 0x80
    7298:	00f6      	lsls	r6, r6, #3
    729a:	1c30      	adds	r0, r6, #0
    729c:	f7ff fe3a 	bl	6f14 <malloc>
    72a0:	1e07      	subs	r7, r0, #0
    72a2:	d118      	bne.n	72d6 <setvbuf+0xb6>
    72a4:	2080      	movs	r0, #128	; 0x80
    72a6:	00c0      	lsls	r0, r0, #3
    72a8:	f7ff fe34 	bl	6f14 <malloc>
    72ac:	1e07      	subs	r7, r0, #0
    72ae:	d110      	bne.n	72d2 <setvbuf+0xb2>
    72b0:	2001      	movs	r0, #1
    72b2:	4240      	negs	r0, r0
    72b4:	e000      	b.n	72b8 <setvbuf+0x98>
    72b6:	2000      	movs	r0, #0
    72b8:	89a3      	ldrh	r3, [r4, #12]
    72ba:	2202      	movs	r2, #2
    72bc:	4313      	orrs	r3, r2
    72be:	81a3      	strh	r3, [r4, #12]
    72c0:	2300      	movs	r3, #0
    72c2:	60a3      	str	r3, [r4, #8]
    72c4:	1c23      	adds	r3, r4, #0
    72c6:	3347      	adds	r3, #71	; 0x47
    72c8:	6023      	str	r3, [r4, #0]
    72ca:	6123      	str	r3, [r4, #16]
    72cc:	2301      	movs	r3, #1
    72ce:	6163      	str	r3, [r4, #20]
    72d0:	e020      	b.n	7314 <setvbuf+0xf4>
    72d2:	2680      	movs	r6, #128	; 0x80
    72d4:	00f6      	lsls	r6, r6, #3
    72d6:	89a3      	ldrh	r3, [r4, #12]
    72d8:	2280      	movs	r2, #128	; 0x80
    72da:	4313      	orrs	r3, r2
    72dc:	81a3      	strh	r3, [r4, #12]
    72de:	9a01      	ldr	r2, [sp, #4]
    72e0:	2a01      	cmp	r2, #1
    72e2:	d104      	bne.n	72ee <setvbuf+0xce>
    72e4:	89a3      	ldrh	r3, [r4, #12]
    72e6:	4313      	orrs	r3, r2
    72e8:	81a3      	strh	r3, [r4, #12]
    72ea:	4273      	negs	r3, r6
    72ec:	61a3      	str	r3, [r4, #24]
    72ee:	4b0e      	ldr	r3, [pc, #56]	; (7328 <setvbuf+0x108>)
    72f0:	2000      	movs	r0, #0
    72f2:	62ab      	str	r3, [r5, #40]	; 0x28
    72f4:	89a3      	ldrh	r3, [r4, #12]
    72f6:	6027      	str	r7, [r4, #0]
    72f8:	6127      	str	r7, [r4, #16]
    72fa:	6166      	str	r6, [r4, #20]
    72fc:	071a      	lsls	r2, r3, #28
    72fe:	d509      	bpl.n	7314 <setvbuf+0xf4>
    7300:	2203      	movs	r2, #3
    7302:	4013      	ands	r3, r2
    7304:	425a      	negs	r2, r3
    7306:	4153      	adcs	r3, r2
    7308:	425b      	negs	r3, r3
    730a:	401e      	ands	r6, r3
    730c:	60a6      	str	r6, [r4, #8]
    730e:	e001      	b.n	7314 <setvbuf+0xf4>
    7310:	2001      	movs	r0, #1
    7312:	4240      	negs	r0, r0
    7314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7316:	46c0      	nop			; (mov r8, r8)
    7318:	20000074 	.word	0x20000074
    731c:	000096a8 	.word	0x000096a8
    7320:	000096c8 	.word	0x000096c8
    7324:	000096e8 	.word	0x000096e8
    7328:	00007eb9 	.word	0x00007eb9

0000732c <siprintf>:
    732c:	b40e      	push	{r1, r2, r3}
    732e:	b500      	push	{lr}
    7330:	b09c      	sub	sp, #112	; 0x70
    7332:	ab1d      	add	r3, sp, #116	; 0x74
    7334:	cb04      	ldmia	r3!, {r2}
    7336:	2282      	movs	r2, #130	; 0x82
    7338:	a902      	add	r1, sp, #8
    733a:	0092      	lsls	r2, r2, #2
    733c:	818a      	strh	r2, [r1, #12]
    733e:	4a0a      	ldr	r2, [pc, #40]	; (7368 <siprintf+0x3c>)
    7340:	9002      	str	r0, [sp, #8]
    7342:	608a      	str	r2, [r1, #8]
    7344:	614a      	str	r2, [r1, #20]
    7346:	2201      	movs	r2, #1
    7348:	4252      	negs	r2, r2
    734a:	81ca      	strh	r2, [r1, #14]
    734c:	4a07      	ldr	r2, [pc, #28]	; (736c <siprintf+0x40>)
    734e:	6108      	str	r0, [r1, #16]
    7350:	6810      	ldr	r0, [r2, #0]
    7352:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7354:	9301      	str	r3, [sp, #4]
    7356:	f000 f885 	bl	7464 <_svfiprintf_r>
    735a:	9a02      	ldr	r2, [sp, #8]
    735c:	2300      	movs	r3, #0
    735e:	7013      	strb	r3, [r2, #0]
    7360:	b01c      	add	sp, #112	; 0x70
    7362:	bc08      	pop	{r3}
    7364:	b003      	add	sp, #12
    7366:	4718      	bx	r3
    7368:	7fffffff 	.word	0x7fffffff
    736c:	20000074 	.word	0x20000074

00007370 <strcmp>:
    7370:	7802      	ldrb	r2, [r0, #0]
    7372:	780b      	ldrb	r3, [r1, #0]
    7374:	3001      	adds	r0, #1
    7376:	3101      	adds	r1, #1
    7378:	2a00      	cmp	r2, #0
    737a:	d001      	beq.n	7380 <strcmp+0x10>
    737c:	429a      	cmp	r2, r3
    737e:	d0f7      	beq.n	7370 <strcmp>
    7380:	1ad0      	subs	r0, r2, r3
    7382:	4770      	bx	lr

00007384 <strcpy>:
    7384:	1c03      	adds	r3, r0, #0
    7386:	780a      	ldrb	r2, [r1, #0]
    7388:	3101      	adds	r1, #1
    738a:	701a      	strb	r2, [r3, #0]
    738c:	3301      	adds	r3, #1
    738e:	2a00      	cmp	r2, #0
    7390:	d1f9      	bne.n	7386 <strcpy+0x2>
    7392:	4770      	bx	lr

00007394 <strlen>:
    7394:	2300      	movs	r3, #0
    7396:	5cc2      	ldrb	r2, [r0, r3]
    7398:	3301      	adds	r3, #1
    739a:	2a00      	cmp	r2, #0
    739c:	d1fb      	bne.n	7396 <strlen+0x2>
    739e:	1e58      	subs	r0, r3, #1
    73a0:	4770      	bx	lr
	...

000073a4 <__ssputs_r>:
    73a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    73a6:	688d      	ldr	r5, [r1, #8]
    73a8:	b085      	sub	sp, #20
    73aa:	1c07      	adds	r7, r0, #0
    73ac:	1c0c      	adds	r4, r1, #0
    73ae:	9203      	str	r2, [sp, #12]
    73b0:	9301      	str	r3, [sp, #4]
    73b2:	42ab      	cmp	r3, r5
    73b4:	d345      	bcc.n	7442 <__ssputs_r+0x9e>
    73b6:	2290      	movs	r2, #144	; 0x90
    73b8:	898b      	ldrh	r3, [r1, #12]
    73ba:	00d2      	lsls	r2, r2, #3
    73bc:	4213      	tst	r3, r2
    73be:	d03d      	beq.n	743c <__ssputs_r+0x98>
    73c0:	6962      	ldr	r2, [r4, #20]
    73c2:	2603      	movs	r6, #3
    73c4:	4356      	muls	r6, r2
    73c6:	6909      	ldr	r1, [r1, #16]
    73c8:	6820      	ldr	r0, [r4, #0]
    73ca:	0ff2      	lsrs	r2, r6, #31
    73cc:	1a40      	subs	r0, r0, r1
    73ce:	1996      	adds	r6, r2, r6
    73d0:	9002      	str	r0, [sp, #8]
    73d2:	1c02      	adds	r2, r0, #0
    73d4:	9801      	ldr	r0, [sp, #4]
    73d6:	3201      	adds	r2, #1
    73d8:	1812      	adds	r2, r2, r0
    73da:	1076      	asrs	r6, r6, #1
    73dc:	4296      	cmp	r6, r2
    73de:	d200      	bcs.n	73e2 <__ssputs_r+0x3e>
    73e0:	1c16      	adds	r6, r2, #0
    73e2:	1c38      	adds	r0, r7, #0
    73e4:	055a      	lsls	r2, r3, #21
    73e6:	d50f      	bpl.n	7408 <__ssputs_r+0x64>
    73e8:	1c31      	adds	r1, r6, #0
    73ea:	f7ff fe0f 	bl	700c <_malloc_r>
    73ee:	1e05      	subs	r5, r0, #0
    73f0:	d013      	beq.n	741a <__ssputs_r+0x76>
    73f2:	9a02      	ldr	r2, [sp, #8]
    73f4:	6921      	ldr	r1, [r4, #16]
    73f6:	f7ff fd97 	bl	6f28 <memcpy>
    73fa:	89a2      	ldrh	r2, [r4, #12]
    73fc:	4b18      	ldr	r3, [pc, #96]	; (7460 <__ssputs_r+0xbc>)
    73fe:	4013      	ands	r3, r2
    7400:	2280      	movs	r2, #128	; 0x80
    7402:	4313      	orrs	r3, r2
    7404:	81a3      	strh	r3, [r4, #12]
    7406:	e011      	b.n	742c <__ssputs_r+0x88>
    7408:	1c32      	adds	r2, r6, #0
    740a:	f000 fe74 	bl	80f6 <_realloc_r>
    740e:	1e05      	subs	r5, r0, #0
    7410:	d10c      	bne.n	742c <__ssputs_r+0x88>
    7412:	1c38      	adds	r0, r7, #0
    7414:	6921      	ldr	r1, [r4, #16]
    7416:	f7ff fdb1 	bl	6f7c <_free_r>
    741a:	230c      	movs	r3, #12
    741c:	603b      	str	r3, [r7, #0]
    741e:	89a3      	ldrh	r3, [r4, #12]
    7420:	2240      	movs	r2, #64	; 0x40
    7422:	4313      	orrs	r3, r2
    7424:	2001      	movs	r0, #1
    7426:	81a3      	strh	r3, [r4, #12]
    7428:	4240      	negs	r0, r0
    742a:	e017      	b.n	745c <__ssputs_r+0xb8>
    742c:	9b02      	ldr	r3, [sp, #8]
    742e:	6125      	str	r5, [r4, #16]
    7430:	18ed      	adds	r5, r5, r3
    7432:	6025      	str	r5, [r4, #0]
    7434:	6166      	str	r6, [r4, #20]
    7436:	9d01      	ldr	r5, [sp, #4]
    7438:	1af6      	subs	r6, r6, r3
    743a:	60a6      	str	r6, [r4, #8]
    743c:	9801      	ldr	r0, [sp, #4]
    743e:	42a8      	cmp	r0, r5
    7440:	d200      	bcs.n	7444 <__ssputs_r+0xa0>
    7442:	9d01      	ldr	r5, [sp, #4]
    7444:	1c2a      	adds	r2, r5, #0
    7446:	6820      	ldr	r0, [r4, #0]
    7448:	9903      	ldr	r1, [sp, #12]
    744a:	f7ff fd76 	bl	6f3a <memmove>
    744e:	68a2      	ldr	r2, [r4, #8]
    7450:	2000      	movs	r0, #0
    7452:	1b53      	subs	r3, r2, r5
    7454:	60a3      	str	r3, [r4, #8]
    7456:	6823      	ldr	r3, [r4, #0]
    7458:	195d      	adds	r5, r3, r5
    745a:	6025      	str	r5, [r4, #0]
    745c:	b005      	add	sp, #20
    745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7460:	fffffb7f 	.word	0xfffffb7f

00007464 <_svfiprintf_r>:
    7464:	b5f0      	push	{r4, r5, r6, r7, lr}
    7466:	b09f      	sub	sp, #124	; 0x7c
    7468:	9003      	str	r0, [sp, #12]
    746a:	9305      	str	r3, [sp, #20]
    746c:	898b      	ldrh	r3, [r1, #12]
    746e:	1c0e      	adds	r6, r1, #0
    7470:	1c17      	adds	r7, r2, #0
    7472:	0619      	lsls	r1, r3, #24
    7474:	d50f      	bpl.n	7496 <_svfiprintf_r+0x32>
    7476:	6932      	ldr	r2, [r6, #16]
    7478:	2a00      	cmp	r2, #0
    747a:	d10c      	bne.n	7496 <_svfiprintf_r+0x32>
    747c:	2140      	movs	r1, #64	; 0x40
    747e:	f7ff fdc5 	bl	700c <_malloc_r>
    7482:	6030      	str	r0, [r6, #0]
    7484:	6130      	str	r0, [r6, #16]
    7486:	2800      	cmp	r0, #0
    7488:	d103      	bne.n	7492 <_svfiprintf_r+0x2e>
    748a:	9903      	ldr	r1, [sp, #12]
    748c:	230c      	movs	r3, #12
    748e:	600b      	str	r3, [r1, #0]
    7490:	e0c9      	b.n	7626 <_svfiprintf_r+0x1c2>
    7492:	2340      	movs	r3, #64	; 0x40
    7494:	6173      	str	r3, [r6, #20]
    7496:	ad06      	add	r5, sp, #24
    7498:	2300      	movs	r3, #0
    749a:	616b      	str	r3, [r5, #20]
    749c:	2320      	movs	r3, #32
    749e:	766b      	strb	r3, [r5, #25]
    74a0:	2330      	movs	r3, #48	; 0x30
    74a2:	76ab      	strb	r3, [r5, #26]
    74a4:	1c3c      	adds	r4, r7, #0
    74a6:	7823      	ldrb	r3, [r4, #0]
    74a8:	2b00      	cmp	r3, #0
    74aa:	d103      	bne.n	74b4 <_svfiprintf_r+0x50>
    74ac:	1be2      	subs	r2, r4, r7
    74ae:	9202      	str	r2, [sp, #8]
    74b0:	d011      	beq.n	74d6 <_svfiprintf_r+0x72>
    74b2:	e003      	b.n	74bc <_svfiprintf_r+0x58>
    74b4:	2b25      	cmp	r3, #37	; 0x25
    74b6:	d0f9      	beq.n	74ac <_svfiprintf_r+0x48>
    74b8:	3401      	adds	r4, #1
    74ba:	e7f4      	b.n	74a6 <_svfiprintf_r+0x42>
    74bc:	9803      	ldr	r0, [sp, #12]
    74be:	1c31      	adds	r1, r6, #0
    74c0:	1c3a      	adds	r2, r7, #0
    74c2:	9b02      	ldr	r3, [sp, #8]
    74c4:	f7ff ff6e 	bl	73a4 <__ssputs_r>
    74c8:	3001      	adds	r0, #1
    74ca:	d100      	bne.n	74ce <_svfiprintf_r+0x6a>
    74cc:	e0a6      	b.n	761c <_svfiprintf_r+0x1b8>
    74ce:	6969      	ldr	r1, [r5, #20]
    74d0:	9a02      	ldr	r2, [sp, #8]
    74d2:	188b      	adds	r3, r1, r2
    74d4:	616b      	str	r3, [r5, #20]
    74d6:	7823      	ldrb	r3, [r4, #0]
    74d8:	2b00      	cmp	r3, #0
    74da:	d100      	bne.n	74de <_svfiprintf_r+0x7a>
    74dc:	e09e      	b.n	761c <_svfiprintf_r+0x1b8>
    74de:	2201      	movs	r2, #1
    74e0:	4252      	negs	r2, r2
    74e2:	606a      	str	r2, [r5, #4]
    74e4:	466a      	mov	r2, sp
    74e6:	2300      	movs	r3, #0
    74e8:	325b      	adds	r2, #91	; 0x5b
    74ea:	3401      	adds	r4, #1
    74ec:	602b      	str	r3, [r5, #0]
    74ee:	60eb      	str	r3, [r5, #12]
    74f0:	60ab      	str	r3, [r5, #8]
    74f2:	7013      	strb	r3, [r2, #0]
    74f4:	65ab      	str	r3, [r5, #88]	; 0x58
    74f6:	4f4e      	ldr	r7, [pc, #312]	; (7630 <_svfiprintf_r+0x1cc>)
    74f8:	7821      	ldrb	r1, [r4, #0]
    74fa:	1c38      	adds	r0, r7, #0
    74fc:	2205      	movs	r2, #5
    74fe:	f000 fdef 	bl	80e0 <memchr>
    7502:	2800      	cmp	r0, #0
    7504:	d007      	beq.n	7516 <_svfiprintf_r+0xb2>
    7506:	1bc7      	subs	r7, r0, r7
    7508:	682b      	ldr	r3, [r5, #0]
    750a:	2001      	movs	r0, #1
    750c:	40b8      	lsls	r0, r7
    750e:	4318      	orrs	r0, r3
    7510:	6028      	str	r0, [r5, #0]
    7512:	3401      	adds	r4, #1
    7514:	e7ef      	b.n	74f6 <_svfiprintf_r+0x92>
    7516:	682b      	ldr	r3, [r5, #0]
    7518:	06d9      	lsls	r1, r3, #27
    751a:	d503      	bpl.n	7524 <_svfiprintf_r+0xc0>
    751c:	466a      	mov	r2, sp
    751e:	2120      	movs	r1, #32
    7520:	325b      	adds	r2, #91	; 0x5b
    7522:	7011      	strb	r1, [r2, #0]
    7524:	071a      	lsls	r2, r3, #28
    7526:	d503      	bpl.n	7530 <_svfiprintf_r+0xcc>
    7528:	466a      	mov	r2, sp
    752a:	212b      	movs	r1, #43	; 0x2b
    752c:	325b      	adds	r2, #91	; 0x5b
    752e:	7011      	strb	r1, [r2, #0]
    7530:	7822      	ldrb	r2, [r4, #0]
    7532:	2a2a      	cmp	r2, #42	; 0x2a
    7534:	d001      	beq.n	753a <_svfiprintf_r+0xd6>
    7536:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7538:	e00e      	b.n	7558 <_svfiprintf_r+0xf4>
    753a:	9a05      	ldr	r2, [sp, #20]
    753c:	1d11      	adds	r1, r2, #4
    753e:	6812      	ldr	r2, [r2, #0]
    7540:	9105      	str	r1, [sp, #20]
    7542:	2a00      	cmp	r2, #0
    7544:	db01      	blt.n	754a <_svfiprintf_r+0xe6>
    7546:	9209      	str	r2, [sp, #36]	; 0x24
    7548:	e004      	b.n	7554 <_svfiprintf_r+0xf0>
    754a:	4252      	negs	r2, r2
    754c:	60ea      	str	r2, [r5, #12]
    754e:	2202      	movs	r2, #2
    7550:	4313      	orrs	r3, r2
    7552:	602b      	str	r3, [r5, #0]
    7554:	3401      	adds	r4, #1
    7556:	e009      	b.n	756c <_svfiprintf_r+0x108>
    7558:	7822      	ldrb	r2, [r4, #0]
    755a:	3a30      	subs	r2, #48	; 0x30
    755c:	2a09      	cmp	r2, #9
    755e:	d804      	bhi.n	756a <_svfiprintf_r+0x106>
    7560:	210a      	movs	r1, #10
    7562:	434b      	muls	r3, r1
    7564:	3401      	adds	r4, #1
    7566:	189b      	adds	r3, r3, r2
    7568:	e7f6      	b.n	7558 <_svfiprintf_r+0xf4>
    756a:	9309      	str	r3, [sp, #36]	; 0x24
    756c:	7823      	ldrb	r3, [r4, #0]
    756e:	2b2e      	cmp	r3, #46	; 0x2e
    7570:	d118      	bne.n	75a4 <_svfiprintf_r+0x140>
    7572:	7863      	ldrb	r3, [r4, #1]
    7574:	2b2a      	cmp	r3, #42	; 0x2a
    7576:	d109      	bne.n	758c <_svfiprintf_r+0x128>
    7578:	9b05      	ldr	r3, [sp, #20]
    757a:	3402      	adds	r4, #2
    757c:	1d1a      	adds	r2, r3, #4
    757e:	681b      	ldr	r3, [r3, #0]
    7580:	9205      	str	r2, [sp, #20]
    7582:	2b00      	cmp	r3, #0
    7584:	da0d      	bge.n	75a2 <_svfiprintf_r+0x13e>
    7586:	2301      	movs	r3, #1
    7588:	425b      	negs	r3, r3
    758a:	e00a      	b.n	75a2 <_svfiprintf_r+0x13e>
    758c:	3401      	adds	r4, #1
    758e:	2300      	movs	r3, #0
    7590:	7822      	ldrb	r2, [r4, #0]
    7592:	3a30      	subs	r2, #48	; 0x30
    7594:	2a09      	cmp	r2, #9
    7596:	d804      	bhi.n	75a2 <_svfiprintf_r+0x13e>
    7598:	210a      	movs	r1, #10
    759a:	434b      	muls	r3, r1
    759c:	3401      	adds	r4, #1
    759e:	189b      	adds	r3, r3, r2
    75a0:	e7f6      	b.n	7590 <_svfiprintf_r+0x12c>
    75a2:	9307      	str	r3, [sp, #28]
    75a4:	4f23      	ldr	r7, [pc, #140]	; (7634 <_svfiprintf_r+0x1d0>)
    75a6:	7821      	ldrb	r1, [r4, #0]
    75a8:	1c38      	adds	r0, r7, #0
    75aa:	2203      	movs	r2, #3
    75ac:	f000 fd98 	bl	80e0 <memchr>
    75b0:	2800      	cmp	r0, #0
    75b2:	d006      	beq.n	75c2 <_svfiprintf_r+0x15e>
    75b4:	1bc7      	subs	r7, r0, r7
    75b6:	682b      	ldr	r3, [r5, #0]
    75b8:	2040      	movs	r0, #64	; 0x40
    75ba:	40b8      	lsls	r0, r7
    75bc:	4318      	orrs	r0, r3
    75be:	6028      	str	r0, [r5, #0]
    75c0:	3401      	adds	r4, #1
    75c2:	7821      	ldrb	r1, [r4, #0]
    75c4:	481c      	ldr	r0, [pc, #112]	; (7638 <_svfiprintf_r+0x1d4>)
    75c6:	2206      	movs	r2, #6
    75c8:	1c67      	adds	r7, r4, #1
    75ca:	7629      	strb	r1, [r5, #24]
    75cc:	f000 fd88 	bl	80e0 <memchr>
    75d0:	2800      	cmp	r0, #0
    75d2:	d012      	beq.n	75fa <_svfiprintf_r+0x196>
    75d4:	4b19      	ldr	r3, [pc, #100]	; (763c <_svfiprintf_r+0x1d8>)
    75d6:	2b00      	cmp	r3, #0
    75d8:	d106      	bne.n	75e8 <_svfiprintf_r+0x184>
    75da:	9b05      	ldr	r3, [sp, #20]
    75dc:	2207      	movs	r2, #7
    75de:	3307      	adds	r3, #7
    75e0:	4393      	bics	r3, r2
    75e2:	3308      	adds	r3, #8
    75e4:	9305      	str	r3, [sp, #20]
    75e6:	e014      	b.n	7612 <_svfiprintf_r+0x1ae>
    75e8:	ab05      	add	r3, sp, #20
    75ea:	9300      	str	r3, [sp, #0]
    75ec:	9803      	ldr	r0, [sp, #12]
    75ee:	1c29      	adds	r1, r5, #0
    75f0:	1c32      	adds	r2, r6, #0
    75f2:	4b13      	ldr	r3, [pc, #76]	; (7640 <_svfiprintf_r+0x1dc>)
    75f4:	e000      	b.n	75f8 <_svfiprintf_r+0x194>
    75f6:	bf00      	nop
    75f8:	e007      	b.n	760a <_svfiprintf_r+0x1a6>
    75fa:	ab05      	add	r3, sp, #20
    75fc:	9300      	str	r3, [sp, #0]
    75fe:	9803      	ldr	r0, [sp, #12]
    7600:	1c29      	adds	r1, r5, #0
    7602:	1c32      	adds	r2, r6, #0
    7604:	4b0e      	ldr	r3, [pc, #56]	; (7640 <_svfiprintf_r+0x1dc>)
    7606:	f000 f9c1 	bl	798c <_printf_i>
    760a:	9004      	str	r0, [sp, #16]
    760c:	9904      	ldr	r1, [sp, #16]
    760e:	3101      	adds	r1, #1
    7610:	d004      	beq.n	761c <_svfiprintf_r+0x1b8>
    7612:	696a      	ldr	r2, [r5, #20]
    7614:	9904      	ldr	r1, [sp, #16]
    7616:	1853      	adds	r3, r2, r1
    7618:	616b      	str	r3, [r5, #20]
    761a:	e743      	b.n	74a4 <_svfiprintf_r+0x40>
    761c:	89b3      	ldrh	r3, [r6, #12]
    761e:	065a      	lsls	r2, r3, #25
    7620:	d401      	bmi.n	7626 <_svfiprintf_r+0x1c2>
    7622:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7624:	e001      	b.n	762a <_svfiprintf_r+0x1c6>
    7626:	2001      	movs	r0, #1
    7628:	4240      	negs	r0, r0
    762a:	b01f      	add	sp, #124	; 0x7c
    762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    762e:	46c0      	nop			; (mov r8, r8)
    7630:	00009674 	.word	0x00009674
    7634:	0000967a 	.word	0x0000967a
    7638:	0000967e 	.word	0x0000967e
    763c:	00000000 	.word	0x00000000
    7640:	000073a5 	.word	0x000073a5

00007644 <__sfputc_r>:
    7644:	6893      	ldr	r3, [r2, #8]
    7646:	b510      	push	{r4, lr}
    7648:	3b01      	subs	r3, #1
    764a:	6093      	str	r3, [r2, #8]
    764c:	2b00      	cmp	r3, #0
    764e:	da05      	bge.n	765c <__sfputc_r+0x18>
    7650:	6994      	ldr	r4, [r2, #24]
    7652:	42a3      	cmp	r3, r4
    7654:	db08      	blt.n	7668 <__sfputc_r+0x24>
    7656:	b2cb      	uxtb	r3, r1
    7658:	2b0a      	cmp	r3, #10
    765a:	d005      	beq.n	7668 <__sfputc_r+0x24>
    765c:	6813      	ldr	r3, [r2, #0]
    765e:	1c58      	adds	r0, r3, #1
    7660:	6010      	str	r0, [r2, #0]
    7662:	7019      	strb	r1, [r3, #0]
    7664:	b2c8      	uxtb	r0, r1
    7666:	e001      	b.n	766c <__sfputc_r+0x28>
    7668:	f000 faa6 	bl	7bb8 <__swbuf_r>
    766c:	bd10      	pop	{r4, pc}

0000766e <__sfputs_r>:
    766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7670:	1c06      	adds	r6, r0, #0
    7672:	1c0f      	adds	r7, r1, #0
    7674:	1c14      	adds	r4, r2, #0
    7676:	18d5      	adds	r5, r2, r3
    7678:	42ac      	cmp	r4, r5
    767a:	d008      	beq.n	768e <__sfputs_r+0x20>
    767c:	7821      	ldrb	r1, [r4, #0]
    767e:	1c30      	adds	r0, r6, #0
    7680:	1c3a      	adds	r2, r7, #0
    7682:	f7ff ffdf 	bl	7644 <__sfputc_r>
    7686:	3401      	adds	r4, #1
    7688:	1c43      	adds	r3, r0, #1
    768a:	d1f5      	bne.n	7678 <__sfputs_r+0xa>
    768c:	e000      	b.n	7690 <__sfputs_r+0x22>
    768e:	2000      	movs	r0, #0
    7690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007694 <_vfiprintf_r>:
    7694:	b5f0      	push	{r4, r5, r6, r7, lr}
    7696:	b09f      	sub	sp, #124	; 0x7c
    7698:	1c06      	adds	r6, r0, #0
    769a:	1c0f      	adds	r7, r1, #0
    769c:	9203      	str	r2, [sp, #12]
    769e:	9305      	str	r3, [sp, #20]
    76a0:	2800      	cmp	r0, #0
    76a2:	d004      	beq.n	76ae <_vfiprintf_r+0x1a>
    76a4:	6981      	ldr	r1, [r0, #24]
    76a6:	2900      	cmp	r1, #0
    76a8:	d101      	bne.n	76ae <_vfiprintf_r+0x1a>
    76aa:	f000 fc59 	bl	7f60 <__sinit>
    76ae:	4b75      	ldr	r3, [pc, #468]	; (7884 <_vfiprintf_r+0x1f0>)
    76b0:	429f      	cmp	r7, r3
    76b2:	d101      	bne.n	76b8 <_vfiprintf_r+0x24>
    76b4:	6877      	ldr	r7, [r6, #4]
    76b6:	e008      	b.n	76ca <_vfiprintf_r+0x36>
    76b8:	4b73      	ldr	r3, [pc, #460]	; (7888 <_vfiprintf_r+0x1f4>)
    76ba:	429f      	cmp	r7, r3
    76bc:	d101      	bne.n	76c2 <_vfiprintf_r+0x2e>
    76be:	68b7      	ldr	r7, [r6, #8]
    76c0:	e003      	b.n	76ca <_vfiprintf_r+0x36>
    76c2:	4b72      	ldr	r3, [pc, #456]	; (788c <_vfiprintf_r+0x1f8>)
    76c4:	429f      	cmp	r7, r3
    76c6:	d100      	bne.n	76ca <_vfiprintf_r+0x36>
    76c8:	68f7      	ldr	r7, [r6, #12]
    76ca:	89bb      	ldrh	r3, [r7, #12]
    76cc:	071a      	lsls	r2, r3, #28
    76ce:	d50a      	bpl.n	76e6 <_vfiprintf_r+0x52>
    76d0:	693b      	ldr	r3, [r7, #16]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d007      	beq.n	76e6 <_vfiprintf_r+0x52>
    76d6:	ad06      	add	r5, sp, #24
    76d8:	2300      	movs	r3, #0
    76da:	616b      	str	r3, [r5, #20]
    76dc:	2320      	movs	r3, #32
    76de:	766b      	strb	r3, [r5, #25]
    76e0:	2330      	movs	r3, #48	; 0x30
    76e2:	76ab      	strb	r3, [r5, #26]
    76e4:	e03b      	b.n	775e <_vfiprintf_r+0xca>
    76e6:	1c30      	adds	r0, r6, #0
    76e8:	1c39      	adds	r1, r7, #0
    76ea:	f000 fabd 	bl	7c68 <__swsetup_r>
    76ee:	2800      	cmp	r0, #0
    76f0:	d0f1      	beq.n	76d6 <_vfiprintf_r+0x42>
    76f2:	2001      	movs	r0, #1
    76f4:	4240      	negs	r0, r0
    76f6:	e0c2      	b.n	787e <_vfiprintf_r+0x1ea>
    76f8:	9a05      	ldr	r2, [sp, #20]
    76fa:	1d11      	adds	r1, r2, #4
    76fc:	6812      	ldr	r2, [r2, #0]
    76fe:	9105      	str	r1, [sp, #20]
    7700:	2a00      	cmp	r2, #0
    7702:	db76      	blt.n	77f2 <_vfiprintf_r+0x15e>
    7704:	9209      	str	r2, [sp, #36]	; 0x24
    7706:	3401      	adds	r4, #1
    7708:	7823      	ldrb	r3, [r4, #0]
    770a:	2b2e      	cmp	r3, #46	; 0x2e
    770c:	d100      	bne.n	7710 <_vfiprintf_r+0x7c>
    770e:	e081      	b.n	7814 <_vfiprintf_r+0x180>
    7710:	7821      	ldrb	r1, [r4, #0]
    7712:	485f      	ldr	r0, [pc, #380]	; (7890 <_vfiprintf_r+0x1fc>)
    7714:	2203      	movs	r2, #3
    7716:	f000 fce3 	bl	80e0 <memchr>
    771a:	2800      	cmp	r0, #0
    771c:	d007      	beq.n	772e <_vfiprintf_r+0x9a>
    771e:	495c      	ldr	r1, [pc, #368]	; (7890 <_vfiprintf_r+0x1fc>)
    7720:	682a      	ldr	r2, [r5, #0]
    7722:	1a43      	subs	r3, r0, r1
    7724:	2040      	movs	r0, #64	; 0x40
    7726:	4098      	lsls	r0, r3
    7728:	4310      	orrs	r0, r2
    772a:	6028      	str	r0, [r5, #0]
    772c:	3401      	adds	r4, #1
    772e:	7821      	ldrb	r1, [r4, #0]
    7730:	1c63      	adds	r3, r4, #1
    7732:	4858      	ldr	r0, [pc, #352]	; (7894 <_vfiprintf_r+0x200>)
    7734:	2206      	movs	r2, #6
    7736:	9303      	str	r3, [sp, #12]
    7738:	7629      	strb	r1, [r5, #24]
    773a:	f000 fcd1 	bl	80e0 <memchr>
    773e:	2800      	cmp	r0, #0
    7740:	d100      	bne.n	7744 <_vfiprintf_r+0xb0>
    7742:	e08a      	b.n	785a <_vfiprintf_r+0x1c6>
    7744:	4b54      	ldr	r3, [pc, #336]	; (7898 <_vfiprintf_r+0x204>)
    7746:	2b00      	cmp	r3, #0
    7748:	d17e      	bne.n	7848 <_vfiprintf_r+0x1b4>
    774a:	9b05      	ldr	r3, [sp, #20]
    774c:	2207      	movs	r2, #7
    774e:	3307      	adds	r3, #7
    7750:	4393      	bics	r3, r2
    7752:	3308      	adds	r3, #8
    7754:	9305      	str	r3, [sp, #20]
    7756:	696a      	ldr	r2, [r5, #20]
    7758:	9904      	ldr	r1, [sp, #16]
    775a:	1853      	adds	r3, r2, r1
    775c:	616b      	str	r3, [r5, #20]
    775e:	9c03      	ldr	r4, [sp, #12]
    7760:	7823      	ldrb	r3, [r4, #0]
    7762:	2b00      	cmp	r3, #0
    7764:	d104      	bne.n	7770 <_vfiprintf_r+0xdc>
    7766:	9903      	ldr	r1, [sp, #12]
    7768:	1a61      	subs	r1, r4, r1
    776a:	9102      	str	r1, [sp, #8]
    776c:	d010      	beq.n	7790 <_vfiprintf_r+0xfc>
    776e:	e003      	b.n	7778 <_vfiprintf_r+0xe4>
    7770:	2b25      	cmp	r3, #37	; 0x25
    7772:	d0f8      	beq.n	7766 <_vfiprintf_r+0xd2>
    7774:	3401      	adds	r4, #1
    7776:	e7f3      	b.n	7760 <_vfiprintf_r+0xcc>
    7778:	1c30      	adds	r0, r6, #0
    777a:	1c39      	adds	r1, r7, #0
    777c:	9a03      	ldr	r2, [sp, #12]
    777e:	9b02      	ldr	r3, [sp, #8]
    7780:	f7ff ff75 	bl	766e <__sfputs_r>
    7784:	3001      	adds	r0, #1
    7786:	d075      	beq.n	7874 <_vfiprintf_r+0x1e0>
    7788:	696a      	ldr	r2, [r5, #20]
    778a:	9902      	ldr	r1, [sp, #8]
    778c:	1853      	adds	r3, r2, r1
    778e:	616b      	str	r3, [r5, #20]
    7790:	7823      	ldrb	r3, [r4, #0]
    7792:	2b00      	cmp	r3, #0
    7794:	d06e      	beq.n	7874 <_vfiprintf_r+0x1e0>
    7796:	2201      	movs	r2, #1
    7798:	4252      	negs	r2, r2
    779a:	606a      	str	r2, [r5, #4]
    779c:	466a      	mov	r2, sp
    779e:	2300      	movs	r3, #0
    77a0:	325b      	adds	r2, #91	; 0x5b
    77a2:	3401      	adds	r4, #1
    77a4:	602b      	str	r3, [r5, #0]
    77a6:	60eb      	str	r3, [r5, #12]
    77a8:	60ab      	str	r3, [r5, #8]
    77aa:	7013      	strb	r3, [r2, #0]
    77ac:	65ab      	str	r3, [r5, #88]	; 0x58
    77ae:	7821      	ldrb	r1, [r4, #0]
    77b0:	483a      	ldr	r0, [pc, #232]	; (789c <_vfiprintf_r+0x208>)
    77b2:	2205      	movs	r2, #5
    77b4:	f000 fc94 	bl	80e0 <memchr>
    77b8:	2800      	cmp	r0, #0
    77ba:	d008      	beq.n	77ce <_vfiprintf_r+0x13a>
    77bc:	4a37      	ldr	r2, [pc, #220]	; (789c <_vfiprintf_r+0x208>)
    77be:	3401      	adds	r4, #1
    77c0:	1a83      	subs	r3, r0, r2
    77c2:	2001      	movs	r0, #1
    77c4:	4098      	lsls	r0, r3
    77c6:	682b      	ldr	r3, [r5, #0]
    77c8:	4318      	orrs	r0, r3
    77ca:	6028      	str	r0, [r5, #0]
    77cc:	e7ef      	b.n	77ae <_vfiprintf_r+0x11a>
    77ce:	682b      	ldr	r3, [r5, #0]
    77d0:	06d9      	lsls	r1, r3, #27
    77d2:	d503      	bpl.n	77dc <_vfiprintf_r+0x148>
    77d4:	466a      	mov	r2, sp
    77d6:	2120      	movs	r1, #32
    77d8:	325b      	adds	r2, #91	; 0x5b
    77da:	7011      	strb	r1, [r2, #0]
    77dc:	071a      	lsls	r2, r3, #28
    77de:	d503      	bpl.n	77e8 <_vfiprintf_r+0x154>
    77e0:	466a      	mov	r2, sp
    77e2:	212b      	movs	r1, #43	; 0x2b
    77e4:	325b      	adds	r2, #91	; 0x5b
    77e6:	7011      	strb	r1, [r2, #0]
    77e8:	7822      	ldrb	r2, [r4, #0]
    77ea:	2a2a      	cmp	r2, #42	; 0x2a
    77ec:	d084      	beq.n	76f8 <_vfiprintf_r+0x64>
    77ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77f0:	e005      	b.n	77fe <_vfiprintf_r+0x16a>
    77f2:	4252      	negs	r2, r2
    77f4:	60ea      	str	r2, [r5, #12]
    77f6:	2202      	movs	r2, #2
    77f8:	4313      	orrs	r3, r2
    77fa:	602b      	str	r3, [r5, #0]
    77fc:	e783      	b.n	7706 <_vfiprintf_r+0x72>
    77fe:	7822      	ldrb	r2, [r4, #0]
    7800:	3a30      	subs	r2, #48	; 0x30
    7802:	2a09      	cmp	r2, #9
    7804:	d804      	bhi.n	7810 <_vfiprintf_r+0x17c>
    7806:	210a      	movs	r1, #10
    7808:	434b      	muls	r3, r1
    780a:	3401      	adds	r4, #1
    780c:	189b      	adds	r3, r3, r2
    780e:	e7f6      	b.n	77fe <_vfiprintf_r+0x16a>
    7810:	9309      	str	r3, [sp, #36]	; 0x24
    7812:	e779      	b.n	7708 <_vfiprintf_r+0x74>
    7814:	7863      	ldrb	r3, [r4, #1]
    7816:	2b2a      	cmp	r3, #42	; 0x2a
    7818:	d109      	bne.n	782e <_vfiprintf_r+0x19a>
    781a:	9b05      	ldr	r3, [sp, #20]
    781c:	3402      	adds	r4, #2
    781e:	1d1a      	adds	r2, r3, #4
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	9205      	str	r2, [sp, #20]
    7824:	2b00      	cmp	r3, #0
    7826:	da0d      	bge.n	7844 <_vfiprintf_r+0x1b0>
    7828:	2301      	movs	r3, #1
    782a:	425b      	negs	r3, r3
    782c:	e00a      	b.n	7844 <_vfiprintf_r+0x1b0>
    782e:	3401      	adds	r4, #1
    7830:	2300      	movs	r3, #0
    7832:	7822      	ldrb	r2, [r4, #0]
    7834:	3a30      	subs	r2, #48	; 0x30
    7836:	2a09      	cmp	r2, #9
    7838:	d804      	bhi.n	7844 <_vfiprintf_r+0x1b0>
    783a:	210a      	movs	r1, #10
    783c:	434b      	muls	r3, r1
    783e:	3401      	adds	r4, #1
    7840:	189b      	adds	r3, r3, r2
    7842:	e7f6      	b.n	7832 <_vfiprintf_r+0x19e>
    7844:	9307      	str	r3, [sp, #28]
    7846:	e763      	b.n	7710 <_vfiprintf_r+0x7c>
    7848:	ab05      	add	r3, sp, #20
    784a:	9300      	str	r3, [sp, #0]
    784c:	1c30      	adds	r0, r6, #0
    784e:	1c29      	adds	r1, r5, #0
    7850:	1c3a      	adds	r2, r7, #0
    7852:	4b13      	ldr	r3, [pc, #76]	; (78a0 <_vfiprintf_r+0x20c>)
    7854:	e000      	b.n	7858 <_vfiprintf_r+0x1c4>
    7856:	bf00      	nop
    7858:	e007      	b.n	786a <_vfiprintf_r+0x1d6>
    785a:	ab05      	add	r3, sp, #20
    785c:	9300      	str	r3, [sp, #0]
    785e:	1c30      	adds	r0, r6, #0
    7860:	1c29      	adds	r1, r5, #0
    7862:	1c3a      	adds	r2, r7, #0
    7864:	4b0e      	ldr	r3, [pc, #56]	; (78a0 <_vfiprintf_r+0x20c>)
    7866:	f000 f891 	bl	798c <_printf_i>
    786a:	9004      	str	r0, [sp, #16]
    786c:	9904      	ldr	r1, [sp, #16]
    786e:	3101      	adds	r1, #1
    7870:	d000      	beq.n	7874 <_vfiprintf_r+0x1e0>
    7872:	e770      	b.n	7756 <_vfiprintf_r+0xc2>
    7874:	89bb      	ldrh	r3, [r7, #12]
    7876:	065a      	lsls	r2, r3, #25
    7878:	d500      	bpl.n	787c <_vfiprintf_r+0x1e8>
    787a:	e73a      	b.n	76f2 <_vfiprintf_r+0x5e>
    787c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    787e:	b01f      	add	sp, #124	; 0x7c
    7880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	000096a8 	.word	0x000096a8
    7888:	000096c8 	.word	0x000096c8
    788c:	000096e8 	.word	0x000096e8
    7890:	0000967a 	.word	0x0000967a
    7894:	0000967e 	.word	0x0000967e
    7898:	00000000 	.word	0x00000000
    789c:	00009674 	.word	0x00009674
    78a0:	0000766f 	.word	0x0000766f

000078a4 <_printf_common>:
    78a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78a6:	1c15      	adds	r5, r2, #0
    78a8:	9301      	str	r3, [sp, #4]
    78aa:	690a      	ldr	r2, [r1, #16]
    78ac:	688b      	ldr	r3, [r1, #8]
    78ae:	1c06      	adds	r6, r0, #0
    78b0:	1c0c      	adds	r4, r1, #0
    78b2:	4293      	cmp	r3, r2
    78b4:	da00      	bge.n	78b8 <_printf_common+0x14>
    78b6:	1c13      	adds	r3, r2, #0
    78b8:	1c22      	adds	r2, r4, #0
    78ba:	602b      	str	r3, [r5, #0]
    78bc:	3243      	adds	r2, #67	; 0x43
    78be:	7812      	ldrb	r2, [r2, #0]
    78c0:	2a00      	cmp	r2, #0
    78c2:	d001      	beq.n	78c8 <_printf_common+0x24>
    78c4:	3301      	adds	r3, #1
    78c6:	602b      	str	r3, [r5, #0]
    78c8:	6820      	ldr	r0, [r4, #0]
    78ca:	0680      	lsls	r0, r0, #26
    78cc:	d502      	bpl.n	78d4 <_printf_common+0x30>
    78ce:	682b      	ldr	r3, [r5, #0]
    78d0:	3302      	adds	r3, #2
    78d2:	602b      	str	r3, [r5, #0]
    78d4:	6821      	ldr	r1, [r4, #0]
    78d6:	2706      	movs	r7, #6
    78d8:	400f      	ands	r7, r1
    78da:	d01f      	beq.n	791c <_printf_common+0x78>
    78dc:	1c23      	adds	r3, r4, #0
    78de:	3343      	adds	r3, #67	; 0x43
    78e0:	781b      	ldrb	r3, [r3, #0]
    78e2:	1e5a      	subs	r2, r3, #1
    78e4:	4193      	sbcs	r3, r2
    78e6:	6822      	ldr	r2, [r4, #0]
    78e8:	0692      	lsls	r2, r2, #26
    78ea:	d51f      	bpl.n	792c <_printf_common+0x88>
    78ec:	18e1      	adds	r1, r4, r3
    78ee:	3140      	adds	r1, #64	; 0x40
    78f0:	2030      	movs	r0, #48	; 0x30
    78f2:	70c8      	strb	r0, [r1, #3]
    78f4:	1c21      	adds	r1, r4, #0
    78f6:	1c5a      	adds	r2, r3, #1
    78f8:	3145      	adds	r1, #69	; 0x45
    78fa:	7809      	ldrb	r1, [r1, #0]
    78fc:	18a2      	adds	r2, r4, r2
    78fe:	3240      	adds	r2, #64	; 0x40
    7900:	3302      	adds	r3, #2
    7902:	70d1      	strb	r1, [r2, #3]
    7904:	e012      	b.n	792c <_printf_common+0x88>
    7906:	1c22      	adds	r2, r4, #0
    7908:	1c30      	adds	r0, r6, #0
    790a:	9901      	ldr	r1, [sp, #4]
    790c:	3219      	adds	r2, #25
    790e:	2301      	movs	r3, #1
    7910:	9f08      	ldr	r7, [sp, #32]
    7912:	47b8      	blx	r7
    7914:	3001      	adds	r0, #1
    7916:	d011      	beq.n	793c <_printf_common+0x98>
    7918:	9f00      	ldr	r7, [sp, #0]
    791a:	3701      	adds	r7, #1
    791c:	9700      	str	r7, [sp, #0]
    791e:	68e0      	ldr	r0, [r4, #12]
    7920:	6829      	ldr	r1, [r5, #0]
    7922:	9f00      	ldr	r7, [sp, #0]
    7924:	1a43      	subs	r3, r0, r1
    7926:	429f      	cmp	r7, r3
    7928:	dbed      	blt.n	7906 <_printf_common+0x62>
    792a:	e7d7      	b.n	78dc <_printf_common+0x38>
    792c:	1c22      	adds	r2, r4, #0
    792e:	1c30      	adds	r0, r6, #0
    7930:	9901      	ldr	r1, [sp, #4]
    7932:	3243      	adds	r2, #67	; 0x43
    7934:	9f08      	ldr	r7, [sp, #32]
    7936:	47b8      	blx	r7
    7938:	3001      	adds	r0, #1
    793a:	d102      	bne.n	7942 <_printf_common+0x9e>
    793c:	2001      	movs	r0, #1
    793e:	4240      	negs	r0, r0
    7940:	e023      	b.n	798a <_printf_common+0xe6>
    7942:	6820      	ldr	r0, [r4, #0]
    7944:	2106      	movs	r1, #6
    7946:	682b      	ldr	r3, [r5, #0]
    7948:	68e2      	ldr	r2, [r4, #12]
    794a:	4001      	ands	r1, r0
    794c:	2500      	movs	r5, #0
    794e:	2904      	cmp	r1, #4
    7950:	d103      	bne.n	795a <_printf_common+0xb6>
    7952:	1ad5      	subs	r5, r2, r3
    7954:	43eb      	mvns	r3, r5
    7956:	17db      	asrs	r3, r3, #31
    7958:	401d      	ands	r5, r3
    795a:	68a2      	ldr	r2, [r4, #8]
    795c:	6923      	ldr	r3, [r4, #16]
    795e:	429a      	cmp	r2, r3
    7960:	dd01      	ble.n	7966 <_printf_common+0xc2>
    7962:	1ad3      	subs	r3, r2, r3
    7964:	18ed      	adds	r5, r5, r3
    7966:	2700      	movs	r7, #0
    7968:	9700      	str	r7, [sp, #0]
    796a:	9f00      	ldr	r7, [sp, #0]
    796c:	42af      	cmp	r7, r5
    796e:	da0b      	bge.n	7988 <_printf_common+0xe4>
    7970:	1c22      	adds	r2, r4, #0
    7972:	1c30      	adds	r0, r6, #0
    7974:	9901      	ldr	r1, [sp, #4]
    7976:	321a      	adds	r2, #26
    7978:	2301      	movs	r3, #1
    797a:	9f08      	ldr	r7, [sp, #32]
    797c:	47b8      	blx	r7
    797e:	3001      	adds	r0, #1
    7980:	d0dc      	beq.n	793c <_printf_common+0x98>
    7982:	9f00      	ldr	r7, [sp, #0]
    7984:	3701      	adds	r7, #1
    7986:	e7ef      	b.n	7968 <_printf_common+0xc4>
    7988:	2000      	movs	r0, #0
    798a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000798c <_printf_i>:
    798c:	b5f0      	push	{r4, r5, r6, r7, lr}
    798e:	1c0d      	adds	r5, r1, #0
    7990:	b08b      	sub	sp, #44	; 0x2c
    7992:	3543      	adds	r5, #67	; 0x43
    7994:	9206      	str	r2, [sp, #24]
    7996:	9005      	str	r0, [sp, #20]
    7998:	9307      	str	r3, [sp, #28]
    799a:	9504      	str	r5, [sp, #16]
    799c:	7e0b      	ldrb	r3, [r1, #24]
    799e:	1c0c      	adds	r4, r1, #0
    79a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    79a2:	2b6e      	cmp	r3, #110	; 0x6e
    79a4:	d100      	bne.n	79a8 <_printf_i+0x1c>
    79a6:	e0a7      	b.n	7af8 <_printf_i+0x16c>
    79a8:	d811      	bhi.n	79ce <_printf_i+0x42>
    79aa:	2b63      	cmp	r3, #99	; 0x63
    79ac:	d022      	beq.n	79f4 <_printf_i+0x68>
    79ae:	d809      	bhi.n	79c4 <_printf_i+0x38>
    79b0:	2b00      	cmp	r3, #0
    79b2:	d100      	bne.n	79b6 <_printf_i+0x2a>
    79b4:	e0b0      	b.n	7b18 <_printf_i+0x18c>
    79b6:	2b58      	cmp	r3, #88	; 0x58
    79b8:	d000      	beq.n	79bc <_printf_i+0x30>
    79ba:	e0c0      	b.n	7b3e <_printf_i+0x1b2>
    79bc:	3145      	adds	r1, #69	; 0x45
    79be:	700b      	strb	r3, [r1, #0]
    79c0:	4d7b      	ldr	r5, [pc, #492]	; (7bb0 <_printf_i+0x224>)
    79c2:	e04e      	b.n	7a62 <_printf_i+0xd6>
    79c4:	2b64      	cmp	r3, #100	; 0x64
    79c6:	d01c      	beq.n	7a02 <_printf_i+0x76>
    79c8:	2b69      	cmp	r3, #105	; 0x69
    79ca:	d01a      	beq.n	7a02 <_printf_i+0x76>
    79cc:	e0b7      	b.n	7b3e <_printf_i+0x1b2>
    79ce:	2b73      	cmp	r3, #115	; 0x73
    79d0:	d100      	bne.n	79d4 <_printf_i+0x48>
    79d2:	e0a5      	b.n	7b20 <_printf_i+0x194>
    79d4:	d809      	bhi.n	79ea <_printf_i+0x5e>
    79d6:	2b6f      	cmp	r3, #111	; 0x6f
    79d8:	d029      	beq.n	7a2e <_printf_i+0xa2>
    79da:	2b70      	cmp	r3, #112	; 0x70
    79dc:	d000      	beq.n	79e0 <_printf_i+0x54>
    79de:	e0ae      	b.n	7b3e <_printf_i+0x1b2>
    79e0:	680e      	ldr	r6, [r1, #0]
    79e2:	2320      	movs	r3, #32
    79e4:	4333      	orrs	r3, r6
    79e6:	600b      	str	r3, [r1, #0]
    79e8:	e036      	b.n	7a58 <_printf_i+0xcc>
    79ea:	2b75      	cmp	r3, #117	; 0x75
    79ec:	d01f      	beq.n	7a2e <_printf_i+0xa2>
    79ee:	2b78      	cmp	r3, #120	; 0x78
    79f0:	d032      	beq.n	7a58 <_printf_i+0xcc>
    79f2:	e0a4      	b.n	7b3e <_printf_i+0x1b2>
    79f4:	6813      	ldr	r3, [r2, #0]
    79f6:	1c0d      	adds	r5, r1, #0
    79f8:	1d19      	adds	r1, r3, #4
    79fa:	3542      	adds	r5, #66	; 0x42
    79fc:	6011      	str	r1, [r2, #0]
    79fe:	681b      	ldr	r3, [r3, #0]
    7a00:	e09f      	b.n	7b42 <_printf_i+0x1b6>
    7a02:	6821      	ldr	r1, [r4, #0]
    7a04:	6813      	ldr	r3, [r2, #0]
    7a06:	060e      	lsls	r6, r1, #24
    7a08:	d503      	bpl.n	7a12 <_printf_i+0x86>
    7a0a:	1d19      	adds	r1, r3, #4
    7a0c:	6011      	str	r1, [r2, #0]
    7a0e:	681e      	ldr	r6, [r3, #0]
    7a10:	e005      	b.n	7a1e <_printf_i+0x92>
    7a12:	0648      	lsls	r0, r1, #25
    7a14:	d5f9      	bpl.n	7a0a <_printf_i+0x7e>
    7a16:	1d19      	adds	r1, r3, #4
    7a18:	6011      	str	r1, [r2, #0]
    7a1a:	2100      	movs	r1, #0
    7a1c:	5e5e      	ldrsh	r6, [r3, r1]
    7a1e:	4b64      	ldr	r3, [pc, #400]	; (7bb0 <_printf_i+0x224>)
    7a20:	2e00      	cmp	r6, #0
    7a22:	da3b      	bge.n	7a9c <_printf_i+0x110>
    7a24:	9d04      	ldr	r5, [sp, #16]
    7a26:	222d      	movs	r2, #45	; 0x2d
    7a28:	4276      	negs	r6, r6
    7a2a:	702a      	strb	r2, [r5, #0]
    7a2c:	e036      	b.n	7a9c <_printf_i+0x110>
    7a2e:	6821      	ldr	r1, [r4, #0]
    7a30:	6813      	ldr	r3, [r2, #0]
    7a32:	060e      	lsls	r6, r1, #24
    7a34:	d503      	bpl.n	7a3e <_printf_i+0xb2>
    7a36:	1d19      	adds	r1, r3, #4
    7a38:	6011      	str	r1, [r2, #0]
    7a3a:	681e      	ldr	r6, [r3, #0]
    7a3c:	e004      	b.n	7a48 <_printf_i+0xbc>
    7a3e:	0648      	lsls	r0, r1, #25
    7a40:	d5f9      	bpl.n	7a36 <_printf_i+0xaa>
    7a42:	1d19      	adds	r1, r3, #4
    7a44:	881e      	ldrh	r6, [r3, #0]
    7a46:	6011      	str	r1, [r2, #0]
    7a48:	4b59      	ldr	r3, [pc, #356]	; (7bb0 <_printf_i+0x224>)
    7a4a:	7e22      	ldrb	r2, [r4, #24]
    7a4c:	9303      	str	r3, [sp, #12]
    7a4e:	2708      	movs	r7, #8
    7a50:	2a6f      	cmp	r2, #111	; 0x6f
    7a52:	d01e      	beq.n	7a92 <_printf_i+0x106>
    7a54:	270a      	movs	r7, #10
    7a56:	e01c      	b.n	7a92 <_printf_i+0x106>
    7a58:	1c23      	adds	r3, r4, #0
    7a5a:	2178      	movs	r1, #120	; 0x78
    7a5c:	3345      	adds	r3, #69	; 0x45
    7a5e:	4d55      	ldr	r5, [pc, #340]	; (7bb4 <_printf_i+0x228>)
    7a60:	7019      	strb	r1, [r3, #0]
    7a62:	6811      	ldr	r1, [r2, #0]
    7a64:	6823      	ldr	r3, [r4, #0]
    7a66:	1d08      	adds	r0, r1, #4
    7a68:	9503      	str	r5, [sp, #12]
    7a6a:	6010      	str	r0, [r2, #0]
    7a6c:	061e      	lsls	r6, r3, #24
    7a6e:	d501      	bpl.n	7a74 <_printf_i+0xe8>
    7a70:	680e      	ldr	r6, [r1, #0]
    7a72:	e002      	b.n	7a7a <_printf_i+0xee>
    7a74:	0658      	lsls	r0, r3, #25
    7a76:	d5fb      	bpl.n	7a70 <_printf_i+0xe4>
    7a78:	880e      	ldrh	r6, [r1, #0]
    7a7a:	07d9      	lsls	r1, r3, #31
    7a7c:	d502      	bpl.n	7a84 <_printf_i+0xf8>
    7a7e:	2220      	movs	r2, #32
    7a80:	4313      	orrs	r3, r2
    7a82:	6023      	str	r3, [r4, #0]
    7a84:	2710      	movs	r7, #16
    7a86:	2e00      	cmp	r6, #0
    7a88:	d103      	bne.n	7a92 <_printf_i+0x106>
    7a8a:	6822      	ldr	r2, [r4, #0]
    7a8c:	2320      	movs	r3, #32
    7a8e:	439a      	bics	r2, r3
    7a90:	6022      	str	r2, [r4, #0]
    7a92:	1c23      	adds	r3, r4, #0
    7a94:	2200      	movs	r2, #0
    7a96:	3343      	adds	r3, #67	; 0x43
    7a98:	701a      	strb	r2, [r3, #0]
    7a9a:	e001      	b.n	7aa0 <_printf_i+0x114>
    7a9c:	9303      	str	r3, [sp, #12]
    7a9e:	270a      	movs	r7, #10
    7aa0:	6863      	ldr	r3, [r4, #4]
    7aa2:	60a3      	str	r3, [r4, #8]
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	db03      	blt.n	7ab0 <_printf_i+0x124>
    7aa8:	6825      	ldr	r5, [r4, #0]
    7aaa:	2204      	movs	r2, #4
    7aac:	4395      	bics	r5, r2
    7aae:	6025      	str	r5, [r4, #0]
    7ab0:	2e00      	cmp	r6, #0
    7ab2:	d102      	bne.n	7aba <_printf_i+0x12e>
    7ab4:	9d04      	ldr	r5, [sp, #16]
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d00e      	beq.n	7ad8 <_printf_i+0x14c>
    7aba:	9d04      	ldr	r5, [sp, #16]
    7abc:	1c30      	adds	r0, r6, #0
    7abe:	1c39      	adds	r1, r7, #0
    7ac0:	f7ff f974 	bl	6dac <__aeabi_uidivmod>
    7ac4:	9803      	ldr	r0, [sp, #12]
    7ac6:	3d01      	subs	r5, #1
    7ac8:	5c43      	ldrb	r3, [r0, r1]
    7aca:	1c30      	adds	r0, r6, #0
    7acc:	702b      	strb	r3, [r5, #0]
    7ace:	1c39      	adds	r1, r7, #0
    7ad0:	f7ff f928 	bl	6d24 <__aeabi_uidiv>
    7ad4:	1e06      	subs	r6, r0, #0
    7ad6:	d1f1      	bne.n	7abc <_printf_i+0x130>
    7ad8:	2f08      	cmp	r7, #8
    7ada:	d109      	bne.n	7af0 <_printf_i+0x164>
    7adc:	6821      	ldr	r1, [r4, #0]
    7ade:	07c9      	lsls	r1, r1, #31
    7ae0:	d506      	bpl.n	7af0 <_printf_i+0x164>
    7ae2:	6862      	ldr	r2, [r4, #4]
    7ae4:	6923      	ldr	r3, [r4, #16]
    7ae6:	429a      	cmp	r2, r3
    7ae8:	dc02      	bgt.n	7af0 <_printf_i+0x164>
    7aea:	3d01      	subs	r5, #1
    7aec:	2330      	movs	r3, #48	; 0x30
    7aee:	702b      	strb	r3, [r5, #0]
    7af0:	9e04      	ldr	r6, [sp, #16]
    7af2:	1b73      	subs	r3, r6, r5
    7af4:	6123      	str	r3, [r4, #16]
    7af6:	e02a      	b.n	7b4e <_printf_i+0x1c2>
    7af8:	6808      	ldr	r0, [r1, #0]
    7afa:	6813      	ldr	r3, [r2, #0]
    7afc:	6949      	ldr	r1, [r1, #20]
    7afe:	0605      	lsls	r5, r0, #24
    7b00:	d504      	bpl.n	7b0c <_printf_i+0x180>
    7b02:	1d18      	adds	r0, r3, #4
    7b04:	6010      	str	r0, [r2, #0]
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	6019      	str	r1, [r3, #0]
    7b0a:	e005      	b.n	7b18 <_printf_i+0x18c>
    7b0c:	0646      	lsls	r6, r0, #25
    7b0e:	d5f8      	bpl.n	7b02 <_printf_i+0x176>
    7b10:	1d18      	adds	r0, r3, #4
    7b12:	6010      	str	r0, [r2, #0]
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	8019      	strh	r1, [r3, #0]
    7b18:	2300      	movs	r3, #0
    7b1a:	6123      	str	r3, [r4, #16]
    7b1c:	9d04      	ldr	r5, [sp, #16]
    7b1e:	e016      	b.n	7b4e <_printf_i+0x1c2>
    7b20:	6813      	ldr	r3, [r2, #0]
    7b22:	1d19      	adds	r1, r3, #4
    7b24:	6011      	str	r1, [r2, #0]
    7b26:	681d      	ldr	r5, [r3, #0]
    7b28:	1c28      	adds	r0, r5, #0
    7b2a:	f7ff fc33 	bl	7394 <strlen>
    7b2e:	6863      	ldr	r3, [r4, #4]
    7b30:	6120      	str	r0, [r4, #16]
    7b32:	4298      	cmp	r0, r3
    7b34:	d900      	bls.n	7b38 <_printf_i+0x1ac>
    7b36:	6123      	str	r3, [r4, #16]
    7b38:	6920      	ldr	r0, [r4, #16]
    7b3a:	6060      	str	r0, [r4, #4]
    7b3c:	e004      	b.n	7b48 <_printf_i+0x1bc>
    7b3e:	1c25      	adds	r5, r4, #0
    7b40:	3542      	adds	r5, #66	; 0x42
    7b42:	702b      	strb	r3, [r5, #0]
    7b44:	2301      	movs	r3, #1
    7b46:	6123      	str	r3, [r4, #16]
    7b48:	9e04      	ldr	r6, [sp, #16]
    7b4a:	2300      	movs	r3, #0
    7b4c:	7033      	strb	r3, [r6, #0]
    7b4e:	9e07      	ldr	r6, [sp, #28]
    7b50:	9805      	ldr	r0, [sp, #20]
    7b52:	9600      	str	r6, [sp, #0]
    7b54:	1c21      	adds	r1, r4, #0
    7b56:	aa09      	add	r2, sp, #36	; 0x24
    7b58:	9b06      	ldr	r3, [sp, #24]
    7b5a:	f7ff fea3 	bl	78a4 <_printf_common>
    7b5e:	3001      	adds	r0, #1
    7b60:	d102      	bne.n	7b68 <_printf_i+0x1dc>
    7b62:	2001      	movs	r0, #1
    7b64:	4240      	negs	r0, r0
    7b66:	e021      	b.n	7bac <_printf_i+0x220>
    7b68:	1c2a      	adds	r2, r5, #0
    7b6a:	9805      	ldr	r0, [sp, #20]
    7b6c:	9906      	ldr	r1, [sp, #24]
    7b6e:	6923      	ldr	r3, [r4, #16]
    7b70:	9d07      	ldr	r5, [sp, #28]
    7b72:	47a8      	blx	r5
    7b74:	3001      	adds	r0, #1
    7b76:	d0f4      	beq.n	7b62 <_printf_i+0x1d6>
    7b78:	6826      	ldr	r6, [r4, #0]
    7b7a:	07b6      	lsls	r6, r6, #30
    7b7c:	d405      	bmi.n	7b8a <_printf_i+0x1fe>
    7b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b80:	68e0      	ldr	r0, [r4, #12]
    7b82:	4298      	cmp	r0, r3
    7b84:	da12      	bge.n	7bac <_printf_i+0x220>
    7b86:	1c18      	adds	r0, r3, #0
    7b88:	e010      	b.n	7bac <_printf_i+0x220>
    7b8a:	2500      	movs	r5, #0
    7b8c:	68e0      	ldr	r0, [r4, #12]
    7b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7b90:	1a43      	subs	r3, r0, r1
    7b92:	429d      	cmp	r5, r3
    7b94:	daf3      	bge.n	7b7e <_printf_i+0x1f2>
    7b96:	1c22      	adds	r2, r4, #0
    7b98:	9805      	ldr	r0, [sp, #20]
    7b9a:	9906      	ldr	r1, [sp, #24]
    7b9c:	3219      	adds	r2, #25
    7b9e:	2301      	movs	r3, #1
    7ba0:	9e07      	ldr	r6, [sp, #28]
    7ba2:	47b0      	blx	r6
    7ba4:	3001      	adds	r0, #1
    7ba6:	d0dc      	beq.n	7b62 <_printf_i+0x1d6>
    7ba8:	3501      	adds	r5, #1
    7baa:	e7ef      	b.n	7b8c <_printf_i+0x200>
    7bac:	b00b      	add	sp, #44	; 0x2c
    7bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bb0:	00009685 	.word	0x00009685
    7bb4:	00009696 	.word	0x00009696

00007bb8 <__swbuf_r>:
    7bb8:	b570      	push	{r4, r5, r6, lr}
    7bba:	1c05      	adds	r5, r0, #0
    7bbc:	1c0e      	adds	r6, r1, #0
    7bbe:	1c14      	adds	r4, r2, #0
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d004      	beq.n	7bce <__swbuf_r+0x16>
    7bc4:	6982      	ldr	r2, [r0, #24]
    7bc6:	2a00      	cmp	r2, #0
    7bc8:	d101      	bne.n	7bce <__swbuf_r+0x16>
    7bca:	f000 f9c9 	bl	7f60 <__sinit>
    7bce:	4b23      	ldr	r3, [pc, #140]	; (7c5c <__swbuf_r+0xa4>)
    7bd0:	429c      	cmp	r4, r3
    7bd2:	d101      	bne.n	7bd8 <__swbuf_r+0x20>
    7bd4:	686c      	ldr	r4, [r5, #4]
    7bd6:	e008      	b.n	7bea <__swbuf_r+0x32>
    7bd8:	4b21      	ldr	r3, [pc, #132]	; (7c60 <__swbuf_r+0xa8>)
    7bda:	429c      	cmp	r4, r3
    7bdc:	d101      	bne.n	7be2 <__swbuf_r+0x2a>
    7bde:	68ac      	ldr	r4, [r5, #8]
    7be0:	e003      	b.n	7bea <__swbuf_r+0x32>
    7be2:	4b20      	ldr	r3, [pc, #128]	; (7c64 <__swbuf_r+0xac>)
    7be4:	429c      	cmp	r4, r3
    7be6:	d100      	bne.n	7bea <__swbuf_r+0x32>
    7be8:	68ec      	ldr	r4, [r5, #12]
    7bea:	69a3      	ldr	r3, [r4, #24]
    7bec:	60a3      	str	r3, [r4, #8]
    7bee:	89a3      	ldrh	r3, [r4, #12]
    7bf0:	071a      	lsls	r2, r3, #28
    7bf2:	d50a      	bpl.n	7c0a <__swbuf_r+0x52>
    7bf4:	6923      	ldr	r3, [r4, #16]
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d007      	beq.n	7c0a <__swbuf_r+0x52>
    7bfa:	6822      	ldr	r2, [r4, #0]
    7bfc:	6923      	ldr	r3, [r4, #16]
    7bfe:	b2f6      	uxtb	r6, r6
    7c00:	1ad0      	subs	r0, r2, r3
    7c02:	6962      	ldr	r2, [r4, #20]
    7c04:	4290      	cmp	r0, r2
    7c06:	db0f      	blt.n	7c28 <__swbuf_r+0x70>
    7c08:	e008      	b.n	7c1c <__swbuf_r+0x64>
    7c0a:	1c28      	adds	r0, r5, #0
    7c0c:	1c21      	adds	r1, r4, #0
    7c0e:	f000 f82b 	bl	7c68 <__swsetup_r>
    7c12:	2800      	cmp	r0, #0
    7c14:	d0f1      	beq.n	7bfa <__swbuf_r+0x42>
    7c16:	2001      	movs	r0, #1
    7c18:	4240      	negs	r0, r0
    7c1a:	e01d      	b.n	7c58 <__swbuf_r+0xa0>
    7c1c:	1c28      	adds	r0, r5, #0
    7c1e:	1c21      	adds	r1, r4, #0
    7c20:	f000 f91e 	bl	7e60 <_fflush_r>
    7c24:	2800      	cmp	r0, #0
    7c26:	d1f6      	bne.n	7c16 <__swbuf_r+0x5e>
    7c28:	68a3      	ldr	r3, [r4, #8]
    7c2a:	3001      	adds	r0, #1
    7c2c:	3b01      	subs	r3, #1
    7c2e:	60a3      	str	r3, [r4, #8]
    7c30:	6823      	ldr	r3, [r4, #0]
    7c32:	1c5a      	adds	r2, r3, #1
    7c34:	6022      	str	r2, [r4, #0]
    7c36:	701e      	strb	r6, [r3, #0]
    7c38:	6963      	ldr	r3, [r4, #20]
    7c3a:	4298      	cmp	r0, r3
    7c3c:	d005      	beq.n	7c4a <__swbuf_r+0x92>
    7c3e:	89a3      	ldrh	r3, [r4, #12]
    7c40:	1c30      	adds	r0, r6, #0
    7c42:	07da      	lsls	r2, r3, #31
    7c44:	d508      	bpl.n	7c58 <__swbuf_r+0xa0>
    7c46:	2e0a      	cmp	r6, #10
    7c48:	d106      	bne.n	7c58 <__swbuf_r+0xa0>
    7c4a:	1c28      	adds	r0, r5, #0
    7c4c:	1c21      	adds	r1, r4, #0
    7c4e:	f000 f907 	bl	7e60 <_fflush_r>
    7c52:	2800      	cmp	r0, #0
    7c54:	d1df      	bne.n	7c16 <__swbuf_r+0x5e>
    7c56:	1c30      	adds	r0, r6, #0
    7c58:	bd70      	pop	{r4, r5, r6, pc}
    7c5a:	46c0      	nop			; (mov r8, r8)
    7c5c:	000096a8 	.word	0x000096a8
    7c60:	000096c8 	.word	0x000096c8
    7c64:	000096e8 	.word	0x000096e8

00007c68 <__swsetup_r>:
    7c68:	4b34      	ldr	r3, [pc, #208]	; (7d3c <__swsetup_r+0xd4>)
    7c6a:	b570      	push	{r4, r5, r6, lr}
    7c6c:	681d      	ldr	r5, [r3, #0]
    7c6e:	1c06      	adds	r6, r0, #0
    7c70:	1c0c      	adds	r4, r1, #0
    7c72:	2d00      	cmp	r5, #0
    7c74:	d005      	beq.n	7c82 <__swsetup_r+0x1a>
    7c76:	69a9      	ldr	r1, [r5, #24]
    7c78:	2900      	cmp	r1, #0
    7c7a:	d102      	bne.n	7c82 <__swsetup_r+0x1a>
    7c7c:	1c28      	adds	r0, r5, #0
    7c7e:	f000 f96f 	bl	7f60 <__sinit>
    7c82:	4b2f      	ldr	r3, [pc, #188]	; (7d40 <__swsetup_r+0xd8>)
    7c84:	429c      	cmp	r4, r3
    7c86:	d101      	bne.n	7c8c <__swsetup_r+0x24>
    7c88:	686c      	ldr	r4, [r5, #4]
    7c8a:	e008      	b.n	7c9e <__swsetup_r+0x36>
    7c8c:	4b2d      	ldr	r3, [pc, #180]	; (7d44 <__swsetup_r+0xdc>)
    7c8e:	429c      	cmp	r4, r3
    7c90:	d101      	bne.n	7c96 <__swsetup_r+0x2e>
    7c92:	68ac      	ldr	r4, [r5, #8]
    7c94:	e003      	b.n	7c9e <__swsetup_r+0x36>
    7c96:	4b2c      	ldr	r3, [pc, #176]	; (7d48 <__swsetup_r+0xe0>)
    7c98:	429c      	cmp	r4, r3
    7c9a:	d100      	bne.n	7c9e <__swsetup_r+0x36>
    7c9c:	68ec      	ldr	r4, [r5, #12]
    7c9e:	89a2      	ldrh	r2, [r4, #12]
    7ca0:	b293      	uxth	r3, r2
    7ca2:	0719      	lsls	r1, r3, #28
    7ca4:	d421      	bmi.n	7cea <__swsetup_r+0x82>
    7ca6:	06d9      	lsls	r1, r3, #27
    7ca8:	d405      	bmi.n	7cb6 <__swsetup_r+0x4e>
    7caa:	2309      	movs	r3, #9
    7cac:	6033      	str	r3, [r6, #0]
    7cae:	2340      	movs	r3, #64	; 0x40
    7cb0:	431a      	orrs	r2, r3
    7cb2:	81a2      	strh	r2, [r4, #12]
    7cb4:	e03f      	b.n	7d36 <__swsetup_r+0xce>
    7cb6:	075a      	lsls	r2, r3, #29
    7cb8:	d513      	bpl.n	7ce2 <__swsetup_r+0x7a>
    7cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7cbc:	2900      	cmp	r1, #0
    7cbe:	d008      	beq.n	7cd2 <__swsetup_r+0x6a>
    7cc0:	1c23      	adds	r3, r4, #0
    7cc2:	3344      	adds	r3, #68	; 0x44
    7cc4:	4299      	cmp	r1, r3
    7cc6:	d002      	beq.n	7cce <__swsetup_r+0x66>
    7cc8:	1c30      	adds	r0, r6, #0
    7cca:	f7ff f957 	bl	6f7c <_free_r>
    7cce:	2300      	movs	r3, #0
    7cd0:	6363      	str	r3, [r4, #52]	; 0x34
    7cd2:	89a3      	ldrh	r3, [r4, #12]
    7cd4:	2224      	movs	r2, #36	; 0x24
    7cd6:	4393      	bics	r3, r2
    7cd8:	81a3      	strh	r3, [r4, #12]
    7cda:	2300      	movs	r3, #0
    7cdc:	6063      	str	r3, [r4, #4]
    7cde:	6923      	ldr	r3, [r4, #16]
    7ce0:	6023      	str	r3, [r4, #0]
    7ce2:	89a3      	ldrh	r3, [r4, #12]
    7ce4:	2208      	movs	r2, #8
    7ce6:	4313      	orrs	r3, r2
    7ce8:	81a3      	strh	r3, [r4, #12]
    7cea:	6921      	ldr	r1, [r4, #16]
    7cec:	2900      	cmp	r1, #0
    7cee:	d10b      	bne.n	7d08 <__swsetup_r+0xa0>
    7cf0:	89a3      	ldrh	r3, [r4, #12]
    7cf2:	22a0      	movs	r2, #160	; 0xa0
    7cf4:	0092      	lsls	r2, r2, #2
    7cf6:	401a      	ands	r2, r3
    7cf8:	2380      	movs	r3, #128	; 0x80
    7cfa:	009b      	lsls	r3, r3, #2
    7cfc:	429a      	cmp	r2, r3
    7cfe:	d003      	beq.n	7d08 <__swsetup_r+0xa0>
    7d00:	1c30      	adds	r0, r6, #0
    7d02:	1c21      	adds	r1, r4, #0
    7d04:	f000 f99c 	bl	8040 <__smakebuf_r>
    7d08:	89a3      	ldrh	r3, [r4, #12]
    7d0a:	2201      	movs	r2, #1
    7d0c:	401a      	ands	r2, r3
    7d0e:	d005      	beq.n	7d1c <__swsetup_r+0xb4>
    7d10:	6961      	ldr	r1, [r4, #20]
    7d12:	2200      	movs	r2, #0
    7d14:	60a2      	str	r2, [r4, #8]
    7d16:	424a      	negs	r2, r1
    7d18:	61a2      	str	r2, [r4, #24]
    7d1a:	e003      	b.n	7d24 <__swsetup_r+0xbc>
    7d1c:	0799      	lsls	r1, r3, #30
    7d1e:	d400      	bmi.n	7d22 <__swsetup_r+0xba>
    7d20:	6962      	ldr	r2, [r4, #20]
    7d22:	60a2      	str	r2, [r4, #8]
    7d24:	6922      	ldr	r2, [r4, #16]
    7d26:	2000      	movs	r0, #0
    7d28:	4282      	cmp	r2, r0
    7d2a:	d106      	bne.n	7d3a <__swsetup_r+0xd2>
    7d2c:	0619      	lsls	r1, r3, #24
    7d2e:	d504      	bpl.n	7d3a <__swsetup_r+0xd2>
    7d30:	2240      	movs	r2, #64	; 0x40
    7d32:	4313      	orrs	r3, r2
    7d34:	81a3      	strh	r3, [r4, #12]
    7d36:	2001      	movs	r0, #1
    7d38:	4240      	negs	r0, r0
    7d3a:	bd70      	pop	{r4, r5, r6, pc}
    7d3c:	20000074 	.word	0x20000074
    7d40:	000096a8 	.word	0x000096a8
    7d44:	000096c8 	.word	0x000096c8
    7d48:	000096e8 	.word	0x000096e8

00007d4c <__sflush_r>:
    7d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d4e:	898b      	ldrh	r3, [r1, #12]
    7d50:	1c05      	adds	r5, r0, #0
    7d52:	1c0c      	adds	r4, r1, #0
    7d54:	0719      	lsls	r1, r3, #28
    7d56:	d45e      	bmi.n	7e16 <__sflush_r+0xca>
    7d58:	6862      	ldr	r2, [r4, #4]
    7d5a:	2a00      	cmp	r2, #0
    7d5c:	dc02      	bgt.n	7d64 <__sflush_r+0x18>
    7d5e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    7d60:	2f00      	cmp	r7, #0
    7d62:	dd1a      	ble.n	7d9a <__sflush_r+0x4e>
    7d64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7d66:	2f00      	cmp	r7, #0
    7d68:	d017      	beq.n	7d9a <__sflush_r+0x4e>
    7d6a:	2200      	movs	r2, #0
    7d6c:	682e      	ldr	r6, [r5, #0]
    7d6e:	602a      	str	r2, [r5, #0]
    7d70:	2280      	movs	r2, #128	; 0x80
    7d72:	0152      	lsls	r2, r2, #5
    7d74:	401a      	ands	r2, r3
    7d76:	d001      	beq.n	7d7c <__sflush_r+0x30>
    7d78:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7d7a:	e015      	b.n	7da8 <__sflush_r+0x5c>
    7d7c:	1c28      	adds	r0, r5, #0
    7d7e:	6a21      	ldr	r1, [r4, #32]
    7d80:	2301      	movs	r3, #1
    7d82:	47b8      	blx	r7
    7d84:	1c02      	adds	r2, r0, #0
    7d86:	1c41      	adds	r1, r0, #1
    7d88:	d10e      	bne.n	7da8 <__sflush_r+0x5c>
    7d8a:	682b      	ldr	r3, [r5, #0]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d00b      	beq.n	7da8 <__sflush_r+0x5c>
    7d90:	2b1d      	cmp	r3, #29
    7d92:	d001      	beq.n	7d98 <__sflush_r+0x4c>
    7d94:	2b16      	cmp	r3, #22
    7d96:	d102      	bne.n	7d9e <__sflush_r+0x52>
    7d98:	602e      	str	r6, [r5, #0]
    7d9a:	2000      	movs	r0, #0
    7d9c:	e05e      	b.n	7e5c <__sflush_r+0x110>
    7d9e:	89a3      	ldrh	r3, [r4, #12]
    7da0:	2140      	movs	r1, #64	; 0x40
    7da2:	430b      	orrs	r3, r1
    7da4:	81a3      	strh	r3, [r4, #12]
    7da6:	e059      	b.n	7e5c <__sflush_r+0x110>
    7da8:	89a3      	ldrh	r3, [r4, #12]
    7daa:	075f      	lsls	r7, r3, #29
    7dac:	d506      	bpl.n	7dbc <__sflush_r+0x70>
    7dae:	6861      	ldr	r1, [r4, #4]
    7db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7db2:	1a52      	subs	r2, r2, r1
    7db4:	2b00      	cmp	r3, #0
    7db6:	d001      	beq.n	7dbc <__sflush_r+0x70>
    7db8:	6c27      	ldr	r7, [r4, #64]	; 0x40
    7dba:	1bd2      	subs	r2, r2, r7
    7dbc:	1c28      	adds	r0, r5, #0
    7dbe:	6a21      	ldr	r1, [r4, #32]
    7dc0:	2300      	movs	r3, #0
    7dc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7dc4:	47b8      	blx	r7
    7dc6:	89a2      	ldrh	r2, [r4, #12]
    7dc8:	1c41      	adds	r1, r0, #1
    7dca:	d106      	bne.n	7dda <__sflush_r+0x8e>
    7dcc:	682b      	ldr	r3, [r5, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d003      	beq.n	7dda <__sflush_r+0x8e>
    7dd2:	2b1d      	cmp	r3, #29
    7dd4:	d001      	beq.n	7dda <__sflush_r+0x8e>
    7dd6:	2b16      	cmp	r3, #22
    7dd8:	d119      	bne.n	7e0e <__sflush_r+0xc2>
    7dda:	2300      	movs	r3, #0
    7ddc:	6063      	str	r3, [r4, #4]
    7dde:	6923      	ldr	r3, [r4, #16]
    7de0:	6023      	str	r3, [r4, #0]
    7de2:	04d7      	lsls	r7, r2, #19
    7de4:	d505      	bpl.n	7df2 <__sflush_r+0xa6>
    7de6:	1c41      	adds	r1, r0, #1
    7de8:	d102      	bne.n	7df0 <__sflush_r+0xa4>
    7dea:	682a      	ldr	r2, [r5, #0]
    7dec:	2a00      	cmp	r2, #0
    7dee:	d100      	bne.n	7df2 <__sflush_r+0xa6>
    7df0:	6560      	str	r0, [r4, #84]	; 0x54
    7df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7df4:	602e      	str	r6, [r5, #0]
    7df6:	2900      	cmp	r1, #0
    7df8:	d0cf      	beq.n	7d9a <__sflush_r+0x4e>
    7dfa:	1c23      	adds	r3, r4, #0
    7dfc:	3344      	adds	r3, #68	; 0x44
    7dfe:	4299      	cmp	r1, r3
    7e00:	d002      	beq.n	7e08 <__sflush_r+0xbc>
    7e02:	1c28      	adds	r0, r5, #0
    7e04:	f7ff f8ba 	bl	6f7c <_free_r>
    7e08:	2000      	movs	r0, #0
    7e0a:	6360      	str	r0, [r4, #52]	; 0x34
    7e0c:	e026      	b.n	7e5c <__sflush_r+0x110>
    7e0e:	2340      	movs	r3, #64	; 0x40
    7e10:	431a      	orrs	r2, r3
    7e12:	81a2      	strh	r2, [r4, #12]
    7e14:	e022      	b.n	7e5c <__sflush_r+0x110>
    7e16:	6926      	ldr	r6, [r4, #16]
    7e18:	2e00      	cmp	r6, #0
    7e1a:	d0be      	beq.n	7d9a <__sflush_r+0x4e>
    7e1c:	6827      	ldr	r7, [r4, #0]
    7e1e:	2200      	movs	r2, #0
    7e20:	1bbf      	subs	r7, r7, r6
    7e22:	9701      	str	r7, [sp, #4]
    7e24:	6026      	str	r6, [r4, #0]
    7e26:	0799      	lsls	r1, r3, #30
    7e28:	d100      	bne.n	7e2c <__sflush_r+0xe0>
    7e2a:	6962      	ldr	r2, [r4, #20]
    7e2c:	60a2      	str	r2, [r4, #8]
    7e2e:	9f01      	ldr	r7, [sp, #4]
    7e30:	2f00      	cmp	r7, #0
    7e32:	ddb2      	ble.n	7d9a <__sflush_r+0x4e>
    7e34:	1c28      	adds	r0, r5, #0
    7e36:	6a21      	ldr	r1, [r4, #32]
    7e38:	1c32      	adds	r2, r6, #0
    7e3a:	9b01      	ldr	r3, [sp, #4]
    7e3c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    7e3e:	47b8      	blx	r7
    7e40:	2800      	cmp	r0, #0
    7e42:	dc06      	bgt.n	7e52 <__sflush_r+0x106>
    7e44:	89a3      	ldrh	r3, [r4, #12]
    7e46:	2240      	movs	r2, #64	; 0x40
    7e48:	4313      	orrs	r3, r2
    7e4a:	2001      	movs	r0, #1
    7e4c:	81a3      	strh	r3, [r4, #12]
    7e4e:	4240      	negs	r0, r0
    7e50:	e004      	b.n	7e5c <__sflush_r+0x110>
    7e52:	9f01      	ldr	r7, [sp, #4]
    7e54:	1836      	adds	r6, r6, r0
    7e56:	1a3f      	subs	r7, r7, r0
    7e58:	9701      	str	r7, [sp, #4]
    7e5a:	e7e8      	b.n	7e2e <__sflush_r+0xe2>
    7e5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007e60 <_fflush_r>:
    7e60:	690a      	ldr	r2, [r1, #16]
    7e62:	b538      	push	{r3, r4, r5, lr}
    7e64:	1c05      	adds	r5, r0, #0
    7e66:	1c0c      	adds	r4, r1, #0
    7e68:	2a00      	cmp	r2, #0
    7e6a:	d101      	bne.n	7e70 <_fflush_r+0x10>
    7e6c:	2000      	movs	r0, #0
    7e6e:	e01c      	b.n	7eaa <_fflush_r+0x4a>
    7e70:	2800      	cmp	r0, #0
    7e72:	d004      	beq.n	7e7e <_fflush_r+0x1e>
    7e74:	6983      	ldr	r3, [r0, #24]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d101      	bne.n	7e7e <_fflush_r+0x1e>
    7e7a:	f000 f871 	bl	7f60 <__sinit>
    7e7e:	4b0b      	ldr	r3, [pc, #44]	; (7eac <_fflush_r+0x4c>)
    7e80:	429c      	cmp	r4, r3
    7e82:	d101      	bne.n	7e88 <_fflush_r+0x28>
    7e84:	686c      	ldr	r4, [r5, #4]
    7e86:	e008      	b.n	7e9a <_fflush_r+0x3a>
    7e88:	4b09      	ldr	r3, [pc, #36]	; (7eb0 <_fflush_r+0x50>)
    7e8a:	429c      	cmp	r4, r3
    7e8c:	d101      	bne.n	7e92 <_fflush_r+0x32>
    7e8e:	68ac      	ldr	r4, [r5, #8]
    7e90:	e003      	b.n	7e9a <_fflush_r+0x3a>
    7e92:	4b08      	ldr	r3, [pc, #32]	; (7eb4 <_fflush_r+0x54>)
    7e94:	429c      	cmp	r4, r3
    7e96:	d100      	bne.n	7e9a <_fflush_r+0x3a>
    7e98:	68ec      	ldr	r4, [r5, #12]
    7e9a:	220c      	movs	r2, #12
    7e9c:	5ea3      	ldrsh	r3, [r4, r2]
    7e9e:	2b00      	cmp	r3, #0
    7ea0:	d0e4      	beq.n	7e6c <_fflush_r+0xc>
    7ea2:	1c28      	adds	r0, r5, #0
    7ea4:	1c21      	adds	r1, r4, #0
    7ea6:	f7ff ff51 	bl	7d4c <__sflush_r>
    7eaa:	bd38      	pop	{r3, r4, r5, pc}
    7eac:	000096a8 	.word	0x000096a8
    7eb0:	000096c8 	.word	0x000096c8
    7eb4:	000096e8 	.word	0x000096e8

00007eb8 <_cleanup_r>:
    7eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eba:	1c04      	adds	r4, r0, #0
    7ebc:	1c07      	adds	r7, r0, #0
    7ebe:	3448      	adds	r4, #72	; 0x48
    7ec0:	2c00      	cmp	r4, #0
    7ec2:	d012      	beq.n	7eea <_cleanup_r+0x32>
    7ec4:	68a5      	ldr	r5, [r4, #8]
    7ec6:	6866      	ldr	r6, [r4, #4]
    7ec8:	3e01      	subs	r6, #1
    7eca:	d40c      	bmi.n	7ee6 <_cleanup_r+0x2e>
    7ecc:	89ab      	ldrh	r3, [r5, #12]
    7ece:	2b01      	cmp	r3, #1
    7ed0:	d907      	bls.n	7ee2 <_cleanup_r+0x2a>
    7ed2:	220e      	movs	r2, #14
    7ed4:	5eab      	ldrsh	r3, [r5, r2]
    7ed6:	3301      	adds	r3, #1
    7ed8:	d003      	beq.n	7ee2 <_cleanup_r+0x2a>
    7eda:	1c38      	adds	r0, r7, #0
    7edc:	1c29      	adds	r1, r5, #0
    7ede:	f7ff ffbf 	bl	7e60 <_fflush_r>
    7ee2:	3568      	adds	r5, #104	; 0x68
    7ee4:	e7f0      	b.n	7ec8 <_cleanup_r+0x10>
    7ee6:	6824      	ldr	r4, [r4, #0]
    7ee8:	e7ea      	b.n	7ec0 <_cleanup_r+0x8>
    7eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007eec <std.isra.0>:
    7eec:	2300      	movs	r3, #0
    7eee:	b510      	push	{r4, lr}
    7ef0:	1c04      	adds	r4, r0, #0
    7ef2:	6003      	str	r3, [r0, #0]
    7ef4:	6043      	str	r3, [r0, #4]
    7ef6:	6083      	str	r3, [r0, #8]
    7ef8:	8181      	strh	r1, [r0, #12]
    7efa:	6643      	str	r3, [r0, #100]	; 0x64
    7efc:	81c2      	strh	r2, [r0, #14]
    7efe:	6103      	str	r3, [r0, #16]
    7f00:	6143      	str	r3, [r0, #20]
    7f02:	6183      	str	r3, [r0, #24]
    7f04:	1c19      	adds	r1, r3, #0
    7f06:	2208      	movs	r2, #8
    7f08:	305c      	adds	r0, #92	; 0x5c
    7f0a:	f7ff f82f 	bl	6f6c <memset>
    7f0e:	4b05      	ldr	r3, [pc, #20]	; (7f24 <std.isra.0+0x38>)
    7f10:	6224      	str	r4, [r4, #32]
    7f12:	6263      	str	r3, [r4, #36]	; 0x24
    7f14:	4b04      	ldr	r3, [pc, #16]	; (7f28 <std.isra.0+0x3c>)
    7f16:	62a3      	str	r3, [r4, #40]	; 0x28
    7f18:	4b04      	ldr	r3, [pc, #16]	; (7f2c <std.isra.0+0x40>)
    7f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    7f1c:	4b04      	ldr	r3, [pc, #16]	; (7f30 <std.isra.0+0x44>)
    7f1e:	6323      	str	r3, [r4, #48]	; 0x30
    7f20:	bd10      	pop	{r4, pc}
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	000081bd 	.word	0x000081bd
    7f28:	000081e5 	.word	0x000081e5
    7f2c:	0000821d 	.word	0x0000821d
    7f30:	00008249 	.word	0x00008249

00007f34 <__sfmoreglue>:
    7f34:	b570      	push	{r4, r5, r6, lr}
    7f36:	1e4b      	subs	r3, r1, #1
    7f38:	2568      	movs	r5, #104	; 0x68
    7f3a:	435d      	muls	r5, r3
    7f3c:	1c0e      	adds	r6, r1, #0
    7f3e:	1c29      	adds	r1, r5, #0
    7f40:	3174      	adds	r1, #116	; 0x74
    7f42:	f7ff f863 	bl	700c <_malloc_r>
    7f46:	1e04      	subs	r4, r0, #0
    7f48:	d008      	beq.n	7f5c <__sfmoreglue+0x28>
    7f4a:	2100      	movs	r1, #0
    7f4c:	6001      	str	r1, [r0, #0]
    7f4e:	6046      	str	r6, [r0, #4]
    7f50:	1c2a      	adds	r2, r5, #0
    7f52:	300c      	adds	r0, #12
    7f54:	60a0      	str	r0, [r4, #8]
    7f56:	3268      	adds	r2, #104	; 0x68
    7f58:	f7ff f808 	bl	6f6c <memset>
    7f5c:	1c20      	adds	r0, r4, #0
    7f5e:	bd70      	pop	{r4, r5, r6, pc}

00007f60 <__sinit>:
    7f60:	6983      	ldr	r3, [r0, #24]
    7f62:	b513      	push	{r0, r1, r4, lr}
    7f64:	1c04      	adds	r4, r0, #0
    7f66:	2b00      	cmp	r3, #0
    7f68:	d127      	bne.n	7fba <__sinit+0x5a>
    7f6a:	6483      	str	r3, [r0, #72]	; 0x48
    7f6c:	64c3      	str	r3, [r0, #76]	; 0x4c
    7f6e:	6503      	str	r3, [r0, #80]	; 0x50
    7f70:	4b12      	ldr	r3, [pc, #72]	; (7fbc <__sinit+0x5c>)
    7f72:	4a13      	ldr	r2, [pc, #76]	; (7fc0 <__sinit+0x60>)
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	6282      	str	r2, [r0, #40]	; 0x28
    7f78:	4298      	cmp	r0, r3
    7f7a:	d101      	bne.n	7f80 <__sinit+0x20>
    7f7c:	2301      	movs	r3, #1
    7f7e:	6183      	str	r3, [r0, #24]
    7f80:	1c20      	adds	r0, r4, #0
    7f82:	f000 f81f 	bl	7fc4 <__sfp>
    7f86:	6060      	str	r0, [r4, #4]
    7f88:	1c20      	adds	r0, r4, #0
    7f8a:	f000 f81b 	bl	7fc4 <__sfp>
    7f8e:	60a0      	str	r0, [r4, #8]
    7f90:	1c20      	adds	r0, r4, #0
    7f92:	f000 f817 	bl	7fc4 <__sfp>
    7f96:	2104      	movs	r1, #4
    7f98:	60e0      	str	r0, [r4, #12]
    7f9a:	2200      	movs	r2, #0
    7f9c:	6860      	ldr	r0, [r4, #4]
    7f9e:	f7ff ffa5 	bl	7eec <std.isra.0>
    7fa2:	68a0      	ldr	r0, [r4, #8]
    7fa4:	2109      	movs	r1, #9
    7fa6:	2201      	movs	r2, #1
    7fa8:	f7ff ffa0 	bl	7eec <std.isra.0>
    7fac:	68e0      	ldr	r0, [r4, #12]
    7fae:	2112      	movs	r1, #18
    7fb0:	2202      	movs	r2, #2
    7fb2:	f7ff ff9b 	bl	7eec <std.isra.0>
    7fb6:	2301      	movs	r3, #1
    7fb8:	61a3      	str	r3, [r4, #24]
    7fba:	bd13      	pop	{r0, r1, r4, pc}
    7fbc:	00009670 	.word	0x00009670
    7fc0:	00007eb9 	.word	0x00007eb9

00007fc4 <__sfp>:
    7fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fc6:	4b1d      	ldr	r3, [pc, #116]	; (803c <__sfp+0x78>)
    7fc8:	1c07      	adds	r7, r0, #0
    7fca:	681e      	ldr	r6, [r3, #0]
    7fcc:	69b2      	ldr	r2, [r6, #24]
    7fce:	2a00      	cmp	r2, #0
    7fd0:	d102      	bne.n	7fd8 <__sfp+0x14>
    7fd2:	1c30      	adds	r0, r6, #0
    7fd4:	f7ff ffc4 	bl	7f60 <__sinit>
    7fd8:	3648      	adds	r6, #72	; 0x48
    7fda:	68b4      	ldr	r4, [r6, #8]
    7fdc:	6873      	ldr	r3, [r6, #4]
    7fde:	3b01      	subs	r3, #1
    7fe0:	d405      	bmi.n	7fee <__sfp+0x2a>
    7fe2:	220c      	movs	r2, #12
    7fe4:	5ea5      	ldrsh	r5, [r4, r2]
    7fe6:	2d00      	cmp	r5, #0
    7fe8:	d010      	beq.n	800c <__sfp+0x48>
    7fea:	3468      	adds	r4, #104	; 0x68
    7fec:	e7f7      	b.n	7fde <__sfp+0x1a>
    7fee:	6833      	ldr	r3, [r6, #0]
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d106      	bne.n	8002 <__sfp+0x3e>
    7ff4:	1c38      	adds	r0, r7, #0
    7ff6:	2104      	movs	r1, #4
    7ff8:	f7ff ff9c 	bl	7f34 <__sfmoreglue>
    7ffc:	6030      	str	r0, [r6, #0]
    7ffe:	2800      	cmp	r0, #0
    8000:	d001      	beq.n	8006 <__sfp+0x42>
    8002:	6836      	ldr	r6, [r6, #0]
    8004:	e7e9      	b.n	7fda <__sfp+0x16>
    8006:	230c      	movs	r3, #12
    8008:	603b      	str	r3, [r7, #0]
    800a:	e016      	b.n	803a <__sfp+0x76>
    800c:	2301      	movs	r3, #1
    800e:	425b      	negs	r3, r3
    8010:	81e3      	strh	r3, [r4, #14]
    8012:	1c20      	adds	r0, r4, #0
    8014:	2301      	movs	r3, #1
    8016:	81a3      	strh	r3, [r4, #12]
    8018:	6665      	str	r5, [r4, #100]	; 0x64
    801a:	6025      	str	r5, [r4, #0]
    801c:	60a5      	str	r5, [r4, #8]
    801e:	6065      	str	r5, [r4, #4]
    8020:	6125      	str	r5, [r4, #16]
    8022:	6165      	str	r5, [r4, #20]
    8024:	61a5      	str	r5, [r4, #24]
    8026:	305c      	adds	r0, #92	; 0x5c
    8028:	1c29      	adds	r1, r5, #0
    802a:	2208      	movs	r2, #8
    802c:	f7fe ff9e 	bl	6f6c <memset>
    8030:	6365      	str	r5, [r4, #52]	; 0x34
    8032:	63a5      	str	r5, [r4, #56]	; 0x38
    8034:	64a5      	str	r5, [r4, #72]	; 0x48
    8036:	64e5      	str	r5, [r4, #76]	; 0x4c
    8038:	1c20      	adds	r0, r4, #0
    803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    803c:	00009670 	.word	0x00009670

00008040 <__smakebuf_r>:
    8040:	b5f0      	push	{r4, r5, r6, r7, lr}
    8042:	898b      	ldrh	r3, [r1, #12]
    8044:	b091      	sub	sp, #68	; 0x44
    8046:	1c05      	adds	r5, r0, #0
    8048:	1c0c      	adds	r4, r1, #0
    804a:	079a      	lsls	r2, r3, #30
    804c:	d425      	bmi.n	809a <__smakebuf_r+0x5a>
    804e:	230e      	movs	r3, #14
    8050:	5ec9      	ldrsh	r1, [r1, r3]
    8052:	2900      	cmp	r1, #0
    8054:	da06      	bge.n	8064 <__smakebuf_r+0x24>
    8056:	89a7      	ldrh	r7, [r4, #12]
    8058:	2380      	movs	r3, #128	; 0x80
    805a:	401f      	ands	r7, r3
    805c:	d00f      	beq.n	807e <__smakebuf_r+0x3e>
    805e:	2700      	movs	r7, #0
    8060:	2640      	movs	r6, #64	; 0x40
    8062:	e00e      	b.n	8082 <__smakebuf_r+0x42>
    8064:	aa01      	add	r2, sp, #4
    8066:	f000 f91b 	bl	82a0 <_fstat_r>
    806a:	2800      	cmp	r0, #0
    806c:	dbf3      	blt.n	8056 <__smakebuf_r+0x16>
    806e:	9b02      	ldr	r3, [sp, #8]
    8070:	27f0      	movs	r7, #240	; 0xf0
    8072:	023f      	lsls	r7, r7, #8
    8074:	4a18      	ldr	r2, [pc, #96]	; (80d8 <__smakebuf_r+0x98>)
    8076:	401f      	ands	r7, r3
    8078:	18bf      	adds	r7, r7, r2
    807a:	427b      	negs	r3, r7
    807c:	415f      	adcs	r7, r3
    807e:	2680      	movs	r6, #128	; 0x80
    8080:	00f6      	lsls	r6, r6, #3
    8082:	1c28      	adds	r0, r5, #0
    8084:	1c31      	adds	r1, r6, #0
    8086:	f7fe ffc1 	bl	700c <_malloc_r>
    808a:	2800      	cmp	r0, #0
    808c:	d10c      	bne.n	80a8 <__smakebuf_r+0x68>
    808e:	89a3      	ldrh	r3, [r4, #12]
    8090:	059a      	lsls	r2, r3, #22
    8092:	d41f      	bmi.n	80d4 <__smakebuf_r+0x94>
    8094:	2202      	movs	r2, #2
    8096:	4313      	orrs	r3, r2
    8098:	81a3      	strh	r3, [r4, #12]
    809a:	1c23      	adds	r3, r4, #0
    809c:	3347      	adds	r3, #71	; 0x47
    809e:	6023      	str	r3, [r4, #0]
    80a0:	6123      	str	r3, [r4, #16]
    80a2:	2301      	movs	r3, #1
    80a4:	6163      	str	r3, [r4, #20]
    80a6:	e015      	b.n	80d4 <__smakebuf_r+0x94>
    80a8:	4b0c      	ldr	r3, [pc, #48]	; (80dc <__smakebuf_r+0x9c>)
    80aa:	2280      	movs	r2, #128	; 0x80
    80ac:	62ab      	str	r3, [r5, #40]	; 0x28
    80ae:	89a3      	ldrh	r3, [r4, #12]
    80b0:	6020      	str	r0, [r4, #0]
    80b2:	4313      	orrs	r3, r2
    80b4:	81a3      	strh	r3, [r4, #12]
    80b6:	6120      	str	r0, [r4, #16]
    80b8:	6166      	str	r6, [r4, #20]
    80ba:	2f00      	cmp	r7, #0
    80bc:	d00a      	beq.n	80d4 <__smakebuf_r+0x94>
    80be:	230e      	movs	r3, #14
    80c0:	5ee1      	ldrsh	r1, [r4, r3]
    80c2:	1c28      	adds	r0, r5, #0
    80c4:	f000 f8fe 	bl	82c4 <_isatty_r>
    80c8:	2800      	cmp	r0, #0
    80ca:	d003      	beq.n	80d4 <__smakebuf_r+0x94>
    80cc:	89a3      	ldrh	r3, [r4, #12]
    80ce:	2201      	movs	r2, #1
    80d0:	4313      	orrs	r3, r2
    80d2:	81a3      	strh	r3, [r4, #12]
    80d4:	b011      	add	sp, #68	; 0x44
    80d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80d8:	ffffe000 	.word	0xffffe000
    80dc:	00007eb9 	.word	0x00007eb9

000080e0 <memchr>:
    80e0:	b2c9      	uxtb	r1, r1
    80e2:	1882      	adds	r2, r0, r2
    80e4:	4290      	cmp	r0, r2
    80e6:	d004      	beq.n	80f2 <memchr+0x12>
    80e8:	7803      	ldrb	r3, [r0, #0]
    80ea:	428b      	cmp	r3, r1
    80ec:	d002      	beq.n	80f4 <memchr+0x14>
    80ee:	3001      	adds	r0, #1
    80f0:	e7f8      	b.n	80e4 <memchr+0x4>
    80f2:	2000      	movs	r0, #0
    80f4:	4770      	bx	lr

000080f6 <_realloc_r>:
    80f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80f8:	1c06      	adds	r6, r0, #0
    80fa:	1c0c      	adds	r4, r1, #0
    80fc:	1c15      	adds	r5, r2, #0
    80fe:	2900      	cmp	r1, #0
    8100:	d104      	bne.n	810c <_realloc_r+0x16>
    8102:	1c11      	adds	r1, r2, #0
    8104:	f7fe ff82 	bl	700c <_malloc_r>
    8108:	1c04      	adds	r4, r0, #0
    810a:	e018      	b.n	813e <_realloc_r+0x48>
    810c:	2a00      	cmp	r2, #0
    810e:	d103      	bne.n	8118 <_realloc_r+0x22>
    8110:	f7fe ff34 	bl	6f7c <_free_r>
    8114:	1c2c      	adds	r4, r5, #0
    8116:	e012      	b.n	813e <_realloc_r+0x48>
    8118:	f000 f8fa 	bl	8310 <_malloc_usable_size_r>
    811c:	42a8      	cmp	r0, r5
    811e:	d20e      	bcs.n	813e <_realloc_r+0x48>
    8120:	1c30      	adds	r0, r6, #0
    8122:	1c29      	adds	r1, r5, #0
    8124:	f7fe ff72 	bl	700c <_malloc_r>
    8128:	1e07      	subs	r7, r0, #0
    812a:	d007      	beq.n	813c <_realloc_r+0x46>
    812c:	1c21      	adds	r1, r4, #0
    812e:	1c2a      	adds	r2, r5, #0
    8130:	f7fe fefa 	bl	6f28 <memcpy>
    8134:	1c30      	adds	r0, r6, #0
    8136:	1c21      	adds	r1, r4, #0
    8138:	f7fe ff20 	bl	6f7c <_free_r>
    813c:	1c3c      	adds	r4, r7, #0
    813e:	1c20      	adds	r0, r4, #0
    8140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008144 <_putc_r>:
    8144:	b570      	push	{r4, r5, r6, lr}
    8146:	1c05      	adds	r5, r0, #0
    8148:	1c0e      	adds	r6, r1, #0
    814a:	1c14      	adds	r4, r2, #0
    814c:	2800      	cmp	r0, #0
    814e:	d004      	beq.n	815a <_putc_r+0x16>
    8150:	6982      	ldr	r2, [r0, #24]
    8152:	2a00      	cmp	r2, #0
    8154:	d101      	bne.n	815a <_putc_r+0x16>
    8156:	f7ff ff03 	bl	7f60 <__sinit>
    815a:	4b15      	ldr	r3, [pc, #84]	; (81b0 <_putc_r+0x6c>)
    815c:	429c      	cmp	r4, r3
    815e:	d101      	bne.n	8164 <_putc_r+0x20>
    8160:	686c      	ldr	r4, [r5, #4]
    8162:	e008      	b.n	8176 <_putc_r+0x32>
    8164:	4b13      	ldr	r3, [pc, #76]	; (81b4 <_putc_r+0x70>)
    8166:	429c      	cmp	r4, r3
    8168:	d101      	bne.n	816e <_putc_r+0x2a>
    816a:	68ac      	ldr	r4, [r5, #8]
    816c:	e003      	b.n	8176 <_putc_r+0x32>
    816e:	4b12      	ldr	r3, [pc, #72]	; (81b8 <_putc_r+0x74>)
    8170:	429c      	cmp	r4, r3
    8172:	d100      	bne.n	8176 <_putc_r+0x32>
    8174:	68ec      	ldr	r4, [r5, #12]
    8176:	68a3      	ldr	r3, [r4, #8]
    8178:	3b01      	subs	r3, #1
    817a:	60a3      	str	r3, [r4, #8]
    817c:	2b00      	cmp	r3, #0
    817e:	da10      	bge.n	81a2 <_putc_r+0x5e>
    8180:	69a2      	ldr	r2, [r4, #24]
    8182:	4293      	cmp	r3, r2
    8184:	db07      	blt.n	8196 <_putc_r+0x52>
    8186:	6823      	ldr	r3, [r4, #0]
    8188:	701e      	strb	r6, [r3, #0]
    818a:	6823      	ldr	r3, [r4, #0]
    818c:	7819      	ldrb	r1, [r3, #0]
    818e:	290a      	cmp	r1, #10
    8190:	d10a      	bne.n	81a8 <_putc_r+0x64>
    8192:	1c28      	adds	r0, r5, #0
    8194:	e001      	b.n	819a <_putc_r+0x56>
    8196:	1c28      	adds	r0, r5, #0
    8198:	1c31      	adds	r1, r6, #0
    819a:	1c22      	adds	r2, r4, #0
    819c:	f7ff fd0c 	bl	7bb8 <__swbuf_r>
    81a0:	e005      	b.n	81ae <_putc_r+0x6a>
    81a2:	6822      	ldr	r2, [r4, #0]
    81a4:	7016      	strb	r6, [r2, #0]
    81a6:	6823      	ldr	r3, [r4, #0]
    81a8:	1c5a      	adds	r2, r3, #1
    81aa:	6022      	str	r2, [r4, #0]
    81ac:	7818      	ldrb	r0, [r3, #0]
    81ae:	bd70      	pop	{r4, r5, r6, pc}
    81b0:	000096a8 	.word	0x000096a8
    81b4:	000096c8 	.word	0x000096c8
    81b8:	000096e8 	.word	0x000096e8

000081bc <__sread>:
    81bc:	b538      	push	{r3, r4, r5, lr}
    81be:	1c0c      	adds	r4, r1, #0
    81c0:	250e      	movs	r5, #14
    81c2:	5f49      	ldrsh	r1, [r1, r5]
    81c4:	f000 f8ae 	bl	8324 <_read_r>
    81c8:	2800      	cmp	r0, #0
    81ca:	db03      	blt.n	81d4 <__sread+0x18>
    81cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    81ce:	1813      	adds	r3, r2, r0
    81d0:	6563      	str	r3, [r4, #84]	; 0x54
    81d2:	e003      	b.n	81dc <__sread+0x20>
    81d4:	89a2      	ldrh	r2, [r4, #12]
    81d6:	4b02      	ldr	r3, [pc, #8]	; (81e0 <__sread+0x24>)
    81d8:	4013      	ands	r3, r2
    81da:	81a3      	strh	r3, [r4, #12]
    81dc:	bd38      	pop	{r3, r4, r5, pc}
    81de:	46c0      	nop			; (mov r8, r8)
    81e0:	ffffefff 	.word	0xffffefff

000081e4 <__swrite>:
    81e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e6:	1c1e      	adds	r6, r3, #0
    81e8:	898b      	ldrh	r3, [r1, #12]
    81ea:	1c05      	adds	r5, r0, #0
    81ec:	1c0c      	adds	r4, r1, #0
    81ee:	1c17      	adds	r7, r2, #0
    81f0:	05da      	lsls	r2, r3, #23
    81f2:	d505      	bpl.n	8200 <__swrite+0x1c>
    81f4:	230e      	movs	r3, #14
    81f6:	5ec9      	ldrsh	r1, [r1, r3]
    81f8:	2200      	movs	r2, #0
    81fa:	2302      	movs	r3, #2
    81fc:	f000 f874 	bl	82e8 <_lseek_r>
    8200:	89a2      	ldrh	r2, [r4, #12]
    8202:	4b05      	ldr	r3, [pc, #20]	; (8218 <__swrite+0x34>)
    8204:	1c28      	adds	r0, r5, #0
    8206:	4013      	ands	r3, r2
    8208:	81a3      	strh	r3, [r4, #12]
    820a:	220e      	movs	r2, #14
    820c:	5ea1      	ldrsh	r1, [r4, r2]
    820e:	1c33      	adds	r3, r6, #0
    8210:	1c3a      	adds	r2, r7, #0
    8212:	f000 f81f 	bl	8254 <_write_r>
    8216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8218:	ffffefff 	.word	0xffffefff

0000821c <__sseek>:
    821c:	b538      	push	{r3, r4, r5, lr}
    821e:	1c0c      	adds	r4, r1, #0
    8220:	250e      	movs	r5, #14
    8222:	5f49      	ldrsh	r1, [r1, r5]
    8224:	f000 f860 	bl	82e8 <_lseek_r>
    8228:	89a3      	ldrh	r3, [r4, #12]
    822a:	1c42      	adds	r2, r0, #1
    822c:	d103      	bne.n	8236 <__sseek+0x1a>
    822e:	4a05      	ldr	r2, [pc, #20]	; (8244 <__sseek+0x28>)
    8230:	4013      	ands	r3, r2
    8232:	81a3      	strh	r3, [r4, #12]
    8234:	e004      	b.n	8240 <__sseek+0x24>
    8236:	2280      	movs	r2, #128	; 0x80
    8238:	0152      	lsls	r2, r2, #5
    823a:	4313      	orrs	r3, r2
    823c:	81a3      	strh	r3, [r4, #12]
    823e:	6560      	str	r0, [r4, #84]	; 0x54
    8240:	bd38      	pop	{r3, r4, r5, pc}
    8242:	46c0      	nop			; (mov r8, r8)
    8244:	ffffefff 	.word	0xffffefff

00008248 <__sclose>:
    8248:	b508      	push	{r3, lr}
    824a:	230e      	movs	r3, #14
    824c:	5ec9      	ldrsh	r1, [r1, r3]
    824e:	f000 f815 	bl	827c <_close_r>
    8252:	bd08      	pop	{r3, pc}

00008254 <_write_r>:
    8254:	b538      	push	{r3, r4, r5, lr}
    8256:	4c08      	ldr	r4, [pc, #32]	; (8278 <_write_r+0x24>)
    8258:	1c05      	adds	r5, r0, #0
    825a:	2000      	movs	r0, #0
    825c:	6020      	str	r0, [r4, #0]
    825e:	1c08      	adds	r0, r1, #0
    8260:	1c11      	adds	r1, r2, #0
    8262:	1c1a      	adds	r2, r3, #0
    8264:	f7fd f88a 	bl	537c <_write>
    8268:	1c43      	adds	r3, r0, #1
    826a:	d103      	bne.n	8274 <_write_r+0x20>
    826c:	6823      	ldr	r3, [r4, #0]
    826e:	2b00      	cmp	r3, #0
    8270:	d000      	beq.n	8274 <_write_r+0x20>
    8272:	602b      	str	r3, [r5, #0]
    8274:	bd38      	pop	{r3, r4, r5, pc}
    8276:	46c0      	nop			; (mov r8, r8)
    8278:	200005ec 	.word	0x200005ec

0000827c <_close_r>:
    827c:	b538      	push	{r3, r4, r5, lr}
    827e:	4c07      	ldr	r4, [pc, #28]	; (829c <_close_r+0x20>)
    8280:	2300      	movs	r3, #0
    8282:	1c05      	adds	r5, r0, #0
    8284:	1c08      	adds	r0, r1, #0
    8286:	6023      	str	r3, [r4, #0]
    8288:	f7fd f8b4 	bl	53f4 <_close>
    828c:	1c43      	adds	r3, r0, #1
    828e:	d103      	bne.n	8298 <_close_r+0x1c>
    8290:	6823      	ldr	r3, [r4, #0]
    8292:	2b00      	cmp	r3, #0
    8294:	d000      	beq.n	8298 <_close_r+0x1c>
    8296:	602b      	str	r3, [r5, #0]
    8298:	bd38      	pop	{r3, r4, r5, pc}
    829a:	46c0      	nop			; (mov r8, r8)
    829c:	200005ec 	.word	0x200005ec

000082a0 <_fstat_r>:
    82a0:	b538      	push	{r3, r4, r5, lr}
    82a2:	4c07      	ldr	r4, [pc, #28]	; (82c0 <_fstat_r+0x20>)
    82a4:	2300      	movs	r3, #0
    82a6:	1c05      	adds	r5, r0, #0
    82a8:	1c08      	adds	r0, r1, #0
    82aa:	1c11      	adds	r1, r2, #0
    82ac:	6023      	str	r3, [r4, #0]
    82ae:	f7fd f8a5 	bl	53fc <_fstat>
    82b2:	1c43      	adds	r3, r0, #1
    82b4:	d103      	bne.n	82be <_fstat_r+0x1e>
    82b6:	6823      	ldr	r3, [r4, #0]
    82b8:	2b00      	cmp	r3, #0
    82ba:	d000      	beq.n	82be <_fstat_r+0x1e>
    82bc:	602b      	str	r3, [r5, #0]
    82be:	bd38      	pop	{r3, r4, r5, pc}
    82c0:	200005ec 	.word	0x200005ec

000082c4 <_isatty_r>:
    82c4:	b538      	push	{r3, r4, r5, lr}
    82c6:	4c07      	ldr	r4, [pc, #28]	; (82e4 <_isatty_r+0x20>)
    82c8:	2300      	movs	r3, #0
    82ca:	1c05      	adds	r5, r0, #0
    82cc:	1c08      	adds	r0, r1, #0
    82ce:	6023      	str	r3, [r4, #0]
    82d0:	f7fd f89a 	bl	5408 <_isatty>
    82d4:	1c43      	adds	r3, r0, #1
    82d6:	d103      	bne.n	82e0 <_isatty_r+0x1c>
    82d8:	6823      	ldr	r3, [r4, #0]
    82da:	2b00      	cmp	r3, #0
    82dc:	d000      	beq.n	82e0 <_isatty_r+0x1c>
    82de:	602b      	str	r3, [r5, #0]
    82e0:	bd38      	pop	{r3, r4, r5, pc}
    82e2:	46c0      	nop			; (mov r8, r8)
    82e4:	200005ec 	.word	0x200005ec

000082e8 <_lseek_r>:
    82e8:	b538      	push	{r3, r4, r5, lr}
    82ea:	4c08      	ldr	r4, [pc, #32]	; (830c <_lseek_r+0x24>)
    82ec:	1c05      	adds	r5, r0, #0
    82ee:	2000      	movs	r0, #0
    82f0:	6020      	str	r0, [r4, #0]
    82f2:	1c08      	adds	r0, r1, #0
    82f4:	1c11      	adds	r1, r2, #0
    82f6:	1c1a      	adds	r2, r3, #0
    82f8:	f7fd f888 	bl	540c <_lseek>
    82fc:	1c43      	adds	r3, r0, #1
    82fe:	d103      	bne.n	8308 <_lseek_r+0x20>
    8300:	6823      	ldr	r3, [r4, #0]
    8302:	2b00      	cmp	r3, #0
    8304:	d000      	beq.n	8308 <_lseek_r+0x20>
    8306:	602b      	str	r3, [r5, #0]
    8308:	bd38      	pop	{r3, r4, r5, pc}
    830a:	46c0      	nop			; (mov r8, r8)
    830c:	200005ec 	.word	0x200005ec

00008310 <_malloc_usable_size_r>:
    8310:	3904      	subs	r1, #4
    8312:	680b      	ldr	r3, [r1, #0]
    8314:	1f18      	subs	r0, r3, #4
    8316:	2b00      	cmp	r3, #0
    8318:	da02      	bge.n	8320 <_malloc_usable_size_r+0x10>
    831a:	58c8      	ldr	r0, [r1, r3]
    831c:	181b      	adds	r3, r3, r0
    831e:	1f18      	subs	r0, r3, #4
    8320:	4770      	bx	lr
	...

00008324 <_read_r>:
    8324:	b538      	push	{r3, r4, r5, lr}
    8326:	4c08      	ldr	r4, [pc, #32]	; (8348 <_read_r+0x24>)
    8328:	1c05      	adds	r5, r0, #0
    832a:	2000      	movs	r0, #0
    832c:	6020      	str	r0, [r4, #0]
    832e:	1c08      	adds	r0, r1, #0
    8330:	1c11      	adds	r1, r2, #0
    8332:	1c1a      	adds	r2, r3, #0
    8334:	f7fd f800 	bl	5338 <_read>
    8338:	1c43      	adds	r3, r0, #1
    833a:	d103      	bne.n	8344 <_read_r+0x20>
    833c:	6823      	ldr	r3, [r4, #0]
    833e:	2b00      	cmp	r3, #0
    8340:	d000      	beq.n	8344 <_read_r+0x20>
    8342:	602b      	str	r3, [r5, #0]
    8344:	bd38      	pop	{r3, r4, r5, pc}
    8346:	46c0      	nop			; (mov r8, r8)
    8348:	200005ec 	.word	0x200005ec

0000834c <__FUNCTION__.13778>:
    834c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    835c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    836c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    837c:	6320746c 0000646d                       lt cmd..

00008384 <__FUNCTION__.12226>:
    8384:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00008394 <__FUNCTION__.12210>:
    8394:	5f666968 646e6573 00000000              hif_send....

000083a0 <__FUNCTION__.12254>:
    83a0:	5f666968 69676572 72657473 0062635f     hif_register_cb.

000083b0 <__FUNCTION__.12219>:
    83b0:	5f666968 00727369 46494828 69614629     hif_isr.(HIF)Fai
    83c0:	6f74206c 6b617720 74207075 63206568     l to wakup the c
    83d0:	00706968 66696828 49572029 485f4946     hip.(hif) WIFI_H
    83e0:	5f54534f 5f564352 4c525443 6220305f     OST_RCV_CTRL_0 b
    83f0:	66207375 006c6961 66696828 49572029     us fail.(hif) WI
    8400:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
    8410:	6220315f 66207375 006c6961 66696828     _1 bus fail.(hif
    8420:	64612029 73657264 75622073 61662073     ) address bus fa
    8430:	00006c69 66696828 6f432029 70757272     il..(hif) Corrup
    8440:	20646574 6b636170 53207465 20657a69     ted packet Size 
    8450:	7525203d 204c3c20 7525203d 2047202c     = %u <L = %u, G 
    8460:	7525203d 504f202c 25203d20 3e583230     = %u, OP = %02X>
    8470:	0000000a 66696828 6e692029 696c6176     ....(hif) invali
    8480:	72672064 2070756f 00004449 66696828     d group ID..(hif
    8490:	6f682029 61207473 64207070 276e6469     ) host app didn'
    84a0:	65732074 58522074 6e6f4420 00000065     t set RX Done...
    84b0:	66696828 72572029 20676e6f 657a6953     (hif) Wrong Size
    84c0:	00000000 66696828 61462029 2065736c     ....(hif) False 
    84d0:	65746e69 70757272 6c252074 00000078     interrupt %lx...
    84e0:	66696828 61462029 74206c69 6552206f     (hif) Fail to Re
    84f0:	69206461 7265746e 74707572 67657220     ad interrupt reg
    8500:	00000000 66696828 41462029 74204c49     ....(hif) FAIL t
    8510:	6177206f 7075656b 65687420 69686320     o wakeup the chi
    8520:	00000070 46494828 61462029 74206c69     p...(HIF) Fail t
    8530:	6168206f 656c646e 746e6920 75727265     o handle interru
    8540:	25207470 72742064 67412079 2e6e6961     pt %d try Again.
    8550:	00000a2e 66696820 6365725f 65766965     .... hif_receive
    8560:	6e49203a 696c6176 72612064 656d7567     : Invalid argume
    8570:	0000746e 20505041 75716552 65747365     nt..APP Requeste
    8580:	69532064 6920657a 616c2073 72656772     d Size is larger
    8590:	61687420 6874206e 65722065 65766963      than the recive
    85a0:	75622064 72656666 7a697320 253c2065     d buffer size <%
    85b0:	253c3e64 000a3e64 20505041 75716552     d><%d>..APP Requ
    85c0:	65747365 64412064 73657264 65622073     ested Address be
    85d0:	646e6f79 65687420 63657220 64657669     yond the recived
    85e0:	66756220 20726566 72646461 20737365      buffer address 
    85f0:	20646e61 676e656c 00006874 20705247     and length..GRp 
    8600:	6425203f 0000000a                       ? %d....

00008608 <__FUNCTION__.12241>:
    8608:	5f666968 65636572 00657669              hif_receive.

00008614 <__FUNCTION__.12153>:
    8614:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
    8624:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
    8634:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
    8644:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
    8654:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
    8664:	2044494c 4e494f50 00524554 41564e49     LID POINTER.INVA
    8674:	2044494c 44495353 00000000 41564e49     LID SSID....INVA
    8684:	2044494c 00004843 41564e49 2044494c     LID CH..INVALID 
    8694:	50434844 52455320 20524556 00005049     DHCP SERVER IP..
    86a4:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
    86b4:	00000058 41564e49 2044494c 2059454b     X...INVALID KEY 
    86c4:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    86d4:	20504557 0059454b 41564e49 2044494c     WEP KEY.INVALID 
    86e4:	48545541 49544e45 49544143 4d204e4f     AUTHENTICATION M
    86f4:	0045444f 204b5350 204e454c 41564e49     ODE.PSK LEN INVA
    8704:	0044494c 44495353 4e454c20 564e4920     LID.SSID LEN INV
    8714:	44494c41 00000000 49204843 4c41564e     ALID....CH INVAL
    8724:	00004449 61766e49 2064696c 20706557     ID..Invalid Wep 
    8734:	2079656b 65646e69 64252078 0000000a     key index %d....
    8744:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    8754:	676e656c 25206874 00000a64 65646e75     length %d...unde
    8764:	656e6966 65732064 79742063 00006570     fined sec type..
    8774:	4e414353 69614620 2064656c 20746552     SCAN Failed Ret 
    8784:	6425203d 0000000a 5f53505f 56524553     = %d...._PS_SERV
    8794:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    87a4:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    87b4:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    87c4:	2c312065 6f203620 31312072 00000000     e 1, 6 or 11....
    87d4:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
    87e4:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
    87f4:	00454d41                                AME.

000087f8 <__FUNCTION__.12197>:
    87f8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    8808:	0063735f                                _sc.

0000880c <__FUNCTION__.11660>:
    880c:	5f757063 72617473 00000074              cpu_start...

00008818 <__FUNCTION__.11725>:
    8818:	70696863 6965645f 0074696e 20737542     chip_deinit.Bus 
    8828:	6f727265 31282072 57202e29 20656b61     error (1). Wake 
    8838:	66207075 656c6961 00000064 20737542     up failed...Bus 
    8848:	6f727265 32282072 57202e29 20656b61     error (2). Wake 
    8858:	66207075 656c6961 00000064 636f6c63     up failed...cloc
    8868:	7320736b 6c6c6974 46464f20 6157202e     ks still OFF. Wa
    8878:	7520656b 61662070 64656c69 00000000     ke up failed....
    8888:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    8898:	6572206c 72206461 30206765 31313178     l read reg 0x111
    88a8:	2e2e2038 0000002e 6c696166 74206465     8 ......failed t
    88b8:	6564206f 696e692d 6c616974 00657a69     o de-initialize.
    88c8:	6f727245 68772072 20656c69 74697277     Error while writ
    88d8:	20676e69 00676572 6f727245 68772072     ing reg.Error wh
    88e8:	20656c69 64616572 20676e69 00676572     ile reading reg.
    88f8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    8908:	656c6961 6f742064 61657220 00000064     ailed to read...
    8918:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
    8928:	656c6961 6f742064 69727720 00006574     ailed to write..

00008938 <__FUNCTION__.11636>:
    8938:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
    8948:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    8958:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    8968:	20444920 0a786c25 00000000 696d6e5b      ID %lx.....[nmi
    8978:	61747320 3a5d7472 69616620 6863206c      start]: fail ch
    8988:	775f7069 75656b61 00000070 6c696166     ip_wakeup...fail
    8998:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    89a8:	75727265 2e737470 0000002e 6d726946     errupts.....Firm
    89b8:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    89c8:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    89d8:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    89e8:	00000a75 72727543 69726420 20726576     u...Curr driver 
    89f8:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    8a08:	6d726946 65726177 72657620 6e6f6973     Firmware version
    8a18:	73696d20 6374616d 00002168 696d6e5b      mismatch!..[nmi
    8a28:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    8a38:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    8a48:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    8a58:	75622074 00000073                       t bus...

00008a60 <__FUNCTION__.12232>:
    8a60:	645f6d6e 695f7672 0074696e              nm_drv_init.

00008a6c <__FUNCTION__.12239>:
    8a6c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    8a7c:	00001fb8 00001fb8 00001fe8 00001f6a     ............j...
    8a8c:	00001f8e 00001f9c 00001fce 00001fce     ................
    8a9c:	00002016 00001f5a 0000208c 0000208c     . ..Z.... ... ..
    8aac:	0000208c 0000208c 00001faa              . ... ......

00008ab8 <__FUNCTION__.11652>:
    8ab8:	5f697073 61746164 6972775f 00006574     spi_data_write..

00008ac8 <__FUNCTION__.11704>:
    8ac8:	735f6d6e 695f6970 0074696e              nm_spi_init.

00008ad4 <__FUNCTION__.11662>:
    8ad4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00008ae4 <__FUNCTION__.11670>:
    8ae4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00008af4 <__FUNCTION__.11613>:
    8af4:	5f697073 00646d63 696d6e5b 69707320     spi_cmd.[nmi spi
    8b04:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    8b14:	6e6f7073 72206573 2c646165 73756220     sponse read, bus
    8b24:	72726520 2e2e726f 0000002e 696d6e5b      error......[nmi
    8b34:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    8b44:	72206174 6f707365 2065736e 64616572     ta response read
    8b54:	7562202c 72652073 2e726f72 00002e2e     , bus error.....
    8b64:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8b74:	61642064 72206174 6f707365 2065736e     d data response 
    8b84:	64616572 282e2e2e 78323025 00000a29     read...(%02x)...
    8b94:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8ba4:	61642064 62206174 6b636f6c 61657220     d data block rea
    8bb4:	62202c64 65207375 726f7272 002e2e2e     d, bus error....
    8bc4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8bd4:	61642064 62206174 6b636f6c 63726320     d data block crc
    8be4:	61657220 62202c64 65207375 726f7272      read, bus error
    8bf4:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8c04:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    8c14:	73756220 72726520 2e2e726f 0000002e      bus error......
    8c24:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8c34:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    8c44:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    8c54:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    8c64:	65722064 6e6f7073 202c6573 74697277     d response, writ
    8c74:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    8c84:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8c94:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    8ca4:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    8cb4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8cc4:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    8cd4:	64616572 67657220 30252820 2e297838     read reg (%08x).
    8ce4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8cf4:	656c6961 61642064 72206174 2e646165     ailed data read.
    8d04:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8d14:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    8d24:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    8d34:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    8d44:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    8d54:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8d64:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    8d74:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    8d84:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8d94:	6e692064 6e726574 77206c61 65746972     d internal write
    8da4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    8db4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8dc4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    8dd4:	64692070 002e2e2e 696d6e5b 69707320     p id....[nmi spi
    8de4:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
    8df4:	20646165 636f6c62 2528206b 29783830     ead block (%08x)
    8e04:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
    8e14:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    8e24:	6e6f7073 202c6573 64616572 6f6c6220     sponse, read blo
    8e34:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    8e44:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8e54:	6c622064 206b636f 61746164 61657220     d block data rea
    8e64:	2e2e2e64 00000000 696d6e5b 69707320     d.......[nmi spi
    8e74:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
    8e84:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
    8e94:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
    8ea4:	203a5d20 6c696146 63206465 7220646d      ]: Failed cmd r
    8eb4:	6f707365 2c65736e 69727720 62206574     esponse, write b
    8ec4:	6b636f6c 30252820 2e297838 000a2e2e     lock (%08x).....
    8ed4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8ee4:	61642064 62206174 6b636f6c 646d6320     d data block cmd
    8ef4:	69727720 202c6574 20737562 6f727265      write, bus erro
    8f04:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    8f14:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    8f24:	6b636f6c 69727720 202c6574 20737562     lock write, bus 
    8f34:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    8f44:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    8f54:	62206174 6b636f6c 63726320 69727720     ta block crc wri
    8f64:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    8f74:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8f84:	656c6961 6c622064 206b636f 61746164     ailed block data
    8f94:	69727720 2e2e6574 0000002e               write......

00008fa0 <__FUNCTION__.11621>:
    8fa0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00008fac <__FUNCTION__.11679>:
    8fac:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00008fbc <__FUNCTION__.11687>:
    8fbc:	735f6d6e 725f6970 00646165              nm_spi_read.

00008fc8 <crc7_syndrome_table>:
    8fc8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    8fd8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    8fe8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    8ff8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    9008:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    9018:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    9028:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    9038:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9048:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    9058:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    9068:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    9078:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    9088:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    9098:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    90a8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    90b8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

000090c8 <__FUNCTION__.11637>:
    90c8:	5f697073 61746164 6165725f 00000064     spi_data_read...
    90d8:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
    90e8:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
    90f8:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    9108:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    9118:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    9128:	204c5353 6b636f53 00007465 42000800     SSL Socket.....B
    9138:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    9148:	42001c00 0c0b0a09 00000e0d 000043e8     ...B.........C..
    9158:	00004444 00004444 000043e2 000043e2     DD..DD...C...C..
    9168:	000043fe 000043ee 00004404 00004432     .C...C...D..2D..
    9178:	0000466c 000046cc 000046cc 0000464c     lF...F...F..LF..
    9188:	0000465e 0000467a 00004650 00004688     ^F..zF..PF...F..
    9198:	000046bc                                .F..

0000919c <_tcc_gclk_ids>:
    919c:	001b1a1a                                ....

000091a0 <_tcc_apbcmasks>:
    91a0:	00000100 00000200 00000400              ............

000091ac <_tcc_maxs>:
    91ac:	00ffffff 00ffffff 0000ffff              ............

000091b8 <_tcc_cc_nums>:
    91b8:	00020204                                ....

000091bc <_tcc_ow_nums>:
    91bc:	00020408                                ....

000091c0 <_tcc_intflag>:
    91c0:	00000001 00000002 00000004 00000008     ................
    91d0:	00001000 00002000 00004000 00008000     ..... ...@......
    91e0:	00010000 00020000 00040000 00080000     ................

000091f0 <tcc_interrupt_vectors.12286>:
    91f0:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B

00009200 <main_mqtt_broker>:
    9200:	74736574 736f6d2e 74697571 6f2e6f74     test.mosquitto.o
    9210:	00006772 6e65704f 00000000 736f6c43     rg..Open....Clos
    9220:	00006465 4e4e4f43 45544345 50412044     ed..CONNECTED AP
    9230:	464e4920 0000004f 44495353 20202020      INFO...SSID    
    9240:	20202020 20202020 20202020 7325203a                 : %s
    9250:	0000000a 20434553 45505954 20202020     ....SEC TYPE    
    9260:	20202020 20202020 6425203a 0000000a             : %d....
    9270:	6e676953 53206c61 6e657274 20687467     Signal Strength 
    9280:	20202020 6425203a 0000000a 61636f4c         : %d....Loca
    9290:	5049206c 64644120 73736572 20202020     l IP Address    
    92a0:	6425203a 2e64252e 252e6425 000a0d64     : %d.%d.%d.%d...
    92b0:	462d6957 6f632069 63656e6e 20646574     Wi-Fi connected 
    92c0:	6552202d 73657571 676e6974 43484420     - Requesting DHC
    92d0:	2e2e2e50 0000000d 462d6957 69642069     P.......Wi-Fi di
    92e0:	6e6f6373 7463656e 000d6465 69766179     sconnected..yavi
    92f0:	0000006e 72617473 73726177 00000000     n...starwars....
    9300:	50434844 6d6f4320 74656c70 0a0d2e65     DHCP Complete...
    9310:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
    9320:	75252e75 0d75252e 0000000a 6e6e6f43     u.%u.%u.....Conn
    9330:	69746365 7420676e 514d206f 62205454     ecting to MQTT b
    9340:	656b6f72 2e2e2e72 00000d0a 6c696146     roker.......Fail
    9350:	74206465 6f63206f 63656e6e 6f742074     ed to connect to
    9360:	73252820 41202129 6d6f7475 63697461      (%s)! Automatic
    9370:	796c6c61 74657220 6e697972 2e2e2e67     ally retrying...
    9380:	00000a0d 6d2f7362 74696e6f 232f726f     ....bs/monitor/#
    9390:	00000000 5454514d 6e6f4320 7463656e     ....MQTT Connect
    93a0:	206e6f69 65636341 64657470 00000d2e     ion Accepted....
    93b0:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    93c0:	20656e69 72756f79 63636120 21737365     ine your access!
    93d0:	72726520 6320726f 2065646f 0a0d6425      error code %d..
    93e0:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
    93f0:	65746365 00000d64 4c494146 20455255     ected...FAILURE 
    9400:	53204f54 41205445 4d52414c 56202d20     TO SET ALARM - V
    9410:	65756c61 6f6f7420 67696820 00002168     alue too high!..
    9420:	4d202d2d 514d2059 4d205454 74696e6f     -- MY MQTT Monit
    9430:	2d20726f 2d0a0d2d 4153202d 3532574d     or --..-- SAMW25
    9440:	4c50585f 454e4941 52505f44 2d2d204f     _XPLAINED_PRO --
    9450:	2d2d0a0d 6d6f4320 656c6970 4a203a64     ..-- Compiled: J
    9460:	20206c75 30322035 31203531 34303a31     ul  5 2015 11:04
    9470:	2039313a 000d2d2d 5454514d 696e6920     :19 --..MQTT ini
    9480:	6c616974 74617a69 206e6f69 6c696166     tialization fail
    9490:	202e6465 6f727245 6f632072 69206564     ed. Error code i
    94a0:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
    94b0:	67657220 65747369 61632072 61626c6c      register callba
    94c0:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
    94d0:	646f6320 73692065 64252820 000a0d29      code is (%d)...
    94e0:	64656572 6977735f 00686374 73257325     reed_switch.%s%s
    94f0:	00000000 6d2f7362 74696e6f 002f726f     ....bs/monitor/.
    9500:	6c627550 69687369 7420676e 6f74206f     Publishing to to
    9510:	3a636970 0d732520 0000000a 6e69616d     pic: %s.....main
    9520:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    9530:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    9540:	0000000a 5f4d324d 445f5350 5f504545     ....M2M_PS_DEEP_
    9550:	4f545541 4954414d 00000d43 6e6e6f43     AUTOMATIC...Conn
    9560:	69746365 7420676e 514d206f 42205454     ecting to MQTT B
    9570:	656b6f72 2e2e2e72 0000000d 40207325     roker.......%s @
    9580:	2f642520 252f6425 64252064 3a64253a      %d/%d/%d %d:%d:
    9590:	00006425 646e6553 3a676e69 73252720     %d..Sending: '%s
    95a0:	6f742027 0a732520 00000000 676e6950     ' to %s.....Ping
    95b0:	25204020 64252f64 2064252f 253a6425      @ %d/%d/%d %d:%
    95c0:	64253a64 00000000 646e6553 20676e69     d:%d....Sending 
    95d0:	676e6970 73656d20 65676173 7325203a     ping message: %s
    95e0:	00000000 6d2f7362 74696e6f 702f726f     ....bs/monitor/p
    95f0:	00676e69 63736944 656e6e6f 6e697463     ing.Disconnectin
    9600:	72662067 4d206d6f 20545451 6b6f7242     g from MQTT Brok
    9610:	2e2e7265 00000d2e 63736944 656e6e6f     er......Disconne
    9620:	6f697463 7266206e 62206d6f 656b6f72     ction from broke
    9630:	61662072 64656c69 0d2e2e2e 00000000     r failed........
    9640:	472d2d2d 676e696f 206f7420 65656c73     ---Going to slee
    9650:	2d2d2d70 0000000d 656b6f57 21707520     p---....Woke up!
    9660:	00000d0a 7349514d 43007064 00000000     ....MQIsdp.C....

00009670 <_global_impure_ptr>:
    9670:	20000014 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    9680:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    9690:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    96a0:	64636261 00006665                       abcdef..

000096a8 <__sf_fake_stdin>:
	...

000096c8 <__sf_fake_stdout>:
	...

000096e8 <__sf_fake_stderr>:
	...

00009708 <_init>:
    9708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    970e:	bc08      	pop	{r3}
    9710:	469e      	mov	lr, r3
    9712:	4770      	bx	lr

00009714 <__init_array_start>:
    9714:	000000d9 	.word	0x000000d9

00009718 <_fini>:
    9718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    971e:	bc08      	pop	{r3}
    9720:	469e      	mov	lr, r3
    9722:	4770      	bx	lr

00009724 <__fini_array_start>:
    9724:	000000b1 	.word	0x000000b1
